"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/slate";
exports.ids = ["vendor-chunks/slate"];
exports.modules = {

/***/ "(ssr)/./node_modules/slate/dist/index.es.js":
/*!*********************************************!*\
  !*** ./node_modules/slate/dist/index.es.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   Location: () => (/* binding */ Location),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   Operation: () => (/* binding */ Operation),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   PathRef: () => (/* binding */ PathRef),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   PointRef: () => (/* binding */ PointRef),\n/* harmony export */   Range: () => (/* binding */ Range),\n/* harmony export */   RangeRef: () => (/* binding */ RangeRef),\n/* harmony export */   Scrubber: () => (/* binding */ Scrubber),\n/* harmony export */   Span: () => (/* binding */ Span),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   Transforms: () => (/* binding */ Transforms),\n/* harmony export */   above: () => (/* binding */ above),\n/* harmony export */   addMark: () => (/* binding */ addMark),\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   apply: () => (/* binding */ apply),\n/* harmony export */   before: () => (/* binding */ before),\n/* harmony export */   collapse: () => (/* binding */ collapse),\n/* harmony export */   createEditor: () => (/* binding */ createEditor),\n/* harmony export */   deleteBackward: () => (/* binding */ deleteBackward),\n/* harmony export */   deleteForward: () => (/* binding */ deleteForward),\n/* harmony export */   deleteFragment: () => (/* binding */ deleteFragment),\n/* harmony export */   deleteText: () => (/* binding */ deleteText),\n/* harmony export */   deselect: () => (/* binding */ deselect),\n/* harmony export */   edges: () => (/* binding */ edges),\n/* harmony export */   elementReadOnly: () => (/* binding */ elementReadOnly),\n/* harmony export */   end: () => (/* binding */ end),\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   fragment: () => (/* binding */ fragment),\n/* harmony export */   getDirtyPaths: () => (/* binding */ getDirtyPaths),\n/* harmony export */   getFragment: () => (/* binding */ getFragment),\n/* harmony export */   getVoid: () => (/* binding */ getVoid),\n/* harmony export */   hasBlocks: () => (/* binding */ hasBlocks),\n/* harmony export */   hasInlines: () => (/* binding */ hasInlines),\n/* harmony export */   hasPath: () => (/* binding */ hasPath),\n/* harmony export */   hasTexts: () => (/* binding */ hasTexts),\n/* harmony export */   insertBreak: () => (/* binding */ insertBreak),\n/* harmony export */   insertFragment: () => (/* binding */ insertFragment),\n/* harmony export */   insertNode: () => (/* binding */ insertNode),\n/* harmony export */   insertNodes: () => (/* binding */ insertNodes),\n/* harmony export */   insertSoftBreak: () => (/* binding */ insertSoftBreak),\n/* harmony export */   insertText: () => (/* binding */ insertText),\n/* harmony export */   isBlock: () => (/* binding */ isBlock),\n/* harmony export */   isEdge: () => (/* binding */ isEdge),\n/* harmony export */   isEditor: () => (/* binding */ isEditor),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   isEnd: () => (/* binding */ isEnd),\n/* harmony export */   isNormalizing: () => (/* binding */ isNormalizing),\n/* harmony export */   isStart: () => (/* binding */ isStart),\n/* harmony export */   last: () => (/* binding */ last),\n/* harmony export */   leaf: () => (/* binding */ leaf),\n/* harmony export */   levels: () => (/* binding */ levels),\n/* harmony export */   liftNodes: () => (/* binding */ liftNodes),\n/* harmony export */   marks: () => (/* binding */ marks),\n/* harmony export */   mergeNodes: () => (/* binding */ mergeNodes),\n/* harmony export */   move: () => (/* binding */ move),\n/* harmony export */   moveNodes: () => (/* binding */ moveNodes),\n/* harmony export */   next: () => (/* binding */ next),\n/* harmony export */   node: () => (/* binding */ node),\n/* harmony export */   nodes: () => (/* binding */ nodes),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeNode: () => (/* binding */ normalizeNode),\n/* harmony export */   parent: () => (/* binding */ parent),\n/* harmony export */   path: () => (/* binding */ path),\n/* harmony export */   pathRef: () => (/* binding */ pathRef),\n/* harmony export */   pathRefs: () => (/* binding */ pathRefs),\n/* harmony export */   point: () => (/* binding */ point),\n/* harmony export */   pointRef: () => (/* binding */ pointRef),\n/* harmony export */   pointRefs: () => (/* binding */ pointRefs),\n/* harmony export */   positions: () => (/* binding */ positions),\n/* harmony export */   previous: () => (/* binding */ previous),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   rangeRef: () => (/* binding */ rangeRef),\n/* harmony export */   rangeRefs: () => (/* binding */ rangeRefs),\n/* harmony export */   removeMark: () => (/* binding */ removeMark),\n/* harmony export */   removeNodes: () => (/* binding */ removeNodes),\n/* harmony export */   select: () => (/* binding */ select),\n/* harmony export */   setNodes: () => (/* binding */ setNodes),\n/* harmony export */   setNormalizing: () => (/* binding */ setNormalizing),\n/* harmony export */   setPoint: () => (/* binding */ setPoint),\n/* harmony export */   setSelection: () => (/* binding */ setSelection),\n/* harmony export */   shouldNormalize: () => (/* binding */ shouldNormalize),\n/* harmony export */   splitNodes: () => (/* binding */ splitNodes),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   unhangRange: () => (/* binding */ unhangRange),\n/* harmony export */   unsetNodes: () => (/* binding */ unsetNodes),\n/* harmony export */   unwrapNodes: () => (/* binding */ unwrapNodes),\n/* harmony export */   withoutNormalizing: () => (/* binding */ withoutNormalizing),\n/* harmony export */   wrapNodes: () => (/* binding */ wrapNodes)\n/* harmony export */ });\n/* harmony import */ var is_plain_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-plain-object */ \"(ssr)/./node_modules/is-plain-object/dist/is-plain-object.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.esm.mjs\");\n\n\nvar PathRef = {\n    transform (ref, op) {\n        var { current, affinity } = ref;\n        if (current == null) {\n            return;\n        }\n        var path = Path.transform(current, op, {\n            affinity\n        });\n        ref.current = path;\n        if (path == null) {\n            ref.unref();\n        }\n    }\n};\nvar PointRef = {\n    transform (ref, op) {\n        var { current, affinity } = ref;\n        if (current == null) {\n            return;\n        }\n        var point = Point.transform(current, op, {\n            affinity\n        });\n        ref.current = point;\n        if (point == null) {\n            ref.unref();\n        }\n    }\n};\nvar RangeRef = {\n    transform (ref, op) {\n        var { current, affinity } = ref;\n        if (current == null) {\n            return;\n        }\n        var path = Range.transform(current, op, {\n            affinity\n        });\n        ref.current = path;\n        if (path == null) {\n            ref.unref();\n        }\n    }\n};\nvar DIRTY_PATHS = new WeakMap();\nvar DIRTY_PATH_KEYS = new WeakMap();\nvar FLUSHING = new WeakMap();\nvar NORMALIZING = new WeakMap();\nvar PATH_REFS = new WeakMap();\nvar POINT_REFS = new WeakMap();\nvar RANGE_REFS = new WeakMap();\n// eslint-disable-next-line no-redeclare\nvar Path = {\n    ancestors (path) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var { reverse = false } = options;\n        var paths = Path.levels(path, options);\n        if (reverse) {\n            paths = paths.slice(1);\n        } else {\n            paths = paths.slice(0, -1);\n        }\n        return paths;\n    },\n    common (path, another) {\n        var common = [];\n        for(var i = 0; i < path.length && i < another.length; i++){\n            var av = path[i];\n            var bv = another[i];\n            if (av !== bv) {\n                break;\n            }\n            common.push(av);\n        }\n        return common;\n    },\n    compare (path, another) {\n        var min = Math.min(path.length, another.length);\n        for(var i = 0; i < min; i++){\n            if (path[i] < another[i]) return -1;\n            if (path[i] > another[i]) return 1;\n        }\n        return 0;\n    },\n    endsAfter (path, another) {\n        var i = path.length - 1;\n        var as = path.slice(0, i);\n        var bs = another.slice(0, i);\n        var av = path[i];\n        var bv = another[i];\n        return Path.equals(as, bs) && av > bv;\n    },\n    endsAt (path, another) {\n        var i = path.length;\n        var as = path.slice(0, i);\n        var bs = another.slice(0, i);\n        return Path.equals(as, bs);\n    },\n    endsBefore (path, another) {\n        var i = path.length - 1;\n        var as = path.slice(0, i);\n        var bs = another.slice(0, i);\n        var av = path[i];\n        var bv = another[i];\n        return Path.equals(as, bs) && av < bv;\n    },\n    equals (path, another) {\n        return path.length === another.length && path.every((n, i)=>n === another[i]);\n    },\n    hasPrevious (path) {\n        return path[path.length - 1] > 0;\n    },\n    isAfter (path, another) {\n        return Path.compare(path, another) === 1;\n    },\n    isAncestor (path, another) {\n        return path.length < another.length && Path.compare(path, another) === 0;\n    },\n    isBefore (path, another) {\n        return Path.compare(path, another) === -1;\n    },\n    isChild (path, another) {\n        return path.length === another.length + 1 && Path.compare(path, another) === 0;\n    },\n    isCommon (path, another) {\n        return path.length <= another.length && Path.compare(path, another) === 0;\n    },\n    isDescendant (path, another) {\n        return path.length > another.length && Path.compare(path, another) === 0;\n    },\n    isParent (path, another) {\n        return path.length + 1 === another.length && Path.compare(path, another) === 0;\n    },\n    isPath (value) {\n        return Array.isArray(value) && (value.length === 0 || typeof value[0] === \"number\");\n    },\n    isSibling (path, another) {\n        if (path.length !== another.length) {\n            return false;\n        }\n        var as = path.slice(0, -1);\n        var bs = another.slice(0, -1);\n        var al = path[path.length - 1];\n        var bl = another[another.length - 1];\n        return al !== bl && Path.equals(as, bs);\n    },\n    levels (path) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var { reverse = false } = options;\n        var list = [];\n        for(var i = 0; i <= path.length; i++){\n            list.push(path.slice(0, i));\n        }\n        if (reverse) {\n            list.reverse();\n        }\n        return list;\n    },\n    next (path) {\n        if (path.length === 0) {\n            throw new Error(\"Cannot get the next path of a root path [\".concat(path, \"], because it has no next index.\"));\n        }\n        var last = path[path.length - 1];\n        return path.slice(0, -1).concat(last + 1);\n    },\n    operationCanTransformPath (operation) {\n        switch(operation.type){\n            case \"insert_node\":\n            case \"remove_node\":\n            case \"merge_node\":\n            case \"split_node\":\n            case \"move_node\":\n                return true;\n            default:\n                return false;\n        }\n    },\n    parent (path) {\n        if (path.length === 0) {\n            throw new Error(\"Cannot get the parent path of the root path [\".concat(path, \"].\"));\n        }\n        return path.slice(0, -1);\n    },\n    previous (path) {\n        if (path.length === 0) {\n            throw new Error(\"Cannot get the previous path of a root path [\".concat(path, \"], because it has no previous index.\"));\n        }\n        var last = path[path.length - 1];\n        if (last <= 0) {\n            throw new Error(\"Cannot get the previous path of a first child path [\".concat(path, \"] because it would result in a negative index.\"));\n        }\n        return path.slice(0, -1).concat(last - 1);\n    },\n    relative (path, ancestor) {\n        if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n            throw new Error(\"Cannot get the relative path of [\".concat(path, \"] inside ancestor [\").concat(ancestor, \"], because it is not above or equal to the path.\"));\n        }\n        return path.slice(ancestor.length);\n    },\n    transform (path, operation) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (!path) return null; // PERF: use destructing instead of immer\n        var p = [\n            ...path\n        ];\n        var { affinity = \"forward\" } = options; // PERF: Exit early if the operation is guaranteed not to have an effect.\n        if (path.length === 0) {\n            return p;\n        }\n        switch(operation.type){\n            case \"insert_node\":\n                {\n                    var { path: op } = operation;\n                    if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {\n                        p[op.length - 1] += 1;\n                    }\n                    break;\n                }\n            case \"remove_node\":\n                {\n                    var { path: _op } = operation;\n                    if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {\n                        return null;\n                    } else if (Path.endsBefore(_op, p)) {\n                        p[_op.length - 1] -= 1;\n                    }\n                    break;\n                }\n            case \"merge_node\":\n                {\n                    var { path: _op2, position } = operation;\n                    if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {\n                        p[_op2.length - 1] -= 1;\n                    } else if (Path.isAncestor(_op2, p)) {\n                        p[_op2.length - 1] -= 1;\n                        p[_op2.length] += position;\n                    }\n                    break;\n                }\n            case \"split_node\":\n                {\n                    var { path: _op3, position: _position } = operation;\n                    if (Path.equals(_op3, p)) {\n                        if (affinity === \"forward\") {\n                            p[p.length - 1] += 1;\n                        } else if (affinity === \"backward\") ;\n                        else {\n                            return null;\n                        }\n                    } else if (Path.endsBefore(_op3, p)) {\n                        p[_op3.length - 1] += 1;\n                    } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {\n                        p[_op3.length - 1] += 1;\n                        p[_op3.length] -= _position;\n                    }\n                    break;\n                }\n            case \"move_node\":\n                {\n                    var { path: _op4, newPath: onp } = operation; // If the old and new path are the same, it's a no-op.\n                    if (Path.equals(_op4, onp)) {\n                        return p;\n                    }\n                    if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {\n                        var copy = onp.slice();\n                        if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {\n                            copy[_op4.length - 1] -= 1;\n                        }\n                        return copy.concat(p.slice(_op4.length));\n                    } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {\n                        if (Path.endsBefore(_op4, p)) {\n                            p[_op4.length - 1] -= 1;\n                        } else {\n                            p[_op4.length - 1] += 1;\n                        }\n                    } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {\n                        if (Path.endsBefore(_op4, p)) {\n                            p[_op4.length - 1] -= 1;\n                        }\n                        p[onp.length - 1] += 1;\n                    } else if (Path.endsBefore(_op4, p)) {\n                        if (Path.equals(onp, p)) {\n                            p[onp.length - 1] += 1;\n                        }\n                        p[_op4.length - 1] -= 1;\n                    }\n                    break;\n                }\n        }\n        return p;\n    }\n};\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys$e(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$e(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$e(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$e(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar applyToDraft = (editor, selection, op)=>{\n    switch(op.type){\n        case \"insert_node\":\n            {\n                var { path, node } = op;\n                var parent = Node.parent(editor, path);\n                var index = path[path.length - 1];\n                if (index > parent.children.length) {\n                    throw new Error('Cannot apply an \"insert_node\" operation at path ['.concat(path, \"] because the destination is past the end of the node.\"));\n                }\n                parent.children.splice(index, 0, node);\n                if (selection) {\n                    for (var [point, key] of Range.points(selection)){\n                        selection[key] = Point.transform(point, op);\n                    }\n                }\n                break;\n            }\n        case \"insert_text\":\n            {\n                var { path: _path, offset, text } = op;\n                if (text.length === 0) break;\n                var _node = Node.leaf(editor, _path);\n                var before = _node.text.slice(0, offset);\n                var after = _node.text.slice(offset);\n                _node.text = before + text + after;\n                if (selection) {\n                    for (var [_point, _key] of Range.points(selection)){\n                        selection[_key] = Point.transform(_point, op);\n                    }\n                }\n                break;\n            }\n        case \"merge_node\":\n            {\n                var { path: _path2 } = op;\n                var _node2 = Node.get(editor, _path2);\n                var prevPath = Path.previous(_path2);\n                var prev = Node.get(editor, prevPath);\n                var _parent = Node.parent(editor, _path2);\n                var _index = _path2[_path2.length - 1];\n                if (Text.isText(_node2) && Text.isText(prev)) {\n                    prev.text += _node2.text;\n                } else if (!Text.isText(_node2) && !Text.isText(prev)) {\n                    prev.children.push(..._node2.children);\n                } else {\n                    throw new Error('Cannot apply a \"merge_node\" operation at path ['.concat(_path2, \"] to nodes of different interfaces: \").concat(Scrubber.stringify(_node2), \" \").concat(Scrubber.stringify(prev)));\n                }\n                _parent.children.splice(_index, 1);\n                if (selection) {\n                    for (var [_point2, _key2] of Range.points(selection)){\n                        selection[_key2] = Point.transform(_point2, op);\n                    }\n                }\n                break;\n            }\n        case \"move_node\":\n            {\n                var { path: _path3, newPath } = op;\n                if (Path.isAncestor(_path3, newPath)) {\n                    throw new Error(\"Cannot move a path [\".concat(_path3, \"] to new path [\").concat(newPath, \"] because the destination is inside itself.\"));\n                }\n                var _node3 = Node.get(editor, _path3);\n                var _parent2 = Node.parent(editor, _path3);\n                var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to\n                // the same snapshot in time, there's a mismatch. After either\n                // removing the original position, the second step's path can be out\n                // of date. So instead of using the `op.newPath` directly, we\n                // transform `op.path` to ascertain what the `newPath` would be after\n                // the operation was applied.\n                _parent2.children.splice(_index2, 1);\n                var truePath = Path.transform(_path3, op);\n                var newParent = Node.get(editor, Path.parent(truePath));\n                var newIndex = truePath[truePath.length - 1];\n                newParent.children.splice(newIndex, 0, _node3);\n                if (selection) {\n                    for (var [_point3, _key3] of Range.points(selection)){\n                        selection[_key3] = Point.transform(_point3, op);\n                    }\n                }\n                break;\n            }\n        case \"remove_node\":\n            {\n                var { path: _path4 } = op;\n                var _index3 = _path4[_path4.length - 1];\n                var _parent3 = Node.parent(editor, _path4);\n                _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the\n                // node that was removed we need to update the range or remove it.\n                if (selection) {\n                    for (var [_point4, _key4] of Range.points(selection)){\n                        var result = Point.transform(_point4, op);\n                        if (selection != null && result != null) {\n                            selection[_key4] = result;\n                        } else {\n                            var _prev = void 0;\n                            var next = void 0;\n                            for (var [n, p] of Node.texts(editor)){\n                                if (Path.compare(p, _path4) === -1) {\n                                    _prev = [\n                                        n,\n                                        p\n                                    ];\n                                } else {\n                                    next = [\n                                        n,\n                                        p\n                                    ];\n                                    break;\n                                }\n                            }\n                            var preferNext = false;\n                            if (_prev && next) {\n                                if (Path.equals(next[1], _path4)) {\n                                    preferNext = !Path.hasPrevious(next[1]);\n                                } else {\n                                    preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;\n                                }\n                            }\n                            if (_prev && !preferNext) {\n                                _point4.path = _prev[1];\n                                _point4.offset = _prev[0].text.length;\n                            } else if (next) {\n                                _point4.path = next[1];\n                                _point4.offset = 0;\n                            } else {\n                                selection = null;\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n        case \"remove_text\":\n            {\n                var { path: _path5, offset: _offset, text: _text } = op;\n                if (_text.length === 0) break;\n                var _node4 = Node.leaf(editor, _path5);\n                var _before = _node4.text.slice(0, _offset);\n                var _after = _node4.text.slice(_offset + _text.length);\n                _node4.text = _before + _after;\n                if (selection) {\n                    for (var [_point5, _key5] of Range.points(selection)){\n                        selection[_key5] = Point.transform(_point5, op);\n                    }\n                }\n                break;\n            }\n        case \"set_node\":\n            {\n                var { path: _path6, properties, newProperties } = op;\n                if (_path6.length === 0) {\n                    throw new Error(\"Cannot set properties on the root node!\");\n                }\n                var _node5 = Node.get(editor, _path6);\n                for(var _key6 in newProperties){\n                    if (_key6 === \"children\" || _key6 === \"text\") {\n                        throw new Error('Cannot set the \"'.concat(_key6, '\" property of nodes!'));\n                    }\n                    var value = newProperties[_key6];\n                    if (value == null) {\n                        delete _node5[_key6];\n                    } else {\n                        _node5[_key6] = value;\n                    }\n                } // properties that were previously defined, but are now missing, must be deleted\n                for(var _key7 in properties){\n                    if (!newProperties.hasOwnProperty(_key7)) {\n                        delete _node5[_key7];\n                    }\n                }\n                break;\n            }\n        case \"set_selection\":\n            {\n                var { newProperties: _newProperties } = op;\n                if (_newProperties == null) {\n                    selection = _newProperties;\n                } else {\n                    if (selection == null) {\n                        if (!Range.isRange(_newProperties)) {\n                            throw new Error('Cannot apply an incomplete \"set_selection\" operation properties '.concat(Scrubber.stringify(_newProperties), \" when there is no current selection.\"));\n                        }\n                        selection = _objectSpread$e({}, _newProperties);\n                    }\n                    for(var _key8 in _newProperties){\n                        var _value = _newProperties[_key8];\n                        if (_value == null) {\n                            if (_key8 === \"anchor\" || _key8 === \"focus\") {\n                                throw new Error('Cannot remove the \"'.concat(_key8, '\" selection property'));\n                            }\n                            delete selection[_key8];\n                        } else {\n                            selection[_key8] = _value;\n                        }\n                    }\n                }\n                break;\n            }\n        case \"split_node\":\n            {\n                var { path: _path7, position, properties: _properties } = op;\n                if (_path7.length === 0) {\n                    throw new Error('Cannot apply a \"split_node\" operation at path ['.concat(_path7, \"] because the root node cannot be split.\"));\n                }\n                var _node6 = Node.get(editor, _path7);\n                var _parent4 = Node.parent(editor, _path7);\n                var _index4 = _path7[_path7.length - 1];\n                var newNode;\n                if (Text.isText(_node6)) {\n                    var _before2 = _node6.text.slice(0, position);\n                    var _after2 = _node6.text.slice(position);\n                    _node6.text = _before2;\n                    newNode = _objectSpread$e(_objectSpread$e({}, _properties), {}, {\n                        text: _after2\n                    });\n                } else {\n                    var _before3 = _node6.children.slice(0, position);\n                    var _after3 = _node6.children.slice(position);\n                    _node6.children = _before3;\n                    newNode = _objectSpread$e(_objectSpread$e({}, _properties), {}, {\n                        children: _after3\n                    });\n                }\n                _parent4.children.splice(_index4 + 1, 0, newNode);\n                if (selection) {\n                    for (var [_point6, _key9] of Range.points(selection)){\n                        selection[_key9] = Point.transform(_point6, op);\n                    }\n                }\n                break;\n            }\n    }\n    return selection;\n}; // eslint-disable-next-line no-redeclare\nvar GeneralTransforms = {\n    transform (editor, op) {\n        editor.children = (0,immer__WEBPACK_IMPORTED_MODULE_1__.createDraft)(editor.children);\n        var selection = editor.selection && (0,immer__WEBPACK_IMPORTED_MODULE_1__.createDraft)(editor.selection);\n        try {\n            selection = applyToDraft(editor, selection, op);\n        } finally{\n            editor.children = (0,immer__WEBPACK_IMPORTED_MODULE_1__.finishDraft)(editor.children);\n            if (selection) {\n                editor.selection = (0,immer__WEBPACK_IMPORTED_MODULE_1__.isDraft)(selection) ? (0,immer__WEBPACK_IMPORTED_MODULE_1__.finishDraft)(selection) : selection;\n            } else {\n                editor.selection = null;\n            }\n        }\n    }\n};\n// eslint-disable-next-line no-redeclare\nvar NodeTransforms = {\n    insertNodes (editor, nodes, options) {\n        editor.insertNodes(nodes, options);\n    },\n    liftNodes (editor, options) {\n        editor.liftNodes(options);\n    },\n    mergeNodes (editor, options) {\n        editor.mergeNodes(options);\n    },\n    moveNodes (editor, options) {\n        editor.moveNodes(options);\n    },\n    removeNodes (editor, options) {\n        editor.removeNodes(options);\n    },\n    setNodes (editor, props, options) {\n        editor.setNodes(props, options);\n    },\n    splitNodes (editor, options) {\n        editor.splitNodes(options);\n    },\n    unsetNodes (editor, props, options) {\n        editor.unsetNodes(props, options);\n    },\n    unwrapNodes (editor, options) {\n        editor.unwrapNodes(options);\n    },\n    wrapNodes (editor, element, options) {\n        editor.wrapNodes(element, options);\n    }\n};\n// eslint-disable-next-line no-redeclare\nvar SelectionTransforms = {\n    collapse (editor, options) {\n        editor.collapse(options);\n    },\n    deselect (editor) {\n        editor.deselect();\n    },\n    move (editor, options) {\n        editor.move(options);\n    },\n    select (editor, target) {\n        editor.select(target);\n    },\n    setPoint (editor, props, options) {\n        editor.setPoint(props, options);\n    },\n    setSelection (editor, props) {\n        editor.setSelection(props);\n    }\n};\n/*\r\n  Custom deep equal comparison for Slate nodes.\r\n\n  We don't need general purpose deep equality;\r\n  Slate only supports plain values, Arrays, and nested objects.\r\n  Complex values nested inside Arrays are not supported.\r\n\n  Slate objects are designed to be serialised, so\r\n  missing keys are deliberately normalised to undefined.\r\n */ var isDeepEqual = (node, another)=>{\n    for(var key in node){\n        var a = node[key];\n        var b = another[key];\n        if ((0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(a) && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(b)) {\n            if (!isDeepEqual(a, b)) return false;\n        } else if (Array.isArray(a) && Array.isArray(b)) {\n            if (a.length !== b.length) return false;\n            for(var i = 0; i < a.length; i++){\n                if (a[i] !== b[i]) return false;\n            }\n        } else if (a !== b) {\n            return false;\n        }\n    }\n    /*\r\n    Deep object equality is only necessary in one direction; in the reverse direction\r\n    we are only looking for keys that are missing.\r\n    As above, undefined keys are normalised to missing.\r\n  */ for(var _key in another){\n        if (node[_key] === undefined && another[_key] !== undefined) {\n            return false;\n        }\n    }\n    return true;\n};\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nvar _excluded$4 = [\n    \"anchor\",\n    \"focus\"\n];\nfunction ownKeys$d(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$d(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$d(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$d(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar Range = {\n    edges (range) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var { reverse = false } = options;\n        var { anchor, focus } = range;\n        return Range.isBackward(range) === reverse ? [\n            anchor,\n            focus\n        ] : [\n            focus,\n            anchor\n        ];\n    },\n    end (range) {\n        var [, end] = Range.edges(range);\n        return end;\n    },\n    equals (range, another) {\n        return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);\n    },\n    includes (range, target) {\n        if (Range.isRange(target)) {\n            if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {\n                return true;\n            }\n            var [rs, re] = Range.edges(range);\n            var [ts, te] = Range.edges(target);\n            return Point.isBefore(rs, ts) && Point.isAfter(re, te);\n        }\n        var [start, end] = Range.edges(range);\n        var isAfterStart = false;\n        var isBeforeEnd = false;\n        if (Point.isPoint(target)) {\n            isAfterStart = Point.compare(target, start) >= 0;\n            isBeforeEnd = Point.compare(target, end) <= 0;\n        } else {\n            isAfterStart = Path.compare(target, start.path) >= 0;\n            isBeforeEnd = Path.compare(target, end.path) <= 0;\n        }\n        return isAfterStart && isBeforeEnd;\n    },\n    intersection (range, another) {\n        var rest = _objectWithoutProperties(range, _excluded$4);\n        var [s1, e1] = Range.edges(range);\n        var [s2, e2] = Range.edges(another);\n        var start = Point.isBefore(s1, s2) ? s2 : s1;\n        var end = Point.isBefore(e1, e2) ? e1 : e2;\n        if (Point.isBefore(end, start)) {\n            return null;\n        } else {\n            return _objectSpread$d({\n                anchor: start,\n                focus: end\n            }, rest);\n        }\n    },\n    isBackward (range) {\n        var { anchor, focus } = range;\n        return Point.isAfter(anchor, focus);\n    },\n    isCollapsed (range) {\n        var { anchor, focus } = range;\n        return Point.equals(anchor, focus);\n    },\n    isExpanded (range) {\n        return !Range.isCollapsed(range);\n    },\n    isForward (range) {\n        return !Range.isBackward(range);\n    },\n    isRange (value) {\n        return (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);\n    },\n    *points (range) {\n        yield [\n            range.anchor,\n            \"anchor\"\n        ];\n        yield [\n            range.focus,\n            \"focus\"\n        ];\n    },\n    start (range) {\n        var [start] = Range.edges(range);\n        return start;\n    },\n    transform (range, op) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return (0,immer__WEBPACK_IMPORTED_MODULE_1__.produce)(range, (r)=>{\n            if (r === null) {\n                return null;\n            }\n            var { affinity = \"inward\" } = options;\n            var affinityAnchor;\n            var affinityFocus;\n            if (affinity === \"inward\") {\n                // If the range is collapsed, make sure to use the same affinity to\n                // avoid the two points passing each other and expanding in the opposite\n                // direction\n                var isCollapsed = Range.isCollapsed(r);\n                if (Range.isForward(r)) {\n                    affinityAnchor = \"forward\";\n                    affinityFocus = isCollapsed ? affinityAnchor : \"backward\";\n                } else {\n                    affinityAnchor = \"backward\";\n                    affinityFocus = isCollapsed ? affinityAnchor : \"forward\";\n                }\n            } else if (affinity === \"outward\") {\n                if (Range.isForward(r)) {\n                    affinityAnchor = \"backward\";\n                    affinityFocus = \"forward\";\n                } else {\n                    affinityAnchor = \"forward\";\n                    affinityFocus = \"backward\";\n                }\n            } else {\n                affinityAnchor = affinity;\n                affinityFocus = affinity;\n            }\n            var anchor = Point.transform(r.anchor, op, {\n                affinity: affinityAnchor\n            });\n            var focus = Point.transform(r.focus, op, {\n                affinity: affinityFocus\n            });\n            if (!anchor || !focus) {\n                return null;\n            }\n            r.anchor = anchor;\n            r.focus = focus;\n        });\n    }\n};\n/**\r\n * Shared the function with isElementType utility\r\n */ var isElement = (value)=>{\n    return (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);\n}; // eslint-disable-next-line no-redeclare\nvar Element = {\n    isAncestor (value) {\n        return (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) && Node.isNodeList(value.children);\n    },\n    isElement,\n    isElementList (value) {\n        return Array.isArray(value) && value.every((val)=>Element.isElement(val));\n    },\n    isElementProps (props) {\n        return props.children !== undefined;\n    },\n    isElementType: function isElementType(value, elementVal) {\n        var elementKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"type\";\n        return isElement(value) && value[elementKey] === elementVal;\n    },\n    matches (element, props) {\n        for(var key in props){\n            if (key === \"children\") {\n                continue;\n            }\n            if (element[key] !== props[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\nvar _excluded$3 = [\n    \"children\"\n], _excluded2$3 = [\n    \"text\"\n];\nvar IS_NODE_LIST_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare\nvar Node = {\n    ancestor (root, path) {\n        var node = Node.get(root, path);\n        if (Text.isText(node)) {\n            throw new Error(\"Cannot get the ancestor node at path [\".concat(path, \"] because it refers to a text node instead: \").concat(Scrubber.stringify(node)));\n        }\n        return node;\n    },\n    *ancestors (root, path) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        for (var p of Path.ancestors(path, options)){\n            var n = Node.ancestor(root, p);\n            var entry = [\n                n,\n                p\n            ];\n            yield entry;\n        }\n    },\n    child (root, index) {\n        if (Text.isText(root)) {\n            throw new Error(\"Cannot get the child of a text node: \".concat(Scrubber.stringify(root)));\n        }\n        var c = root.children[index];\n        if (c == null) {\n            throw new Error(\"Cannot get child at index `\".concat(index, \"` in node: \").concat(Scrubber.stringify(root)));\n        }\n        return c;\n    },\n    *children (root, path) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var { reverse = false } = options;\n        var ancestor = Node.ancestor(root, path);\n        var { children } = ancestor;\n        var index = reverse ? children.length - 1 : 0;\n        while(reverse ? index >= 0 : index < children.length){\n            var child = Node.child(ancestor, index);\n            var childPath = path.concat(index);\n            yield [\n                child,\n                childPath\n            ];\n            index = reverse ? index - 1 : index + 1;\n        }\n    },\n    common (root, path, another) {\n        var p = Path.common(path, another);\n        var n = Node.get(root, p);\n        return [\n            n,\n            p\n        ];\n    },\n    descendant (root, path) {\n        var node = Node.get(root, path);\n        if (Editor.isEditor(node)) {\n            throw new Error(\"Cannot get the descendant node at path [\".concat(path, \"] because it refers to the root editor node instead: \").concat(Scrubber.stringify(node)));\n        }\n        return node;\n    },\n    *descendants (root) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        for (var [node, path] of Node.nodes(root, options)){\n            if (path.length !== 0) {\n                // NOTE: we have to coerce here because checking the path's length does\n                // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n                yield [\n                    node,\n                    path\n                ];\n            }\n        }\n    },\n    *elements (root) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        for (var [node, path] of Node.nodes(root, options)){\n            if (Element.isElement(node)) {\n                yield [\n                    node,\n                    path\n                ];\n            }\n        }\n    },\n    extractProps (node) {\n        if (Element.isAncestor(node)) {\n            var properties = _objectWithoutProperties(node, _excluded$3);\n            return properties;\n        } else {\n            var properties = _objectWithoutProperties(node, _excluded2$3);\n            return properties;\n        }\n    },\n    first (root, path) {\n        var p = path.slice();\n        var n = Node.get(root, p);\n        while(n){\n            if (Text.isText(n) || n.children.length === 0) {\n                break;\n            } else {\n                n = n.children[0];\n                p.push(0);\n            }\n        }\n        return [\n            n,\n            p\n        ];\n    },\n    fragment (root, range) {\n        if (Text.isText(root)) {\n            throw new Error(\"Cannot get a fragment starting from a root text node: \".concat(Scrubber.stringify(root)));\n        }\n        var newRoot = (0,immer__WEBPACK_IMPORTED_MODULE_1__.produce)({\n            children: root.children\n        }, (r)=>{\n            var [start, end] = Range.edges(range);\n            var nodeEntries = Node.nodes(r, {\n                reverse: true,\n                pass: (_ref)=>{\n                    var [, path] = _ref;\n                    return !Range.includes(range, path);\n                }\n            });\n            for (var [, path] of nodeEntries){\n                if (!Range.includes(range, path)) {\n                    var parent = Node.parent(r, path);\n                    var index = path[path.length - 1];\n                    parent.children.splice(index, 1);\n                }\n                if (Path.equals(path, end.path)) {\n                    var leaf = Node.leaf(r, path);\n                    leaf.text = leaf.text.slice(0, end.offset);\n                }\n                if (Path.equals(path, start.path)) {\n                    var _leaf = Node.leaf(r, path);\n                    _leaf.text = _leaf.text.slice(start.offset);\n                }\n            }\n            if (Editor.isEditor(r)) {\n                r.selection = null;\n            }\n        });\n        return newRoot.children;\n    },\n    get (root, path) {\n        var node = root;\n        for(var i = 0; i < path.length; i++){\n            var p = path[i];\n            if (Text.isText(node) || !node.children[p]) {\n                throw new Error(\"Cannot find a descendant at path [\".concat(path, \"] in node: \").concat(Scrubber.stringify(root)));\n            }\n            node = node.children[p];\n        }\n        return node;\n    },\n    has (root, path) {\n        var node = root;\n        for(var i = 0; i < path.length; i++){\n            var p = path[i];\n            if (Text.isText(node) || !node.children[p]) {\n                return false;\n            }\n            node = node.children[p];\n        }\n        return true;\n    },\n    isNode (value) {\n        return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);\n    },\n    isNodeList (value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        var cachedResult = IS_NODE_LIST_CACHE.get(value);\n        if (cachedResult !== undefined) {\n            return cachedResult;\n        }\n        var isNodeList = value.every((val)=>Node.isNode(val));\n        IS_NODE_LIST_CACHE.set(value, isNodeList);\n        return isNodeList;\n    },\n    last (root, path) {\n        var p = path.slice();\n        var n = Node.get(root, p);\n        while(n){\n            if (Text.isText(n) || n.children.length === 0) {\n                break;\n            } else {\n                var i = n.children.length - 1;\n                n = n.children[i];\n                p.push(i);\n            }\n        }\n        return [\n            n,\n            p\n        ];\n    },\n    leaf (root, path) {\n        var node = Node.get(root, path);\n        if (!Text.isText(node)) {\n            throw new Error(\"Cannot get the leaf node at path [\".concat(path, \"] because it refers to a non-leaf node: \").concat(Scrubber.stringify(node)));\n        }\n        return node;\n    },\n    *levels (root, path) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        for (var p of Path.levels(path, options)){\n            var n = Node.get(root, p);\n            yield [\n                n,\n                p\n            ];\n        }\n    },\n    matches (node, props) {\n        return Element.isElement(node) && Element.isElementProps(props) && Element.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);\n    },\n    *nodes (root) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var { pass, reverse = false } = options;\n        var { from = [], to } = options;\n        var visited = new Set();\n        var p = [];\n        var n = root;\n        while(true){\n            if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n                break;\n            }\n            if (!visited.has(n)) {\n                yield [\n                    n,\n                    p\n                ];\n            } // If we're allowed to go downward and we haven't descended yet, do.\n            if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([\n                n,\n                p\n            ]) === false)) {\n                visited.add(n);\n                var nextIndex = reverse ? n.children.length - 1 : 0;\n                if (Path.isAncestor(p, from)) {\n                    nextIndex = from[p.length];\n                }\n                p = p.concat(nextIndex);\n                n = Node.get(root, p);\n                continue;\n            } // If we're at the root and we can't go down, we're done.\n            if (p.length === 0) {\n                break;\n            } // If we're going forward...\n            if (!reverse) {\n                var newPath = Path.next(p);\n                if (Node.has(root, newPath)) {\n                    p = newPath;\n                    n = Node.get(root, p);\n                    continue;\n                }\n            } // If we're going backward...\n            if (reverse && p[p.length - 1] !== 0) {\n                var _newPath = Path.previous(p);\n                p = _newPath;\n                n = Node.get(root, p);\n                continue;\n            } // Otherwise we're going upward...\n            p = Path.parent(p);\n            n = Node.get(root, p);\n            visited.add(n);\n        }\n    },\n    parent (root, path) {\n        var parentPath = Path.parent(path);\n        var p = Node.get(root, parentPath);\n        if (Text.isText(p)) {\n            throw new Error(\"Cannot get the parent of path [\".concat(path, \"] because it does not exist in the root.\"));\n        }\n        return p;\n    },\n    string (node) {\n        if (Text.isText(node)) {\n            return node.text;\n        } else {\n            return node.children.map(Node.string).join(\"\");\n        }\n    },\n    *texts (root) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        for (var [node, path] of Node.nodes(root, options)){\n            if (Text.isText(node)) {\n                yield [\n                    node,\n                    path\n                ];\n            }\n        }\n    }\n};\nfunction ownKeys$c(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$c(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$c(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$c(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar Operation = {\n    isNodeOperation (value) {\n        return Operation.isOperation(value) && value.type.endsWith(\"_node\");\n    },\n    isOperation (value) {\n        if (!(0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value)) {\n            return false;\n        }\n        switch(value.type){\n            case \"insert_node\":\n                return Path.isPath(value.path) && Node.isNode(value.node);\n            case \"insert_text\":\n                return typeof value.offset === \"number\" && typeof value.text === \"string\" && Path.isPath(value.path);\n            case \"merge_node\":\n                return typeof value.position === \"number\" && Path.isPath(value.path) && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.properties);\n            case \"move_node\":\n                return Path.isPath(value.path) && Path.isPath(value.newPath);\n            case \"remove_node\":\n                return Path.isPath(value.path) && Node.isNode(value.node);\n            case \"remove_text\":\n                return typeof value.offset === \"number\" && typeof value.text === \"string\" && Path.isPath(value.path);\n            case \"set_node\":\n                return Path.isPath(value.path) && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.properties) && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.newProperties);\n            case \"set_selection\":\n                return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.properties) && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.newProperties);\n            case \"split_node\":\n                return Path.isPath(value.path) && typeof value.position === \"number\" && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.properties);\n            default:\n                return false;\n        }\n    },\n    isOperationList (value) {\n        return Array.isArray(value) && value.every((val)=>Operation.isOperation(val));\n    },\n    isSelectionOperation (value) {\n        return Operation.isOperation(value) && value.type.endsWith(\"_selection\");\n    },\n    isTextOperation (value) {\n        return Operation.isOperation(value) && value.type.endsWith(\"_text\");\n    },\n    inverse (op) {\n        switch(op.type){\n            case \"insert_node\":\n                {\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        type: \"remove_node\"\n                    });\n                }\n            case \"insert_text\":\n                {\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        type: \"remove_text\"\n                    });\n                }\n            case \"merge_node\":\n                {\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        type: \"split_node\",\n                        path: Path.previous(op.path)\n                    });\n                }\n            case \"move_node\":\n                {\n                    var { newPath, path } = op; // PERF: in this case the move operation is a no-op anyways.\n                    if (Path.equals(newPath, path)) {\n                        return op;\n                    } // If the move happens completely within a single parent the path and\n                    // newPath are stable with respect to each other.\n                    if (Path.isSibling(path, newPath)) {\n                        return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                            path: newPath,\n                            newPath: path\n                        });\n                    } // If the move does not happen within a single parent it is possible\n                    // for the move to impact the true path to the location where the node\n                    // was removed from and where it was inserted. We have to adjust for this\n                    // and find the original path. We can accomplish this (only in non-sibling)\n                    // moves by looking at the impact of the move operation on the node\n                    // after the original move path.\n                    var inversePath = Path.transform(path, op);\n                    var inverseNewPath = Path.transform(Path.next(path), op);\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        path: inversePath,\n                        newPath: inverseNewPath\n                    });\n                }\n            case \"remove_node\":\n                {\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        type: \"insert_node\"\n                    });\n                }\n            case \"remove_text\":\n                {\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        type: \"insert_text\"\n                    });\n                }\n            case \"set_node\":\n                {\n                    var { properties, newProperties } = op;\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        properties: newProperties,\n                        newProperties: properties\n                    });\n                }\n            case \"set_selection\":\n                {\n                    var { properties: _properties, newProperties: _newProperties } = op;\n                    if (_properties == null) {\n                        return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                            properties: _newProperties,\n                            newProperties: null\n                        });\n                    } else if (_newProperties == null) {\n                        return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                            properties: null,\n                            newProperties: _properties\n                        });\n                    } else {\n                        return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                            properties: _newProperties,\n                            newProperties: _properties\n                        });\n                    }\n                }\n            case \"split_node\":\n                {\n                    return _objectSpread$c(_objectSpread$c({}, op), {}, {\n                        type: \"merge_node\",\n                        path: Path.next(op.path)\n                    });\n                }\n        }\n    }\n};\nvar IS_EDITOR_CACHE = new WeakMap();\nvar isEditor = (value)=>{\n    var cachedIsEditor = IS_EDITOR_CACHE.get(value);\n    if (cachedIsEditor !== undefined) {\n        return cachedIsEditor;\n    }\n    if (!(0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value)) {\n        return false;\n    }\n    var isEditor = typeof value.addMark === \"function\" && typeof value.apply === \"function\" && typeof value.deleteFragment === \"function\" && typeof value.insertBreak === \"function\" && typeof value.insertSoftBreak === \"function\" && typeof value.insertFragment === \"function\" && typeof value.insertNode === \"function\" && typeof value.insertText === \"function\" && typeof value.isElementReadOnly === \"function\" && typeof value.isInline === \"function\" && typeof value.isSelectable === \"function\" && typeof value.isVoid === \"function\" && typeof value.normalizeNode === \"function\" && typeof value.onChange === \"function\" && typeof value.removeMark === \"function\" && typeof value.getDirtyPaths === \"function\" && (value.marks === null || (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);\n    IS_EDITOR_CACHE.set(value, isEditor);\n    return isEditor;\n};\nvar Editor = {\n    above (editor, options) {\n        return editor.above(options);\n    },\n    addMark (editor, key, value) {\n        editor.addMark(key, value);\n    },\n    after (editor, at, options) {\n        return editor.after(at, options);\n    },\n    before (editor, at, options) {\n        return editor.before(at, options);\n    },\n    deleteBackward (editor) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var { unit = \"character\" } = options;\n        editor.deleteBackward(unit);\n    },\n    deleteForward (editor) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var { unit = \"character\" } = options;\n        editor.deleteForward(unit);\n    },\n    deleteFragment (editor, options) {\n        editor.deleteFragment(options);\n    },\n    edges (editor, at) {\n        return editor.edges(at);\n    },\n    elementReadOnly (editor) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return editor.elementReadOnly(options);\n    },\n    end (editor, at) {\n        return editor.end(at);\n    },\n    first (editor, at) {\n        return editor.first(at);\n    },\n    fragment (editor, at) {\n        return editor.fragment(at);\n    },\n    hasBlocks (editor, element) {\n        return editor.hasBlocks(element);\n    },\n    hasInlines (editor, element) {\n        return editor.hasInlines(element);\n    },\n    hasPath (editor, path) {\n        return editor.hasPath(path);\n    },\n    hasTexts (editor, element) {\n        return editor.hasTexts(element);\n    },\n    insertBreak (editor) {\n        editor.insertBreak();\n    },\n    insertFragment (editor, fragment, options) {\n        editor.insertFragment(fragment, options);\n    },\n    insertNode (editor, node) {\n        editor.insertNode(node);\n    },\n    insertSoftBreak (editor) {\n        editor.insertSoftBreak();\n    },\n    insertText (editor, text) {\n        editor.insertText(text);\n    },\n    isBlock (editor, value) {\n        return editor.isBlock(value);\n    },\n    isEdge (editor, point, at) {\n        return editor.isEdge(point, at);\n    },\n    isEditor (value) {\n        return isEditor(value);\n    },\n    isElementReadOnly (editor, element) {\n        return editor.isElementReadOnly(element);\n    },\n    isEmpty (editor, element) {\n        return editor.isEmpty(element);\n    },\n    isEnd (editor, point, at) {\n        return editor.isEnd(point, at);\n    },\n    isInline (editor, value) {\n        return editor.isInline(value);\n    },\n    isNormalizing (editor) {\n        return editor.isNormalizing();\n    },\n    isSelectable (editor, value) {\n        return editor.isSelectable(value);\n    },\n    isStart (editor, point, at) {\n        return editor.isStart(point, at);\n    },\n    isVoid (editor, value) {\n        return editor.isVoid(value);\n    },\n    last (editor, at) {\n        return editor.last(at);\n    },\n    leaf (editor, at, options) {\n        return editor.leaf(at, options);\n    },\n    levels (editor, options) {\n        return editor.levels(options);\n    },\n    marks (editor) {\n        return editor.getMarks();\n    },\n    next (editor, options) {\n        return editor.next(options);\n    },\n    node (editor, at, options) {\n        return editor.node(at, options);\n    },\n    nodes (editor, options) {\n        return editor.nodes(options);\n    },\n    normalize (editor, options) {\n        editor.normalize(options);\n    },\n    parent (editor, at, options) {\n        return editor.parent(at, options);\n    },\n    path (editor, at, options) {\n        return editor.path(at, options);\n    },\n    pathRef (editor, path, options) {\n        return editor.pathRef(path, options);\n    },\n    pathRefs (editor) {\n        return editor.pathRefs();\n    },\n    point (editor, at, options) {\n        return editor.point(at, options);\n    },\n    pointRef (editor, point, options) {\n        return editor.pointRef(point, options);\n    },\n    pointRefs (editor) {\n        return editor.pointRefs();\n    },\n    positions (editor, options) {\n        return editor.positions(options);\n    },\n    previous (editor, options) {\n        return editor.previous(options);\n    },\n    range (editor, at, to) {\n        return editor.range(at, to);\n    },\n    rangeRef (editor, range, options) {\n        return editor.rangeRef(range, options);\n    },\n    rangeRefs (editor) {\n        return editor.rangeRefs();\n    },\n    removeMark (editor, key) {\n        editor.removeMark(key);\n    },\n    setNormalizing (editor, isNormalizing) {\n        editor.setNormalizing(isNormalizing);\n    },\n    start (editor, at) {\n        return editor.start(at);\n    },\n    string (editor, at, options) {\n        return editor.string(at, options);\n    },\n    unhangRange (editor, range, options) {\n        return editor.unhangRange(range, options);\n    },\n    void (editor, options) {\n        return editor.void(options);\n    },\n    withoutNormalizing (editor, fn) {\n        editor.withoutNormalizing(fn);\n    }\n};\nvar Location = {\n    isLocation (value) {\n        return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);\n    }\n}; // eslint-disable-next-line no-redeclare\nvar Span = {\n    isSpan (value) {\n        return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);\n    }\n};\nfunction ownKeys$b(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$b(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$b(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$b(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar Point = {\n    compare (point, another) {\n        var result = Path.compare(point.path, another.path);\n        if (result === 0) {\n            if (point.offset < another.offset) return -1;\n            if (point.offset > another.offset) return 1;\n            return 0;\n        }\n        return result;\n    },\n    isAfter (point, another) {\n        return Point.compare(point, another) === 1;\n    },\n    isBefore (point, another) {\n        return Point.compare(point, another) === -1;\n    },\n    equals (point, another) {\n        // PERF: ensure the offsets are equal first since they are cheaper to check.\n        return point.offset === another.offset && Path.equals(point.path, another.path);\n    },\n    isPoint (value) {\n        return (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) && typeof value.offset === \"number\" && Path.isPath(value.path);\n    },\n    transform (point, op) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return (0,immer__WEBPACK_IMPORTED_MODULE_1__.produce)(point, (p)=>{\n            if (p === null) {\n                return null;\n            }\n            var { affinity = \"forward\" } = options;\n            var { path, offset } = p;\n            switch(op.type){\n                case \"insert_node\":\n                case \"move_node\":\n                    {\n                        p.path = Path.transform(path, op, options);\n                        break;\n                    }\n                case \"insert_text\":\n                    {\n                        if (Path.equals(op.path, path) && (op.offset < offset || op.offset === offset && affinity === \"forward\")) {\n                            p.offset += op.text.length;\n                        }\n                        break;\n                    }\n                case \"merge_node\":\n                    {\n                        if (Path.equals(op.path, path)) {\n                            p.offset += op.position;\n                        }\n                        p.path = Path.transform(path, op, options);\n                        break;\n                    }\n                case \"remove_text\":\n                    {\n                        if (Path.equals(op.path, path) && op.offset <= offset) {\n                            p.offset -= Math.min(offset - op.offset, op.text.length);\n                        }\n                        break;\n                    }\n                case \"remove_node\":\n                    {\n                        if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n                            return null;\n                        }\n                        p.path = Path.transform(path, op, options);\n                        break;\n                    }\n                case \"split_node\":\n                    {\n                        if (Path.equals(op.path, path)) {\n                            if (op.position === offset && affinity == null) {\n                                return null;\n                            } else if (op.position < offset || op.position === offset && affinity === \"forward\") {\n                                p.offset -= op.position;\n                                p.path = Path.transform(path, op, _objectSpread$b(_objectSpread$b({}, options), {}, {\n                                    affinity: \"forward\"\n                                }));\n                            }\n                        } else {\n                            p.path = Path.transform(path, op, options);\n                        }\n                        break;\n                    }\n            }\n        });\n    }\n};\nvar _scrubber = undefined;\n/**\r\n * This interface implements a stringify() function, which is used by Slate\r\n * internally when generating exceptions containing end user data. Developers\r\n * using Slate may call Scrubber.setScrubber() to alter the behavior of this\r\n * stringify() function.\r\n *\r\n * For example, to prevent the cleartext logging of 'text' fields within Nodes:\r\n *\r\n *    import { Scrubber } from 'slate';\r\n *    Scrubber.setScrubber((key, val) => {\r\n *      if (key === 'text') return '...scrubbed...'\r\n *      return val\r\n *    });\r\n *\r\n */ // eslint-disable-next-line no-redeclare\nvar Scrubber = {\n    setScrubber (scrubber) {\n        _scrubber = scrubber;\n    },\n    stringify (value) {\n        return JSON.stringify(value, _scrubber);\n    }\n};\nvar _excluded$2 = [\n    \"text\"\n], _excluded2$2 = [\n    \"anchor\",\n    \"focus\"\n];\nfunction ownKeys$a(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$a(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$a(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$a(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar Text = {\n    equals (text, another) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var { loose = false } = options;\n        function omitText(obj) {\n            var rest = _objectWithoutProperties(obj, _excluded$2);\n            return rest;\n        }\n        return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);\n    },\n    isText (value) {\n        return (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) && typeof value.text === \"string\";\n    },\n    isTextList (value) {\n        return Array.isArray(value) && value.every((val)=>Text.isText(val));\n    },\n    isTextProps (props) {\n        return props.text !== undefined;\n    },\n    matches (text, props) {\n        for(var key in props){\n            if (key === \"text\") {\n                continue;\n            }\n            if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n                return false;\n            }\n        }\n        return true;\n    },\n    decorations (node, decorations) {\n        var leaves = [\n            _objectSpread$a({}, node)\n        ];\n        for (var dec of decorations){\n            var rest = _objectWithoutProperties(dec, _excluded2$2);\n            var [start, end] = Range.edges(dec);\n            var next = [];\n            var leafEnd = 0;\n            var decorationStart = start.offset;\n            var decorationEnd = end.offset;\n            for (var leaf of leaves){\n                var { length } = leaf.text;\n                var leafStart = leafEnd;\n                leafEnd += length; // If the range encompasses the entire leaf, add the range.\n                if (decorationStart <= leafStart && leafEnd <= decorationEnd) {\n                    Object.assign(leaf, rest);\n                    next.push(leaf);\n                    continue;\n                } // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n                if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {\n                    next.push(leaf);\n                    continue;\n                } // Otherwise we need to split the leaf, at the start, end, or both,\n                // and add the range to the middle intersecting section. Do the end\n                // split first since we don't need to update the offset that way.\n                var middle = leaf;\n                var before = void 0;\n                var after = void 0;\n                if (decorationEnd < leafEnd) {\n                    var off = decorationEnd - leafStart;\n                    after = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n                        text: middle.text.slice(off)\n                    });\n                    middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n                        text: middle.text.slice(0, off)\n                    });\n                }\n                if (decorationStart > leafStart) {\n                    var _off = decorationStart - leafStart;\n                    before = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n                        text: middle.text.slice(0, _off)\n                    });\n                    middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {\n                        text: middle.text.slice(_off)\n                    });\n                }\n                Object.assign(middle, rest);\n                if (before) {\n                    next.push(before);\n                }\n                next.push(middle);\n                if (after) {\n                    next.push(after);\n                }\n            }\n            leaves = next;\n        }\n        return leaves;\n    }\n};\n/**\r\n * Get the default location to insert content into the editor.\r\n * By default, use the selection as the target location. But if there is\r\n * no selection, insert at the end of the document since that is such a\r\n * common use case when inserting from a non-selected state.\r\n */ var getDefaultInsertLocation = (editor)=>{\n    if (editor.selection) {\n        return editor.selection;\n    } else if (editor.children.length > 0) {\n        return Editor.end(editor, []);\n    } else {\n        return [\n            0\n        ];\n    }\n};\nvar matchPath = (editor, path)=>{\n    var [node] = Editor.node(editor, path);\n    return (n)=>n === node;\n};\n// Character (grapheme cluster) boundaries are determined according to\n// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n//\n// References:\n//\n// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n/**\r\n * Get the distance to the end of the first character in a string of text.\r\n */ var getCharacterDistance = function getCharacterDistance(str) {\n    var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isLTR = !isRTL;\n    var codepoints = isRTL ? codepointsIteratorRTL(str) : str;\n    var left = CodepointType.None;\n    var right = CodepointType.None;\n    var distance = 0; // Evaluation of these conditions are deferred.\n    var gb11 = null; // Is GB11 applicable?\n    var gb12Or13 = null; // Is GB12 or GB13 applicable?\n    for (var char of codepoints){\n        var code = char.codePointAt(0);\n        if (!code) break;\n        var type = getCodepointType(char, code);\n        [left, right] = isLTR ? [\n            right,\n            type\n        ] : [\n            type,\n            left\n        ];\n        if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {\n            if (isLTR) {\n                gb11 = endsWithEmojiZWJ(str.substring(0, distance));\n            } else {\n                gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));\n            }\n            if (!gb11) break;\n        }\n        if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {\n            if (gb12Or13 !== null) {\n                gb12Or13 = !gb12Or13;\n            } else {\n                if (isLTR) {\n                    gb12Or13 = true;\n                } else {\n                    gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));\n                }\n            }\n            if (!gb12Or13) break;\n        }\n        if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {\n            break;\n        }\n        distance += char.length;\n    }\n    return distance || 1;\n};\nvar SPACE = /\\s/;\nvar PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\nvar CHAMELEON = /['\\u2018\\u2019]/;\n/**\r\n * Get the distance to the end of the first word in a string of text.\r\n */ var getWordDistance = function getWordDistance(text) {\n    var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var dist = 0;\n    var started = false;\n    while(text.length > 0){\n        var charDist = getCharacterDistance(text, isRTL);\n        var [char, remaining] = splitByCharacterDistance(text, charDist, isRTL);\n        if (isWordCharacter(char, remaining, isRTL)) {\n            started = true;\n            dist += charDist;\n        } else if (!started) {\n            dist += charDist;\n        } else {\n            break;\n        }\n        text = remaining;\n    }\n    return dist;\n};\n/**\r\n * Split a string in two parts at a given distance starting from the end when\r\n * `isRTL` is set to `true`.\r\n */ var splitByCharacterDistance = (str, dist, isRTL)=>{\n    if (isRTL) {\n        var at = str.length - dist;\n        return [\n            str.slice(at, str.length),\n            str.slice(0, at)\n        ];\n    }\n    return [\n        str.slice(0, dist),\n        str.slice(dist)\n    ];\n};\n/**\r\n * Check if a character is a word character. The `remaining` argument is used\r\n * because sometimes you must read subsequent characters to truly determine it.\r\n */ var isWordCharacter = function isWordCharacter(char, remaining) {\n    var isRTL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (SPACE.test(char)) {\n        return false;\n    } // Chameleons count as word characters as long as they're in a word, so\n    // recurse to see if the next one is a word character or not.\n    if (CHAMELEON.test(char)) {\n        var charDist = getCharacterDistance(remaining, isRTL);\n        var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL);\n        if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n            return true;\n        }\n    }\n    if (PUNCTUATION.test(char)) {\n        return false;\n    }\n    return true;\n};\n/**\r\n * Iterate on codepoints from right to left.\r\n */ var codepointsIteratorRTL = function* codepointsIteratorRTL(str) {\n    var end = str.length - 1;\n    for(var i = 0; i < str.length; i++){\n        var char1 = str.charAt(end - i);\n        if (isLowSurrogate(char1.charCodeAt(0))) {\n            var char2 = str.charAt(end - i - 1);\n            if (isHighSurrogate(char2.charCodeAt(0))) {\n                yield char2 + char1;\n                i++;\n                continue;\n            }\n        }\n        yield char1;\n    }\n};\n/**\r\n * Is `charCode` a high surrogate.\r\n *\r\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n */ var isHighSurrogate = (charCode)=>{\n    return charCode >= 0xd800 && charCode <= 0xdbff;\n};\n/**\r\n * Is `charCode` a low surrogate.\r\n *\r\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n */ var isLowSurrogate = (charCode)=>{\n    return charCode >= 0xdc00 && charCode <= 0xdfff;\n};\nvar CodepointType;\n(function(CodepointType) {\n    CodepointType[CodepointType[\"None\"] = 0] = \"None\";\n    CodepointType[CodepointType[\"Extend\"] = 1] = \"Extend\";\n    CodepointType[CodepointType[\"ZWJ\"] = 2] = \"ZWJ\";\n    CodepointType[CodepointType[\"RI\"] = 4] = \"RI\";\n    CodepointType[CodepointType[\"Prepend\"] = 8] = \"Prepend\";\n    CodepointType[CodepointType[\"SpacingMark\"] = 16] = \"SpacingMark\";\n    CodepointType[CodepointType[\"L\"] = 32] = \"L\";\n    CodepointType[CodepointType[\"V\"] = 64] = \"V\";\n    CodepointType[CodepointType[\"T\"] = 128] = \"T\";\n    CodepointType[CodepointType[\"LV\"] = 256] = \"LV\";\n    CodepointType[CodepointType[\"LVT\"] = 512] = \"LVT\";\n    CodepointType[CodepointType[\"ExtPict\"] = 1024] = \"ExtPict\";\n    CodepointType[CodepointType[\"Any\"] = 2048] = \"Any\";\n})(CodepointType || (CodepointType = {}));\nvar reExtend = /^(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])$/;\nvar rePrepend = /^(?:[\\u0600-\\u0605\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u0D4E]|\\uD804[\\uDCBD\\uDCCD\\uDDC2\\uDDC3]|\\uD806[\\uDD3F\\uDD41\\uDE3A\\uDE84-\\uDE89]|\\uD807\\uDD46)$/;\nvar reSpacingMark = /^(?:[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0D02\\u0D03\\u0D3F\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82\\u0D83\\u0DD0\\u0DD1\\u0DD8-\\u0DDE\\u0DF2\\u0DF3\\u0E33\\u0EB3\\u0F3E\\u0F3F\\u0F7F\\u1031\\u103B\\u103C\\u1056\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF7\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]|\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD45\\uDD46\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDDCE\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB1\\uDCB2\\uDCB9\\uDCBB\\uDCBC\\uDCBE\\uDCC1\\uDDB0\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF26]|\\uD806[\\uDC2C-\\uDC2E\\uDC38\\uDD31-\\uDD35\\uDD37\\uDD38\\uDD3D\\uDD40\\uDD42\\uDDD1-\\uDDD3\\uDDDC-\\uDDDF\\uDDE4\\uDE39\\uDE57\\uDE58\\uDE97]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4\\uDD8A-\\uDD8E\\uDD93\\uDD94\\uDD96\\uDEF5\\uDEF6]|\\uD81B[\\uDF51-\\uDF87\\uDFF0\\uDFF1]|\\uD834[\\uDD66\\uDD6D])$/;\nvar reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/;\nvar reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/;\nvar reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/;\nvar reLV = /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/;\nvar reLVT = /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/;\nvar reExtPict = /^(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])$/;\nvar getCodepointType = (char, code)=>{\n    var type = CodepointType.Any;\n    if (char.search(reExtend) !== -1) {\n        type |= CodepointType.Extend;\n    }\n    if (code === 0x200d) {\n        type |= CodepointType.ZWJ;\n    }\n    if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n        type |= CodepointType.RI;\n    }\n    if (char.search(rePrepend) !== -1) {\n        type |= CodepointType.Prepend;\n    }\n    if (char.search(reSpacingMark) !== -1) {\n        type |= CodepointType.SpacingMark;\n    }\n    if (char.search(reL) !== -1) {\n        type |= CodepointType.L;\n    }\n    if (char.search(reV) !== -1) {\n        type |= CodepointType.V;\n    }\n    if (char.search(reT) !== -1) {\n        type |= CodepointType.T;\n    }\n    if (char.search(reLV) !== -1) {\n        type |= CodepointType.LV;\n    }\n    if (char.search(reLVT) !== -1) {\n        type |= CodepointType.LVT;\n    }\n    if (char.search(reExtPict) !== -1) {\n        type |= CodepointType.ExtPict;\n    }\n    return type;\n};\nfunction intersects(x, y) {\n    return (x & y) !== 0;\n}\nvar NonBoundaryPairs = [\n    [\n        CodepointType.L,\n        CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT\n    ],\n    [\n        CodepointType.LV | CodepointType.V,\n        CodepointType.V | CodepointType.T\n    ],\n    [\n        CodepointType.LVT | CodepointType.T,\n        CodepointType.T\n    ],\n    [\n        CodepointType.Any,\n        CodepointType.Extend | CodepointType.ZWJ\n    ],\n    [\n        CodepointType.Any,\n        CodepointType.SpacingMark\n    ],\n    [\n        CodepointType.Prepend,\n        CodepointType.Any\n    ],\n    [\n        CodepointType.ZWJ,\n        CodepointType.ExtPict\n    ],\n    [\n        CodepointType.RI,\n        CodepointType.RI\n    ]\n];\nfunction isBoundaryPair(left, right) {\n    return NonBoundaryPairs.findIndex((r)=>intersects(left, r[0]) && intersects(right, r[1])) === -1;\n}\nvar endingEmojiZWJ = /(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])*\\u200D$/;\nvar endsWithEmojiZWJ = (str)=>{\n    return str.search(endingEmojiZWJ) !== -1;\n};\nvar endingRIs = /(?:\\uD83C[\\uDDE6-\\uDDFF])+$/g;\nvar endsWithOddNumberOfRIs = (str)=>{\n    var match = str.match(endingRIs);\n    if (match === null) {\n        return false;\n    } else {\n        // A RI is represented by a surrogate pair.\n        var numRIs = match[0].length / 2;\n        return numRIs % 2 === 1;\n    }\n};\nvar TextTransforms = {\n    delete (editor, options) {\n        editor.delete(options);\n    },\n    insertFragment (editor, fragment, options) {\n        editor.insertFragment(fragment, options);\n    },\n    insertText (editor, text) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        Editor.withoutNormalizing(editor, ()=>{\n            var { voids = false } = options;\n            var { at = getDefaultInsertLocation(editor) } = options;\n            if (Path.isPath(at)) {\n                at = Editor.range(editor, at);\n            }\n            if (Range.isRange(at)) {\n                if (Range.isCollapsed(at)) {\n                    at = at.anchor;\n                } else {\n                    var end = Range.end(at);\n                    if (!voids && Editor.void(editor, {\n                        at: end\n                    })) {\n                        return;\n                    }\n                    var start = Range.start(at);\n                    var startRef = Editor.pointRef(editor, start);\n                    var endRef = Editor.pointRef(editor, end);\n                    Transforms.delete(editor, {\n                        at,\n                        voids\n                    });\n                    var startPoint = startRef.unref();\n                    var endPoint = endRef.unref();\n                    at = startPoint || endPoint;\n                    Transforms.setSelection(editor, {\n                        anchor: at,\n                        focus: at\n                    });\n                }\n            }\n            if (!voids && Editor.void(editor, {\n                at\n            }) || Editor.elementReadOnly(editor, {\n                at\n            })) {\n                return;\n            }\n            var { path, offset } = at;\n            if (text.length > 0) editor.apply({\n                type: \"insert_text\",\n                path,\n                offset,\n                text\n            });\n        });\n    }\n};\nfunction ownKeys$9(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$9(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$9(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$9(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar Transforms = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);\nvar apply = (editor, op)=>{\n    for (var ref of Editor.pathRefs(editor)){\n        PathRef.transform(ref, op);\n    }\n    for (var _ref of Editor.pointRefs(editor)){\n        PointRef.transform(_ref, op);\n    }\n    for (var _ref2 of Editor.rangeRefs(editor)){\n        RangeRef.transform(_ref2, op);\n    }\n    var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];\n    var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set();\n    var dirtyPaths;\n    var dirtyPathKeys;\n    var add = (path)=>{\n        if (path) {\n            var key = path.join(\",\");\n            if (!dirtyPathKeys.has(key)) {\n                dirtyPathKeys.add(key);\n                dirtyPaths.push(path);\n            }\n        }\n    };\n    if (Path.operationCanTransformPath(op)) {\n        dirtyPaths = [];\n        dirtyPathKeys = new Set();\n        for (var path of oldDirtyPaths){\n            var newPath = Path.transform(path, op);\n            add(newPath);\n        }\n    } else {\n        dirtyPaths = oldDirtyPaths;\n        dirtyPathKeys = oldDirtyPathKeys;\n    }\n    var newDirtyPaths = editor.getDirtyPaths(op);\n    for (var _path of newDirtyPaths){\n        add(_path);\n    }\n    DIRTY_PATHS.set(editor, dirtyPaths);\n    DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);\n    Transforms.transform(editor, op);\n    editor.operations.push(op);\n    Editor.normalize(editor, {\n        operation: op\n    }); // Clear any formats applied to the cursor if the selection changes.\n    if (op.type === \"set_selection\") {\n        editor.marks = null;\n    }\n    if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true);\n        Promise.resolve().then(()=>{\n            FLUSHING.set(editor, false);\n            editor.onChange({\n                operation: op\n            });\n            editor.operations = [];\n        });\n    }\n};\n/**\r\n * Get the \"dirty\" paths generated from an operation.\r\n */ var getDirtyPaths = (editor, op)=>{\n    switch(op.type){\n        case \"insert_text\":\n        case \"remove_text\":\n        case \"set_node\":\n            {\n                var { path } = op;\n                return Path.levels(path);\n            }\n        case \"insert_node\":\n            {\n                var { node, path: _path } = op;\n                var levels = Path.levels(_path);\n                var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), (_ref)=>{\n                    var [, p] = _ref;\n                    return _path.concat(p);\n                });\n                return [\n                    ...levels,\n                    ...descendants\n                ];\n            }\n        case \"merge_node\":\n            {\n                var { path: _path2 } = op;\n                var ancestors = Path.ancestors(_path2);\n                var previousPath = Path.previous(_path2);\n                return [\n                    ...ancestors,\n                    previousPath\n                ];\n            }\n        case \"move_node\":\n            {\n                var { path: _path3, newPath } = op;\n                if (Path.equals(_path3, newPath)) {\n                    return [];\n                }\n                var oldAncestors = [];\n                var newAncestors = [];\n                for (var ancestor of Path.ancestors(_path3)){\n                    var p = Path.transform(ancestor, op);\n                    oldAncestors.push(p);\n                }\n                for (var _ancestor of Path.ancestors(newPath)){\n                    var _p = Path.transform(_ancestor, op);\n                    newAncestors.push(_p);\n                }\n                var newParent = newAncestors[newAncestors.length - 1];\n                var newIndex = newPath[newPath.length - 1];\n                var resultPath = newParent.concat(newIndex);\n                return [\n                    ...oldAncestors,\n                    ...newAncestors,\n                    resultPath\n                ];\n            }\n        case \"remove_node\":\n            {\n                var { path: _path4 } = op;\n                var _ancestors = Path.ancestors(_path4);\n                return [\n                    ..._ancestors\n                ];\n            }\n        case \"split_node\":\n            {\n                var { path: _path5 } = op;\n                var _levels = Path.levels(_path5);\n                var nextPath = Path.next(_path5);\n                return [\n                    ..._levels,\n                    nextPath\n                ];\n            }\n        default:\n            {\n                return [];\n            }\n    }\n};\nvar getFragment = (editor)=>{\n    var { selection } = editor;\n    if (selection) {\n        return Node.fragment(editor, selection);\n    }\n    return [];\n};\nvar normalizeNode = (editor, entry)=>{\n    var [node, path] = entry; // There are no core normalizations for text nodes.\n    if (Text.isText(node)) {\n        return;\n    } // Ensure that block and inline nodes have at least one text child.\n    if (Element.isElement(node) && node.children.length === 0) {\n        var child = {\n            text: \"\"\n        };\n        Transforms.insertNodes(editor, child, {\n            at: path.concat(0),\n            voids: true\n        });\n        return;\n    } // Determine whether the node should have block or inline children.\n    var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an\n    // index that accounts for any added/removed nodes.\n    var n = 0;\n    for(var i = 0; i < node.children.length; i++, n++){\n        var currentNode = Node.get(editor, path);\n        if (Text.isText(currentNode)) continue;\n        var _child = currentNode.children[n];\n        var prev = currentNode.children[n - 1];\n        var isLast = i === node.children.length - 1;\n        var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n            Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true\n            });\n            n--;\n        } else if (Element.isElement(_child)) {\n            // Ensure that inline nodes are surrounded by text nodes.\n            if (editor.isInline(_child)) {\n                if (prev == null || !Text.isText(prev)) {\n                    var newChild = {\n                        text: \"\"\n                    };\n                    Transforms.insertNodes(editor, newChild, {\n                        at: path.concat(n),\n                        voids: true\n                    });\n                    n++;\n                } else if (isLast) {\n                    var _newChild = {\n                        text: \"\"\n                    };\n                    Transforms.insertNodes(editor, _newChild, {\n                        at: path.concat(n + 1),\n                        voids: true\n                    });\n                    n++;\n                }\n            }\n        } else {\n            // Merge adjacent text nodes that are empty or match.\n            if (prev != null && Text.isText(prev)) {\n                if (Text.equals(_child, prev, {\n                    loose: true\n                })) {\n                    Transforms.mergeNodes(editor, {\n                        at: path.concat(n),\n                        voids: true\n                    });\n                    n--;\n                } else if (prev.text === \"\") {\n                    Transforms.removeNodes(editor, {\n                        at: path.concat(n - 1),\n                        voids: true\n                    });\n                    n--;\n                } else if (_child.text === \"\") {\n                    Transforms.removeNodes(editor, {\n                        at: path.concat(n),\n                        voids: true\n                    });\n                    n--;\n                }\n            }\n        }\n    }\n};\nvar shouldNormalize = (editor, _ref)=>{\n    var { iteration, initialDirtyPathsLength } = _ref;\n    var maxIterations = initialDirtyPathsLength * 42; // HACK: better way?\n    if (iteration > maxIterations) {\n        throw new Error(\"Could not completely normalize the editor after \".concat(maxIterations, \" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\"));\n    }\n    return true;\n};\nvar above = function above(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { voids = false, mode = \"lowest\", at = editor.selection, match } = options;\n    if (!at) {\n        return;\n    }\n    var path = Editor.path(editor, at);\n    var reverse = mode === \"lowest\";\n    for (var [n, p] of Editor.levels(editor, {\n        at: path,\n        voids,\n        match,\n        reverse\n    })){\n        if (Text.isText(n)) continue;\n        if (Range.isRange(at)) {\n            if (Path.isAncestor(p, at.anchor.path) && Path.isAncestor(p, at.focus.path)) {\n                return [\n                    n,\n                    p\n                ];\n            }\n        } else {\n            if (!Path.equals(path, p)) {\n                return [\n                    n,\n                    p\n                ];\n            }\n        }\n    }\n};\nfunction ownKeys$8(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$8(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$8(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$8(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar addMark = (editor, key, value)=>{\n    var { selection } = editor;\n    if (selection) {\n        var match = (node, path)=>{\n            if (!Text.isText(node)) {\n                return false; // marks can only be applied to text\n            }\n            var [parentNode, parentPath] = Editor.parent(editor, path);\n            return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);\n        };\n        var expandedSelection = Range.isExpanded(selection);\n        var markAcceptingVoidSelected = false;\n        if (!expandedSelection) {\n            var [selectedNode, selectedPath] = Editor.node(editor, selection);\n            if (selectedNode && match(selectedNode, selectedPath)) {\n                var [parentNode] = Editor.parent(editor, selectedPath);\n                markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);\n            }\n        }\n        if (expandedSelection || markAcceptingVoidSelected) {\n            Transforms.setNodes(editor, {\n                [key]: value\n            }, {\n                match,\n                split: true,\n                voids: true\n            });\n        } else {\n            var marks = _objectSpread$8(_objectSpread$8({}, Editor.marks(editor) || {}), {}, {\n                [key]: value\n            });\n            editor.marks = marks;\n            if (!FLUSHING.get(editor)) {\n                editor.onChange();\n            }\n        }\n    }\n};\nfunction ownKeys$7(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$7(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$7(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$7(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar after = function after(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var anchor = Editor.point(editor, at, {\n        edge: \"end\"\n    });\n    var focus = Editor.end(editor, []);\n    var range = {\n        anchor,\n        focus\n    };\n    var { distance = 1 } = options;\n    var d = 0;\n    var target;\n    for (var p of Editor.positions(editor, _objectSpread$7(_objectSpread$7({}, options), {}, {\n        at: range\n    }))){\n        if (d > distance) {\n            break;\n        }\n        if (d !== 0) {\n            target = p;\n        }\n        d++;\n    }\n    return target;\n};\nfunction ownKeys$6(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$6(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$6(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$6(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar before = function before(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var anchor = Editor.start(editor, []);\n    var focus = Editor.point(editor, at, {\n        edge: \"start\"\n    });\n    var range = {\n        anchor,\n        focus\n    };\n    var { distance = 1 } = options;\n    var d = 0;\n    var target;\n    for (var p of Editor.positions(editor, _objectSpread$6(_objectSpread$6({}, options), {}, {\n        at: range,\n        reverse: true\n    }))){\n        if (d > distance) {\n            break;\n        }\n        if (d !== 0) {\n            target = p;\n        }\n        d++;\n    }\n    return target;\n};\nvar deleteBackward = (editor, unit)=>{\n    var { selection } = editor;\n    if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, {\n            unit,\n            reverse: true\n        });\n    }\n};\nvar deleteForward = (editor, unit)=>{\n    var { selection } = editor;\n    if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, {\n            unit\n        });\n    }\n};\nvar deleteFragment = function deleteFragment(editor) {\n    var { direction = \"forward\" } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { selection } = editor;\n    if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor, {\n            reverse: direction === \"backward\"\n        });\n    }\n};\nvar edges = (editor, at)=>{\n    return [\n        Editor.start(editor, at),\n        Editor.end(editor, at)\n    ];\n};\nfunction ownKeys$5(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$5(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$5(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$5(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar elementReadOnly = function elementReadOnly(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Editor.above(editor, _objectSpread$5(_objectSpread$5({}, options), {}, {\n        match: (n)=>Element.isElement(n) && Editor.isElementReadOnly(editor, n)\n    }));\n};\nvar end = (editor, at)=>{\n    return Editor.point(editor, at, {\n        edge: \"end\"\n    });\n};\nvar first = (editor, at)=>{\n    var path = Editor.path(editor, at, {\n        edge: \"start\"\n    });\n    return Editor.node(editor, path);\n};\nvar fragment = (editor, at)=>{\n    var range = Editor.range(editor, at);\n    return Node.fragment(editor, range);\n};\nfunction ownKeys$4(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$4(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$4(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$4(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar getVoid = function getVoid(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Editor.above(editor, _objectSpread$4(_objectSpread$4({}, options), {}, {\n        match: (n)=>Element.isElement(n) && Editor.isVoid(editor, n)\n    }));\n};\nvar hasBlocks = (editor, element)=>{\n    return element.children.some((n)=>Element.isElement(n) && Editor.isBlock(editor, n));\n};\nvar hasInlines = (editor, element)=>{\n    return element.children.some((n)=>Text.isText(n) || Editor.isInline(editor, n));\n};\nvar hasPath = (editor, path)=>{\n    return Node.has(editor, path);\n};\nvar hasTexts = (editor, element)=>{\n    return element.children.every((n)=>Text.isText(n));\n};\nvar insertBreak = (editor)=>{\n    Transforms.splitNodes(editor, {\n        always: true\n    });\n};\nvar insertNode = (editor, node, options)=>{\n    Transforms.insertNodes(editor, node, options);\n};\nvar insertSoftBreak = (editor)=>{\n    Transforms.splitNodes(editor, {\n        always: true\n    });\n};\nfunction ownKeys$3(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$3(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$3(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$3(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar insertText = function insertText(editor, text) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { selection, marks } = editor;\n    if (selection) {\n        if (marks) {\n            var node = _objectSpread$3({\n                text\n            }, marks);\n            Transforms.insertNodes(editor, node, {\n                at: options.at,\n                voids: options.voids\n            });\n        } else {\n            Transforms.insertText(editor, text, options);\n        }\n        editor.marks = null;\n    }\n};\nvar isBlock = (editor, value)=>{\n    return !editor.isInline(value);\n};\nvar isEdge = (editor, point, at)=>{\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);\n};\nvar isEmpty = (editor, element)=>{\n    var { children } = element;\n    var [first] = children;\n    return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === \"\" && !editor.isVoid(element);\n};\nvar isEnd = (editor, point, at)=>{\n    var end = Editor.end(editor, at);\n    return Point.equals(point, end);\n};\nvar isNormalizing = (editor)=>{\n    var isNormalizing = NORMALIZING.get(editor);\n    return isNormalizing === undefined ? true : isNormalizing;\n};\nvar isStart = (editor, point, at)=>{\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n        return false;\n    }\n    var start = Editor.start(editor, at);\n    return Point.equals(point, start);\n};\nvar last = (editor, at)=>{\n    var path = Editor.path(editor, at, {\n        edge: \"end\"\n    });\n    return Editor.node(editor, path);\n};\nvar leaf = function leaf(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var node = Node.leaf(editor, path);\n    return [\n        node,\n        path\n    ];\n};\nfunction* levels(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { at = editor.selection, reverse = false, voids = false } = options;\n    var { match } = options;\n    if (match == null) {\n        match = ()=>true;\n    }\n    if (!at) {\n        return;\n    }\n    var levels = [];\n    var path = Editor.path(editor, at);\n    for (var [n, p] of Node.levels(editor, path)){\n        if (!match(n, p)) {\n            continue;\n        }\n        levels.push([\n            n,\n            p\n        ]);\n        if (!voids && Element.isElement(n) && Editor.isVoid(editor, n)) {\n            break;\n        }\n    }\n    if (reverse) {\n        levels.reverse();\n    }\n    yield* levels;\n}\nvar _excluded$1 = [\n    \"text\"\n], _excluded2$1 = [\n    \"text\"\n];\nvar marks = function marks(editor) {\n    var { marks, selection } = editor;\n    if (!selection) {\n        return null;\n    }\n    if (marks) {\n        return marks;\n    }\n    if (Range.isExpanded(selection)) {\n        var [match] = Editor.nodes(editor, {\n            match: Text.isText\n        });\n        if (match) {\n            var [_node] = match;\n            var _rest = _objectWithoutProperties(_node, _excluded$1);\n            return _rest;\n        } else {\n            return {};\n        }\n    }\n    var { anchor } = selection;\n    var { path } = anchor;\n    var [node] = Editor.leaf(editor, path);\n    if (anchor.offset === 0) {\n        var prev = Editor.previous(editor, {\n            at: path,\n            match: Text.isText\n        });\n        var markedVoid = Editor.above(editor, {\n            match: (n)=>Element.isElement(n) && Editor.isVoid(editor, n) && editor.markableVoid(n)\n        });\n        if (!markedVoid) {\n            var block = Editor.above(editor, {\n                match: (n)=>Element.isElement(n) && Editor.isBlock(editor, n)\n            });\n            if (prev && block) {\n                var [prevNode, prevPath] = prev;\n                var [, blockPath] = block;\n                if (Path.isAncestor(blockPath, prevPath)) {\n                    node = prevNode;\n                }\n            }\n        }\n    }\n    var rest = _objectWithoutProperties(node, _excluded2$1);\n    return rest;\n};\nvar next = function next(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { mode = \"lowest\", voids = false } = options;\n    var { match, at = editor.selection } = options;\n    if (!at) {\n        return;\n    }\n    var pointAfterLocation = Editor.after(editor, at, {\n        voids\n    });\n    if (!pointAfterLocation) return;\n    var [, to] = Editor.last(editor, []);\n    var span = [\n        pointAfterLocation.path,\n        to\n    ];\n    if (Path.isPath(at) && at.length === 0) {\n        throw new Error(\"Cannot get the next node from the root node!\");\n    }\n    if (match == null) {\n        if (Path.isPath(at)) {\n            var [parent] = Editor.parent(editor, at);\n            match = (n)=>parent.children.includes(n);\n        } else {\n            match = ()=>true;\n        }\n    }\n    var [next] = Editor.nodes(editor, {\n        at: span,\n        match,\n        mode,\n        voids\n    });\n    return next;\n};\nvar node = function node(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var node = Node.get(editor, path);\n    return [\n        node,\n        path\n    ];\n};\nfunction* nodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { at = editor.selection, mode = \"all\", universal = false, reverse = false, voids = false, ignoreNonSelectable = false } = options;\n    var { match } = options;\n    if (!match) {\n        match = ()=>true;\n    }\n    if (!at) {\n        return;\n    }\n    var from;\n    var to;\n    if (Span.isSpan(at)) {\n        from = at[0];\n        to = at[1];\n    } else {\n        var first = Editor.path(editor, at, {\n            edge: \"start\"\n        });\n        var last = Editor.path(editor, at, {\n            edge: \"end\"\n        });\n        from = reverse ? last : first;\n        to = reverse ? first : last;\n    }\n    var nodeEntries = Node.nodes(editor, {\n        reverse,\n        from,\n        to,\n        pass: (_ref)=>{\n            var [node] = _ref;\n            if (!Element.isElement(node)) return false;\n            if (!voids && (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node))) return true;\n            if (ignoreNonSelectable && !Editor.isSelectable(editor, node)) return true;\n            return false;\n        }\n    });\n    var matches = [];\n    var hit;\n    for (var [node, path] of nodeEntries){\n        if (ignoreNonSelectable && Element.isElement(node) && !Editor.isSelectable(editor, node)) {\n            continue;\n        }\n        var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.\n        if (mode === \"highest\" && isLower) {\n            continue;\n        }\n        if (!match(node, path)) {\n            // If we've arrived at a leaf text node that is not lower than the last\n            // hit, then we've found a branch that doesn't include a match, which\n            // means the match is not universal.\n            if (universal && !isLower && Text.isText(node)) {\n                return;\n            } else {\n                continue;\n            }\n        } // If there's a match and it's lower than the last, update the hit.\n        if (mode === \"lowest\" && isLower) {\n            hit = [\n                node,\n                path\n            ];\n            continue;\n        } // In lowest mode we emit the last hit, once it's guaranteed lowest.\n        var emit = mode === \"lowest\" ? hit : [\n            node,\n            path\n        ];\n        if (emit) {\n            if (universal) {\n                matches.push(emit);\n            } else {\n                yield emit;\n            }\n        }\n        hit = [\n            node,\n            path\n        ];\n    } // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === \"lowest\" && hit) {\n        if (universal) {\n            matches.push(hit);\n        } else {\n            yield hit;\n        }\n    } // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n        yield* matches;\n    }\n}\nvar normalize = function normalize(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { force = false, operation } = options;\n    var getDirtyPaths = (editor)=>{\n        return DIRTY_PATHS.get(editor) || [];\n    };\n    var getDirtyPathKeys = (editor)=>{\n        return DIRTY_PATH_KEYS.get(editor) || new Set();\n    };\n    var popDirtyPath = (editor)=>{\n        var path = getDirtyPaths(editor).pop();\n        var key = path.join(\",\");\n        getDirtyPathKeys(editor).delete(key);\n        return path;\n    };\n    if (!Editor.isNormalizing(editor)) {\n        return;\n    }\n    if (force) {\n        var allPaths = Array.from(Node.nodes(editor), (_ref)=>{\n            var [, p] = _ref;\n            return p;\n        });\n        var allPathKeys = new Set(allPaths.map((p)=>p.join(\",\")));\n        DIRTY_PATHS.set(editor, allPaths);\n        DIRTY_PATH_KEYS.set(editor, allPathKeys);\n    }\n    if (getDirtyPaths(editor).length === 0) {\n        return;\n    }\n    Editor.withoutNormalizing(editor, ()=>{\n        /*\r\n      Fix dirty elements with no children.\r\n      editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\r\n      Running an initial pass avoids the catch-22 race condition.\r\n    */ for (var dirtyPath of getDirtyPaths(editor)){\n            if (Node.has(editor, dirtyPath)) {\n                var entry = Editor.node(editor, dirtyPath);\n                var [node, _] = entry;\n                /*\r\n          The default normalizer inserts an empty text node in this scenario, but it can be customised.\r\n          So there is some risk here.\r\n                   As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\r\n          by definition adding children to an empty node can't cause other paths to change.\r\n        */ if (Element.isElement(node) && node.children.length === 0) {\n                    editor.normalizeNode(entry, {\n                        operation\n                    });\n                }\n            }\n        }\n        var dirtyPaths = getDirtyPaths(editor);\n        var initialDirtyPathsLength = dirtyPaths.length;\n        var iteration = 0;\n        while(dirtyPaths.length !== 0){\n            if (!editor.shouldNormalize({\n                dirtyPaths,\n                iteration,\n                initialDirtyPathsLength,\n                operation\n            })) {\n                return;\n            }\n            var _dirtyPath = popDirtyPath(editor); // If the node doesn't exist in the tree, it does not need to be normalized.\n            if (Node.has(editor, _dirtyPath)) {\n                var _entry = Editor.node(editor, _dirtyPath);\n                editor.normalizeNode(_entry, {\n                    operation\n                });\n            }\n            iteration++;\n            dirtyPaths = getDirtyPaths(editor);\n        }\n    });\n};\nvar parent = function parent(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var parentPath = Path.parent(path);\n    var entry = Editor.node(editor, parentPath);\n    return entry;\n};\nvar pathRef = function pathRef(editor, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { affinity = \"forward\" } = options;\n    var ref = {\n        current: path,\n        affinity,\n        unref () {\n            var { current } = ref;\n            var pathRefs = Editor.pathRefs(editor);\n            pathRefs.delete(ref);\n            ref.current = null;\n            return current;\n        }\n    };\n    var refs = Editor.pathRefs(editor);\n    refs.add(ref);\n    return ref;\n};\nvar pathRefs = (editor)=>{\n    var refs = PATH_REFS.get(editor);\n    if (!refs) {\n        refs = new Set();\n        PATH_REFS.set(editor, refs);\n    }\n    return refs;\n};\nvar path = function path(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { depth, edge } = options;\n    if (Path.isPath(at)) {\n        if (edge === \"start\") {\n            var [, firstPath] = Node.first(editor, at);\n            at = firstPath;\n        } else if (edge === \"end\") {\n            var [, lastPath] = Node.last(editor, at);\n            at = lastPath;\n        }\n    }\n    if (Range.isRange(at)) {\n        if (edge === \"start\") {\n            at = Range.start(at);\n        } else if (edge === \"end\") {\n            at = Range.end(at);\n        } else {\n            at = Path.common(at.anchor.path, at.focus.path);\n        }\n    }\n    if (Point.isPoint(at)) {\n        at = at.path;\n    }\n    if (depth != null) {\n        at = at.slice(0, depth);\n    }\n    return at;\n};\nvar pointRef = function pointRef(editor, point) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { affinity = \"forward\" } = options;\n    var ref = {\n        current: point,\n        affinity,\n        unref () {\n            var { current } = ref;\n            var pointRefs = Editor.pointRefs(editor);\n            pointRefs.delete(ref);\n            ref.current = null;\n            return current;\n        }\n    };\n    var refs = Editor.pointRefs(editor);\n    refs.add(ref);\n    return ref;\n};\nvar pointRefs = (editor)=>{\n    var refs = POINT_REFS.get(editor);\n    if (!refs) {\n        refs = new Set();\n        POINT_REFS.set(editor, refs);\n    }\n    return refs;\n};\nvar point = function point(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { edge = \"start\" } = options;\n    if (Path.isPath(at)) {\n        var path;\n        if (edge === \"end\") {\n            var [, lastPath] = Node.last(editor, at);\n            path = lastPath;\n        } else {\n            var [, firstPath] = Node.first(editor, at);\n            path = firstPath;\n        }\n        var node = Node.get(editor, path);\n        if (!Text.isText(node)) {\n            throw new Error(\"Cannot get the \".concat(edge, \" point in the node at path [\").concat(at, \"] because it has no \").concat(edge, \" text node.\"));\n        }\n        return {\n            path,\n            offset: edge === \"end\" ? node.text.length : 0\n        };\n    }\n    if (Range.isRange(at)) {\n        var [start, end] = Range.edges(at);\n        return edge === \"start\" ? start : end;\n    }\n    return at;\n};\nfunction* positions(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { at = editor.selection, unit = \"offset\", reverse = false, voids = false, ignoreNonSelectable = false } = options;\n    if (!at) {\n        return;\n    }\n    /**\r\n   * Algorithm notes:\r\n   *\r\n   * Each step `distance` is dynamic depending on the underlying text\r\n   * and the `unit` specified.  Each step, e.g., a line or word, may\r\n   * span multiple text nodes, so we iterate through the text both on\r\n   * two levels in step-sync:\r\n   *\r\n   * `leafText` stores the text on a text leaf level, and is advanced\r\n   * through using the counters `leafTextOffset` and `leafTextRemaining`.\r\n   *\r\n   * `blockText` stores the text on a block level, and is shortened\r\n   * by `distance` every time it is advanced.\r\n   *\r\n   * We only maintain a window of one blockText and one leafText because\r\n   * a block node always appears before all of its leaf nodes.\r\n   */ var range = Editor.range(editor, at);\n    var [start, end] = Range.edges(range);\n    var first = reverse ? end : start;\n    var isNewBlock = false;\n    var blockText = \"\";\n    var distance = 0; // Distance for leafText to catch up to blockText.\n    var leafTextRemaining = 0;\n    var leafTextOffset = 0; // Iterate through all nodes in range, grabbing entire textual content\n    // of block nodes in blockText, and text nodes in leafText.\n    // Exploits the fact that nodes are sequenced in such a way that we first\n    // encounter the block node, then all of its text nodes, so when iterating\n    // through the blockText and leafText we just need to remember a window of\n    // one block node and leaf node, respectively.\n    for (var [node, path] of Editor.nodes(editor, {\n        at,\n        reverse,\n        voids,\n        ignoreNonSelectable\n    })){\n        /*\r\n     * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\r\n     */ if (Element.isElement(node)) {\n            // Void nodes are a special case, so by default we will always\n            // yield their first point. If the `voids` option is set to true,\n            // then we will iterate over their content.\n            if (!voids && (editor.isVoid(node) || editor.isElementReadOnly(node))) {\n                yield Editor.start(editor, path);\n                continue;\n            } // Inline element nodes are ignored as they don't themselves\n            // contribute to `blockText` or `leafText` - their parent and\n            // children do.\n            if (editor.isInline(node)) continue; // Block element node - set `blockText` to its text content.\n            if (Editor.hasInlines(editor, node)) {\n                // We always exhaust block nodes before encountering a new one:\n                //   console.assert(blockText === '',\n                //     `blockText='${blockText}' - `+\n                //     `not exhausted before new block node`, path)\n                // Ensure range considered is capped to `range`, in the\n                // start/end edge cases where block extends beyond range.\n                // Equivalent to this, but presumably more performant:\n                //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n                //   blockRange = Range.intersection(range, blockRange) // intersect\n                //   blockText = Editor.string(editor, blockRange, { voids })\n                var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);\n                var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);\n                blockText = Editor.string(editor, {\n                    anchor: s,\n                    focus: e\n                }, {\n                    voids\n                });\n                isNewBlock = true;\n            }\n        }\n        /*\r\n     * TEXT LEAF NODE - Iterate through text content, yielding\r\n     * positions every `distance` offset according to `unit`.\r\n     */ if (Text.isText(node)) {\n            var isFirst = Path.equals(path, first.path); // Proof that we always exhaust text nodes before encountering a new one:\n            //   console.assert(leafTextRemaining <= 0,\n            //     `leafTextRemaining=${leafTextRemaining} - `+\n            //     `not exhausted before new leaf text node`, path)\n            // Reset `leafText` counters for new text node.\n            if (isFirst) {\n                leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;\n                leafTextOffset = first.offset; // Works for reverse too.\n            } else {\n                leafTextRemaining = node.text.length;\n                leafTextOffset = reverse ? leafTextRemaining : 0;\n            } // Yield position at the start of node (potentially).\n            if (isFirst || isNewBlock || unit === \"offset\") {\n                yield {\n                    path,\n                    offset: leafTextOffset\n                };\n                isNewBlock = false;\n            } // Yield positions every (dynamically calculated) `distance` offset.\n            while(true){\n                // If `leafText` has caught up with `blockText` (distance=0),\n                // and if blockText is exhausted, break to get another block node,\n                // otherwise advance blockText forward by the new `distance`.\n                if (distance === 0) {\n                    if (blockText === \"\") break;\n                    distance = calcDistance(blockText, unit, reverse); // Split the string at the previously found distance and use the\n                    // remaining string for the next iteration.\n                    blockText = splitByCharacterDistance(blockText, distance, reverse)[1];\n                } // Advance `leafText` by the current `distance`.\n                leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;\n                leafTextRemaining = leafTextRemaining - distance; // If `leafText` is exhausted, break to get a new leaf node\n                // and set distance to the overflow amount, so we'll (maybe)\n                // catch up to blockText in the next leaf text node.\n                if (leafTextRemaining < 0) {\n                    distance = -leafTextRemaining;\n                    break;\n                } // Successfully walked `distance` offsets through `leafText`\n                // to catch up with `blockText`, so we can reset `distance`\n                // and yield this position in this node.\n                distance = 0;\n                yield {\n                    path,\n                    offset: leafTextOffset\n                };\n            }\n        }\n    } // Proof that upon completion, we've exahusted both leaf and block text:\n    //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n    //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n    // Helper:\n    // Return the distance in offsets for a step of size `unit` on given string.\n    function calcDistance(text, unit, reverse) {\n        if (unit === \"character\") {\n            return getCharacterDistance(text, reverse);\n        } else if (unit === \"word\") {\n            return getWordDistance(text, reverse);\n        } else if (unit === \"line\" || unit === \"block\") {\n            return text.length;\n        }\n        return 1;\n    }\n}\nvar previous = function previous(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { mode = \"lowest\", voids = false } = options;\n    var { match, at = editor.selection } = options;\n    if (!at) {\n        return;\n    }\n    var pointBeforeLocation = Editor.before(editor, at, {\n        voids\n    });\n    if (!pointBeforeLocation) {\n        return;\n    }\n    var [, to] = Editor.first(editor, []); // The search location is from the start of the document to the path of\n    // the point before the location passed in\n    var span = [\n        pointBeforeLocation.path,\n        to\n    ];\n    if (Path.isPath(at) && at.length === 0) {\n        throw new Error(\"Cannot get the previous node from the root node!\");\n    }\n    if (match == null) {\n        if (Path.isPath(at)) {\n            var [parent] = Editor.parent(editor, at);\n            match = (n)=>parent.children.includes(n);\n        } else {\n            match = ()=>true;\n        }\n    }\n    var [previous] = Editor.nodes(editor, {\n        reverse: true,\n        at: span,\n        match,\n        mode,\n        voids\n    });\n    return previous;\n};\nvar rangeRef = function rangeRef(editor, range) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { affinity = \"forward\" } = options;\n    var ref = {\n        current: range,\n        affinity,\n        unref () {\n            var { current } = ref;\n            var rangeRefs = Editor.rangeRefs(editor);\n            rangeRefs.delete(ref);\n            ref.current = null;\n            return current;\n        }\n    };\n    var refs = Editor.rangeRefs(editor);\n    refs.add(ref);\n    return ref;\n};\nvar rangeRefs = (editor)=>{\n    var refs = RANGE_REFS.get(editor);\n    if (!refs) {\n        refs = new Set();\n        RANGE_REFS.set(editor, refs);\n    }\n    return refs;\n};\nvar range = (editor, at, to)=>{\n    if (Range.isRange(at) && !to) {\n        return at;\n    }\n    var start = Editor.start(editor, at);\n    var end = Editor.end(editor, to || at);\n    return {\n        anchor: start,\n        focus: end\n    };\n};\nfunction ownKeys$2(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$2(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$2(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar removeMark = (editor, key)=>{\n    var { selection } = editor;\n    if (selection) {\n        var match = (node, path)=>{\n            if (!Text.isText(node)) {\n                return false; // marks can only be applied to text\n            }\n            var [parentNode, parentPath] = Editor.parent(editor, path);\n            return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);\n        };\n        var expandedSelection = Range.isExpanded(selection);\n        var markAcceptingVoidSelected = false;\n        if (!expandedSelection) {\n            var [selectedNode, selectedPath] = Editor.node(editor, selection);\n            if (selectedNode && match(selectedNode, selectedPath)) {\n                var [parentNode] = Editor.parent(editor, selectedPath);\n                markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);\n            }\n        }\n        if (expandedSelection || markAcceptingVoidSelected) {\n            Transforms.unsetNodes(editor, key, {\n                match,\n                split: true,\n                voids: true\n            });\n        } else {\n            var marks = _objectSpread$2({}, Editor.marks(editor) || {});\n            delete marks[key];\n            editor.marks = marks;\n            if (!FLUSHING.get(editor)) {\n                editor.onChange();\n            }\n        }\n    }\n};\nvar setNormalizing = (editor, isNormalizing)=>{\n    NORMALIZING.set(editor, isNormalizing);\n};\nvar start = (editor, at)=>{\n    return Editor.point(editor, at, {\n        edge: \"start\"\n    });\n};\nvar string = function string(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { voids = false } = options;\n    var range = Editor.range(editor, at);\n    var [start, end] = Range.edges(range);\n    var text = \"\";\n    for (var [node, path] of Editor.nodes(editor, {\n        at: range,\n        match: Text.isText,\n        voids\n    })){\n        var t = node.text;\n        if (Path.equals(path, end.path)) {\n            t = t.slice(0, end.offset);\n        }\n        if (Path.equals(path, start.path)) {\n            t = t.slice(start.offset);\n        }\n        text += t;\n    }\n    return text;\n};\nvar unhangRange = function unhangRange(editor, range) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { voids = false } = options;\n    var [start, end] = Range.edges(range); // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range) || Path.hasPrevious(end.path)) {\n        return range;\n    }\n    var endBlock = Editor.above(editor, {\n        at: end,\n        match: (n)=>Element.isElement(n) && Editor.isBlock(editor, n),\n        voids\n    });\n    var blockPath = endBlock ? endBlock[1] : [];\n    var first = Editor.start(editor, start);\n    var before = {\n        anchor: first,\n        focus: end\n    };\n    var skip = true;\n    for (var [node, path] of Editor.nodes(editor, {\n        at: before,\n        match: Text.isText,\n        reverse: true,\n        voids\n    })){\n        if (skip) {\n            skip = false;\n            continue;\n        }\n        if (node.text !== \"\" || Path.isBefore(path, blockPath)) {\n            end = {\n                path,\n                offset: node.text.length\n            };\n            break;\n        }\n    }\n    return {\n        anchor: start,\n        focus: end\n    };\n};\nvar withoutNormalizing = (editor, fn)=>{\n    var value = Editor.isNormalizing(editor);\n    Editor.setNormalizing(editor, false);\n    try {\n        fn();\n    } finally{\n        Editor.setNormalizing(editor, value);\n    }\n    Editor.normalize(editor);\n};\nvar deleteText = function deleteText(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var _Editor$void, _Editor$void2;\n        var { reverse = false, unit = \"character\", distance = 1, voids = false } = options;\n        var { at = editor.selection, hanging = false } = options;\n        if (!at) {\n            return;\n        }\n        var isCollapsed = false;\n        if (Range.isRange(at) && Range.isCollapsed(at)) {\n            isCollapsed = true;\n            at = at.anchor;\n        }\n        if (Point.isPoint(at)) {\n            var furthestVoid = Editor.void(editor, {\n                at,\n                mode: \"highest\"\n            });\n            if (!voids && furthestVoid) {\n                var [, voidPath] = furthestVoid;\n                at = voidPath;\n            } else {\n                var opts = {\n                    unit,\n                    distance\n                };\n                var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);\n                at = {\n                    anchor: at,\n                    focus: target\n                };\n                hanging = true;\n            }\n        }\n        if (Path.isPath(at)) {\n            Transforms.removeNodes(editor, {\n                at,\n                voids\n            });\n            return;\n        }\n        if (Range.isCollapsed(at)) {\n            return;\n        }\n        if (!hanging) {\n            var [, _end] = Range.edges(at);\n            var endOfDoc = Editor.end(editor, []);\n            if (!Point.equals(_end, endOfDoc)) {\n                at = Editor.unhangRange(editor, at, {\n                    voids\n                });\n            }\n        }\n        var [start, end] = Range.edges(at);\n        var startBlock = Editor.above(editor, {\n            match: (n)=>Element.isElement(n) && Editor.isBlock(editor, n),\n            at: start,\n            voids\n        });\n        var endBlock = Editor.above(editor, {\n            match: (n)=>Element.isElement(n) && Editor.isBlock(editor, n),\n            at: end,\n            voids\n        });\n        var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);\n        var isSingleText = Path.equals(start.path, end.path);\n        var startNonEditable = voids ? null : (_Editor$void = Editor.void(editor, {\n            at: start,\n            mode: \"highest\"\n        })) !== null && _Editor$void !== void 0 ? _Editor$void : Editor.elementReadOnly(editor, {\n            at: start,\n            mode: \"highest\"\n        });\n        var endNonEditable = voids ? null : (_Editor$void2 = Editor.void(editor, {\n            at: end,\n            mode: \"highest\"\n        })) !== null && _Editor$void2 !== void 0 ? _Editor$void2 : Editor.elementReadOnly(editor, {\n            at: end,\n            mode: \"highest\"\n        }); // If the start or end points are inside an inline void, nudge them out.\n        if (startNonEditable) {\n            var before = Editor.before(editor, start);\n            if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n                start = before;\n            }\n        }\n        if (endNonEditable) {\n            var after = Editor.after(editor, end);\n            if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n                end = after;\n            }\n        } // Get the highest nodes that are completely inside the range, as well as\n        // the start and end nodes.\n        var matches = [];\n        var lastPath;\n        for (var entry of Editor.nodes(editor, {\n            at,\n            voids\n        })){\n            var [node, path] = entry;\n            if (lastPath && Path.compare(path, lastPath) === 0) {\n                continue;\n            }\n            if (!voids && Element.isElement(node) && (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node)) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {\n                matches.push(entry);\n                lastPath = path;\n            }\n        }\n        var pathRefs = Array.from(matches, (_ref)=>{\n            var [, p] = _ref;\n            return Editor.pathRef(editor, p);\n        });\n        var startRef = Editor.pointRef(editor, start);\n        var endRef = Editor.pointRef(editor, end);\n        var removedText = \"\";\n        if (!isSingleText && !startNonEditable) {\n            var _point = startRef.current;\n            var [_node] = Editor.leaf(editor, _point);\n            var { path: _path } = _point;\n            var { offset } = start;\n            var text = _node.text.slice(offset);\n            if (text.length > 0) {\n                editor.apply({\n                    type: \"remove_text\",\n                    path: _path,\n                    offset,\n                    text\n                });\n                removedText = text;\n            }\n        }\n        pathRefs.reverse().map((r)=>r.unref()).filter((r)=>r !== null).forEach((p)=>Transforms.removeNodes(editor, {\n                at: p,\n                voids\n            }));\n        if (!endNonEditable) {\n            var _point2 = endRef.current;\n            var [_node2] = Editor.leaf(editor, _point2);\n            var { path: _path2 } = _point2;\n            var _offset = isSingleText ? start.offset : 0;\n            var _text = _node2.text.slice(_offset, end.offset);\n            if (_text.length > 0) {\n                editor.apply({\n                    type: \"remove_text\",\n                    path: _path2,\n                    offset: _offset,\n                    text: _text\n                });\n                removedText = _text;\n            }\n        }\n        if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n            Transforms.mergeNodes(editor, {\n                at: endRef.current,\n                hanging: true,\n                voids\n            });\n        } // For Thai script, deleting N character(s) backward should delete\n        // N code point(s) instead of an entire grapheme cluster.\n        // Therefore, the remaining code points should be inserted back.\n        if (isCollapsed && reverse && unit === \"character\" && removedText.length > 1 && removedText.match(/[\\u0E00-\\u0E7F]+/)) {\n            Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));\n        }\n        var startUnref = startRef.unref();\n        var endUnref = endRef.unref();\n        var point = reverse ? startUnref || endUnref : endUnref || startUnref;\n        if (options.at == null && point) {\n            Transforms.select(editor, point);\n        }\n    });\n};\nvar insertFragment = function insertFragment(editor, fragment) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { hanging = false, voids = false } = options;\n        var { at = getDefaultInsertLocation(editor) } = options;\n        if (!fragment.length) {\n            return;\n        }\n        if (Range.isRange(at)) {\n            if (!hanging) {\n                at = Editor.unhangRange(editor, at, {\n                    voids\n                });\n            }\n            if (Range.isCollapsed(at)) {\n                at = at.anchor;\n            } else {\n                var [, end] = Range.edges(at);\n                if (!voids && Editor.void(editor, {\n                    at: end\n                })) {\n                    return;\n                }\n                var pointRef = Editor.pointRef(editor, end);\n                Transforms.delete(editor, {\n                    at\n                });\n                at = pointRef.unref();\n            }\n        } else if (Path.isPath(at)) {\n            at = Editor.start(editor, at);\n        }\n        if (!voids && Editor.void(editor, {\n            at\n        })) {\n            return;\n        } // If the insert point is at the edge of an inline node, move it outside\n        // instead since it will need to be split otherwise.\n        var inlineElementMatch = Editor.above(editor, {\n            at,\n            match: (n)=>Element.isElement(n) && Editor.isInline(editor, n),\n            mode: \"highest\",\n            voids\n        });\n        if (inlineElementMatch) {\n            var [, _inlinePath] = inlineElementMatch;\n            if (Editor.isEnd(editor, at, _inlinePath)) {\n                var after = Editor.after(editor, _inlinePath);\n                at = after;\n            } else if (Editor.isStart(editor, at, _inlinePath)) {\n                var before = Editor.before(editor, _inlinePath);\n                at = before;\n            }\n        }\n        var blockMatch = Editor.above(editor, {\n            match: (n)=>Element.isElement(n) && Editor.isBlock(editor, n),\n            at,\n            voids\n        });\n        var [, blockPath] = blockMatch;\n        var isBlockStart = Editor.isStart(editor, at, blockPath);\n        var isBlockEnd = Editor.isEnd(editor, at, blockPath);\n        var isBlockEmpty = isBlockStart && isBlockEnd;\n        var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;\n        var mergeEnd = !isBlockEnd;\n        var [, firstPath] = Node.first({\n            children: fragment\n        }, []);\n        var [, lastPath] = Node.last({\n            children: fragment\n        }, []);\n        var matches = [];\n        var matcher = (_ref)=>{\n            var [n, p] = _ref;\n            var isRoot = p.length === 0;\n            if (isRoot) {\n                return false;\n            }\n            if (isBlockEmpty) {\n                return true;\n            }\n            if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n                return false;\n            }\n            if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n                return false;\n            }\n            return true;\n        };\n        for (var entry of Node.nodes({\n            children: fragment\n        }, {\n            pass: matcher\n        })){\n            if (matcher(entry)) {\n                matches.push(entry);\n            }\n        }\n        var starts = [];\n        var middles = [];\n        var ends = [];\n        var starting = true;\n        var hasBlocks = false;\n        for (var [node] of matches){\n            if (Element.isElement(node) && !editor.isInline(node)) {\n                starting = false;\n                hasBlocks = true;\n                middles.push(node);\n            } else if (starting) {\n                starts.push(node);\n            } else {\n                ends.push(node);\n            }\n        }\n        var [inlineMatch] = Editor.nodes(editor, {\n            at,\n            match: (n)=>Text.isText(n) || Editor.isInline(editor, n),\n            mode: \"highest\",\n            voids\n        });\n        var [, inlinePath] = inlineMatch;\n        var isInlineStart = Editor.isStart(editor, at, inlinePath);\n        var isInlineEnd = Editor.isEnd(editor, at, inlinePath);\n        var middleRef = Editor.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);\n        var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);\n        Transforms.splitNodes(editor, {\n            at,\n            match: (n)=>hasBlocks ? Element.isElement(n) && Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n),\n            mode: hasBlocks ? \"lowest\" : \"highest\",\n            always: hasBlocks && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),\n            voids\n        });\n        var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);\n        Transforms.insertNodes(editor, starts, {\n            at: startRef.current,\n            match: (n)=>Text.isText(n) || Editor.isInline(editor, n),\n            mode: \"highest\",\n            voids\n        });\n        if (isBlockEmpty && !starts.length && middles.length && !ends.length) {\n            Transforms.delete(editor, {\n                at: blockPath,\n                voids\n            });\n        }\n        Transforms.insertNodes(editor, middles, {\n            at: middleRef.current,\n            match: (n)=>Element.isElement(n) && Editor.isBlock(editor, n),\n            mode: \"lowest\",\n            voids\n        });\n        Transforms.insertNodes(editor, ends, {\n            at: endRef.current,\n            match: (n)=>Text.isText(n) || Editor.isInline(editor, n),\n            mode: \"highest\",\n            voids\n        });\n        if (!options.at) {\n            var path;\n            if (ends.length > 0 && endRef.current) {\n                path = Path.previous(endRef.current);\n            } else if (middles.length > 0 && middleRef.current) {\n                path = Path.previous(middleRef.current);\n            } else if (startRef.current) {\n                path = Path.previous(startRef.current);\n            }\n            if (path) {\n                var _end = Editor.end(editor, path);\n                Transforms.select(editor, _end);\n            }\n        }\n        startRef.unref();\n        middleRef.unref();\n        endRef.unref();\n    });\n};\nvar collapse = function collapse(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { edge = \"anchor\" } = options;\n    var { selection } = editor;\n    if (!selection) {\n        return;\n    } else if (edge === \"anchor\") {\n        Transforms.select(editor, selection.anchor);\n    } else if (edge === \"focus\") {\n        Transforms.select(editor, selection.focus);\n    } else if (edge === \"start\") {\n        var [start] = Range.edges(selection);\n        Transforms.select(editor, start);\n    } else if (edge === \"end\") {\n        var [, end] = Range.edges(selection);\n        Transforms.select(editor, end);\n    }\n};\nvar deselect = (editor)=>{\n    var { selection } = editor;\n    if (selection) {\n        editor.apply({\n            type: \"set_selection\",\n            properties: selection,\n            newProperties: null\n        });\n    }\n};\nvar move = function move(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var { selection } = editor;\n    var { distance = 1, unit = \"character\", reverse = false } = options;\n    var { edge = null } = options;\n    if (!selection) {\n        return;\n    }\n    if (edge === \"start\") {\n        edge = Range.isBackward(selection) ? \"focus\" : \"anchor\";\n    }\n    if (edge === \"end\") {\n        edge = Range.isBackward(selection) ? \"anchor\" : \"focus\";\n    }\n    var { anchor, focus } = selection;\n    var opts = {\n        distance,\n        unit,\n        ignoreNonSelectable: true\n    };\n    var props = {};\n    if (edge == null || edge === \"anchor\") {\n        var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);\n        if (point) {\n            props.anchor = point;\n        }\n    }\n    if (edge == null || edge === \"focus\") {\n        var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);\n        if (_point) {\n            props.focus = _point;\n        }\n    }\n    Transforms.setSelection(editor, props);\n};\nvar select = (editor, target)=>{\n    var { selection } = editor;\n    target = Editor.range(editor, target);\n    if (selection) {\n        Transforms.setSelection(editor, target);\n        return;\n    }\n    if (!Range.isRange(target)) {\n        throw new Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(Scrubber.stringify(target)));\n    }\n    editor.apply({\n        type: \"set_selection\",\n        properties: selection,\n        newProperties: target\n    });\n};\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar setPoint = function setPoint(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var { selection } = editor;\n    var { edge = \"both\" } = options;\n    if (!selection) {\n        return;\n    }\n    if (edge === \"start\") {\n        edge = Range.isBackward(selection) ? \"focus\" : \"anchor\";\n    }\n    if (edge === \"end\") {\n        edge = Range.isBackward(selection) ? \"anchor\" : \"focus\";\n    }\n    var { anchor, focus } = selection;\n    var point = edge === \"anchor\" ? anchor : focus;\n    Transforms.setSelection(editor, {\n        [edge === \"anchor\" ? \"anchor\" : \"focus\"]: _objectSpread$1(_objectSpread$1({}, point), props)\n    });\n};\nvar setSelection = (editor, props)=>{\n    var { selection } = editor;\n    var oldProps = {};\n    var newProps = {};\n    if (!selection) {\n        return;\n    }\n    for(var k in props){\n        if (k === \"anchor\" && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === \"focus\" && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== \"anchor\" && k !== \"focus\" && props[k] !== selection[k]) {\n            oldProps[k] = selection[k];\n            newProps[k] = props[k];\n        }\n    }\n    if (Object.keys(oldProps).length > 0) {\n        editor.apply({\n            type: \"set_selection\",\n            properties: oldProps,\n            newProperties: newProps\n        });\n    }\n};\nvar insertNodes = function insertNodes(editor, nodes) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { hanging = false, voids = false, mode = \"lowest\" } = options;\n        var { at, match, select } = options;\n        if (Node.isNode(nodes)) {\n            nodes = [\n                nodes\n            ];\n        }\n        if (nodes.length === 0) {\n            return;\n        }\n        var [node] = nodes;\n        if (!at) {\n            at = getDefaultInsertLocation(editor);\n            select = true;\n        }\n        if (select == null) {\n            select = false;\n        }\n        if (Range.isRange(at)) {\n            if (!hanging) {\n                at = Editor.unhangRange(editor, at, {\n                    voids\n                });\n            }\n            if (Range.isCollapsed(at)) {\n                at = at.anchor;\n            } else {\n                var [, end] = Range.edges(at);\n                var pointRef = Editor.pointRef(editor, end);\n                Transforms.delete(editor, {\n                    at\n                });\n                at = pointRef.unref();\n            }\n        }\n        if (Point.isPoint(at)) {\n            if (match == null) {\n                if (Text.isText(node)) {\n                    match = (n)=>Text.isText(n);\n                } else if (editor.isInline(node)) {\n                    match = (n)=>Text.isText(n) || Editor.isInline(editor, n);\n                } else {\n                    match = (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n                }\n            }\n            var [entry] = Editor.nodes(editor, {\n                at: at.path,\n                match,\n                mode,\n                voids\n            });\n            if (entry) {\n                var [, matchPath] = entry;\n                var pathRef = Editor.pathRef(editor, matchPath);\n                var isAtEnd = Editor.isEnd(editor, at, matchPath);\n                Transforms.splitNodes(editor, {\n                    at,\n                    match,\n                    mode,\n                    voids\n                });\n                var path = pathRef.unref();\n                at = isAtEnd ? Path.next(path) : path;\n            } else {\n                return;\n            }\n        }\n        var parentPath = Path.parent(at);\n        var index = at[at.length - 1];\n        if (!voids && Editor.void(editor, {\n            at: parentPath\n        })) {\n            return;\n        }\n        for (var _node of nodes){\n            var _path = parentPath.concat(index);\n            index++;\n            editor.apply({\n                type: \"insert_node\",\n                path: _path,\n                node: _node\n            });\n            at = Path.next(at);\n        }\n        at = Path.previous(at);\n        if (select) {\n            var point = Editor.end(editor, at);\n            if (point) {\n                Transforms.select(editor, point);\n            }\n        }\n    });\n};\nvar liftNodes = function liftNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { at = editor.selection, mode = \"lowest\", voids = false } = options;\n        var { match } = options;\n        if (match == null) {\n            match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n        if (!at) {\n            return;\n        }\n        var matches = Editor.nodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n        });\n        var pathRefs = Array.from(matches, (_ref)=>{\n            var [, p] = _ref;\n            return Editor.pathRef(editor, p);\n        });\n        for (var pathRef of pathRefs){\n            var path = pathRef.unref();\n            if (path.length < 2) {\n                throw new Error(\"Cannot lift node at a path [\".concat(path, \"] because it has a depth of less than `2`.\"));\n            }\n            var parentNodeEntry = Editor.node(editor, Path.parent(path));\n            var [parent, parentPath] = parentNodeEntry;\n            var index = path[path.length - 1];\n            var { length } = parent.children;\n            if (length === 1) {\n                var toPath = Path.next(parentPath);\n                Transforms.moveNodes(editor, {\n                    at: path,\n                    to: toPath,\n                    voids\n                });\n                Transforms.removeNodes(editor, {\n                    at: parentPath,\n                    voids\n                });\n            } else if (index === 0) {\n                Transforms.moveNodes(editor, {\n                    at: path,\n                    to: parentPath,\n                    voids\n                });\n            } else if (index === length - 1) {\n                var _toPath = Path.next(parentPath);\n                Transforms.moveNodes(editor, {\n                    at: path,\n                    to: _toPath,\n                    voids\n                });\n            } else {\n                var splitPath = Path.next(path);\n                var _toPath2 = Path.next(parentPath);\n                Transforms.splitNodes(editor, {\n                    at: splitPath,\n                    voids\n                });\n                Transforms.moveNodes(editor, {\n                    at: path,\n                    to: _toPath2,\n                    voids\n                });\n            }\n        }\n    });\n};\nvar _excluded = [\n    \"text\"\n], _excluded2 = [\n    \"children\"\n];\nvar hasSingleChildNest = (editor, node)=>{\n    if (Element.isElement(node)) {\n        var element = node;\n        if (Editor.isVoid(editor, node)) {\n            return true;\n        } else if (element.children.length === 1) {\n            return hasSingleChildNest(editor, element.children[0]);\n        } else {\n            return false;\n        }\n    } else if (Editor.isEditor(node)) {\n        return false;\n    } else {\n        return true;\n    }\n};\nvar mergeNodes = function mergeNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { match, at = editor.selection } = options;\n        var { hanging = false, voids = false, mode = \"lowest\" } = options;\n        if (!at) {\n            return;\n        }\n        if (match == null) {\n            if (Path.isPath(at)) {\n                var [parent] = Editor.parent(editor, at);\n                match = (n)=>parent.children.includes(n);\n            } else {\n                match = (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n            }\n        }\n        if (!hanging && Range.isRange(at)) {\n            at = Editor.unhangRange(editor, at, {\n                voids\n            });\n        }\n        if (Range.isRange(at)) {\n            if (Range.isCollapsed(at)) {\n                at = at.anchor;\n            } else {\n                var [, end] = Range.edges(at);\n                var pointRef = Editor.pointRef(editor, end);\n                Transforms.delete(editor, {\n                    at\n                });\n                at = pointRef.unref();\n                if (options.at == null) {\n                    Transforms.select(editor, at);\n                }\n            }\n        }\n        var [current] = Editor.nodes(editor, {\n            at,\n            match,\n            voids,\n            mode\n        });\n        var prev = Editor.previous(editor, {\n            at,\n            match,\n            voids,\n            mode\n        });\n        if (!current || !prev) {\n            return;\n        }\n        var [node, path] = current;\n        var [prevNode, prevPath] = prev;\n        if (path.length === 0 || prevPath.length === 0) {\n            return;\n        }\n        var newPath = Path.next(prevPath);\n        var commonPath = Path.common(path, prevPath);\n        var isPreviousSibling = Path.isSibling(path, prevPath);\n        var levels = Array.from(Editor.levels(editor, {\n            at: path\n        }), (_ref)=>{\n            var [n] = _ref;\n            return n;\n        }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a\n        // result, in which case we'll want to remove it after merging.\n        var emptyAncestor = Editor.above(editor, {\n            at: path,\n            mode: \"highest\",\n            match: (n)=>levels.includes(n) && hasSingleChildNest(editor, n)\n        });\n        var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);\n        var properties;\n        var position; // Ensure that the nodes are equivalent, and figure out what the position\n        // and extra properties of the merge will be.\n        if (Text.isText(node) && Text.isText(prevNode)) {\n            var rest = _objectWithoutProperties(node, _excluded);\n            position = prevNode.text.length;\n            properties = rest;\n        } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n            var rest = _objectWithoutProperties(node, _excluded2);\n            position = prevNode.children.length;\n            properties = rest;\n        } else {\n            throw new Error(\"Cannot merge the node at path [\".concat(path, \"] with the previous sibling because it is not the same kind: \").concat(Scrubber.stringify(node), \" \").concat(Scrubber.stringify(prevNode)));\n        } // If the node isn't already the next sibling of the previous node, move\n        // it so that it is before merging.\n        if (!isPreviousSibling) {\n            Transforms.moveNodes(editor, {\n                at: path,\n                to: newPath,\n                voids\n            });\n        } // If there was going to be an empty ancestor of the node that was merged,\n        // we remove it from the tree.\n        if (emptyRef) {\n            Transforms.removeNodes(editor, {\n                at: emptyRef.current,\n                voids\n            });\n        } // If the target node that we're merging with is empty, remove it instead\n        // of merging the two. This is a common rich text editor behavior to\n        // prevent losing formatting when deleting entire nodes when you have a\n        // hanging selection.\n        // if prevNode is first child in parent,don't remove it.\n        if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === \"\" && prevPath[prevPath.length - 1] !== 0) {\n            Transforms.removeNodes(editor, {\n                at: prevPath,\n                voids\n            });\n        } else {\n            editor.apply({\n                type: \"merge_node\",\n                path: newPath,\n                position,\n                properties\n            });\n        }\n        if (emptyRef) {\n            emptyRef.unref();\n        }\n    });\n};\nvar moveNodes = (editor, options)=>{\n    Editor.withoutNormalizing(editor, ()=>{\n        var { to, at = editor.selection, mode = \"lowest\", voids = false } = options;\n        var { match } = options;\n        if (!at) {\n            return;\n        }\n        if (match == null) {\n            match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n        var toRef = Editor.pathRef(editor, to);\n        var targets = Editor.nodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n        });\n        var pathRefs = Array.from(targets, (_ref)=>{\n            var [, p] = _ref;\n            return Editor.pathRef(editor, p);\n        });\n        for (var pathRef of pathRefs){\n            var path = pathRef.unref();\n            var newPath = toRef.current;\n            if (path.length !== 0) {\n                editor.apply({\n                    type: \"move_node\",\n                    path,\n                    newPath\n                });\n            }\n            if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) {\n                // When performing a sibling move to a later index, the path at the destination is shifted\n                // to before the insertion point instead of after. To ensure our group of nodes are inserted\n                // in the correct order we increment toRef to account for that\n                toRef.current = Path.next(toRef.current);\n            }\n        }\n        toRef.unref();\n    });\n};\nvar removeNodes = function removeNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { hanging = false, voids = false, mode = \"lowest\" } = options;\n        var { at = editor.selection, match } = options;\n        if (!at) {\n            return;\n        }\n        if (match == null) {\n            match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n        if (!hanging && Range.isRange(at)) {\n            at = Editor.unhangRange(editor, at, {\n                voids\n            });\n        }\n        var depths = Editor.nodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n        });\n        var pathRefs = Array.from(depths, (_ref)=>{\n            var [, p] = _ref;\n            return Editor.pathRef(editor, p);\n        });\n        for (var pathRef of pathRefs){\n            var path = pathRef.unref();\n            if (path) {\n                var [node] = Editor.node(editor, path);\n                editor.apply({\n                    type: \"remove_node\",\n                    path,\n                    node\n                });\n            }\n        }\n    });\n};\nvar setNodes = function setNodes(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { match, at = editor.selection, compare, merge } = options;\n        var { hanging = false, mode = \"lowest\", split = false, voids = false } = options;\n        if (!at) {\n            return;\n        }\n        if (match == null) {\n            match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n        if (!hanging && Range.isRange(at)) {\n            at = Editor.unhangRange(editor, at, {\n                voids\n            });\n        }\n        if (split && Range.isRange(at)) {\n            if (Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) {\n                // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n                // set that won't get normalized away\n                return;\n            }\n            var rangeRef = Editor.rangeRef(editor, at, {\n                affinity: \"inward\"\n            });\n            var [start, end] = Range.edges(at);\n            var splitMode = mode === \"lowest\" ? \"lowest\" : \"highest\";\n            var endAtEndOfNode = Editor.isEnd(editor, end, end.path);\n            Transforms.splitNodes(editor, {\n                at: end,\n                match,\n                mode: splitMode,\n                voids,\n                always: !endAtEndOfNode\n            });\n            var startAtStartOfNode = Editor.isStart(editor, start, start.path);\n            Transforms.splitNodes(editor, {\n                at: start,\n                match,\n                mode: splitMode,\n                voids,\n                always: !startAtStartOfNode\n            });\n            at = rangeRef.unref();\n            if (options.at == null) {\n                Transforms.select(editor, at);\n            }\n        }\n        if (!compare) {\n            compare = (prop, nodeProp)=>prop !== nodeProp;\n        }\n        for (var [node, path] of Editor.nodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n        })){\n            var properties = {};\n            var newProperties = {}; // You can't set properties on the editor node.\n            if (path.length === 0) {\n                continue;\n            }\n            var hasChanges = false;\n            for(var k in props){\n                if (k === \"children\" || k === \"text\") {\n                    continue;\n                }\n                if (compare(props[k], node[k])) {\n                    hasChanges = true; // Omit new properties from the old properties list\n                    if (node.hasOwnProperty(k)) properties[k] = node[k]; // Omit properties that have been removed from the new properties list\n                    if (merge) {\n                        if (props[k] != null) newProperties[k] = merge(node[k], props[k]);\n                    } else {\n                        if (props[k] != null) newProperties[k] = props[k];\n                    }\n                }\n            }\n            if (hasChanges) {\n                editor.apply({\n                    type: \"set_node\",\n                    path,\n                    properties,\n                    newProperties\n                });\n            }\n        }\n    });\n};\n/**\r\n * Convert a range into a point by deleting it's content.\r\n */ var deleteRange = (editor, range)=>{\n    if (Range.isCollapsed(range)) {\n        return range.anchor;\n    } else {\n        var [, end] = Range.edges(range);\n        var pointRef = Editor.pointRef(editor, end);\n        Transforms.delete(editor, {\n            at: range\n        });\n        return pointRef.unref();\n    }\n};\nvar splitNodes = function splitNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { mode = \"lowest\", voids = false } = options;\n        var { match, at = editor.selection, height = 0, always = false } = options;\n        if (match == null) {\n            match = (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n        if (Range.isRange(at)) {\n            at = deleteRange(editor, at);\n        } // If the target is a path, the default height-skipping and position\n        // counters need to account for us potentially splitting at a non-leaf.\n        if (Path.isPath(at)) {\n            var path = at;\n            var point = Editor.point(editor, path);\n            var [parent] = Editor.parent(editor, path);\n            match = (n)=>n === parent;\n            height = point.path.length - path.length + 1;\n            at = point;\n            always = true;\n        }\n        if (!at) {\n            return;\n        }\n        var beforeRef = Editor.pointRef(editor, at, {\n            affinity: \"backward\"\n        });\n        var afterRef;\n        try {\n            var [highest] = Editor.nodes(editor, {\n                at,\n                match,\n                mode,\n                voids\n            });\n            if (!highest) {\n                return;\n            }\n            var voidMatch = Editor.void(editor, {\n                at,\n                mode: \"highest\"\n            });\n            var nudge = 0;\n            if (!voids && voidMatch) {\n                var [voidNode, voidPath] = voidMatch;\n                if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n                    var after = Editor.after(editor, voidPath);\n                    if (!after) {\n                        var text = {\n                            text: \"\"\n                        };\n                        var afterPath = Path.next(voidPath);\n                        Transforms.insertNodes(editor, text, {\n                            at: afterPath,\n                            voids\n                        });\n                        after = Editor.point(editor, afterPath);\n                    }\n                    at = after;\n                    always = true;\n                }\n                var siblingHeight = at.path.length - voidPath.length;\n                height = siblingHeight + 1;\n                always = true;\n            }\n            afterRef = Editor.pointRef(editor, at);\n            var depth = at.path.length - height;\n            var [, highestPath] = highest;\n            var lowestPath = at.path.slice(0, depth);\n            var position = height === 0 ? at.offset : at.path[depth] + nudge;\n            for (var [node, _path] of Editor.levels(editor, {\n                at: lowestPath,\n                reverse: true,\n                voids\n            })){\n                var split = false;\n                if (_path.length < highestPath.length || _path.length === 0 || !voids && Element.isElement(node) && Editor.isVoid(editor, node)) {\n                    break;\n                }\n                var _point = beforeRef.current;\n                var isEnd = Editor.isEnd(editor, _point, _path);\n                if (always || !beforeRef || !Editor.isEdge(editor, _point, _path)) {\n                    split = true;\n                    var properties = Node.extractProps(node);\n                    editor.apply({\n                        type: \"split_node\",\n                        path: _path,\n                        position,\n                        properties\n                    });\n                }\n                position = _path[_path.length - 1] + (split || isEnd ? 1 : 0);\n            }\n            if (options.at == null) {\n                var _point2 = afterRef.current || Editor.end(editor, []);\n                Transforms.select(editor, _point2);\n            }\n        } finally{\n            var _afterRef;\n            beforeRef.unref();\n            (_afterRef = afterRef) === null || _afterRef === void 0 ? void 0 : _afterRef.unref();\n        }\n    });\n};\nvar unsetNodes = function unsetNodes(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!Array.isArray(props)) {\n        props = [\n            props\n        ];\n    }\n    var obj = {};\n    for (var key of props){\n        obj[key] = null;\n    }\n    Transforms.setNodes(editor, obj, options);\n};\nvar unwrapNodes = function unwrapNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { mode = \"lowest\", split = false, voids = false } = options;\n        var { at = editor.selection, match } = options;\n        if (!at) {\n            return;\n        }\n        if (match == null) {\n            match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n        }\n        if (Path.isPath(at)) {\n            at = Editor.range(editor, at);\n        }\n        var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;\n        var matches = Editor.nodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n        });\n        var pathRefs = Array.from(matches, (_ref)=>{\n            var [, p] = _ref;\n            return Editor.pathRef(editor, p);\n        } // unwrapNode will call liftNode which does not support splitting the node when nested.\n        ).reverse();\n        var _loop = function _loop(pathRef) {\n            var path = pathRef.unref();\n            var [node] = Editor.node(editor, path);\n            var range = Editor.range(editor, path);\n            if (split && rangeRef) {\n                range = Range.intersection(rangeRef.current, range);\n            }\n            Transforms.liftNodes(editor, {\n                at: range,\n                match: (n)=>Element.isAncestor(node) && node.children.includes(n),\n                voids\n            });\n        };\n        for (var pathRef of pathRefs){\n            _loop(pathRef);\n        }\n        if (rangeRef) {\n            rangeRef.unref();\n        }\n    });\n};\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar wrapNodes = function wrapNodes(editor, element) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, ()=>{\n        var { mode = \"lowest\", split = false, voids = false } = options;\n        var { match, at = editor.selection } = options;\n        if (!at) {\n            return;\n        }\n        if (match == null) {\n            if (Path.isPath(at)) {\n                match = matchPath(editor, at);\n            } else if (editor.isInline(element)) {\n                match = (n)=>Element.isElement(n) && Editor.isInline(editor, n) || Text.isText(n);\n            } else {\n                match = (n)=>Element.isElement(n) && Editor.isBlock(editor, n);\n            }\n        }\n        if (split && Range.isRange(at)) {\n            var [start, end] = Range.edges(at);\n            var rangeRef = Editor.rangeRef(editor, at, {\n                affinity: \"inward\"\n            });\n            Transforms.splitNodes(editor, {\n                at: end,\n                match,\n                voids\n            });\n            Transforms.splitNodes(editor, {\n                at: start,\n                match,\n                voids\n            });\n            at = rangeRef.unref();\n            if (options.at == null) {\n                Transforms.select(editor, at);\n            }\n        }\n        var roots = Array.from(Editor.nodes(editor, {\n            at,\n            match: editor.isInline(element) ? (n)=>Element.isElement(n) && Editor.isBlock(editor, n) : (n)=>Editor.isEditor(n),\n            mode: \"lowest\",\n            voids\n        }));\n        for (var [, rootPath] of roots){\n            var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;\n            if (!a) {\n                continue;\n            }\n            var matches = Array.from(Editor.nodes(editor, {\n                at: a,\n                match,\n                mode,\n                voids\n            }));\n            if (matches.length > 0) {\n                var _ret = function() {\n                    var [first] = matches;\n                    var last = matches[matches.length - 1];\n                    var [, firstPath] = first;\n                    var [, lastPath] = last;\n                    if (firstPath.length === 0 && lastPath.length === 0) {\n                        // if there's no matching parent - usually means the node is an editor - don't do anything\n                        return \"continue\";\n                    }\n                    var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);\n                    var range = Editor.range(editor, firstPath, lastPath);\n                    var commonNodeEntry = Editor.node(editor, commonPath);\n                    var [commonNode] = commonNodeEntry;\n                    var depth = commonPath.length + 1;\n                    var wrapperPath = Path.next(lastPath.slice(0, depth));\n                    var wrapper = _objectSpread(_objectSpread({}, element), {}, {\n                        children: []\n                    });\n                    Transforms.insertNodes(editor, wrapper, {\n                        at: wrapperPath,\n                        voids\n                    });\n                    Transforms.moveNodes(editor, {\n                        at: range,\n                        match: (n)=>Element.isAncestor(commonNode) && commonNode.children.includes(n),\n                        to: wrapperPath.concat(0),\n                        voids\n                    });\n                }();\n                if (_ret === \"continue\") continue;\n            }\n        }\n    });\n};\n/**\r\n * Create a new Slate `Editor` object.\r\n */ var createEditor = ()=>{\n    var editor = {\n        children: [],\n        operations: [],\n        selection: null,\n        marks: null,\n        isElementReadOnly: ()=>false,\n        isInline: ()=>false,\n        isSelectable: ()=>true,\n        isVoid: ()=>false,\n        markableVoid: ()=>false,\n        onChange: ()=>{},\n        // Core\n        apply: function apply$1() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return apply(editor, ...args);\n        },\n        // Editor\n        addMark: function addMark$1() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            return addMark(editor, ...args);\n        },\n        deleteBackward: function deleteBackward$1() {\n            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                args[_key3] = arguments[_key3];\n            }\n            return deleteBackward(editor, ...args);\n        },\n        deleteForward: function deleteForward$1() {\n            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                args[_key4] = arguments[_key4];\n            }\n            return deleteForward(editor, ...args);\n        },\n        deleteFragment: function deleteFragment$1() {\n            for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++){\n                args[_key5] = arguments[_key5];\n            }\n            return deleteFragment(editor, ...args);\n        },\n        getFragment: function getFragment$1() {\n            for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++){\n                args[_key6] = arguments[_key6];\n            }\n            return getFragment(editor, ...args);\n        },\n        insertBreak: function insertBreak$1() {\n            for(var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++){\n                args[_key7] = arguments[_key7];\n            }\n            return insertBreak(editor, ...args);\n        },\n        insertSoftBreak: function insertSoftBreak$1() {\n            for(var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++){\n                args[_key8] = arguments[_key8];\n            }\n            return insertSoftBreak(editor, ...args);\n        },\n        insertFragment: function insertFragment$1() {\n            for(var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++){\n                args[_key9] = arguments[_key9];\n            }\n            return insertFragment(editor, ...args);\n        },\n        insertNode: function insertNode$1() {\n            for(var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++){\n                args[_key10] = arguments[_key10];\n            }\n            return insertNode(editor, ...args);\n        },\n        insertText: function insertText$1() {\n            for(var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++){\n                args[_key11] = arguments[_key11];\n            }\n            return insertText(editor, ...args);\n        },\n        normalizeNode: function normalizeNode$1() {\n            for(var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++){\n                args[_key12] = arguments[_key12];\n            }\n            return normalizeNode(editor, ...args);\n        },\n        removeMark: function removeMark$1() {\n            for(var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++){\n                args[_key13] = arguments[_key13];\n            }\n            return removeMark(editor, ...args);\n        },\n        getDirtyPaths: function getDirtyPaths$1() {\n            for(var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++){\n                args[_key14] = arguments[_key14];\n            }\n            return getDirtyPaths(editor, ...args);\n        },\n        shouldNormalize: function shouldNormalize$1() {\n            for(var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++){\n                args[_key15] = arguments[_key15];\n            }\n            return shouldNormalize(editor, ...args);\n        },\n        // Editor interface\n        above: function above$1() {\n            for(var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++){\n                args[_key16] = arguments[_key16];\n            }\n            return above(editor, ...args);\n        },\n        after: function after$1() {\n            for(var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++){\n                args[_key17] = arguments[_key17];\n            }\n            return after(editor, ...args);\n        },\n        before: function before$1() {\n            for(var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++){\n                args[_key18] = arguments[_key18];\n            }\n            return before(editor, ...args);\n        },\n        collapse: function collapse$1() {\n            for(var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++){\n                args[_key19] = arguments[_key19];\n            }\n            return collapse(editor, ...args);\n        },\n        delete: function _delete() {\n            for(var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++){\n                args[_key20] = arguments[_key20];\n            }\n            return deleteText(editor, ...args);\n        },\n        deselect: function deselect$1() {\n            for(var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++){\n                args[_key21] = arguments[_key21];\n            }\n            return deselect(editor, ...args);\n        },\n        edges: function edges$1() {\n            for(var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++){\n                args[_key22] = arguments[_key22];\n            }\n            return edges(editor, ...args);\n        },\n        elementReadOnly: function elementReadOnly$1() {\n            for(var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++){\n                args[_key23] = arguments[_key23];\n            }\n            return elementReadOnly(editor, ...args);\n        },\n        end: function end$1() {\n            for(var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++){\n                args[_key24] = arguments[_key24];\n            }\n            return end(editor, ...args);\n        },\n        first: function first$1() {\n            for(var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++){\n                args[_key25] = arguments[_key25];\n            }\n            return first(editor, ...args);\n        },\n        fragment: function fragment$1() {\n            for(var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++){\n                args[_key26] = arguments[_key26];\n            }\n            return fragment(editor, ...args);\n        },\n        getMarks: function getMarks() {\n            for(var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++){\n                args[_key27] = arguments[_key27];\n            }\n            return marks(editor, ...args);\n        },\n        hasBlocks: function hasBlocks$1() {\n            for(var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++){\n                args[_key28] = arguments[_key28];\n            }\n            return hasBlocks(editor, ...args);\n        },\n        hasInlines: function hasInlines$1() {\n            for(var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++){\n                args[_key29] = arguments[_key29];\n            }\n            return hasInlines(editor, ...args);\n        },\n        hasPath: function hasPath$1() {\n            for(var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++){\n                args[_key30] = arguments[_key30];\n            }\n            return hasPath(editor, ...args);\n        },\n        hasTexts: function hasTexts$1() {\n            for(var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++){\n                args[_key31] = arguments[_key31];\n            }\n            return hasTexts(editor, ...args);\n        },\n        insertNodes: function insertNodes$1() {\n            for(var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++){\n                args[_key32] = arguments[_key32];\n            }\n            return insertNodes(editor, ...args);\n        },\n        isBlock: function isBlock$1() {\n            for(var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++){\n                args[_key33] = arguments[_key33];\n            }\n            return isBlock(editor, ...args);\n        },\n        isEdge: function isEdge$1() {\n            for(var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++){\n                args[_key34] = arguments[_key34];\n            }\n            return isEdge(editor, ...args);\n        },\n        isEmpty: function isEmpty$1() {\n            for(var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++){\n                args[_key35] = arguments[_key35];\n            }\n            return isEmpty(editor, ...args);\n        },\n        isEnd: function isEnd$1() {\n            for(var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++){\n                args[_key36] = arguments[_key36];\n            }\n            return isEnd(editor, ...args);\n        },\n        isNormalizing: function isNormalizing$1() {\n            for(var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++){\n                args[_key37] = arguments[_key37];\n            }\n            return isNormalizing(editor, ...args);\n        },\n        isStart: function isStart$1() {\n            for(var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++){\n                args[_key38] = arguments[_key38];\n            }\n            return isStart(editor, ...args);\n        },\n        last: function last$1() {\n            for(var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++){\n                args[_key39] = arguments[_key39];\n            }\n            return last(editor, ...args);\n        },\n        leaf: function leaf$1() {\n            for(var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++){\n                args[_key40] = arguments[_key40];\n            }\n            return leaf(editor, ...args);\n        },\n        levels: function levels$1() {\n            for(var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++){\n                args[_key41] = arguments[_key41];\n            }\n            return levels(editor, ...args);\n        },\n        liftNodes: function liftNodes$1() {\n            for(var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++){\n                args[_key42] = arguments[_key42];\n            }\n            return liftNodes(editor, ...args);\n        },\n        mergeNodes: function mergeNodes$1() {\n            for(var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++){\n                args[_key43] = arguments[_key43];\n            }\n            return mergeNodes(editor, ...args);\n        },\n        move: function move$1() {\n            for(var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++){\n                args[_key44] = arguments[_key44];\n            }\n            return move(editor, ...args);\n        },\n        moveNodes: function moveNodes$1() {\n            for(var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++){\n                args[_key45] = arguments[_key45];\n            }\n            return moveNodes(editor, ...args);\n        },\n        next: function next$1() {\n            for(var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++){\n                args[_key46] = arguments[_key46];\n            }\n            return next(editor, ...args);\n        },\n        node: function node$1() {\n            for(var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++){\n                args[_key47] = arguments[_key47];\n            }\n            return node(editor, ...args);\n        },\n        nodes: function nodes$1() {\n            for(var _len48 = arguments.length, args = new Array(_len48), _key48 = 0; _key48 < _len48; _key48++){\n                args[_key48] = arguments[_key48];\n            }\n            return nodes(editor, ...args);\n        },\n        normalize: function normalize$1() {\n            for(var _len49 = arguments.length, args = new Array(_len49), _key49 = 0; _key49 < _len49; _key49++){\n                args[_key49] = arguments[_key49];\n            }\n            return normalize(editor, ...args);\n        },\n        parent: function parent$1() {\n            for(var _len50 = arguments.length, args = new Array(_len50), _key50 = 0; _key50 < _len50; _key50++){\n                args[_key50] = arguments[_key50];\n            }\n            return parent(editor, ...args);\n        },\n        path: function path$1() {\n            for(var _len51 = arguments.length, args = new Array(_len51), _key51 = 0; _key51 < _len51; _key51++){\n                args[_key51] = arguments[_key51];\n            }\n            return path(editor, ...args);\n        },\n        pathRef: function pathRef$1() {\n            for(var _len52 = arguments.length, args = new Array(_len52), _key52 = 0; _key52 < _len52; _key52++){\n                args[_key52] = arguments[_key52];\n            }\n            return pathRef(editor, ...args);\n        },\n        pathRefs: function pathRefs$1() {\n            for(var _len53 = arguments.length, args = new Array(_len53), _key53 = 0; _key53 < _len53; _key53++){\n                args[_key53] = arguments[_key53];\n            }\n            return pathRefs(editor, ...args);\n        },\n        point: function point$1() {\n            for(var _len54 = arguments.length, args = new Array(_len54), _key54 = 0; _key54 < _len54; _key54++){\n                args[_key54] = arguments[_key54];\n            }\n            return point(editor, ...args);\n        },\n        pointRef: function pointRef$1() {\n            for(var _len55 = arguments.length, args = new Array(_len55), _key55 = 0; _key55 < _len55; _key55++){\n                args[_key55] = arguments[_key55];\n            }\n            return pointRef(editor, ...args);\n        },\n        pointRefs: function pointRefs$1() {\n            for(var _len56 = arguments.length, args = new Array(_len56), _key56 = 0; _key56 < _len56; _key56++){\n                args[_key56] = arguments[_key56];\n            }\n            return pointRefs(editor, ...args);\n        },\n        positions: function positions$1() {\n            for(var _len57 = arguments.length, args = new Array(_len57), _key57 = 0; _key57 < _len57; _key57++){\n                args[_key57] = arguments[_key57];\n            }\n            return positions(editor, ...args);\n        },\n        previous: function previous$1() {\n            for(var _len58 = arguments.length, args = new Array(_len58), _key58 = 0; _key58 < _len58; _key58++){\n                args[_key58] = arguments[_key58];\n            }\n            return previous(editor, ...args);\n        },\n        range: function range$1() {\n            for(var _len59 = arguments.length, args = new Array(_len59), _key59 = 0; _key59 < _len59; _key59++){\n                args[_key59] = arguments[_key59];\n            }\n            return range(editor, ...args);\n        },\n        rangeRef: function rangeRef$1() {\n            for(var _len60 = arguments.length, args = new Array(_len60), _key60 = 0; _key60 < _len60; _key60++){\n                args[_key60] = arguments[_key60];\n            }\n            return rangeRef(editor, ...args);\n        },\n        rangeRefs: function rangeRefs$1() {\n            for(var _len61 = arguments.length, args = new Array(_len61), _key61 = 0; _key61 < _len61; _key61++){\n                args[_key61] = arguments[_key61];\n            }\n            return rangeRefs(editor, ...args);\n        },\n        removeNodes: function removeNodes$1() {\n            for(var _len62 = arguments.length, args = new Array(_len62), _key62 = 0; _key62 < _len62; _key62++){\n                args[_key62] = arguments[_key62];\n            }\n            return removeNodes(editor, ...args);\n        },\n        select: function select$1() {\n            for(var _len63 = arguments.length, args = new Array(_len63), _key63 = 0; _key63 < _len63; _key63++){\n                args[_key63] = arguments[_key63];\n            }\n            return select(editor, ...args);\n        },\n        setNodes: function setNodes$1() {\n            for(var _len64 = arguments.length, args = new Array(_len64), _key64 = 0; _key64 < _len64; _key64++){\n                args[_key64] = arguments[_key64];\n            }\n            return setNodes(editor, ...args);\n        },\n        setNormalizing: function setNormalizing$1() {\n            for(var _len65 = arguments.length, args = new Array(_len65), _key65 = 0; _key65 < _len65; _key65++){\n                args[_key65] = arguments[_key65];\n            }\n            return setNormalizing(editor, ...args);\n        },\n        setPoint: function setPoint$1() {\n            for(var _len66 = arguments.length, args = new Array(_len66), _key66 = 0; _key66 < _len66; _key66++){\n                args[_key66] = arguments[_key66];\n            }\n            return setPoint(editor, ...args);\n        },\n        setSelection: function setSelection$1() {\n            for(var _len67 = arguments.length, args = new Array(_len67), _key67 = 0; _key67 < _len67; _key67++){\n                args[_key67] = arguments[_key67];\n            }\n            return setSelection(editor, ...args);\n        },\n        splitNodes: function splitNodes$1() {\n            for(var _len68 = arguments.length, args = new Array(_len68), _key68 = 0; _key68 < _len68; _key68++){\n                args[_key68] = arguments[_key68];\n            }\n            return splitNodes(editor, ...args);\n        },\n        start: function start$1() {\n            for(var _len69 = arguments.length, args = new Array(_len69), _key69 = 0; _key69 < _len69; _key69++){\n                args[_key69] = arguments[_key69];\n            }\n            return start(editor, ...args);\n        },\n        string: function string$1() {\n            for(var _len70 = arguments.length, args = new Array(_len70), _key70 = 0; _key70 < _len70; _key70++){\n                args[_key70] = arguments[_key70];\n            }\n            return string(editor, ...args);\n        },\n        unhangRange: function unhangRange$1() {\n            for(var _len71 = arguments.length, args = new Array(_len71), _key71 = 0; _key71 < _len71; _key71++){\n                args[_key71] = arguments[_key71];\n            }\n            return unhangRange(editor, ...args);\n        },\n        unsetNodes: function unsetNodes$1() {\n            for(var _len72 = arguments.length, args = new Array(_len72), _key72 = 0; _key72 < _len72; _key72++){\n                args[_key72] = arguments[_key72];\n            }\n            return unsetNodes(editor, ...args);\n        },\n        unwrapNodes: function unwrapNodes$1() {\n            for(var _len73 = arguments.length, args = new Array(_len73), _key73 = 0; _key73 < _len73; _key73++){\n                args[_key73] = arguments[_key73];\n            }\n            return unwrapNodes(editor, ...args);\n        },\n        void: function _void() {\n            for(var _len74 = arguments.length, args = new Array(_len74), _key74 = 0; _key74 < _len74; _key74++){\n                args[_key74] = arguments[_key74];\n            }\n            return getVoid(editor, ...args);\n        },\n        withoutNormalizing: function withoutNormalizing$1() {\n            for(var _len75 = arguments.length, args = new Array(_len75), _key75 = 0; _key75 < _len75; _key75++){\n                args[_key75] = arguments[_key75];\n            }\n            return withoutNormalizing(editor, ...args);\n        },\n        wrapNodes: function wrapNodes$1() {\n            for(var _len76 = arguments.length, args = new Array(_len76), _key76 = 0; _key76 < _len76; _key76++){\n                args[_key76] = arguments[_key76];\n            }\n            return wrapNodes(editor, ...args);\n        }\n    };\n    return editor;\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/slate/dist/index.es.js\n");

/***/ })

};
;