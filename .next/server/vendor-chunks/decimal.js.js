"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/decimal.js";
exports.ids = ["vendor-chunks/decimal.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/decimal.js/decimal.js":
/*!********************************************!*\
  !*** ./node_modules/decimal.js/decimal.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n(function(globalScope) {\n    \"use strict\";\n    /*!\r\n   *  decimal.js v10.4.3\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */ // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n    // The maximum exponent magnitude.\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n    var EXP_LIMIT = 9e15, // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n    MAX_DIGITS = 1e9, // Base conversion alphabet.\n    NUMERALS = \"0123456789abcdef\", // The natural logarithm of 10 (1025 digits).\n    LN10 = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", // Pi (1025 digits).\n    PI = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", // The initial configuration properties of the Decimal constructor.\n    DEFAULTS = {\n        // These values must be integers within the stated ranges (inclusive).\n        // Most of these values can be changed at run-time using the `Decimal.config` method.\n        // The maximum number of significant digits of the result of a calculation or base conversion.\n        // E.g. `Decimal.config({ precision: 20 });`\n        precision: 20,\n        // The rounding mode used when rounding to `precision`.\n        //\n        // ROUND_UP         0 Away from zero.\n        // ROUND_DOWN       1 Towards zero.\n        // ROUND_CEIL       2 Towards +Infinity.\n        // ROUND_FLOOR      3 Towards -Infinity.\n        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n        //\n        // E.g.\n        // `Decimal.rounding = 4;`\n        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n        rounding: 4,\n        // The modulo mode used when calculating the modulus: a mod n.\n        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n        // The remainder (r) is calculated as: r = a - n * q.\n        //\n        // UP         0 The remainder is positive if the dividend is negative, else is negative.\n        // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n        // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n        // HALF_EVEN  6 The IEEE 754 remainder function.\n        // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n        //\n        // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n        // division (9) are commonly used for the modulus operation. The other rounding modes can also\n        // be used, but they may not give useful results.\n        modulo: 1,\n        // The exponent value at and beneath which `toString` returns exponential notation.\n        // JavaScript numbers: -7\n        toExpNeg: -7,\n        // The exponent value at and above which `toString` returns exponential notation.\n        // JavaScript numbers: 21\n        toExpPos: 21,\n        // The minimum exponent value, beneath which underflow to zero occurs.\n        // JavaScript numbers: -324  (5e-324)\n        minE: -EXP_LIMIT,\n        // The maximum exponent value, above which overflow to Infinity occurs.\n        // JavaScript numbers: 308  (1.7976931348623157e+308)\n        maxE: EXP_LIMIT,\n        // Whether to use cryptographically-secure random number generation, if available.\n        crypto: false // true/false\n    }, // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n    Decimal, inexact, noConflict, quadrant, external = true, decimalError = \"[DecimalError] \", invalidArgument = decimalError + \"Invalid argument: \", precisionLimitExceeded = decimalError + \"Precision limit exceeded\", cryptoUnavailable = decimalError + \"crypto unavailable\", tag = \"[object Decimal]\", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, // Decimal.prototype object\n    P = {\n        toStringTag: tag\n    };\n    // Decimal prototype methods\n    /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */ /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */ P.absoluteValue = P.abs = function() {\n        var x = new this.constructor(this);\n        if (x.s < 0) x.s = 1;\n        return finalise(x);\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */ P.ceil = function() {\n        return finalise(new this.constructor(this), this.e + 1, 2);\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */ P.clampedTo = P.clamp = function(min, max) {\n        var k, x = this, Ctor = x.constructor;\n        min = new Ctor(min);\n        max = new Ctor(max);\n        if (!min.s || !max.s) return new Ctor(NaN);\n        if (min.gt(max)) throw Error(invalidArgument + max);\n        k = x.cmp(min);\n        return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n    };\n    /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */ P.comparedTo = P.cmp = function(y) {\n        var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;\n        // Either NaN or ±Infinity?\n        if (!xd || !yd) {\n            return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n        }\n        // Either zero?\n        if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n        // Signs differ?\n        if (xs !== ys) return xs;\n        // Compare exponents.\n        if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n        xdL = xd.length;\n        ydL = yd.length;\n        // Compare digit by digit.\n        for(i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i){\n            if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n        }\n        // Compare lengths.\n        return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n    };\n    /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */ P.cosine = P.cos = function() {\n        var pr, rm, x = this, Ctor = x.constructor;\n        if (!x.d) return new Ctor(NaN);\n        // cos(0) = cos(-0) = 1\n        if (!x.d[0]) return new Ctor(1);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n        Ctor.rounding = 1;\n        x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n    };\n    /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */ P.cubeRoot = P.cbrt = function() {\n        var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;\n        if (!x.isFinite() || x.isZero()) return new Ctor(x);\n        external = false;\n        // Initial estimate.\n        s = x.s * mathpow(x.s * x, 1 / 3);\n        // Math.cbrt underflow/overflow?\n        // Pass x to Math.pow as integer, then adjust the exponent of the result.\n        if (!s || Math.abs(s) == 1 / 0) {\n            n = digitsToString(x.d);\n            e = x.e;\n            // Adjust n exponent so it is a multiple of 3 away from x exponent.\n            if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? \"0\" : \"00\";\n            s = mathpow(n, 1 / 3);\n            // Rarely, e may be one less than the result exponent value.\n            e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n            if (s == 1 / 0) {\n                n = \"5e\" + e;\n            } else {\n                n = s.toExponential();\n                n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n            }\n            r = new Ctor(n);\n            r.s = x.s;\n        } else {\n            r = new Ctor(s.toString());\n        }\n        sd = (e = Ctor.precision) + 3;\n        // Halley's method.\n        // TODO? Compare Newton's method.\n        for(;;){\n            t = r;\n            t3 = t.times(t).times(t);\n            t3plusx = t3.plus(x);\n            r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n            // TODO? Replace with for-loop and checkRoundingDigits.\n            if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n                n = n.slice(sd - 3, sd + 1);\n                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n                // , i.e. approaching a rounding boundary, continue the iteration.\n                if (n == \"9999\" || !rep && n == \"4999\") {\n                    // On the first iteration only, check to see if rounding up gives the exact result as the\n                    // nines may infinitely repeat.\n                    if (!rep) {\n                        finalise(t, e + 1, 0);\n                        if (t.times(t).times(t).eq(x)) {\n                            r = t;\n                            break;\n                        }\n                    }\n                    sd += 4;\n                    rep = 1;\n                } else {\n                    // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n                    // If not, then there are further digits and m will be truthy.\n                    if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                        // Truncate to the first rounding digit.\n                        finalise(r, e + 1, 1);\n                        m = !r.times(r).times(r).eq(x);\n                    }\n                    break;\n                }\n            }\n        }\n        external = true;\n        return finalise(r, e, Ctor.rounding, m);\n    };\n    /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */ P.decimalPlaces = P.dp = function() {\n        var w, d = this.d, n = NaN;\n        if (d) {\n            w = d.length - 1;\n            n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n            // Subtract the number of trailing zeros of the last word.\n            w = d[w];\n            if (w) for(; w % 10 == 0; w /= 10)n--;\n            if (n < 0) n = 0;\n        }\n        return n;\n    };\n    /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */ P.dividedBy = P.div = function(y) {\n        return divide(this, new this.constructor(y));\n    };\n    /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */ P.dividedToIntegerBy = P.divToInt = function(y) {\n        var x = this, Ctor = x.constructor;\n        return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n    };\n    /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */ P.equals = P.eq = function(y) {\n        return this.cmp(y) === 0;\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */ P.floor = function() {\n        return finalise(new this.constructor(this), this.e + 1, 3);\n    };\n    /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */ P.greaterThan = P.gt = function(y) {\n        return this.cmp(y) > 0;\n    };\n    /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */ P.greaterThanOrEqualTo = P.gte = function(y) {\n        var k = this.cmp(y);\n        return k == 1 || k === 0;\n    };\n    /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */ P.hyperbolicCosine = P.cosh = function() {\n        var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);\n        if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n        if (x.isZero()) return one;\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n        Ctor.rounding = 1;\n        len = x.d.length;\n        // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n        // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n        // Estimate the optimum number of times to use the argument reduction.\n        // TODO? Estimation reused from cosine() and may not be optimal here.\n        if (len < 32) {\n            k = Math.ceil(len / 3);\n            n = (1 / tinyPow(4, k)).toString();\n        } else {\n            k = 16;\n            n = \"2.3283064365386962890625e-10\";\n        }\n        x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n        // Reverse argument reduction\n        var cosh2_x, i = k, d8 = new Ctor(8);\n        for(; i--;){\n            cosh2_x = x.times(x);\n            x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n        }\n        return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n    };\n    /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */ P.hyperbolicSine = P.sinh = function() {\n        var k, pr, rm, len, x = this, Ctor = x.constructor;\n        if (!x.isFinite() || x.isZero()) return new Ctor(x);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n        Ctor.rounding = 1;\n        len = x.d.length;\n        if (len < 3) {\n            x = taylorSeries(Ctor, 2, x, x, true);\n        } else {\n            // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n            // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n            // 3 multiplications and 1 addition\n            // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n            // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n            // 4 multiplications and 2 additions\n            // Estimate the optimum number of times to use the argument reduction.\n            k = 1.4 * Math.sqrt(len);\n            k = k > 16 ? 16 : k | 0;\n            x = x.times(1 / tinyPow(5, k));\n            x = taylorSeries(Ctor, 2, x, x, true);\n            // Reverse argument reduction\n            var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n            for(; k--;){\n                sinh2_x = x.times(x);\n                x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n            }\n        }\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return finalise(x, pr, rm, true);\n    };\n    /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */ P.hyperbolicTangent = P.tanh = function() {\n        var pr, rm, x = this, Ctor = x.constructor;\n        if (!x.isFinite()) return new Ctor(x.s);\n        if (x.isZero()) return new Ctor(x);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + 7;\n        Ctor.rounding = 1;\n        return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n    };\n    /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */ P.inverseCosine = P.acos = function() {\n        var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;\n        if (k !== -1) {\n            return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);\n        }\n        if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n        // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n        Ctor.precision = pr + 6;\n        Ctor.rounding = 1;\n        x = x.asin();\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return halfPi.minus(x);\n    };\n    /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */ P.inverseHyperbolicCosine = P.acosh = function() {\n        var pr, rm, x = this, Ctor = x.constructor;\n        if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n        if (!x.isFinite()) return new Ctor(x);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n        Ctor.rounding = 1;\n        external = false;\n        x = x.times(x).minus(1).sqrt().plus(x);\n        external = true;\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return x.ln();\n    };\n    /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */ P.inverseHyperbolicSine = P.asinh = function() {\n        var pr, rm, x = this, Ctor = x.constructor;\n        if (!x.isFinite() || x.isZero()) return new Ctor(x);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n        Ctor.rounding = 1;\n        external = false;\n        x = x.times(x).plus(1).sqrt().plus(x);\n        external = true;\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return x.ln();\n    };\n    /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */ P.inverseHyperbolicTangent = P.atanh = function() {\n        var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;\n        if (!x.isFinite()) return new Ctor(NaN);\n        if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        xsd = x.sd();\n        if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n        Ctor.precision = wpr = xsd - x.e;\n        x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n        Ctor.precision = pr + 4;\n        Ctor.rounding = 1;\n        x = x.ln();\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return x.times(0.5);\n    };\n    /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */ P.inverseSine = P.asin = function() {\n        var halfPi, k, pr, rm, x = this, Ctor = x.constructor;\n        if (x.isZero()) return new Ctor(x);\n        k = x.abs().cmp(1);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        if (k !== -1) {\n            // |x| is 1\n            if (k === 0) {\n                halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n                halfPi.s = x.s;\n                return halfPi;\n            }\n            // |x| > 1 or x is NaN\n            return new Ctor(NaN);\n        }\n        // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n        Ctor.precision = pr + 6;\n        Ctor.rounding = 1;\n        x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return x.times(2);\n    };\n    /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */ P.inverseTangent = P.atan = function() {\n        var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;\n        if (!x.isFinite()) {\n            if (!x.s) return new Ctor(NaN);\n            if (pr + 4 <= PI_PRECISION) {\n                r = getPi(Ctor, pr + 4, rm).times(0.5);\n                r.s = x.s;\n                return r;\n            }\n        } else if (x.isZero()) {\n            return new Ctor(x);\n        } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n            r = getPi(Ctor, pr + 4, rm).times(0.25);\n            r.s = x.s;\n            return r;\n        }\n        Ctor.precision = wpr = pr + 10;\n        Ctor.rounding = 1;\n        // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n        // Argument reduction\n        // Ensure |x| < 0.42\n        // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n        k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n        for(i = k; i; --i)x = x.div(x.times(x).plus(1).sqrt().plus(1));\n        external = false;\n        j = Math.ceil(wpr / LOG_BASE);\n        n = 1;\n        x2 = x.times(x);\n        r = new Ctor(x);\n        px = x;\n        // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n        for(; i !== -1;){\n            px = px.times(x2);\n            t = r.minus(px.div(n += 2));\n            px = px.times(x2);\n            r = t.plus(px.div(n += 2));\n            if (r.d[j] !== void 0) for(i = j; r.d[i] === t.d[i] && i--;);\n        }\n        if (k) r = r.times(2 << k - 1);\n        external = true;\n        return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n    };\n    /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */ P.isFinite = function() {\n        return !!this.d;\n    };\n    /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */ P.isInteger = P.isInt = function() {\n        return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n    };\n    /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */ P.isNaN = function() {\n        return !this.s;\n    };\n    /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */ P.isNegative = P.isNeg = function() {\n        return this.s < 0;\n    };\n    /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */ P.isPositive = P.isPos = function() {\n        return this.s > 0;\n    };\n    /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */ P.isZero = function() {\n        return !!this.d && this.d[0] === 0;\n    };\n    /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */ P.lessThan = P.lt = function(y) {\n        return this.cmp(y) < 0;\n    };\n    /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */ P.lessThanOrEqualTo = P.lte = function(y) {\n        return this.cmp(y) < 1;\n    };\n    /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */ P.logarithm = P.log = function(base) {\n        var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;\n        // Default base is 10.\n        if (base == null) {\n            base = new Ctor(10);\n            isBase10 = true;\n        } else {\n            base = new Ctor(base);\n            d = base.d;\n            // Return NaN if base is negative, or non-finite, or is 0 or 1.\n            if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n            isBase10 = base.eq(10);\n        }\n        d = arg.d;\n        // Is arg negative, non-finite, 0 or 1?\n        if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n            return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n        }\n        // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n        // integer power of 10.\n        if (isBase10) {\n            if (d.length > 1) {\n                inf = true;\n            } else {\n                for(k = d[0]; k % 10 === 0;)k /= 10;\n                inf = k !== 1;\n            }\n        }\n        external = false;\n        sd = pr + guard;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        // The result will have 5 rounding digits.\n        r = divide(num, denominator, sd, 1);\n        // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n        // calculate 10 further digits.\n        //\n        // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n        // that the result is above or below the boundary. Otherwise, if after calculating the 10\n        // further digits, the last 14 are nines, round up and assume the result is exact.\n        // Also assume the result is exact if the last 14 are zero.\n        //\n        // Example of a result that will be incorrectly rounded:\n        // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n        // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n        // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n        // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n        // place is still 2.6.\n        if (checkRoundingDigits(r.d, k = pr, rm)) {\n            do {\n                sd += 10;\n                num = naturalLogarithm(arg, sd);\n                denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n                r = divide(num, denominator, sd, 1);\n                if (!inf) {\n                    // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n                    if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n                        r = finalise(r, pr + 1, 0);\n                    }\n                    break;\n                }\n            }while (checkRoundingDigits(r.d, k += 10, rm));\n        }\n        external = true;\n        return finalise(r, pr, rm);\n    };\n    /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */ /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */ /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */ P.minus = P.sub = function(y) {\n        var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;\n        y = new Ctor(y);\n        // If either is not finite...\n        if (!x.d || !y.d) {\n            // Return NaN if either is NaN.\n            if (!x.s || !y.s) y = new Ctor(NaN);\n            else if (x.d) y.s = -y.s;\n            else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n            return y;\n        }\n        // If signs differ...\n        if (x.s != y.s) {\n            y.s = -y.s;\n            return x.plus(y);\n        }\n        xd = x.d;\n        yd = y.d;\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        // If either is zero...\n        if (!xd[0] || !yd[0]) {\n            // Return y negated if x is zero and y is non-zero.\n            if (yd[0]) y.s = -y.s;\n            else if (xd[0]) y = new Ctor(x);\n            else return new Ctor(rm === 3 ? -0 : 0);\n            return external ? finalise(y, pr, rm) : y;\n        }\n        // x and y are finite, non-zero numbers with the same sign.\n        // Calculate base 1e7 exponents.\n        e = mathfloor(y.e / LOG_BASE);\n        xe = mathfloor(x.e / LOG_BASE);\n        xd = xd.slice();\n        k = xe - e;\n        // If base 1e7 exponents differ...\n        if (k) {\n            xLTy = k < 0;\n            if (xLTy) {\n                d = xd;\n                k = -k;\n                len = yd.length;\n            } else {\n                d = yd;\n                e = xe;\n                len = xd.length;\n            }\n            // Numbers with massively different exponents would result in a very high number of\n            // zeros needing to be prepended, but this can be avoided while still ensuring correct\n            // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n            i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n            if (k > i) {\n                k = i;\n                d.length = 1;\n            }\n            // Prepend zeros to equalise exponents.\n            d.reverse();\n            for(i = k; i--;)d.push(0);\n            d.reverse();\n        // Base 1e7 exponents equal.\n        } else {\n            // Check digits to determine which is the bigger number.\n            i = xd.length;\n            len = yd.length;\n            xLTy = i < len;\n            if (xLTy) len = i;\n            for(i = 0; i < len; i++){\n                if (xd[i] != yd[i]) {\n                    xLTy = xd[i] < yd[i];\n                    break;\n                }\n            }\n            k = 0;\n        }\n        if (xLTy) {\n            d = xd;\n            xd = yd;\n            yd = d;\n            y.s = -y.s;\n        }\n        len = xd.length;\n        // Append zeros to `xd` if shorter.\n        // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n        for(i = yd.length - len; i > 0; --i)xd[len++] = 0;\n        // Subtract yd from xd.\n        for(i = yd.length; i > k;){\n            if (xd[--i] < yd[i]) {\n                for(j = i; j && xd[--j] === 0;)xd[j] = BASE - 1;\n                --xd[j];\n                xd[i] += BASE;\n            }\n            xd[i] -= yd[i];\n        }\n        // Remove trailing zeros.\n        for(; xd[--len] === 0;)xd.pop();\n        // Remove leading zeros and adjust exponent accordingly.\n        for(; xd[0] === 0; xd.shift())--e;\n        // Zero?\n        if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n        y.d = xd;\n        y.e = getBase10Exponent(xd, e);\n        return external ? finalise(y, pr, rm) : y;\n    };\n    /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */ P.modulo = P.mod = function(y) {\n        var q, x = this, Ctor = x.constructor;\n        y = new Ctor(y);\n        // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n        if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n        // Return x if y is ±Infinity or x is ±0.\n        if (!y.d || x.d && !x.d[0]) {\n            return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n        }\n        // Prevent rounding of intermediate calculations.\n        external = false;\n        if (Ctor.modulo == 9) {\n            // Euclidian division: q = sign(y) * floor(x / abs(y))\n            // result = x - q * y    where  0 <= result < abs(y)\n            q = divide(x, y.abs(), 0, 3, 1);\n            q.s *= y.s;\n        } else {\n            q = divide(x, y, 0, Ctor.modulo, 1);\n        }\n        q = q.times(y);\n        external = true;\n        return x.minus(q);\n    };\n    /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */ P.naturalExponential = P.exp = function() {\n        return naturalExponential(this);\n    };\n    /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */ P.naturalLogarithm = P.ln = function() {\n        return naturalLogarithm(this);\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */ P.negated = P.neg = function() {\n        var x = new this.constructor(this);\n        x.s = -x.s;\n        return finalise(x);\n    };\n    /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */ P.plus = P.add = function(y) {\n        var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;\n        y = new Ctor(y);\n        // If either is not finite...\n        if (!x.d || !y.d) {\n            // Return NaN if either is NaN.\n            if (!x.s || !y.s) y = new Ctor(NaN);\n            else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n            return y;\n        }\n        // If signs differ...\n        if (x.s != y.s) {\n            y.s = -y.s;\n            return x.minus(y);\n        }\n        xd = x.d;\n        yd = y.d;\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        // If either is zero...\n        if (!xd[0] || !yd[0]) {\n            // Return x if y is zero.\n            // Return y if y is non-zero.\n            if (!yd[0]) y = new Ctor(x);\n            return external ? finalise(y, pr, rm) : y;\n        }\n        // x and y are finite, non-zero numbers with the same sign.\n        // Calculate base 1e7 exponents.\n        k = mathfloor(x.e / LOG_BASE);\n        e = mathfloor(y.e / LOG_BASE);\n        xd = xd.slice();\n        i = k - e;\n        // If base 1e7 exponents differ...\n        if (i) {\n            if (i < 0) {\n                d = xd;\n                i = -i;\n                len = yd.length;\n            } else {\n                d = yd;\n                e = k;\n                len = xd.length;\n            }\n            // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n            k = Math.ceil(pr / LOG_BASE);\n            len = k > len ? k + 1 : len + 1;\n            if (i > len) {\n                i = len;\n                d.length = 1;\n            }\n            // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n            d.reverse();\n            for(; i--;)d.push(0);\n            d.reverse();\n        }\n        len = xd.length;\n        i = yd.length;\n        // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n        if (len - i < 0) {\n            i = len;\n            d = yd;\n            yd = xd;\n            xd = d;\n        }\n        // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n        for(carry = 0; i;){\n            carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n            xd[i] %= BASE;\n        }\n        if (carry) {\n            xd.unshift(carry);\n            ++e;\n        }\n        // Remove trailing zeros.\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        for(len = xd.length; xd[--len] == 0;)xd.pop();\n        y.d = xd;\n        y.e = getBase10Exponent(xd, e);\n        return external ? finalise(y, pr, rm) : y;\n    };\n    /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */ P.precision = P.sd = function(z) {\n        var k, x = this;\n        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n        if (x.d) {\n            k = getPrecision(x.d);\n            if (z && x.e + 1 > k) k = x.e + 1;\n        } else {\n            k = NaN;\n        }\n        return k;\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */ P.round = function() {\n        var x = this, Ctor = x.constructor;\n        return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n    };\n    /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */ P.sine = P.sin = function() {\n        var pr, rm, x = this, Ctor = x.constructor;\n        if (!x.isFinite()) return new Ctor(NaN);\n        if (x.isZero()) return new Ctor(x);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n        Ctor.rounding = 1;\n        x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n    };\n    /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */ P.squareRoot = P.sqrt = function() {\n        var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;\n        // Negative/NaN/Infinity/zero?\n        if (s !== 1 || !d || !d[0]) {\n            return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n        }\n        external = false;\n        // Initial estimate.\n        s = Math.sqrt(+x);\n        // Math.sqrt underflow/overflow?\n        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n        if (s == 0 || s == 1 / 0) {\n            n = digitsToString(d);\n            if ((n.length + e) % 2 == 0) n += \"0\";\n            s = Math.sqrt(n);\n            e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n            if (s == 1 / 0) {\n                n = \"5e\" + e;\n            } else {\n                n = s.toExponential();\n                n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n            }\n            r = new Ctor(n);\n        } else {\n            r = new Ctor(s.toString());\n        }\n        sd = (e = Ctor.precision) + 3;\n        // Newton-Raphson iteration.\n        for(;;){\n            t = r;\n            r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n            // TODO? Replace with for-loop and checkRoundingDigits.\n            if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n                n = n.slice(sd - 3, sd + 1);\n                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n                // 4999, i.e. approaching a rounding boundary, continue the iteration.\n                if (n == \"9999\" || !rep && n == \"4999\") {\n                    // On the first iteration only, check to see if rounding up gives the exact result as the\n                    // nines may infinitely repeat.\n                    if (!rep) {\n                        finalise(t, e + 1, 0);\n                        if (t.times(t).eq(x)) {\n                            r = t;\n                            break;\n                        }\n                    }\n                    sd += 4;\n                    rep = 1;\n                } else {\n                    // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n                    // If not, then there are further digits and m will be truthy.\n                    if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n                        // Truncate to the first rounding digit.\n                        finalise(r, e + 1, 1);\n                        m = !r.times(r).eq(x);\n                    }\n                    break;\n                }\n            }\n        }\n        external = true;\n        return finalise(r, e, Ctor.rounding, m);\n    };\n    /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */ P.tangent = P.tan = function() {\n        var pr, rm, x = this, Ctor = x.constructor;\n        if (!x.isFinite()) return new Ctor(NaN);\n        if (x.isZero()) return new Ctor(x);\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        Ctor.precision = pr + 10;\n        Ctor.rounding = 1;\n        x = x.sin();\n        x.s = 1;\n        x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n        Ctor.precision = pr;\n        Ctor.rounding = rm;\n        return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n    };\n    /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */ P.times = P.mul = function(y) {\n        var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;\n        y.s *= x.s;\n        // If either is NaN, ±Infinity or ±0...\n        if (!xd || !xd[0] || !yd || !yd[0]) {\n            return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);\n        }\n        e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n        xdL = xd.length;\n        ydL = yd.length;\n        // Ensure xd points to the longer array.\n        if (xdL < ydL) {\n            r = xd;\n            xd = yd;\n            yd = r;\n            rL = xdL;\n            xdL = ydL;\n            ydL = rL;\n        }\n        // Initialise the result array with zeros.\n        r = [];\n        rL = xdL + ydL;\n        for(i = rL; i--;)r.push(0);\n        // Multiply!\n        for(i = ydL; --i >= 0;){\n            carry = 0;\n            for(k = xdL + i; k > i;){\n                t = r[k] + yd[i] * xd[k - i - 1] + carry;\n                r[k--] = t % BASE | 0;\n                carry = t / BASE | 0;\n            }\n            r[k] = (r[k] + carry) % BASE | 0;\n        }\n        // Remove trailing zeros.\n        for(; !r[--rL];)r.pop();\n        if (carry) ++e;\n        else r.shift();\n        y.d = r;\n        y.e = getBase10Exponent(r, e);\n        return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n    };\n    /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */ P.toBinary = function(sd, rm) {\n        return toStringBinary(this, 2, sd, rm);\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */ P.toDecimalPlaces = P.toDP = function(dp, rm) {\n        var x = this, Ctor = x.constructor;\n        x = new Ctor(x);\n        if (dp === void 0) return x;\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0) rm = Ctor.rounding;\n        else checkInt32(rm, 0, 8);\n        return finalise(x, dp + x.e + 1, rm);\n    };\n    /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */ P.toExponential = function(dp, rm) {\n        var str, x = this, Ctor = x.constructor;\n        if (dp === void 0) {\n            str = finiteToString(x, true);\n        } else {\n            checkInt32(dp, 0, MAX_DIGITS);\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n            x = finalise(new Ctor(x), dp + 1, rm);\n            str = finiteToString(x, true, dp + 1);\n        }\n        return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */ P.toFixed = function(dp, rm) {\n        var str, y, x = this, Ctor = x.constructor;\n        if (dp === void 0) {\n            str = finiteToString(x);\n        } else {\n            checkInt32(dp, 0, MAX_DIGITS);\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n            y = finalise(new Ctor(x), dp + x.e + 1, rm);\n            str = finiteToString(y, false, dp + y.e + 1);\n        }\n        // To determine whether to add the minus sign look at the value before it was rounded,\n        // i.e. look at `x` rather than `y`.\n        return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */ P.toFraction = function(maxD) {\n        var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;\n        if (!xd) return new Ctor(x);\n        n1 = d0 = new Ctor(1);\n        d1 = n0 = new Ctor(0);\n        d = new Ctor(d1);\n        e = d.e = getPrecision(xd) - x.e - 1;\n        k = e % LOG_BASE;\n        d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n        if (maxD == null) {\n            // d is 10**e, the minimum max-denominator needed.\n            maxD = e > 0 ? d : n1;\n        } else {\n            n = new Ctor(maxD);\n            if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n            maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n        }\n        external = false;\n        n = new Ctor(digitsToString(xd));\n        pr = Ctor.precision;\n        Ctor.precision = e = xd.length * LOG_BASE * 2;\n        for(;;){\n            q = divide(n, d, 0, 1, 1);\n            d2 = d0.plus(q.times(d1));\n            if (d2.cmp(maxD) == 1) break;\n            d0 = d1;\n            d1 = d2;\n            d2 = n1;\n            n1 = n0.plus(q.times(d2));\n            n0 = d2;\n            d2 = d;\n            d = n.minus(q.times(d2));\n            n = d2;\n        }\n        d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n        n0 = n0.plus(d2.times(n1));\n        d0 = d0.plus(d2.times(d1));\n        n0.s = n1.s = x.s;\n        // Determine which fraction is closer to x, n0/d0 or n1/d1?\n        r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [\n            n1,\n            d1\n        ] : [\n            n0,\n            d0\n        ];\n        Ctor.precision = pr;\n        external = true;\n        return r;\n    };\n    /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */ P.toHexadecimal = P.toHex = function(sd, rm) {\n        return toStringBinary(this, 16, sd, rm);\n    };\n    /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */ P.toNearest = function(y, rm) {\n        var x = this, Ctor = x.constructor;\n        x = new Ctor(x);\n        if (y == null) {\n            // If x is not finite, return x.\n            if (!x.d) return x;\n            y = new Ctor(1);\n            rm = Ctor.rounding;\n        } else {\n            y = new Ctor(y);\n            if (rm === void 0) {\n                rm = Ctor.rounding;\n            } else {\n                checkInt32(rm, 0, 8);\n            }\n            // If x is not finite, return x if y is not NaN, else NaN.\n            if (!x.d) return y.s ? x : y;\n            // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n            if (!y.d) {\n                if (y.s) y.s = x.s;\n                return y;\n            }\n        }\n        // If y is not zero, calculate the nearest multiple of y to x.\n        if (y.d[0]) {\n            external = false;\n            x = divide(x, y, 0, rm, 1).times(y);\n            external = true;\n            finalise(x);\n        // If y is zero, return zero with the sign of x.\n        } else {\n            y.s = x.s;\n            x = y;\n        }\n        return x;\n    };\n    /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */ P.toNumber = function() {\n        return +this;\n    };\n    /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */ P.toOctal = function(sd, rm) {\n        return toStringBinary(this, 8, sd, rm);\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */ P.toPower = P.pow = function(y) {\n        var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));\n        // Either ±Infinity, NaN or ±0?\n        if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n        x = new Ctor(x);\n        if (x.eq(1)) return x;\n        pr = Ctor.precision;\n        rm = Ctor.rounding;\n        if (y.eq(1)) return finalise(x, pr, rm);\n        // y exponent\n        e = mathfloor(y.e / LOG_BASE);\n        // If y is a small integer use the 'exponentiation by squaring' algorithm.\n        if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n            r = intPow(Ctor, x, k, pr);\n            return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n        }\n        s = x.s;\n        // if x is negative\n        if (s < 0) {\n            // if y is not an integer\n            if (e < y.d.length - 1) return new Ctor(NaN);\n            // Result is positive if x is negative and the last digit of integer y is even.\n            if ((y.d[e] & 1) == 0) s = 1;\n            // if x.eq(-1)\n            if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n                x.s = s;\n                return x;\n            }\n        }\n        // Estimate result exponent.\n        // x^y = 10^e,  where e = y * log10(x)\n        // log10(x) = log10(x_significand) + x_exponent\n        // log10(x_significand) = ln(x_significand) / ln(10)\n        k = mathpow(+x, yn);\n        e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log(\"0.\" + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + \"\").e;\n        // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n        // Overflow/underflow?\n        if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n        external = false;\n        Ctor.rounding = x.s = 1;\n        // Estimate the extra guard digits needed to ensure five correct rounding digits from\n        // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n        // new Decimal(2.32456).pow('2087987436534566.46411')\n        // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n        k = Math.min(12, (e + \"\").length);\n        // r = x^y = exp(y*ln(x))\n        r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n        // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n        if (r.d) {\n            // Truncate to the required precision plus five rounding digits.\n            r = finalise(r, pr + 5, 1);\n            // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n            // the result.\n            if (checkRoundingDigits(r.d, pr, rm)) {\n                e = pr + 10;\n                // Truncate to the increased precision plus five rounding digits.\n                r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n                // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n                if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n                    r = finalise(r, pr + 1, 0);\n                }\n            }\n        }\n        r.s = s;\n        external = true;\n        Ctor.rounding = rm;\n        return finalise(r, pr, rm);\n    };\n    /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */ P.toPrecision = function(sd, rm) {\n        var str, x = this, Ctor = x.constructor;\n        if (sd === void 0) {\n            str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n        } else {\n            checkInt32(sd, 1, MAX_DIGITS);\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n            x = finalise(new Ctor(x), sd, rm);\n            str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n        }\n        return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */ P.toSignificantDigits = P.toSD = function(sd, rm) {\n        var x = this, Ctor = x.constructor;\n        if (sd === void 0) {\n            sd = Ctor.precision;\n            rm = Ctor.rounding;\n        } else {\n            checkInt32(sd, 1, MAX_DIGITS);\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n        }\n        return finalise(new Ctor(x), sd, rm);\n    };\n    /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */ P.toString = function() {\n        var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n        return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */ P.truncated = P.trunc = function() {\n        return finalise(new this.constructor(this), this.e + 1, 1);\n    };\n    /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */ P.valueOf = P.toJSON = function() {\n        var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n        return x.isNeg() ? \"-\" + str : str;\n    };\n    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n    /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */ function digitsToString(d) {\n        var i, k, ws, indexOfLastWord = d.length - 1, str = \"\", w = d[0];\n        if (indexOfLastWord > 0) {\n            str += w;\n            for(i = 1; i < indexOfLastWord; i++){\n                ws = d[i] + \"\";\n                k = LOG_BASE - ws.length;\n                if (k) str += getZeroString(k);\n                str += ws;\n            }\n            w = d[i];\n            ws = w + \"\";\n            k = LOG_BASE - ws.length;\n            if (k) str += getZeroString(k);\n        } else if (w === 0) {\n            return \"0\";\n        }\n        // Remove trailing zeros of last w.\n        for(; w % 10 === 0;)w /= 10;\n        return str + w;\n    }\n    function checkInt32(i, min, max) {\n        if (i !== ~~i || i < min || i > max) {\n            throw Error(invalidArgument + i);\n        }\n    }\n    /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */ function checkRoundingDigits(d, i, rm, repeating) {\n        var di, k, r, rd;\n        // Get the length of the first word of the array d.\n        for(k = d[0]; k >= 10; k /= 10)--i;\n        // Is the rounding digit in the first word of d?\n        if (--i < 0) {\n            i += LOG_BASE;\n            di = 0;\n        } else {\n            di = Math.ceil((i + 1) / LOG_BASE);\n            i %= LOG_BASE;\n        }\n        // i is the index (0 - 6) of the rounding digit.\n        // E.g. if within the word 3487563 the first rounding digit is 5,\n        // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n        k = mathpow(10, LOG_BASE - i);\n        rd = d[di] % k | 0;\n        if (repeating == null) {\n            if (i < 3) {\n                if (i == 0) rd = rd / 100 | 0;\n                else if (i == 1) rd = rd / 10 | 0;\n                r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n            } else {\n                r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n            }\n        } else {\n            if (i < 4) {\n                if (i == 0) rd = rd / 1000 | 0;\n                else if (i == 1) rd = rd / 100 | 0;\n                else if (i == 2) rd = rd / 10 | 0;\n                r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n            } else {\n                r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n            }\n        }\n        return r;\n    }\n    // Convert string of `baseIn` to an array of numbers of `baseOut`.\n    // Eg. convertBase('255', 10, 16) returns [15, 15].\n    // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n    function convertBase(str, baseIn, baseOut) {\n        var j, arr = [\n            0\n        ], arrL, i = 0, strL = str.length;\n        for(; i < strL;){\n            for(arrL = arr.length; arrL--;)arr[arrL] *= baseIn;\n            arr[0] += NUMERALS.indexOf(str.charAt(i++));\n            for(j = 0; j < arr.length; j++){\n                if (arr[j] > baseOut - 1) {\n                    if (arr[j + 1] === void 0) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n        return arr.reverse();\n    }\n    /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */ function cosine(Ctor, x) {\n        var k, len, y;\n        if (x.isZero()) return x;\n        // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n        // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n        // Estimate the optimum number of times to use the argument reduction.\n        len = x.d.length;\n        if (len < 32) {\n            k = Math.ceil(len / 3);\n            y = (1 / tinyPow(4, k)).toString();\n        } else {\n            k = 16;\n            y = \"2.3283064365386962890625e-10\";\n        }\n        Ctor.precision += k;\n        x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n        // Reverse argument reduction\n        for(var i = k; i--;){\n            var cos2x = x.times(x);\n            x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n        }\n        Ctor.precision -= k;\n        return x;\n    }\n    /*\r\n   * Perform division in the specified base.\r\n   */ var divide = function() {\n        // Assumes non-zero x and k, and hence non-zero result.\n        function multiplyInteger(x, k, base) {\n            var temp, carry = 0, i = x.length;\n            for(x = x.slice(); i--;){\n                temp = x[i] * k + carry;\n                x[i] = temp % base | 0;\n                carry = temp / base | 0;\n            }\n            if (carry) x.unshift(carry);\n            return x;\n        }\n        function compare(a, b, aL, bL) {\n            var i, r;\n            if (aL != bL) {\n                r = aL > bL ? 1 : -1;\n            } else {\n                for(i = r = 0; i < aL; i++){\n                    if (a[i] != b[i]) {\n                        r = a[i] > b[i] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            return r;\n        }\n        function subtract(a, b, aL, base) {\n            var i = 0;\n            // Subtract b from a.\n            for(; aL--;){\n                a[aL] -= i;\n                i = a[aL] < b[aL] ? 1 : 0;\n                a[aL] = i * base + a[aL] - b[aL];\n            }\n            // Remove leading zeros.\n            for(; !a[0] && a.length > 1;)a.shift();\n        }\n        return function(x, y, pr, rm, dp, base) {\n            var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;\n            // Either NaN, Infinity or 0?\n            if (!xd || !xd[0] || !yd || !yd[0]) {\n                return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n                xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n            }\n            if (base) {\n                logBase = 1;\n                e = x.e - y.e;\n            } else {\n                base = BASE;\n                logBase = LOG_BASE;\n                e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n            }\n            yL = yd.length;\n            xL = xd.length;\n            q = new Ctor(sign);\n            qd = q.d = [];\n            // Result exponent may be one less than e.\n            // The digit array of a Decimal from toStringBinary may have trailing zeros.\n            for(i = 0; yd[i] == (xd[i] || 0); i++);\n            if (yd[i] > (xd[i] || 0)) e--;\n            if (pr == null) {\n                sd = pr = Ctor.precision;\n                rm = Ctor.rounding;\n            } else if (dp) {\n                sd = pr + (x.e - y.e) + 1;\n            } else {\n                sd = pr;\n            }\n            if (sd < 0) {\n                qd.push(1);\n                more = true;\n            } else {\n                // Convert precision in number of base 10 digits to base 1e7 digits.\n                sd = sd / logBase + 2 | 0;\n                i = 0;\n                // divisor < 1e7\n                if (yL == 1) {\n                    k = 0;\n                    yd = yd[0];\n                    sd++;\n                    // k is the carry.\n                    for(; (i < xL || k) && sd--; i++){\n                        t = k * base + (xd[i] || 0);\n                        qd[i] = t / yd | 0;\n                        k = t % yd | 0;\n                    }\n                    more = k || i < xL;\n                // divisor >= 1e7\n                } else {\n                    // Normalise xd and yd so highest order digit of yd is >= base/2\n                    k = base / (yd[0] + 1) | 0;\n                    if (k > 1) {\n                        yd = multiplyInteger(yd, k, base);\n                        xd = multiplyInteger(xd, k, base);\n                        yL = yd.length;\n                        xL = xd.length;\n                    }\n                    xi = yL;\n                    rem = xd.slice(0, yL);\n                    remL = rem.length;\n                    // Add zeros to make remainder as long as divisor.\n                    for(; remL < yL;)rem[remL++] = 0;\n                    yz = yd.slice();\n                    yz.unshift(0);\n                    yd0 = yd[0];\n                    if (yd[1] >= base / 2) ++yd0;\n                    do {\n                        k = 0;\n                        // Compare divisor and remainder.\n                        cmp = compare(yd, rem, yL, remL);\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n                            // Calculate trial digit, k.\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n                            // k will be how many times the divisor goes into the current remainder.\n                            k = rem0 / yd0 | 0;\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (k)\n                            //  2. if product > remainder: product -= divisor, k--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, k++\n                            if (k > 1) {\n                                if (k >= base) k = base - 1;\n                                // product = divisor * trial digit.\n                                prod = multiplyInteger(yd, k, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n                                // Compare product and remainder.\n                                cmp = compare(prod, rem, prodL, remL);\n                                // product > remainder.\n                                if (cmp == 1) {\n                                    k--;\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                                }\n                            } else {\n                                // cmp is -1.\n                                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                                if (k == 0) cmp = k = 1;\n                                prod = yd.slice();\n                            }\n                            prodL = prod.length;\n                            if (prodL < remL) prod.unshift(0);\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            // If product was < previous remainder.\n                            if (cmp == -1) {\n                                remL = rem.length;\n                                // Compare divisor and new remainder.\n                                cmp = compare(yd, rem, yL, remL);\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                if (cmp < 1) {\n                                    k++;\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yd, remL, base);\n                                }\n                            }\n                            remL = rem.length;\n                        } else if (cmp === 0) {\n                            k++;\n                            rem = [\n                                0\n                            ];\n                        } // if cmp === 1, k will be 0\n                        // Add the next digit, k, to the result array.\n                        qd[i++] = k;\n                        // Update the remainder.\n                        if (cmp && rem[0]) {\n                            rem[remL++] = xd[xi] || 0;\n                        } else {\n                            rem = [\n                                xd[xi]\n                            ];\n                            remL = 1;\n                        }\n                    }while ((xi++ < xL || rem[0] !== void 0) && sd--);\n                    more = rem[0] !== void 0;\n                }\n                // Leading zero?\n                if (!qd[0]) qd.shift();\n            }\n            // logBase is 1 when divide is being used for base conversion.\n            if (logBase == 1) {\n                q.e = e;\n                inexact = more;\n            } else {\n                // To calculate q.e, first get the number of digits of qd[0].\n                for(i = 1, k = qd[0]; k >= 10; k /= 10)i++;\n                q.e = i + e * logBase - 1;\n                finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n            }\n            return q;\n        };\n    }();\n    /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */ function finalise(x, sd, rm, isTruncated) {\n        var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;\n        // Don't round if sd is null or undefined.\n        out: if (sd != null) {\n            xd = x.d;\n            // Infinity/NaN.\n            if (!xd) return x;\n            // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n            // w: the word of xd containing rd, a base 1e7 number.\n            // xdi: the index of w within xd.\n            // digits: the number of digits of w.\n            // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n            // they had leading zeros)\n            // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n            // Get the length of the first word of the digits array xd.\n            for(digits = 1, k = xd[0]; k >= 10; k /= 10)digits++;\n            i = sd - digits;\n            // Is the rounding digit in the first word of xd?\n            if (i < 0) {\n                i += LOG_BASE;\n                j = sd;\n                w = xd[xdi = 0];\n                // Get the rounding digit at index j of w.\n                rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n            } else {\n                xdi = Math.ceil((i + 1) / LOG_BASE);\n                k = xd.length;\n                if (xdi >= k) {\n                    if (isTruncated) {\n                        // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n                        for(; k++ <= xdi;)xd.push(0);\n                        w = rd = 0;\n                        digits = 1;\n                        i %= LOG_BASE;\n                        j = i - LOG_BASE + 1;\n                    } else {\n                        break out;\n                    }\n                } else {\n                    w = k = xd[xdi];\n                    // Get the number of digits of w.\n                    for(digits = 1; k >= 10; k /= 10)digits++;\n                    // Get the index of rd within w.\n                    i %= LOG_BASE;\n                    // Get the index of rd within w, adjusted for leading zeros.\n                    // The number of leading zeros of w is given by LOG_BASE - digits.\n                    j = i - LOG_BASE + digits;\n                    // Get the rounding digit at index j of w.\n                    rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n                }\n            }\n            // Are there any non-zero digits after the rounding digit?\n            isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n            // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n            // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n            // will give 714.\n            roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n            if (sd < 1 || !xd[0]) {\n                xd.length = 0;\n                if (roundUp) {\n                    // Convert sd to decimal places.\n                    sd -= x.e + 1;\n                    // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                    xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n                    x.e = -sd || 0;\n                } else {\n                    // Zero.\n                    xd[0] = x.e = 0;\n                }\n                return x;\n            }\n            // Remove excess digits.\n            if (i == 0) {\n                xd.length = xdi;\n                k = 1;\n                xdi--;\n            } else {\n                xd.length = xdi + 1;\n                k = mathpow(10, LOG_BASE - i);\n                // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                // j > 0 means i > number of leading zeros of w.\n                xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n            }\n            if (roundUp) {\n                for(;;){\n                    // Is the digit to be rounded up in the first word of xd?\n                    if (xdi == 0) {\n                        // i will be the length of xd[0] before k is added.\n                        for(i = 1, j = xd[0]; j >= 10; j /= 10)i++;\n                        j = xd[0] += k;\n                        for(k = 1; j >= 10; j /= 10)k++;\n                        // if i != k the length has increased.\n                        if (i != k) {\n                            x.e++;\n                            if (xd[0] == BASE) xd[0] = 1;\n                        }\n                        break;\n                    } else {\n                        xd[xdi] += k;\n                        if (xd[xdi] != BASE) break;\n                        xd[xdi--] = 0;\n                        k = 1;\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for(i = xd.length; xd[--i] === 0;)xd.pop();\n        }\n        if (external) {\n            // Overflow?\n            if (x.e > Ctor.maxE) {\n                // Infinity.\n                x.d = null;\n                x.e = NaN;\n            // Underflow?\n            } else if (x.e < Ctor.minE) {\n                // Zero.\n                x.e = 0;\n                x.d = [\n                    0\n                ];\n            // Ctor.underflow = true;\n            } // else Ctor.underflow = false;\n        }\n        return x;\n    }\n    function finiteToString(x, isExp, sd) {\n        if (!x.isFinite()) return nonFiniteToString(x);\n        var k, e = x.e, str = digitsToString(x.d), len = str.length;\n        if (isExp) {\n            if (sd && (k = sd - len) > 0) {\n                str = str.charAt(0) + \".\" + str.slice(1) + getZeroString(k);\n            } else if (len > 1) {\n                str = str.charAt(0) + \".\" + str.slice(1);\n            }\n            str = str + (x.e < 0 ? \"e\" : \"e+\") + x.e;\n        } else if (e < 0) {\n            str = \"0.\" + getZeroString(-e - 1) + str;\n            if (sd && (k = sd - len) > 0) str += getZeroString(k);\n        } else if (e >= len) {\n            str += getZeroString(e + 1 - len);\n            if (sd && (k = sd - e - 1) > 0) str = str + \".\" + getZeroString(k);\n        } else {\n            if ((k = e + 1) < len) str = str.slice(0, k) + \".\" + str.slice(k);\n            if (sd && (k = sd - len) > 0) {\n                if (e + 1 === len) str += \".\";\n                str += getZeroString(k);\n            }\n        }\n        return str;\n    }\n    // Calculate the base 10 exponent from the base 1e7 exponent.\n    function getBase10Exponent(digits, e) {\n        var w = digits[0];\n        // Add the number of digits of the first word of the digits array.\n        for(e *= LOG_BASE; w >= 10; w /= 10)e++;\n        return e;\n    }\n    function getLn10(Ctor, sd, pr) {\n        if (sd > LN10_PRECISION) {\n            // Reset global state in case the exception is caught.\n            external = true;\n            if (pr) Ctor.precision = pr;\n            throw Error(precisionLimitExceeded);\n        }\n        return finalise(new Ctor(LN10), sd, 1, true);\n    }\n    function getPi(Ctor, sd, rm) {\n        if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n        return finalise(new Ctor(PI), sd, rm, true);\n    }\n    function getPrecision(digits) {\n        var w = digits.length - 1, len = w * LOG_BASE + 1;\n        w = digits[w];\n        // If non-zero...\n        if (w) {\n            // Subtract the number of trailing zeros of the last word.\n            for(; w % 10 == 0; w /= 10)len--;\n            // Add the number of digits of the first word.\n            for(w = digits[0]; w >= 10; w /= 10)len++;\n        }\n        return len;\n    }\n    function getZeroString(k) {\n        var zs = \"\";\n        for(; k--;)zs += \"0\";\n        return zs;\n    }\n    /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */ function intPow(Ctor, x, n, pr) {\n        var isTruncated, r = new Ctor(1), // Max n of 9007199254740991 takes 53 loop iterations.\n        // Maximum digits array length; leaves [28, 34] guard digits.\n        k = Math.ceil(pr / LOG_BASE + 4);\n        external = false;\n        for(;;){\n            if (n % 2) {\n                r = r.times(x);\n                if (truncate(r.d, k)) isTruncated = true;\n            }\n            n = mathfloor(n / 2);\n            if (n === 0) {\n                // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n                n = r.d.length - 1;\n                if (isTruncated && r.d[n] === 0) ++r.d[n];\n                break;\n            }\n            x = x.times(x);\n            truncate(x.d, k);\n        }\n        external = true;\n        return r;\n    }\n    function isOdd(n) {\n        return n.d[n.d.length - 1] & 1;\n    }\n    /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */ function maxOrMin(Ctor, args, ltgt) {\n        var y, x = new Ctor(args[0]), i = 0;\n        for(; ++i < args.length;){\n            y = new Ctor(args[i]);\n            if (!y.s) {\n                x = y;\n                break;\n            } else if (x[ltgt](y)) {\n                x = y;\n            }\n        }\n        return x;\n    }\n    /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */ function naturalExponential(x, sd) {\n        var denominator, guard, j, pow, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n        // 0/NaN/Infinity?\n        if (!x.d || !x.d[0] || x.e > 17) {\n            return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n        }\n        if (sd == null) {\n            external = false;\n            wpr = pr;\n        } else {\n            wpr = sd;\n        }\n        t = new Ctor(0.03125);\n        // while abs(x) >= 0.1\n        while(x.e > -2){\n            // x = x / 2^5\n            x = x.times(t);\n            k += 5;\n        }\n        // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n        // necessary to ensure the first 4 rounding digits are correct.\n        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n        wpr += guard;\n        denominator = pow = sum = new Ctor(1);\n        Ctor.precision = wpr;\n        for(;;){\n            pow = finalise(pow.times(x), wpr, 1);\n            denominator = denominator.times(++i);\n            t = sum.plus(divide(pow, denominator, wpr, 1));\n            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n                j = k;\n                while(j--)sum = finalise(sum.times(sum), wpr, 1);\n                // Check to see if the first 4 rounding digits are [49]999.\n                // If so, repeat the summation with a higher precision, otherwise\n                // e.g. with precision: 18, rounding: 1\n                // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n                // `wpr - guard` is the index of first rounding digit.\n                if (sd == null) {\n                    if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n                        Ctor.precision = wpr += 10;\n                        denominator = pow = t = new Ctor(1);\n                        i = 0;\n                        rep++;\n                    } else {\n                        return finalise(sum, Ctor.precision = pr, rm, external = true);\n                    }\n                } else {\n                    Ctor.precision = pr;\n                    return sum;\n                }\n            }\n            sum = t;\n        }\n    }\n    /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */ function naturalLogarithm(y, sd) {\n        var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n        // Is x negative or Infinity, NaN, 0 or 1?\n        if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n            return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n        }\n        if (sd == null) {\n            external = false;\n            wpr = pr;\n        } else {\n            wpr = sd;\n        }\n        Ctor.precision = wpr += guard;\n        c = digitsToString(xd);\n        c0 = c.charAt(0);\n        if (Math.abs(e = x.e) < 1.5e15) {\n            // Argument reduction.\n            // The series converges faster the closer the argument is to 1, so using\n            // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n            // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n            // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n            // later be divided by this number, then separate out the power of 10 using\n            // ln(a*10^b) = ln(a) + b*ln(10).\n            // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n            //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n            // max n is 6 (gives 0.7 - 1.3)\n            while(c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3){\n                x = x.times(y);\n                c = digitsToString(x.d);\n                c0 = c.charAt(0);\n                n++;\n            }\n            e = x.e;\n            if (c0 > 1) {\n                x = new Ctor(\"0.\" + c);\n                e++;\n            } else {\n                x = new Ctor(c0 + \".\" + c.slice(1));\n            }\n        } else {\n            // The argument reduction method above may result in overflow if the argument y is a massive\n            // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n            // function using ln(x*10^e) = ln(x) + e*ln(10).\n            t = getLn10(Ctor, wpr + 2, pr).times(e + \"\");\n            x = naturalLogarithm(new Ctor(c0 + \".\" + c.slice(1)), wpr - guard).plus(t);\n            Ctor.precision = pr;\n            return sd == null ? finalise(x, pr, rm, external = true) : x;\n        }\n        // x1 is x reduced to a value near 1.\n        x1 = x;\n        // Taylor series.\n        // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n        // where x = (y - 1)/(y + 1)    (|x| < 1)\n        sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n        x2 = finalise(x.times(x), wpr, 1);\n        denominator = 3;\n        for(;;){\n            numerator = finalise(numerator.times(x2), wpr, 1);\n            t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n                sum = sum.times(2);\n                // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n                // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n                if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + \"\"));\n                sum = divide(sum, new Ctor(n), wpr, 1);\n                // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n                // been repeated previously) and the first 4 rounding digits 9999?\n                // If so, restart the summation with a higher precision, otherwise\n                // e.g. with precision: 12, rounding: 1\n                // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n                // `wpr - guard` is the index of first rounding digit.\n                if (sd == null) {\n                    if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n                        Ctor.precision = wpr += guard;\n                        t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n                        x2 = finalise(x.times(x), wpr, 1);\n                        denominator = rep = 1;\n                    } else {\n                        return finalise(sum, Ctor.precision = pr, rm, external = true);\n                    }\n                } else {\n                    Ctor.precision = pr;\n                    return sum;\n                }\n            }\n            sum = t;\n            denominator += 2;\n        }\n    }\n    // ±Infinity, NaN.\n    function nonFiniteToString(x) {\n        // Unsigned.\n        return String(x.s * x.s / 0);\n    }\n    /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */ function parseDecimal(x, str) {\n        var e, i, len;\n        // Decimal point?\n        if ((e = str.indexOf(\".\")) > -1) str = str.replace(\".\", \"\");\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +str.slice(i + 1);\n            str = str.substring(0, i);\n        } else if (e < 0) {\n            // Integer.\n            e = str.length;\n        }\n        // Determine leading zeros.\n        for(i = 0; str.charCodeAt(i) === 48; i++);\n        // Determine trailing zeros.\n        for(len = str.length; str.charCodeAt(len - 1) === 48; --len);\n        str = str.slice(i, len);\n        if (str) {\n            len -= i;\n            x.e = e = e - i - 1;\n            x.d = [];\n            // Transform base\n            // e is the base 10 exponent.\n            // i is where to slice str to get the first word of the digits array.\n            i = (e + 1) % LOG_BASE;\n            if (e < 0) i += LOG_BASE;\n            if (i < len) {\n                if (i) x.d.push(+str.slice(0, i));\n                for(len -= LOG_BASE; i < len;)x.d.push(+str.slice(i, i += LOG_BASE));\n                str = str.slice(i);\n                i = LOG_BASE - str.length;\n            } else {\n                i -= len;\n            }\n            for(; i--;)str += \"0\";\n            x.d.push(+str);\n            if (external) {\n                // Overflow?\n                if (x.e > x.constructor.maxE) {\n                    // Infinity.\n                    x.d = null;\n                    x.e = NaN;\n                // Underflow?\n                } else if (x.e < x.constructor.minE) {\n                    // Zero.\n                    x.e = 0;\n                    x.d = [\n                        0\n                    ];\n                // x.constructor.underflow = true;\n                } // else x.constructor.underflow = false;\n            }\n        } else {\n            // Zero.\n            x.e = 0;\n            x.d = [\n                0\n            ];\n        }\n        return x;\n    }\n    /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */ function parseOther(x, str) {\n        var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n        if (str.indexOf(\"_\") > -1) {\n            str = str.replace(/(\\d)_(?=\\d)/g, \"$1\");\n            if (isDecimal.test(str)) return parseDecimal(x, str);\n        } else if (str === \"Infinity\" || str === \"NaN\") {\n            if (!+str) x.s = NaN;\n            x.e = NaN;\n            x.d = null;\n            return x;\n        }\n        if (isHex.test(str)) {\n            base = 16;\n            str = str.toLowerCase();\n        } else if (isBinary.test(str)) {\n            base = 2;\n        } else if (isOctal.test(str)) {\n            base = 8;\n        } else {\n            throw Error(invalidArgument + str);\n        }\n        // Is there a binary exponent part?\n        i = str.search(/p/i);\n        if (i > 0) {\n            p = +str.slice(i + 1);\n            str = str.substring(2, i);\n        } else {\n            str = str.slice(2);\n        }\n        // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n        // fraction part will be restored.\n        i = str.indexOf(\".\");\n        isFloat = i >= 0;\n        Ctor = x.constructor;\n        if (isFloat) {\n            str = str.replace(\".\", \"\");\n            len = str.length;\n            i = len - i;\n            // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n            divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n        }\n        xd = convertBase(str, base, BASE);\n        xe = xd.length - 1;\n        // Remove trailing zeros.\n        for(i = xe; xd[i] === 0; --i)xd.pop();\n        if (i < 0) return new Ctor(x.s * 0);\n        x.e = getBase10Exponent(xd, xe);\n        x.d = xd;\n        external = false;\n        // At what precision to perform the division to ensure exact conversion?\n        // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n        // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n        // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n        // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n        // Therefore using 4 * the number of digits of str will always be enough.\n        if (isFloat) x = divide(x, divisor, len * 4);\n        // Multiply by the binary exponent part if present.\n        if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n        external = true;\n        return x;\n    }\n    /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */ function sine(Ctor, x) {\n        var k, len = x.d.length;\n        if (len < 3) {\n            return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n        }\n        // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n        // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n        // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n        // Estimate the optimum number of times to use the argument reduction.\n        k = 1.4 * Math.sqrt(len);\n        k = k > 16 ? 16 : k | 0;\n        x = x.times(1 / tinyPow(5, k));\n        x = taylorSeries(Ctor, 2, x, x);\n        // Reverse argument reduction\n        var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n        for(; k--;){\n            sin2_x = x.times(x);\n            x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n        }\n        return x;\n    }\n    // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n    function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n        var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);\n        external = false;\n        x2 = x.times(x);\n        u = new Ctor(y);\n        for(;;){\n            t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n            u = isHyperbolic ? y.plus(t) : y.minus(t);\n            y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n            t = u.plus(y);\n            if (t.d[k] !== void 0) {\n                for(j = k; t.d[j] === u.d[j] && j--;);\n                if (j == -1) break;\n            }\n            j = u;\n            u = y;\n            y = t;\n            t = j;\n            i++;\n        }\n        external = true;\n        t.d.length = k + 1;\n        return t;\n    }\n    // Exponent e must be positive and non-zero.\n    function tinyPow(b, e) {\n        var n = b;\n        while(--e)n *= b;\n        return n;\n    }\n    // Return the absolute value of `x` reduced to less than or equal to half pi.\n    function toLessThanHalfPi(Ctor, x) {\n        var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);\n        x = x.abs();\n        if (x.lte(halfPi)) {\n            quadrant = isNeg ? 4 : 1;\n            return x;\n        }\n        t = x.divToInt(pi);\n        if (t.isZero()) {\n            quadrant = isNeg ? 3 : 2;\n        } else {\n            x = x.minus(t.times(pi));\n            // 0 <= x < pi\n            if (x.lte(halfPi)) {\n                quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n                return x;\n            }\n            quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n        }\n        return x.minus(pi).abs();\n    }\n    /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */ function toStringBinary(x, baseOut, sd, rm) {\n        var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;\n        if (isExp) {\n            checkInt32(sd, 1, MAX_DIGITS);\n            if (rm === void 0) rm = Ctor.rounding;\n            else checkInt32(rm, 0, 8);\n        } else {\n            sd = Ctor.precision;\n            rm = Ctor.rounding;\n        }\n        if (!x.isFinite()) {\n            str = nonFiniteToString(x);\n        } else {\n            str = finiteToString(x);\n            i = str.indexOf(\".\");\n            // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n            // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n            // minBinaryExponent = floor(decimalExponent * log[2](10))\n            // log[2](10) = 3.321928094887362347870319429489390175864\n            if (isExp) {\n                base = 2;\n                if (baseOut == 16) {\n                    sd = sd * 4 - 3;\n                } else if (baseOut == 8) {\n                    sd = sd * 3 - 2;\n                }\n            } else {\n                base = baseOut;\n            }\n            // Convert the number as an integer then divide the result by its base raised to a power such\n            // that the fraction part will be restored.\n            // Non-integer.\n            if (i >= 0) {\n                str = str.replace(\".\", \"\");\n                y = new Ctor(1);\n                y.e = str.length - i;\n                y.d = convertBase(finiteToString(y), 10, base);\n                y.e = y.d.length;\n            }\n            xd = convertBase(str, 10, base);\n            e = len = xd.length;\n            // Remove trailing zeros.\n            for(; xd[--len] == 0;)xd.pop();\n            if (!xd[0]) {\n                str = isExp ? \"0p+0\" : \"0\";\n            } else {\n                if (i < 0) {\n                    e--;\n                } else {\n                    x = new Ctor(x);\n                    x.d = xd;\n                    x.e = e;\n                    x = divide(x, y, sd, rm, 0, base);\n                    xd = x.d;\n                    e = x.e;\n                    roundUp = inexact;\n                }\n                // The rounding digit, i.e. the digit after the digit that may be rounded up.\n                i = xd[sd];\n                k = base / 2;\n                roundUp = roundUp || xd[sd + 1] !== void 0;\n                roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n                xd.length = sd;\n                if (roundUp) {\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for(; ++xd[--sd] > base - 1;){\n                        xd[sd] = 0;\n                        if (!sd) {\n                            ++e;\n                            xd.unshift(1);\n                        }\n                    }\n                }\n                // Determine trailing zeros.\n                for(len = xd.length; !xd[len - 1]; --len);\n                // E.g. [4, 11, 15] becomes 4bf.\n                for(i = 0, str = \"\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n                // Add binary exponent suffix?\n                if (isExp) {\n                    if (len > 1) {\n                        if (baseOut == 16 || baseOut == 8) {\n                            i = baseOut == 16 ? 4 : 3;\n                            for(--len; len % i; len++)str += \"0\";\n                            xd = convertBase(str, base, baseOut);\n                            for(len = xd.length; !xd[len - 1]; --len);\n                            // xd[0] will always be be 1\n                            for(i = 1, str = \"1.\"; i < len; i++)str += NUMERALS.charAt(xd[i]);\n                        } else {\n                            str = str.charAt(0) + \".\" + str.slice(1);\n                        }\n                    }\n                    str = str + (e < 0 ? \"p\" : \"p+\") + e;\n                } else if (e < 0) {\n                    for(; ++e;)str = \"0\" + str;\n                    str = \"0.\" + str;\n                } else {\n                    if (++e > len) for(e -= len; e--;)str += \"0\";\n                    else if (e < len) str = str.slice(0, e) + \".\" + str.slice(e);\n                }\n            }\n            str = (baseOut == 16 ? \"0x\" : baseOut == 2 ? \"0b\" : baseOut == 8 ? \"0o\" : \"\") + str;\n        }\n        return x.s < 0 ? \"-\" + str : str;\n    }\n    // Does not strip trailing zeros.\n    function truncate(arr, len) {\n        if (arr.length > len) {\n            arr.length = len;\n            return true;\n        }\n    }\n    // Decimal methods\n    /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */ /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function abs(x) {\n        return new this(x).abs();\n    }\n    /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function acos(x) {\n        return new this(x).acos();\n    }\n    /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function acosh(x) {\n        return new this(x).acosh();\n    }\n    /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */ function add(x, y) {\n        return new this(x).plus(y);\n    }\n    /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function asin(x) {\n        return new this(x).asin();\n    }\n    /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function asinh(x) {\n        return new this(x).asinh();\n    }\n    /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function atan(x) {\n        return new this(x).atan();\n    }\n    /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function atanh(x) {\n        return new this(x).atanh();\n    }\n    /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */ function atan2(y, x) {\n        y = new this(y);\n        x = new this(x);\n        var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;\n        // Either NaN\n        if (!y.s || !x.s) {\n            r = new this(NaN);\n        // Both ±Infinity\n        } else if (!y.d && !x.d) {\n            r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n            r.s = y.s;\n        // x is ±Infinity or y is ±0\n        } else if (!x.d || y.isZero()) {\n            r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n            r.s = y.s;\n        // y is ±Infinity or x is ±0\n        } else if (!y.d || x.isZero()) {\n            r = getPi(this, wpr, 1).times(0.5);\n            r.s = y.s;\n        // Both non-zero and finite\n        } else if (x.s < 0) {\n            this.precision = wpr;\n            this.rounding = 1;\n            r = this.atan(divide(y, x, wpr, 1));\n            x = getPi(this, wpr, 1);\n            this.precision = pr;\n            this.rounding = rm;\n            r = y.s < 0 ? r.minus(x) : r.plus(x);\n        } else {\n            r = this.atan(divide(y, x, wpr, 1));\n        }\n        return r;\n    }\n    /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function cbrt(x) {\n        return new this(x).cbrt();\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function ceil(x) {\n        return finalise(x = new this(x), x.e + 1, 2);\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */ function clamp(x, min, max) {\n        return new this(x).clamp(min, max);\n    }\n    /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */ function config(obj) {\n        if (!obj || typeof obj !== \"object\") throw Error(decimalError + \"Object expected\");\n        var i, p, v, useDefaults = obj.defaults === true, ps = [\n            \"precision\",\n            1,\n            MAX_DIGITS,\n            \"rounding\",\n            0,\n            8,\n            \"toExpNeg\",\n            -EXP_LIMIT,\n            0,\n            \"toExpPos\",\n            0,\n            EXP_LIMIT,\n            \"maxE\",\n            0,\n            EXP_LIMIT,\n            \"minE\",\n            -EXP_LIMIT,\n            0,\n            \"modulo\",\n            0,\n            9\n        ];\n        for(i = 0; i < ps.length; i += 3){\n            if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n            if ((v = obj[p]) !== void 0) {\n                if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n                else throw Error(invalidArgument + p + \": \" + v);\n            }\n        }\n        if (p = \"crypto\", useDefaults) this[p] = DEFAULTS[p];\n        if ((v = obj[p]) !== void 0) {\n            if (v === true || v === false || v === 0 || v === 1) {\n                if (v) {\n                    if (typeof crypto != \"undefined\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                        this[p] = true;\n                    } else {\n                        throw Error(cryptoUnavailable);\n                    }\n                } else {\n                    this[p] = false;\n                }\n            } else {\n                throw Error(invalidArgument + p + \": \" + v);\n            }\n        }\n        return this;\n    }\n    /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function cos(x) {\n        return new this(x).cos();\n    }\n    /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function cosh(x) {\n        return new this(x).cosh();\n    }\n    /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */ function clone(obj) {\n        var i, p, ps;\n        /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */ function Decimal(v) {\n            var e, i, t, x = this;\n            // Decimal called without new.\n            if (!(x instanceof Decimal)) return new Decimal(v);\n            // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n            // which points to Object.\n            x.constructor = Decimal;\n            // Duplicate.\n            if (isDecimalInstance(v)) {\n                x.s = v.s;\n                if (external) {\n                    if (!v.d || v.e > Decimal.maxE) {\n                        // Infinity.\n                        x.e = NaN;\n                        x.d = null;\n                    } else if (v.e < Decimal.minE) {\n                        // Zero.\n                        x.e = 0;\n                        x.d = [\n                            0\n                        ];\n                    } else {\n                        x.e = v.e;\n                        x.d = v.d.slice();\n                    }\n                } else {\n                    x.e = v.e;\n                    x.d = v.d ? v.d.slice() : v.d;\n                }\n                return;\n            }\n            t = typeof v;\n            if (t === \"number\") {\n                if (v === 0) {\n                    x.s = 1 / v < 0 ? -1 : 1;\n                    x.e = 0;\n                    x.d = [\n                        0\n                    ];\n                    return;\n                }\n                if (v < 0) {\n                    v = -v;\n                    x.s = -1;\n                } else {\n                    x.s = 1;\n                }\n                // Fast path for small integers.\n                if (v === ~~v && v < 1e7) {\n                    for(e = 0, i = v; i >= 10; i /= 10)e++;\n                    if (external) {\n                        if (e > Decimal.maxE) {\n                            x.e = NaN;\n                            x.d = null;\n                        } else if (e < Decimal.minE) {\n                            x.e = 0;\n                            x.d = [\n                                0\n                            ];\n                        } else {\n                            x.e = e;\n                            x.d = [\n                                v\n                            ];\n                        }\n                    } else {\n                        x.e = e;\n                        x.d = [\n                            v\n                        ];\n                    }\n                    return;\n                // Infinity, NaN.\n                } else if (v * 0 !== 0) {\n                    if (!v) x.s = NaN;\n                    x.e = NaN;\n                    x.d = null;\n                    return;\n                }\n                return parseDecimal(x, v.toString());\n            } else if (t !== \"string\") {\n                throw Error(invalidArgument + v);\n            }\n            // Minus sign?\n            if ((i = v.charCodeAt(0)) === 45) {\n                v = v.slice(1);\n                x.s = -1;\n            } else {\n                // Plus sign?\n                if (i === 43) v = v.slice(1);\n                x.s = 1;\n            }\n            return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n        }\n        Decimal.prototype = P;\n        Decimal.ROUND_UP = 0;\n        Decimal.ROUND_DOWN = 1;\n        Decimal.ROUND_CEIL = 2;\n        Decimal.ROUND_FLOOR = 3;\n        Decimal.ROUND_HALF_UP = 4;\n        Decimal.ROUND_HALF_DOWN = 5;\n        Decimal.ROUND_HALF_EVEN = 6;\n        Decimal.ROUND_HALF_CEIL = 7;\n        Decimal.ROUND_HALF_FLOOR = 8;\n        Decimal.EUCLID = 9;\n        Decimal.config = Decimal.set = config;\n        Decimal.clone = clone;\n        Decimal.isDecimal = isDecimalInstance;\n        Decimal.abs = abs;\n        Decimal.acos = acos;\n        Decimal.acosh = acosh; // ES6\n        Decimal.add = add;\n        Decimal.asin = asin;\n        Decimal.asinh = asinh; // ES6\n        Decimal.atan = atan;\n        Decimal.atanh = atanh; // ES6\n        Decimal.atan2 = atan2;\n        Decimal.cbrt = cbrt; // ES6\n        Decimal.ceil = ceil;\n        Decimal.clamp = clamp;\n        Decimal.cos = cos;\n        Decimal.cosh = cosh; // ES6\n        Decimal.div = div;\n        Decimal.exp = exp;\n        Decimal.floor = floor;\n        Decimal.hypot = hypot; // ES6\n        Decimal.ln = ln;\n        Decimal.log = log;\n        Decimal.log10 = log10; // ES6\n        Decimal.log2 = log2; // ES6\n        Decimal.max = max;\n        Decimal.min = min;\n        Decimal.mod = mod;\n        Decimal.mul = mul;\n        Decimal.pow = pow;\n        Decimal.random = random;\n        Decimal.round = round;\n        Decimal.sign = sign; // ES6\n        Decimal.sin = sin;\n        Decimal.sinh = sinh; // ES6\n        Decimal.sqrt = sqrt;\n        Decimal.sub = sub;\n        Decimal.sum = sum;\n        Decimal.tan = tan;\n        Decimal.tanh = tanh; // ES6\n        Decimal.trunc = trunc; // ES6\n        if (obj === void 0) obj = {};\n        if (obj) {\n            if (obj.defaults !== true) {\n                ps = [\n                    \"precision\",\n                    \"rounding\",\n                    \"toExpNeg\",\n                    \"toExpPos\",\n                    \"maxE\",\n                    \"minE\",\n                    \"modulo\",\n                    \"crypto\"\n                ];\n                for(i = 0; i < ps.length;)if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n            }\n        }\n        Decimal.config(obj);\n        return Decimal;\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */ function div(x, y) {\n        return new this(x).div(y);\n    }\n    /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */ function exp(x) {\n        return new this(x).exp();\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function floor(x) {\n        return finalise(x = new this(x), x.e + 1, 3);\n    }\n    /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */ function hypot() {\n        var i, n, t = new this(0);\n        external = false;\n        for(i = 0; i < arguments.length;){\n            n = new this(arguments[i++]);\n            if (!n.d) {\n                if (n.s) {\n                    external = true;\n                    return new this(1 / 0);\n                }\n                t = n;\n            } else if (t.d) {\n                t = t.plus(n.times(n));\n            }\n        }\n        external = true;\n        return t.sqrt();\n    }\n    /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */ function isDecimalInstance(obj) {\n        return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n    }\n    /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function ln(x) {\n        return new this(x).ln();\n    }\n    /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */ function log(x, y) {\n        return new this(x).log(y);\n    }\n    /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function log2(x) {\n        return new this(x).log(2);\n    }\n    /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function log10(x) {\n        return new this(x).log(10);\n    }\n    /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */ function max() {\n        return maxOrMin(this, arguments, \"lt\");\n    }\n    /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */ function min() {\n        return maxOrMin(this, arguments, \"gt\");\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */ function mod(x, y) {\n        return new this(x).mod(y);\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */ function mul(x, y) {\n        return new this(x).mul(y);\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */ function pow(x, y) {\n        return new this(x).pow(y);\n    }\n    /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */ function random(sd) {\n        var d, e, k, n, i = 0, r = new this(1), rd = [];\n        if (sd === void 0) sd = this.precision;\n        else checkInt32(sd, 1, MAX_DIGITS);\n        k = Math.ceil(sd / LOG_BASE);\n        if (!this.crypto) {\n            for(; i < k;)rd[i++] = Math.random() * 1e7 | 0;\n        // Browsers supporting crypto.getRandomValues.\n        } else if (crypto.getRandomValues) {\n            d = crypto.getRandomValues(new Uint32Array(k));\n            for(; i < k;){\n                n = d[i];\n                // 0 <= n < 4294967296\n                // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n                if (n >= 4.29e9) {\n                    d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n                } else {\n                    // 0 <= n <= 4289999999\n                    // 0 <= (n % 1e7) <= 9999999\n                    rd[i++] = n % 1e7;\n                }\n            }\n        // Node.js supporting crypto.randomBytes.\n        } else if (crypto.randomBytes) {\n            // buffer\n            d = crypto.randomBytes(k *= 4);\n            for(; i < k;){\n                // 0 <= n < 2147483648\n                n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n                // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n                if (n >= 2.14e9) {\n                    crypto.randomBytes(4).copy(d, i);\n                } else {\n                    // 0 <= n <= 2139999999\n                    // 0 <= (n % 1e7) <= 9999999\n                    rd.push(n % 1e7);\n                    i += 4;\n                }\n            }\n            i = k / 4;\n        } else {\n            throw Error(cryptoUnavailable);\n        }\n        k = rd[--i];\n        sd %= LOG_BASE;\n        // Convert trailing digits to zeros according to sd.\n        if (k && sd) {\n            n = mathpow(10, LOG_BASE - sd);\n            rd[i] = (k / n | 0) * n;\n        }\n        // Remove trailing words which are zero.\n        for(; rd[i] === 0; i--)rd.pop();\n        // Zero?\n        if (i < 0) {\n            e = 0;\n            rd = [\n                0\n            ];\n        } else {\n            e = -1;\n            // Remove leading words which are zero and adjust exponent accordingly.\n            for(; rd[0] === 0; e -= LOG_BASE)rd.shift();\n            // Count the digits of the first word of rd to determine leading zeros.\n            for(k = 1, n = rd[0]; n >= 10; n /= 10)k++;\n            // Adjust the exponent for leading zeros of the first word of rd.\n            if (k < LOG_BASE) e -= LOG_BASE - k;\n        }\n        r.e = e;\n        r.d = rd;\n        return r;\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function round(x) {\n        return finalise(x = new this(x), x.e + 1, this.rounding);\n    }\n    /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function sign(x) {\n        x = new this(x);\n        return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n    }\n    /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function sin(x) {\n        return new this(x).sin();\n    }\n    /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function sinh(x) {\n        return new this(x).sinh();\n    }\n    /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function sqrt(x) {\n        return new this(x).sqrt();\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */ function sub(x, y) {\n        return new this(x).sub(y);\n    }\n    /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */ function sum() {\n        var i = 0, args = arguments, x = new this(args[i]);\n        external = false;\n        for(; x.s && ++i < args.length;)x = x.plus(args[i]);\n        external = true;\n        return finalise(x, this.precision, this.rounding);\n    }\n    /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function tan(x) {\n        return new this(x).tan();\n    }\n    /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */ function tanh(x) {\n        return new this(x).tanh();\n    }\n    /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */ function trunc(x) {\n        return finalise(x = new this(x), x.e + 1, 1);\n    }\n    // Create and configure initial Decimal constructor.\n    Decimal = clone(DEFAULTS);\n    Decimal.prototype.constructor = Decimal;\n    Decimal[\"default\"] = Decimal.Decimal = Decimal;\n    // Create the internal constants from their string values.\n    LN10 = new Decimal(LN10);\n    PI = new Decimal(PI);\n    // Export.\n    // AMD.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return Decimal;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    // Node and other environments that support module.exports.\n    } else {}\n})(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVjaW1hbC5qcy9kZWNpbWFsLmpzIiwibWFwcGluZ3MiOiI7QUFBRSxVQUFVQSxXQUFXO0lBQ3JCO0lBR0E7Ozs7OztHQU1DLEdBR0Qsa0dBQWtHO0lBR2hHLGtDQUFrQztJQUNsQyx1RUFBdUU7SUFDekUsSUFBSUMsWUFBWSxNQUVkLG1GQUFtRjtJQUNuRiwwRkFBMEY7SUFDMUZDLGFBQWEsS0FFYiw0QkFBNEI7SUFDNUJDLFdBQVcsb0JBRVgsNkNBQTZDO0lBQzdDQyxPQUFPLHNnQ0FFUCxvQkFBb0I7SUFDcEJDLEtBQUssc2dDQUdMLG1FQUFtRTtJQUNuRUMsV0FBVztRQUVULHNFQUFzRTtRQUN0RSxxRkFBcUY7UUFFckYsOEZBQThGO1FBQzlGLDRDQUE0QztRQUM1Q0MsV0FBVztRQUVYLHVEQUF1RDtRQUN2RCxFQUFFO1FBQ0YscUNBQXFDO1FBQ3JDLG1DQUFtQztRQUNuQyx3Q0FBd0M7UUFDeEMsd0NBQXdDO1FBQ3hDLG9FQUFvRTtRQUNwRSxzRUFBc0U7UUFDdEUsd0ZBQXdGO1FBQ3hGLG1GQUFtRjtRQUNuRixtRkFBbUY7UUFDbkYsRUFBRTtRQUNGLE9BQU87UUFDUCwwQkFBMEI7UUFDMUIsOENBQThDO1FBQzlDQyxVQUFVO1FBRVYsOERBQThEO1FBQzlELHVGQUF1RjtRQUN2RixxREFBcUQ7UUFDckQsRUFBRTtRQUNGLHdGQUF3RjtRQUN4RiwrRUFBK0U7UUFDL0UsMEVBQTBFO1FBQzFFLGdEQUFnRDtRQUNoRCxxRkFBcUY7UUFDckYsRUFBRTtRQUNGLDBGQUEwRjtRQUMxRiw4RkFBOEY7UUFDOUYsaURBQWlEO1FBQ2pEQyxRQUFRO1FBRVIsbUZBQW1GO1FBQ25GLHlCQUF5QjtRQUN6QkMsVUFBVSxDQUFDO1FBRVgsaUZBQWlGO1FBQ2pGLHlCQUF5QjtRQUN6QkMsVUFBVztRQUVYLHNFQUFzRTtRQUN0RSxxQ0FBcUM7UUFDckNDLE1BQU0sQ0FBQ1g7UUFFUCx1RUFBdUU7UUFDdkUscURBQXFEO1FBQ3JEWSxNQUFNWjtRQUVOLGtGQUFrRjtRQUNsRmEsUUFBUSxNQUErQixhQUFhO0lBQ3RELEdBR0Ysa0dBQWtHO0lBR2hHQyxTQUFTQyxTQUFTQyxZQUFZQyxVQUM5QkMsV0FBVyxNQUVYQyxlQUFlLG1CQUNmQyxrQkFBa0JELGVBQWUsc0JBQ2pDRSx5QkFBeUJGLGVBQWUsNEJBQ3hDRyxvQkFBb0JILGVBQWUsc0JBQ25DSSxNQUFNLG9CQUVOQyxZQUFZQyxLQUFLQyxLQUFLLEVBQ3RCQyxVQUFVRixLQUFLRyxHQUFHLEVBRWxCQyxXQUFXLDhDQUNYQyxRQUFRLDBEQUNSQyxVQUFVLGlEQUNWQyxZQUFZLHNDQUVaQyxPQUFPLEtBQ1BDLFdBQVcsR0FDWEMsbUJBQW1CLGtCQUVuQkMsaUJBQWlCakMsS0FBS2tDLE1BQU0sR0FBRyxHQUMvQkMsZUFBZWxDLEdBQUdpQyxNQUFNLEdBQUcsR0FFM0IsMkJBQTJCO0lBQzNCRSxJQUFJO1FBQUVDLGFBQWFqQjtJQUFJO0lBR3pCLDRCQUE0QjtJQUc1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTZEQyxHQUdEOzs7R0FHQyxHQUNEZ0IsRUFBRUUsYUFBYSxHQUFHRixFQUFFRyxHQUFHLEdBQUc7UUFDeEIsSUFBSUMsSUFBSSxJQUFJLElBQUksQ0FBQ0MsV0FBVyxDQUFDLElBQUk7UUFDakMsSUFBSUQsRUFBRUUsQ0FBQyxHQUFHLEdBQUdGLEVBQUVFLENBQUMsR0FBRztRQUNuQixPQUFPQyxTQUFTSDtJQUNsQjtJQUdBOzs7O0dBSUMsR0FDREosRUFBRVEsSUFBSSxHQUFHO1FBQ1AsT0FBT0QsU0FBUyxJQUFJLElBQUksQ0FBQ0YsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUNJLENBQUMsR0FBRyxHQUFHO0lBQzFEO0lBR0E7Ozs7Ozs7R0FPQyxHQUNEVCxFQUFFVSxTQUFTLEdBQUdWLEVBQUVXLEtBQUssR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEdBQUc7UUFDeEMsSUFBSUMsR0FDRlYsSUFBSSxJQUFJLEVBQ1JXLE9BQU9YLEVBQUVDLFdBQVc7UUFDdEJPLE1BQU0sSUFBSUcsS0FBS0g7UUFDZkMsTUFBTSxJQUFJRSxLQUFLRjtRQUNmLElBQUksQ0FBQ0QsSUFBSU4sQ0FBQyxJQUFJLENBQUNPLElBQUlQLENBQUMsRUFBRSxPQUFPLElBQUlTLEtBQUtDO1FBQ3RDLElBQUlKLElBQUlLLEVBQUUsQ0FBQ0osTUFBTSxNQUFNSyxNQUFNckMsa0JBQWtCZ0M7UUFDL0NDLElBQUlWLEVBQUVlLEdBQUcsQ0FBQ1A7UUFDVixPQUFPRSxJQUFJLElBQUlGLE1BQU1SLEVBQUVlLEdBQUcsQ0FBQ04sT0FBTyxJQUFJQSxNQUFNLElBQUlFLEtBQUtYO0lBQ3ZEO0lBR0E7Ozs7Ozs7R0FPQyxHQUNESixFQUFFb0IsVUFBVSxHQUFHcEIsRUFBRW1CLEdBQUcsR0FBRyxTQUFVRSxDQUFDO1FBQ2hDLElBQUlDLEdBQUdDLEdBQUdDLEtBQUtDLEtBQ2JyQixJQUFJLElBQUksRUFDUnNCLEtBQUt0QixFQUFFdUIsQ0FBQyxFQUNSQyxLQUFLLENBQUNQLElBQUksSUFBSWpCLEVBQUVDLFdBQVcsQ0FBQ2dCLEVBQUMsRUFBR00sQ0FBQyxFQUNqQ0UsS0FBS3pCLEVBQUVFLENBQUMsRUFDUndCLEtBQUtULEVBQUVmLENBQUM7UUFFViwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDb0IsTUFBTSxDQUFDRSxJQUFJO1lBQ2QsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEtBQUtkLE1BQU1hLE9BQU9DLEtBQUtELEtBQUtILE9BQU9FLEtBQUssSUFBSSxDQUFDRixLQUFLRyxLQUFLLElBQUksSUFBSSxDQUFDO1FBQ2pGO1FBRUEsZUFBZTtRQUNmLElBQUksQ0FBQ0gsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDRSxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU9GLEVBQUUsQ0FBQyxFQUFFLEdBQUdHLEtBQUtELEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQ0UsS0FBSztRQUV4RCxnQkFBZ0I7UUFDaEIsSUFBSUQsT0FBT0MsSUFBSSxPQUFPRDtRQUV0QixxQkFBcUI7UUFDckIsSUFBSXpCLEVBQUVLLENBQUMsS0FBS1ksRUFBRVosQ0FBQyxFQUFFLE9BQU9MLEVBQUVLLENBQUMsR0FBR1ksRUFBRVosQ0FBQyxHQUFHb0IsS0FBSyxJQUFJLElBQUksQ0FBQztRQUVsREwsTUFBTUUsR0FBRzVCLE1BQU07UUFDZjJCLE1BQU1HLEdBQUc5QixNQUFNO1FBRWYsMEJBQTBCO1FBQzFCLElBQUt3QixJQUFJLEdBQUdDLElBQUlDLE1BQU1DLE1BQU1ELE1BQU1DLEtBQUtILElBQUlDLEdBQUcsRUFBRUQsRUFBRztZQUNqRCxJQUFJSSxFQUFFLENBQUNKLEVBQUUsS0FBS00sRUFBRSxDQUFDTixFQUFFLEVBQUUsT0FBT0ksRUFBRSxDQUFDSixFQUFFLEdBQUdNLEVBQUUsQ0FBQ04sRUFBRSxHQUFHTyxLQUFLLElBQUksSUFBSSxDQUFDO1FBQzVEO1FBRUEsbUJBQW1CO1FBQ25CLE9BQU9MLFFBQVFDLE1BQU0sSUFBSUQsTUFBTUMsTUFBTUksS0FBSyxJQUFJLElBQUksQ0FBQztJQUNyRDtJQUdBOzs7Ozs7Ozs7Ozs7R0FZQyxHQUNEN0IsRUFBRStCLE1BQU0sR0FBRy9CLEVBQUVnQyxHQUFHLEdBQUc7UUFDakIsSUFBSUMsSUFBSUMsSUFDTjlCLElBQUksSUFBSSxFQUNSVyxPQUFPWCxFQUFFQyxXQUFXO1FBRXRCLElBQUksQ0FBQ0QsRUFBRXVCLENBQUMsRUFBRSxPQUFPLElBQUlaLEtBQUtDO1FBRTFCLHVCQUF1QjtRQUN2QixJQUFJLENBQUNaLEVBQUV1QixDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sSUFBSVosS0FBSztRQUU3QmtCLEtBQUtsQixLQUFLaEQsU0FBUztRQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNsQitDLEtBQUtoRCxTQUFTLEdBQUdrRSxLQUFLL0MsS0FBSzJCLEdBQUcsQ0FBQ1QsRUFBRUssQ0FBQyxFQUFFTCxFQUFFK0IsRUFBRSxNQUFNeEM7UUFDOUNvQixLQUFLL0MsUUFBUSxHQUFHO1FBRWhCb0MsSUFBSTJCLE9BQU9oQixNQUFNcUIsaUJBQWlCckIsTUFBTVg7UUFFeENXLEtBQUtoRCxTQUFTLEdBQUdrRTtRQUNqQmxCLEtBQUsvQyxRQUFRLEdBQUdrRTtRQUVoQixPQUFPM0IsU0FBUzdCLFlBQVksS0FBS0EsWUFBWSxJQUFJMEIsRUFBRWlDLEdBQUcsS0FBS2pDLEdBQUc2QixJQUFJQyxJQUFJO0lBQ3hFO0lBR0E7Ozs7Ozs7Ozs7Ozs7OztHQWVDLEdBQ0RsQyxFQUFFc0MsUUFBUSxHQUFHdEMsRUFBRXVDLElBQUksR0FBRztRQUNwQixJQUFJOUIsR0FBRytCLEdBQUdDLEdBQUdDLEdBQUdDLEtBQUtyQyxHQUFHNkIsSUFBSVMsR0FBR0MsSUFBSUMsU0FDakMxQyxJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJLENBQUNELEVBQUUyQyxRQUFRLE1BQU0zQyxFQUFFNEMsTUFBTSxJQUFJLE9BQU8sSUFBSWpDLEtBQUtYO1FBQ2pEekIsV0FBVztRQUVYLG9CQUFvQjtRQUNwQjJCLElBQUlGLEVBQUVFLENBQUMsR0FBR2xCLFFBQVFnQixFQUFFRSxDQUFDLEdBQUdGLEdBQUcsSUFBSTtRQUU5QixnQ0FBZ0M7UUFDaEMseUVBQXlFO1FBQzFFLElBQUksQ0FBQ0UsS0FBS3BCLEtBQUtpQixHQUFHLENBQUNHLE1BQU0sSUFBSSxHQUFHO1lBQzlCbUMsSUFBSVEsZUFBZTdDLEVBQUV1QixDQUFDO1lBQ3RCbEIsSUFBSUwsRUFBRUssQ0FBQztZQUVQLG1FQUFtRTtZQUNuRSxJQUFJSCxJQUFJLENBQUNHLElBQUlnQyxFQUFFM0MsTUFBTSxHQUFHLEtBQUssR0FBRzJDLEtBQU1uQyxLQUFLLEtBQUtBLEtBQUssQ0FBQyxJQUFJLE1BQU07WUFDaEVBLElBQUlsQixRQUFRcUQsR0FBRyxJQUFJO1lBRW5CLDREQUE0RDtZQUM1RGhDLElBQUl4QixVQUFVLENBQUN3QixJQUFJLEtBQUssS0FBTUEsQ0FBQUEsSUFBSSxLQUFNQSxDQUFBQSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUM7WUFFdEQsSUFBSUgsS0FBSyxJQUFJLEdBQUc7Z0JBQ2RtQyxJQUFJLE9BQU9oQztZQUNiLE9BQU87Z0JBQ0xnQyxJQUFJbkMsRUFBRTRDLGFBQWE7Z0JBQ25CVCxJQUFJQSxFQUFFVSxLQUFLLENBQUMsR0FBR1YsRUFBRVcsT0FBTyxDQUFDLE9BQU8sS0FBSzNDO1lBQ3ZDO1lBRUFpQyxJQUFJLElBQUkzQixLQUFLMEI7WUFDYkMsRUFBRXBDLENBQUMsR0FBR0YsRUFBRUUsQ0FBQztRQUNYLE9BQU87WUFDTG9DLElBQUksSUFBSTNCLEtBQUtULEVBQUUrQyxRQUFRO1FBQ3pCO1FBRUFsQixLQUFLLENBQUMxQixJQUFJTSxLQUFLaEQsU0FBUyxJQUFJO1FBRTVCLG1CQUFtQjtRQUNuQixpQ0FBaUM7UUFDakMsT0FBUztZQUNQNkUsSUFBSUY7WUFDSkcsS0FBS0QsRUFBRVUsS0FBSyxDQUFDVixHQUFHVSxLQUFLLENBQUNWO1lBQ3RCRSxVQUFVRCxHQUFHVSxJQUFJLENBQUNuRDtZQUNsQnNDLElBQUljLE9BQU9WLFFBQVFTLElBQUksQ0FBQ25ELEdBQUdrRCxLQUFLLENBQUNWLElBQUlFLFFBQVFTLElBQUksQ0FBQ1YsS0FBS1YsS0FBSyxHQUFHO1lBRS9ELHVEQUF1RDtZQUN2RCxJQUFJYyxlQUFlTCxFQUFFakIsQ0FBQyxFQUFFd0IsS0FBSyxDQUFDLEdBQUdoQixRQUFRLENBQUNNLElBQUlRLGVBQWVQLEVBQUVmLENBQUMsR0FBR3dCLEtBQUssQ0FBQyxHQUFHaEIsS0FBSztnQkFDL0VNLElBQUlBLEVBQUVVLEtBQUssQ0FBQ2hCLEtBQUssR0FBR0EsS0FBSztnQkFFekIsNEZBQTRGO2dCQUM1RixrRUFBa0U7Z0JBQ2xFLElBQUlNLEtBQUssVUFBVSxDQUFDRSxPQUFPRixLQUFLLFFBQVE7b0JBRXRDLHlGQUF5RjtvQkFDekYsK0JBQStCO29CQUMvQixJQUFJLENBQUNFLEtBQUs7d0JBQ1JwQyxTQUFTcUMsR0FBR25DLElBQUksR0FBRzt3QkFFbkIsSUFBSW1DLEVBQUVVLEtBQUssQ0FBQ1YsR0FBR1UsS0FBSyxDQUFDVixHQUFHYSxFQUFFLENBQUNyRCxJQUFJOzRCQUM3QnNDLElBQUlFOzRCQUNKO3dCQUNGO29CQUNGO29CQUVBVCxNQUFNO29CQUNOUSxNQUFNO2dCQUNSLE9BQU87b0JBRUwsaUZBQWlGO29CQUNqRiw4REFBOEQ7b0JBQzlELElBQUksQ0FBQyxDQUFDRixLQUFLLENBQUMsQ0FBQ0EsRUFBRVUsS0FBSyxDQUFDLE1BQU1WLEVBQUVpQixNQUFNLENBQUMsTUFBTSxLQUFLO3dCQUU3Qyx3Q0FBd0M7d0JBQ3hDbkQsU0FBU21DLEdBQUdqQyxJQUFJLEdBQUc7d0JBQ25CK0IsSUFBSSxDQUFDRSxFQUFFWSxLQUFLLENBQUNaLEdBQUdZLEtBQUssQ0FBQ1osR0FBR2UsRUFBRSxDQUFDckQ7b0JBQzlCO29CQUVBO2dCQUNGO1lBQ0Y7UUFDRjtRQUVBekIsV0FBVztRQUVYLE9BQU80QixTQUFTbUMsR0FBR2pDLEdBQUdNLEtBQUsvQyxRQUFRLEVBQUV3RTtJQUN2QztJQUdBOzs7R0FHQyxHQUNEeEMsRUFBRTJELGFBQWEsR0FBRzNELEVBQUU0RCxFQUFFLEdBQUc7UUFDdkIsSUFBSUMsR0FDRmxDLElBQUksSUFBSSxDQUFDQSxDQUFDLEVBQ1ZjLElBQUl6QjtRQUVOLElBQUlXLEdBQUc7WUFDTGtDLElBQUlsQyxFQUFFN0IsTUFBTSxHQUFHO1lBQ2YyQyxJQUFJLENBQUNvQixJQUFJNUUsVUFBVSxJQUFJLENBQUN3QixDQUFDLEdBQUdkLFNBQVEsSUFBS0E7WUFFekMsMERBQTBEO1lBQzFEa0UsSUFBSWxDLENBQUMsQ0FBQ2tDLEVBQUU7WUFDUixJQUFJQSxHQUFHLE1BQU9BLElBQUksTUFBTSxHQUFHQSxLQUFLLEdBQUlwQjtZQUNwQyxJQUFJQSxJQUFJLEdBQUdBLElBQUk7UUFDakI7UUFFQSxPQUFPQTtJQUNUO0lBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JDLEdBQ0R6QyxFQUFFOEQsU0FBUyxHQUFHOUQsRUFBRStELEdBQUcsR0FBRyxTQUFVMUMsQ0FBQztRQUMvQixPQUFPbUMsT0FBTyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUNuRCxXQUFXLENBQUNnQjtJQUMzQztJQUdBOzs7O0dBSUMsR0FDRHJCLEVBQUVnRSxrQkFBa0IsR0FBR2hFLEVBQUVpRSxRQUFRLEdBQUcsU0FBVTVDLENBQUM7UUFDN0MsSUFBSWpCLElBQUksSUFBSSxFQUNWVyxPQUFPWCxFQUFFQyxXQUFXO1FBQ3RCLE9BQU9FLFNBQVNpRCxPQUFPcEQsR0FBRyxJQUFJVyxLQUFLTSxJQUFJLEdBQUcsR0FBRyxJQUFJTixLQUFLaEQsU0FBUyxFQUFFZ0QsS0FBSy9DLFFBQVE7SUFDaEY7SUFHQTs7O0dBR0MsR0FDRGdDLEVBQUVrRSxNQUFNLEdBQUdsRSxFQUFFeUQsRUFBRSxHQUFHLFNBQVVwQyxDQUFDO1FBQzNCLE9BQU8sSUFBSSxDQUFDRixHQUFHLENBQUNFLE9BQU87SUFDekI7SUFHQTs7OztHQUlDLEdBQ0RyQixFQUFFYixLQUFLLEdBQUc7UUFDUixPQUFPb0IsU0FBUyxJQUFJLElBQUksQ0FBQ0YsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUNJLENBQUMsR0FBRyxHQUFHO0lBQzFEO0lBR0E7Ozs7R0FJQyxHQUNEVCxFQUFFbUUsV0FBVyxHQUFHbkUsRUFBRWlCLEVBQUUsR0FBRyxTQUFVSSxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDRixHQUFHLENBQUNFLEtBQUs7SUFDdkI7SUFHQTs7OztHQUlDLEdBQ0RyQixFQUFFb0Usb0JBQW9CLEdBQUdwRSxFQUFFcUUsR0FBRyxHQUFHLFNBQVVoRCxDQUFDO1FBQzFDLElBQUlQLElBQUksSUFBSSxDQUFDSyxHQUFHLENBQUNFO1FBQ2pCLE9BQU9QLEtBQUssS0FBS0EsTUFBTTtJQUN6QjtJQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3QkMsR0FDRGQsRUFBRXNFLGdCQUFnQixHQUFHdEUsRUFBRXVFLElBQUksR0FBRztRQUM1QixJQUFJekQsR0FBRzJCLEdBQUdSLElBQUlDLElBQUlzQyxLQUNoQnBFLElBQUksSUFBSSxFQUNSVyxPQUFPWCxFQUFFQyxXQUFXLEVBQ3BCb0UsTUFBTSxJQUFJMUQsS0FBSztRQUVqQixJQUFJLENBQUNYLEVBQUUyQyxRQUFRLElBQUksT0FBTyxJQUFJaEMsS0FBS1gsRUFBRUUsQ0FBQyxHQUFHLElBQUksSUFBSVU7UUFDakQsSUFBSVosRUFBRTRDLE1BQU0sSUFBSSxPQUFPeUI7UUFFdkJ4QyxLQUFLbEIsS0FBS2hELFNBQVM7UUFDbkJtRSxLQUFLbkIsS0FBSy9DLFFBQVE7UUFDbEIrQyxLQUFLaEQsU0FBUyxHQUFHa0UsS0FBSy9DLEtBQUsyQixHQUFHLENBQUNULEVBQUVLLENBQUMsRUFBRUwsRUFBRStCLEVBQUUsTUFBTTtRQUM5Q3BCLEtBQUsvQyxRQUFRLEdBQUc7UUFDaEJ3RyxNQUFNcEUsRUFBRXVCLENBQUMsQ0FBQzdCLE1BQU07UUFFaEIsOERBQThEO1FBQzlELGdEQUFnRDtRQUVoRCxzRUFBc0U7UUFDdEUscUVBQXFFO1FBQ3JFLElBQUkwRSxNQUFNLElBQUk7WUFDWjFELElBQUk1QixLQUFLc0IsSUFBSSxDQUFDZ0UsTUFBTTtZQUNwQi9CLElBQUksQ0FBQyxJQUFJaUMsUUFBUSxHQUFHNUQsRUFBQyxFQUFHdUMsUUFBUTtRQUNsQyxPQUFPO1lBQ0x2QyxJQUFJO1lBQ0oyQixJQUFJO1FBQ047UUFFQXJDLElBQUl1RSxhQUFhNUQsTUFBTSxHQUFHWCxFQUFFa0QsS0FBSyxDQUFDYixJQUFJLElBQUkxQixLQUFLLElBQUk7UUFFbkQsNkJBQTZCO1FBQzdCLElBQUk2RCxTQUNGdEQsSUFBSVIsR0FDSitELEtBQUssSUFBSTlELEtBQUs7UUFDaEIsTUFBT08sS0FBTTtZQUNYc0QsVUFBVXhFLEVBQUVrRCxLQUFLLENBQUNsRDtZQUNsQkEsSUFBSXFFLElBQUlLLEtBQUssQ0FBQ0YsUUFBUXRCLEtBQUssQ0FBQ3VCLEdBQUdDLEtBQUssQ0FBQ0YsUUFBUXRCLEtBQUssQ0FBQ3VCO1FBQ3JEO1FBRUEsT0FBT3RFLFNBQVNILEdBQUdXLEtBQUtoRCxTQUFTLEdBQUdrRSxJQUFJbEIsS0FBSy9DLFFBQVEsR0FBR2tFLElBQUk7SUFDOUQ7SUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E2QkMsR0FDRGxDLEVBQUUrRSxjQUFjLEdBQUcvRSxFQUFFZ0YsSUFBSSxHQUFHO1FBQzFCLElBQUlsRSxHQUFHbUIsSUFBSUMsSUFBSXNDLEtBQ2JwRSxJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJLENBQUNELEVBQUUyQyxRQUFRLE1BQU0zQyxFQUFFNEMsTUFBTSxJQUFJLE9BQU8sSUFBSWpDLEtBQUtYO1FBRWpENkIsS0FBS2xCLEtBQUtoRCxTQUFTO1FBQ25CbUUsS0FBS25CLEtBQUsvQyxRQUFRO1FBQ2xCK0MsS0FBS2hELFNBQVMsR0FBR2tFLEtBQUsvQyxLQUFLMkIsR0FBRyxDQUFDVCxFQUFFSyxDQUFDLEVBQUVMLEVBQUUrQixFQUFFLE1BQU07UUFDOUNwQixLQUFLL0MsUUFBUSxHQUFHO1FBQ2hCd0csTUFBTXBFLEVBQUV1QixDQUFDLENBQUM3QixNQUFNO1FBRWhCLElBQUkwRSxNQUFNLEdBQUc7WUFDWHBFLElBQUl1RSxhQUFhNUQsTUFBTSxHQUFHWCxHQUFHQSxHQUFHO1FBQ2xDLE9BQU87WUFFTCxxRUFBcUU7WUFDckUsNkNBQTZDO1lBQzdDLG1DQUFtQztZQUVuQywwRUFBMEU7WUFDMUUsZ0VBQWdFO1lBQ2hFLG9DQUFvQztZQUVwQyxzRUFBc0U7WUFDdEVVLElBQUksTUFBTTVCLEtBQUsrRixJQUFJLENBQUNUO1lBQ3BCMUQsSUFBSUEsSUFBSSxLQUFLLEtBQUtBLElBQUk7WUFFdEJWLElBQUlBLEVBQUVrRCxLQUFLLENBQUMsSUFBSW9CLFFBQVEsR0FBRzVEO1lBQzNCVixJQUFJdUUsYUFBYTVELE1BQU0sR0FBR1gsR0FBR0EsR0FBRztZQUVoQyw2QkFBNkI7WUFDN0IsSUFBSThFLFNBQ0ZDLEtBQUssSUFBSXBFLEtBQUssSUFDZHFFLE1BQU0sSUFBSXJFLEtBQUssS0FDZnNFLE1BQU0sSUFBSXRFLEtBQUs7WUFDakIsTUFBT0QsS0FBTTtnQkFDWG9FLFVBQVU5RSxFQUFFa0QsS0FBSyxDQUFDbEQ7Z0JBQ2xCQSxJQUFJQSxFQUFFa0QsS0FBSyxDQUFDNkIsR0FBRzVCLElBQUksQ0FBQzJCLFFBQVE1QixLQUFLLENBQUM4QixJQUFJOUIsS0FBSyxDQUFDNEIsU0FBUzNCLElBQUksQ0FBQzhCO1lBQzVEO1FBQ0Y7UUFFQXRFLEtBQUtoRCxTQUFTLEdBQUdrRTtRQUNqQmxCLEtBQUsvQyxRQUFRLEdBQUdrRTtRQUVoQixPQUFPM0IsU0FBU0gsR0FBRzZCLElBQUlDLElBQUk7SUFDN0I7SUFHQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUMsR0FDRGxDLEVBQUVzRixpQkFBaUIsR0FBR3RGLEVBQUV1RixJQUFJLEdBQUc7UUFDN0IsSUFBSXRELElBQUlDLElBQ045QixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJLENBQUNELEVBQUUyQyxRQUFRLElBQUksT0FBTyxJQUFJaEMsS0FBS1gsRUFBRUUsQ0FBQztRQUN0QyxJQUFJRixFQUFFNEMsTUFBTSxJQUFJLE9BQU8sSUFBSWpDLEtBQUtYO1FBRWhDNkIsS0FBS2xCLEtBQUtoRCxTQUFTO1FBQ25CbUUsS0FBS25CLEtBQUsvQyxRQUFRO1FBQ2xCK0MsS0FBS2hELFNBQVMsR0FBR2tFLEtBQUs7UUFDdEJsQixLQUFLL0MsUUFBUSxHQUFHO1FBRWhCLE9BQU93RixPQUFPcEQsRUFBRTRFLElBQUksSUFBSTVFLEVBQUVtRSxJQUFJLElBQUl4RCxLQUFLaEQsU0FBUyxHQUFHa0UsSUFBSWxCLEtBQUsvQyxRQUFRLEdBQUdrRTtJQUN6RTtJQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkMsR0FDRGxDLEVBQUV3RixhQUFhLEdBQUd4RixFQUFFeUYsSUFBSSxHQUFHO1FBQ3pCLElBQUlDLFFBQ0Z0RixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVyxFQUNwQlMsSUFBSVYsRUFBRUQsR0FBRyxHQUFHZ0IsR0FBRyxDQUFDLElBQ2hCYyxLQUFLbEIsS0FBS2hELFNBQVMsRUFDbkJtRSxLQUFLbkIsS0FBSy9DLFFBQVE7UUFFcEIsSUFBSThDLE1BQU0sQ0FBQyxHQUFHO1lBQ1osT0FBT0EsTUFBTSxJQUVUVixFQUFFdUYsS0FBSyxLQUFLQyxNQUFNN0UsTUFBTWtCLElBQUlDLE1BQU0sSUFBSW5CLEtBQUssS0FFM0MsSUFBSUEsS0FBS0M7UUFDZjtRQUVBLElBQUlaLEVBQUU0QyxNQUFNLElBQUksT0FBTzRDLE1BQU03RSxNQUFNa0IsS0FBSyxHQUFHQyxJQUFJb0IsS0FBSyxDQUFDO1FBRXJELDhEQUE4RDtRQUU5RHZDLEtBQUtoRCxTQUFTLEdBQUdrRSxLQUFLO1FBQ3RCbEIsS0FBSy9DLFFBQVEsR0FBRztRQUVoQm9DLElBQUlBLEVBQUV5RixJQUFJO1FBQ1ZILFNBQVNFLE1BQU03RSxNQUFNa0IsS0FBSyxHQUFHQyxJQUFJb0IsS0FBSyxDQUFDO1FBRXZDdkMsS0FBS2hELFNBQVMsR0FBR2tFO1FBQ2pCbEIsS0FBSy9DLFFBQVEsR0FBR2tFO1FBRWhCLE9BQU93RCxPQUFPWixLQUFLLENBQUMxRTtJQUN0QjtJQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkMsR0FDREosRUFBRThGLHVCQUF1QixHQUFHOUYsRUFBRStGLEtBQUssR0FBRztRQUNwQyxJQUFJOUQsSUFBSUMsSUFDTjlCLElBQUksSUFBSSxFQUNSVyxPQUFPWCxFQUFFQyxXQUFXO1FBRXRCLElBQUlELEVBQUU0RixHQUFHLENBQUMsSUFBSSxPQUFPLElBQUlqRixLQUFLWCxFQUFFcUQsRUFBRSxDQUFDLEtBQUssSUFBSXpDO1FBQzVDLElBQUksQ0FBQ1osRUFBRTJDLFFBQVEsSUFBSSxPQUFPLElBQUloQyxLQUFLWDtRQUVuQzZCLEtBQUtsQixLQUFLaEQsU0FBUztRQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNsQitDLEtBQUtoRCxTQUFTLEdBQUdrRSxLQUFLL0MsS0FBSzJCLEdBQUcsQ0FBQzNCLEtBQUtpQixHQUFHLENBQUNDLEVBQUVLLENBQUMsR0FBR0wsRUFBRStCLEVBQUUsTUFBTTtRQUN4RHBCLEtBQUsvQyxRQUFRLEdBQUc7UUFDaEJXLFdBQVc7UUFFWHlCLElBQUlBLEVBQUVrRCxLQUFLLENBQUNsRCxHQUFHMEUsS0FBSyxDQUFDLEdBQUdHLElBQUksR0FBRzFCLElBQUksQ0FBQ25EO1FBRXBDekIsV0FBVztRQUNYb0MsS0FBS2hELFNBQVMsR0FBR2tFO1FBQ2pCbEIsS0FBSy9DLFFBQVEsR0FBR2tFO1FBRWhCLE9BQU85QixFQUFFNkYsRUFBRTtJQUNiO0lBR0E7Ozs7Ozs7Ozs7Ozs7OztHQWVDLEdBQ0RqRyxFQUFFa0cscUJBQXFCLEdBQUdsRyxFQUFFbUcsS0FBSyxHQUFHO1FBQ2xDLElBQUlsRSxJQUFJQyxJQUNOOUIsSUFBSSxJQUFJLEVBQ1JXLE9BQU9YLEVBQUVDLFdBQVc7UUFFdEIsSUFBSSxDQUFDRCxFQUFFMkMsUUFBUSxNQUFNM0MsRUFBRTRDLE1BQU0sSUFBSSxPQUFPLElBQUlqQyxLQUFLWDtRQUVqRDZCLEtBQUtsQixLQUFLaEQsU0FBUztRQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNsQitDLEtBQUtoRCxTQUFTLEdBQUdrRSxLQUFLLElBQUkvQyxLQUFLMkIsR0FBRyxDQUFDM0IsS0FBS2lCLEdBQUcsQ0FBQ0MsRUFBRUssQ0FBQyxHQUFHTCxFQUFFK0IsRUFBRSxNQUFNO1FBQzVEcEIsS0FBSy9DLFFBQVEsR0FBRztRQUNoQlcsV0FBVztRQUVYeUIsSUFBSUEsRUFBRWtELEtBQUssQ0FBQ2xELEdBQUdtRCxJQUFJLENBQUMsR0FBRzBCLElBQUksR0FBRzFCLElBQUksQ0FBQ25EO1FBRW5DekIsV0FBVztRQUNYb0MsS0FBS2hELFNBQVMsR0FBR2tFO1FBQ2pCbEIsS0FBSy9DLFFBQVEsR0FBR2tFO1FBRWhCLE9BQU85QixFQUFFNkYsRUFBRTtJQUNiO0lBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCQyxHQUNEakcsRUFBRW9HLHdCQUF3QixHQUFHcEcsRUFBRXFHLEtBQUssR0FBRztRQUNyQyxJQUFJcEUsSUFBSUMsSUFBSW9FLEtBQUtDLEtBQ2ZuRyxJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJLENBQUNELEVBQUUyQyxRQUFRLElBQUksT0FBTyxJQUFJaEMsS0FBS0M7UUFDbkMsSUFBSVosRUFBRUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxJQUFJTSxLQUFLWCxFQUFFRCxHQUFHLEdBQUdzRCxFQUFFLENBQUMsS0FBS3JELEVBQUVFLENBQUMsR0FBRyxJQUFJRixFQUFFNEMsTUFBTSxLQUFLNUMsSUFBSVk7UUFFekVpQixLQUFLbEIsS0FBS2hELFNBQVM7UUFDbkJtRSxLQUFLbkIsS0FBSy9DLFFBQVE7UUFDbEJ1SSxNQUFNbkcsRUFBRStCLEVBQUU7UUFFVixJQUFJakQsS0FBSzJCLEdBQUcsQ0FBQzBGLEtBQUt0RSxNQUFNLElBQUksQ0FBQzdCLEVBQUVLLENBQUMsR0FBRyxHQUFHLE9BQU9GLFNBQVMsSUFBSVEsS0FBS1gsSUFBSTZCLElBQUlDLElBQUk7UUFFM0VuQixLQUFLaEQsU0FBUyxHQUFHdUksTUFBTUMsTUFBTW5HLEVBQUVLLENBQUM7UUFFaENMLElBQUlvRCxPQUFPcEQsRUFBRW1ELElBQUksQ0FBQyxJQUFJLElBQUl4QyxLQUFLLEdBQUcrRCxLQUFLLENBQUMxRSxJQUFJa0csTUFBTXJFLElBQUk7UUFFdERsQixLQUFLaEQsU0FBUyxHQUFHa0UsS0FBSztRQUN0QmxCLEtBQUsvQyxRQUFRLEdBQUc7UUFFaEJvQyxJQUFJQSxFQUFFNkYsRUFBRTtRQUVSbEYsS0FBS2hELFNBQVMsR0FBR2tFO1FBQ2pCbEIsS0FBSy9DLFFBQVEsR0FBR2tFO1FBRWhCLE9BQU85QixFQUFFa0QsS0FBSyxDQUFDO0lBQ2pCO0lBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JDLEdBQ0R0RCxFQUFFd0csV0FBVyxHQUFHeEcsRUFBRTZGLElBQUksR0FBRztRQUN2QixJQUFJSCxRQUFRNUUsR0FDVm1CLElBQUlDLElBQ0o5QixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJRCxFQUFFNEMsTUFBTSxJQUFJLE9BQU8sSUFBSWpDLEtBQUtYO1FBRWhDVSxJQUFJVixFQUFFRCxHQUFHLEdBQUdnQixHQUFHLENBQUM7UUFDaEJjLEtBQUtsQixLQUFLaEQsU0FBUztRQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUVsQixJQUFJOEMsTUFBTSxDQUFDLEdBQUc7WUFFWixXQUFXO1lBQ1gsSUFBSUEsTUFBTSxHQUFHO2dCQUNYNEUsU0FBU0UsTUFBTTdFLE1BQU1rQixLQUFLLEdBQUdDLElBQUlvQixLQUFLLENBQUM7Z0JBQ3ZDb0MsT0FBT3BGLENBQUMsR0FBR0YsRUFBRUUsQ0FBQztnQkFDZCxPQUFPb0Y7WUFDVDtZQUVBLHNCQUFzQjtZQUN0QixPQUFPLElBQUkzRSxLQUFLQztRQUNsQjtRQUVBLDZEQUE2RDtRQUU3REQsS0FBS2hELFNBQVMsR0FBR2tFLEtBQUs7UUFDdEJsQixLQUFLL0MsUUFBUSxHQUFHO1FBRWhCb0MsSUFBSUEsRUFBRTJELEdBQUcsQ0FBQyxJQUFJaEQsS0FBSyxHQUFHK0QsS0FBSyxDQUFDMUUsRUFBRWtELEtBQUssQ0FBQ2xELElBQUk2RSxJQUFJLEdBQUcxQixJQUFJLENBQUMsSUFBSWtELElBQUk7UUFFNUQxRixLQUFLaEQsU0FBUyxHQUFHa0U7UUFDakJsQixLQUFLL0MsUUFBUSxHQUFHa0U7UUFFaEIsT0FBTzlCLEVBQUVrRCxLQUFLLENBQUM7SUFDakI7SUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkMsR0FDRHRELEVBQUUwRyxjQUFjLEdBQUcxRyxFQUFFeUcsSUFBSSxHQUFHO1FBQzFCLElBQUluRixHQUFHQyxHQUFHVCxHQUFHMkIsR0FBR2tFLElBQUkvRCxHQUFHRixHQUFHNEQsS0FBS00sSUFDN0J4RyxJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVyxFQUNwQjRCLEtBQUtsQixLQUFLaEQsU0FBUyxFQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUVwQixJQUFJLENBQUNvQyxFQUFFMkMsUUFBUSxJQUFJO1lBQ2pCLElBQUksQ0FBQzNDLEVBQUVFLENBQUMsRUFBRSxPQUFPLElBQUlTLEtBQUtDO1lBQzFCLElBQUlpQixLQUFLLEtBQUtsQyxjQUFjO2dCQUMxQjJDLElBQUlrRCxNQUFNN0UsTUFBTWtCLEtBQUssR0FBR0MsSUFBSW9CLEtBQUssQ0FBQztnQkFDbENaLEVBQUVwQyxDQUFDLEdBQUdGLEVBQUVFLENBQUM7Z0JBQ1QsT0FBT29DO1lBQ1Q7UUFDRixPQUFPLElBQUl0QyxFQUFFNEMsTUFBTSxJQUFJO1lBQ3JCLE9BQU8sSUFBSWpDLEtBQUtYO1FBQ2xCLE9BQU8sSUFBSUEsRUFBRUQsR0FBRyxHQUFHc0QsRUFBRSxDQUFDLE1BQU14QixLQUFLLEtBQUtsQyxjQUFjO1lBQ2xEMkMsSUFBSWtELE1BQU03RSxNQUFNa0IsS0FBSyxHQUFHQyxJQUFJb0IsS0FBSyxDQUFDO1lBQ2xDWixFQUFFcEMsQ0FBQyxHQUFHRixFQUFFRSxDQUFDO1lBQ1QsT0FBT29DO1FBQ1Q7UUFFQTNCLEtBQUtoRCxTQUFTLEdBQUd1SSxNQUFNckUsS0FBSztRQUM1QmxCLEtBQUsvQyxRQUFRLEdBQUc7UUFFaEIsZ0ZBQWdGO1FBRWhGLHFCQUFxQjtRQUNyQixvQkFBb0I7UUFDcEIsOENBQThDO1FBRTlDOEMsSUFBSTVCLEtBQUswQixHQUFHLENBQUMsSUFBSTBGLE1BQU0zRyxXQUFXLElBQUk7UUFFdEMsSUFBSzJCLElBQUlSLEdBQUdRLEdBQUcsRUFBRUEsRUFBR2xCLElBQUlBLEVBQUUyRCxHQUFHLENBQUMzRCxFQUFFa0QsS0FBSyxDQUFDbEQsR0FBR21ELElBQUksQ0FBQyxHQUFHMEIsSUFBSSxHQUFHMUIsSUFBSSxDQUFDO1FBRTdENUUsV0FBVztRQUVYNEMsSUFBSXJDLEtBQUtzQixJQUFJLENBQUM4RixNQUFNM0c7UUFDcEI4QyxJQUFJO1FBQ0ptRSxLQUFLeEcsRUFBRWtELEtBQUssQ0FBQ2xEO1FBQ2JzQyxJQUFJLElBQUkzQixLQUFLWDtRQUNidUcsS0FBS3ZHO1FBRUwsNENBQTRDO1FBQzVDLE1BQU9rQixNQUFNLENBQUMsR0FBSTtZQUNoQnFGLEtBQUtBLEdBQUdyRCxLQUFLLENBQUNzRDtZQUNkaEUsSUFBSUYsRUFBRW9DLEtBQUssQ0FBQzZCLEdBQUc1QyxHQUFHLENBQUN0QixLQUFLO1lBRXhCa0UsS0FBS0EsR0FBR3JELEtBQUssQ0FBQ3NEO1lBQ2RsRSxJQUFJRSxFQUFFVyxJQUFJLENBQUNvRCxHQUFHNUMsR0FBRyxDQUFDdEIsS0FBSztZQUV2QixJQUFJQyxFQUFFZixDQUFDLENBQUNKLEVBQUUsS0FBSyxLQUFLLEdBQUcsSUFBS0QsSUFBSUMsR0FBR21CLEVBQUVmLENBQUMsQ0FBQ0wsRUFBRSxLQUFLc0IsRUFBRWpCLENBQUMsQ0FBQ0wsRUFBRSxJQUFJQTtRQUMxRDtRQUVBLElBQUlSLEdBQUc0QixJQUFJQSxFQUFFWSxLQUFLLENBQUMsS0FBTXhDLElBQUk7UUFFN0JuQyxXQUFXO1FBRVgsT0FBTzRCLFNBQVNtQyxHQUFHM0IsS0FBS2hELFNBQVMsR0FBR2tFLElBQUlsQixLQUFLL0MsUUFBUSxHQUFHa0UsSUFBSTtJQUM5RDtJQUdBOzs7R0FHQyxHQUNEbEMsRUFBRStDLFFBQVEsR0FBRztRQUNYLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ3BCLENBQUM7SUFDakI7SUFHQTs7O0dBR0MsR0FDRDNCLEVBQUU2RyxTQUFTLEdBQUc3RyxFQUFFOEcsS0FBSyxHQUFHO1FBQ3RCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ25GLENBQUMsSUFBSTFDLFVBQVUsSUFBSSxDQUFDd0IsQ0FBQyxHQUFHZCxZQUFZLElBQUksQ0FBQ2dDLENBQUMsQ0FBQzdCLE1BQU0sR0FBRztJQUNwRTtJQUdBOzs7R0FHQyxHQUNERSxFQUFFK0csS0FBSyxHQUFHO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQ3pHLENBQUM7SUFDaEI7SUFHQTs7O0dBR0MsR0FDRE4sRUFBRWdILFVBQVUsR0FBR2hILEVBQUUyRixLQUFLLEdBQUc7UUFDdkIsT0FBTyxJQUFJLENBQUNyRixDQUFDLEdBQUc7SUFDbEI7SUFHQTs7O0dBR0MsR0FDRE4sRUFBRWlILFVBQVUsR0FBR2pILEVBQUVrSCxLQUFLLEdBQUc7UUFDdkIsT0FBTyxJQUFJLENBQUM1RyxDQUFDLEdBQUc7SUFDbEI7SUFHQTs7O0dBR0MsR0FDRE4sRUFBRWdELE1BQU0sR0FBRztRQUNULE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ3JCLENBQUMsSUFBSSxJQUFJLENBQUNBLENBQUMsQ0FBQyxFQUFFLEtBQUs7SUFDbkM7SUFHQTs7O0dBR0MsR0FDRDNCLEVBQUVtSCxRQUFRLEdBQUduSCxFQUFFb0gsRUFBRSxHQUFHLFNBQVUvRixDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDRixHQUFHLENBQUNFLEtBQUs7SUFDdkI7SUFHQTs7O0dBR0MsR0FDRHJCLEVBQUVxSCxpQkFBaUIsR0FBR3JILEVBQUVnRyxHQUFHLEdBQUcsU0FBVTNFLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUNGLEdBQUcsQ0FBQ0UsS0FBSztJQUN2QjtJQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTZCQyxHQUNEckIsRUFBRXNILFNBQVMsR0FBR3RILEVBQUV1SCxHQUFHLEdBQUcsU0FBVUMsSUFBSTtRQUNsQyxJQUFJQyxVQUFVOUYsR0FBRytGLGFBQWE1RyxHQUFHNkcsS0FBS0MsS0FBS3pGLElBQUlPLEdBQzdDbUYsTUFBTSxJQUFJLEVBQ1Y5RyxPQUFPOEcsSUFBSXhILFdBQVcsRUFDdEI0QixLQUFLbEIsS0FBS2hELFNBQVMsRUFDbkJtRSxLQUFLbkIsS0FBSy9DLFFBQVEsRUFDbEI4SixRQUFRO1FBRVYsc0JBQXNCO1FBQ3RCLElBQUlOLFFBQVEsTUFBTTtZQUNoQkEsT0FBTyxJQUFJekcsS0FBSztZQUNoQjBHLFdBQVc7UUFDYixPQUFPO1lBQ0xELE9BQU8sSUFBSXpHLEtBQUt5RztZQUNoQjdGLElBQUk2RixLQUFLN0YsQ0FBQztZQUVWLCtEQUErRDtZQUMvRCxJQUFJNkYsS0FBS2xILENBQUMsR0FBRyxLQUFLLENBQUNxQixLQUFLLENBQUNBLENBQUMsQ0FBQyxFQUFFLElBQUk2RixLQUFLL0QsRUFBRSxDQUFDLElBQUksT0FBTyxJQUFJMUMsS0FBS0M7WUFFN0R5RyxXQUFXRCxLQUFLL0QsRUFBRSxDQUFDO1FBQ3JCO1FBRUE5QixJQUFJa0csSUFBSWxHLENBQUM7UUFFVCx1Q0FBdUM7UUFDdkMsSUFBSWtHLElBQUl2SCxDQUFDLEdBQUcsS0FBSyxDQUFDcUIsS0FBSyxDQUFDQSxDQUFDLENBQUMsRUFBRSxJQUFJa0csSUFBSXBFLEVBQUUsQ0FBQyxJQUFJO1lBQ3pDLE9BQU8sSUFBSTFDLEtBQUtZLEtBQUssQ0FBQ0EsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSWtHLElBQUl2SCxDQUFDLElBQUksSUFBSVUsTUFBTVcsSUFBSSxJQUFJLElBQUk7UUFDdkU7UUFFQSwyRkFBMkY7UUFDM0YsdUJBQXVCO1FBQ3ZCLElBQUk4RixVQUFVO1lBQ1osSUFBSTlGLEVBQUU3QixNQUFNLEdBQUcsR0FBRztnQkFDaEI2SCxNQUFNO1lBQ1IsT0FBTztnQkFDTCxJQUFLN0csSUFBSWEsQ0FBQyxDQUFDLEVBQUUsRUFBRWIsSUFBSSxPQUFPLEdBQUlBLEtBQUs7Z0JBQ25DNkcsTUFBTTdHLE1BQU07WUFDZDtRQUNGO1FBRUFuQyxXQUFXO1FBQ1h3RCxLQUFLRixLQUFLNkY7UUFDVkYsTUFBTUcsaUJBQWlCRixLQUFLMUY7UUFDNUJ1RixjQUFjRCxXQUFXTyxRQUFRakgsTUFBTW9CLEtBQUssTUFBTTRGLGlCQUFpQlAsTUFBTXJGO1FBRXpFLDBDQUEwQztRQUMxQ08sSUFBSWMsT0FBT29FLEtBQUtGLGFBQWF2RixJQUFJO1FBRWpDLHlGQUF5RjtRQUN6RiwrQkFBK0I7UUFDL0IsRUFBRTtRQUNGLDhGQUE4RjtRQUM5Rix5RkFBeUY7UUFDekYsa0ZBQWtGO1FBQ2xGLDJEQUEyRDtRQUMzRCxFQUFFO1FBQ0Ysd0RBQXdEO1FBQ3hELHlFQUF5RTtRQUN6RSwrRkFBK0Y7UUFDL0YsK0ZBQStGO1FBQy9GLDJGQUEyRjtRQUMzRixzQkFBc0I7UUFDdEIsSUFBSThGLG9CQUFvQnZGLEVBQUVmLENBQUMsRUFBRWIsSUFBSW1CLElBQUlDLEtBQUs7WUFFeEMsR0FBRztnQkFDREMsTUFBTTtnQkFDTnlGLE1BQU1HLGlCQUFpQkYsS0FBSzFGO2dCQUM1QnVGLGNBQWNELFdBQVdPLFFBQVFqSCxNQUFNb0IsS0FBSyxNQUFNNEYsaUJBQWlCUCxNQUFNckY7Z0JBQ3pFTyxJQUFJYyxPQUFPb0UsS0FBS0YsYUFBYXZGLElBQUk7Z0JBRWpDLElBQUksQ0FBQ3dGLEtBQUs7b0JBRVIseUVBQXlFO29CQUN6RSxJQUFJLENBQUMxRSxlQUFlUCxFQUFFZixDQUFDLEVBQUV3QixLQUFLLENBQUNyQyxJQUFJLEdBQUdBLElBQUksTUFBTSxLQUFLLE1BQU07d0JBQ3pENEIsSUFBSW5DLFNBQVNtQyxHQUFHVCxLQUFLLEdBQUc7b0JBQzFCO29CQUVBO2dCQUNGO1lBQ0YsUUFBU2dHLG9CQUFvQnZGLEVBQUVmLENBQUMsRUFBRWIsS0FBSyxJQUFJb0IsS0FBSztRQUNsRDtRQUVBdkQsV0FBVztRQUVYLE9BQU80QixTQUFTbUMsR0FBR1QsSUFBSUM7SUFDekI7SUFHQTs7Ozs7Ozs7O0dBU0MsR0FHRDs7Ozs7Ozs7O0dBU0MsR0FHRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkMsR0FDRGxDLEVBQUU4RSxLQUFLLEdBQUc5RSxFQUFFa0ksR0FBRyxHQUFHLFNBQVU3RyxDQUFDO1FBQzNCLElBQUlNLEdBQUdsQixHQUFHYSxHQUFHQyxHQUFHVCxHQUFHMEQsS0FBS3ZDLElBQUlDLElBQUlSLElBQUl5RyxJQUFJQyxNQUFNeEcsSUFDNUN4QixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QmdCLElBQUksSUFBSU4sS0FBS007UUFFYiw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDakIsRUFBRXVCLENBQUMsSUFBSSxDQUFDTixFQUFFTSxDQUFDLEVBQUU7WUFFaEIsK0JBQStCO1lBQy9CLElBQUksQ0FBQ3ZCLEVBQUVFLENBQUMsSUFBSSxDQUFDZSxFQUFFZixDQUFDLEVBQUVlLElBQUksSUFBSU4sS0FBS0M7aUJBRzFCLElBQUlaLEVBQUV1QixDQUFDLEVBQUVOLEVBQUVmLENBQUMsR0FBRyxDQUFDZSxFQUFFZixDQUFDO2lCQUtuQmUsSUFBSSxJQUFJTixLQUFLTSxFQUFFTSxDQUFDLElBQUl2QixFQUFFRSxDQUFDLEtBQUtlLEVBQUVmLENBQUMsR0FBR0YsSUFBSVk7WUFFM0MsT0FBT0s7UUFDVDtRQUVBLHFCQUFxQjtRQUNyQixJQUFJakIsRUFBRUUsQ0FBQyxJQUFJZSxFQUFFZixDQUFDLEVBQUU7WUFDZGUsRUFBRWYsQ0FBQyxHQUFHLENBQUNlLEVBQUVmLENBQUM7WUFDVixPQUFPRixFQUFFbUQsSUFBSSxDQUFDbEM7UUFDaEI7UUFFQUssS0FBS3RCLEVBQUV1QixDQUFDO1FBQ1JDLEtBQUtQLEVBQUVNLENBQUM7UUFDUk0sS0FBS2xCLEtBQUtoRCxTQUFTO1FBQ25CbUUsS0FBS25CLEtBQUsvQyxRQUFRO1FBRWxCLHVCQUF1QjtRQUN2QixJQUFJLENBQUMwRCxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUNFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFcEIsbURBQW1EO1lBQ25ELElBQUlBLEVBQUUsQ0FBQyxFQUFFLEVBQUVQLEVBQUVmLENBQUMsR0FBRyxDQUFDZSxFQUFFZixDQUFDO2lCQUdoQixJQUFJb0IsRUFBRSxDQUFDLEVBQUUsRUFBRUwsSUFBSSxJQUFJTixLQUFLWDtpQkFJeEIsT0FBTyxJQUFJVyxLQUFLbUIsT0FBTyxJQUFJLENBQUMsSUFBSTtZQUVyQyxPQUFPdkQsV0FBVzRCLFNBQVNjLEdBQUdZLElBQUlDLE1BQU1iO1FBQzFDO1FBRUEsMkRBQTJEO1FBRTNELGdDQUFnQztRQUNoQ1osSUFBSXhCLFVBQVVvQyxFQUFFWixDQUFDLEdBQUdkO1FBQ3BCd0ksS0FBS2xKLFVBQVVtQixFQUFFSyxDQUFDLEdBQUdkO1FBRXJCK0IsS0FBS0EsR0FBR3lCLEtBQUs7UUFDYnJDLElBQUlxSCxLQUFLMUg7UUFFVCxrQ0FBa0M7UUFDbEMsSUFBSUssR0FBRztZQUNMc0gsT0FBT3RILElBQUk7WUFFWCxJQUFJc0gsTUFBTTtnQkFDUnpHLElBQUlEO2dCQUNKWixJQUFJLENBQUNBO2dCQUNMMEQsTUFBTTVDLEdBQUc5QixNQUFNO1lBQ2pCLE9BQU87Z0JBQ0w2QixJQUFJQztnQkFDSm5CLElBQUkwSDtnQkFDSjNELE1BQU05QyxHQUFHNUIsTUFBTTtZQUNqQjtZQUVBLG1GQUFtRjtZQUNuRixzRkFBc0Y7WUFDdEYsOEVBQThFO1lBQzlFd0IsSUFBSXBDLEtBQUsyQixHQUFHLENBQUMzQixLQUFLc0IsSUFBSSxDQUFDeUIsS0FBS3RDLFdBQVc2RSxPQUFPO1lBRTlDLElBQUkxRCxJQUFJUSxHQUFHO2dCQUNUUixJQUFJUTtnQkFDSkssRUFBRTdCLE1BQU0sR0FBRztZQUNiO1lBRUEsdUNBQXVDO1lBQ3ZDNkIsRUFBRTBHLE9BQU87WUFDVCxJQUFLL0csSUFBSVIsR0FBR1EsS0FBTUssRUFBRTJHLElBQUksQ0FBQztZQUN6QjNHLEVBQUUwRyxPQUFPO1FBRVgsNEJBQTRCO1FBQzVCLE9BQU87WUFFTCx3REFBd0Q7WUFFeEQvRyxJQUFJSSxHQUFHNUIsTUFBTTtZQUNiMEUsTUFBTTVDLEdBQUc5QixNQUFNO1lBQ2ZzSSxPQUFPOUcsSUFBSWtEO1lBQ1gsSUFBSTRELE1BQU01RCxNQUFNbEQ7WUFFaEIsSUFBS0EsSUFBSSxHQUFHQSxJQUFJa0QsS0FBS2xELElBQUs7Z0JBQ3hCLElBQUlJLEVBQUUsQ0FBQ0osRUFBRSxJQUFJTSxFQUFFLENBQUNOLEVBQUUsRUFBRTtvQkFDbEI4RyxPQUFPMUcsRUFBRSxDQUFDSixFQUFFLEdBQUdNLEVBQUUsQ0FBQ04sRUFBRTtvQkFDcEI7Z0JBQ0Y7WUFDRjtZQUVBUixJQUFJO1FBQ047UUFFQSxJQUFJc0gsTUFBTTtZQUNSekcsSUFBSUQ7WUFDSkEsS0FBS0U7WUFDTEEsS0FBS0Q7WUFDTE4sRUFBRWYsQ0FBQyxHQUFHLENBQUNlLEVBQUVmLENBQUM7UUFDWjtRQUVBa0UsTUFBTTlDLEdBQUc1QixNQUFNO1FBRWYsbUNBQW1DO1FBQ25DLHdGQUF3RjtRQUN4RixJQUFLd0IsSUFBSU0sR0FBRzlCLE1BQU0sR0FBRzBFLEtBQUtsRCxJQUFJLEdBQUcsRUFBRUEsRUFBR0ksRUFBRSxDQUFDOEMsTUFBTSxHQUFHO1FBRWxELHVCQUF1QjtRQUN2QixJQUFLbEQsSUFBSU0sR0FBRzlCLE1BQU0sRUFBRXdCLElBQUlSLEdBQUk7WUFFMUIsSUFBSVksRUFBRSxDQUFDLEVBQUVKLEVBQUUsR0FBR00sRUFBRSxDQUFDTixFQUFFLEVBQUU7Z0JBQ25CLElBQUtDLElBQUlELEdBQUdDLEtBQUtHLEVBQUUsQ0FBQyxFQUFFSCxFQUFFLEtBQUssR0FBSUcsRUFBRSxDQUFDSCxFQUFFLEdBQUc3QixPQUFPO2dCQUNoRCxFQUFFZ0MsRUFBRSxDQUFDSCxFQUFFO2dCQUNQRyxFQUFFLENBQUNKLEVBQUUsSUFBSTVCO1lBQ1g7WUFFQWdDLEVBQUUsQ0FBQ0osRUFBRSxJQUFJTSxFQUFFLENBQUNOLEVBQUU7UUFDaEI7UUFFQSx5QkFBeUI7UUFDekIsTUFBT0ksRUFBRSxDQUFDLEVBQUU4QyxJQUFJLEtBQUssR0FBSTlDLEdBQUc2RyxHQUFHO1FBRS9CLHdEQUF3RDtRQUN4RCxNQUFPN0csRUFBRSxDQUFDLEVBQUUsS0FBSyxHQUFHQSxHQUFHOEcsS0FBSyxHQUFJLEVBQUUvSDtRQUVsQyxRQUFRO1FBQ1IsSUFBSSxDQUFDaUIsRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLElBQUlYLEtBQUttQixPQUFPLElBQUksQ0FBQyxJQUFJO1FBRTVDYixFQUFFTSxDQUFDLEdBQUdEO1FBQ05MLEVBQUVaLENBQUMsR0FBR2dJLGtCQUFrQi9HLElBQUlqQjtRQUU1QixPQUFPOUIsV0FBVzRCLFNBQVNjLEdBQUdZLElBQUlDLE1BQU1iO0lBQzFDO0lBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJDLEdBQ0RyQixFQUFFL0IsTUFBTSxHQUFHK0IsRUFBRTBJLEdBQUcsR0FBRyxTQUFVckgsQ0FBQztRQUM1QixJQUFJc0gsR0FDRnZJLElBQUksSUFBSSxFQUNSVyxPQUFPWCxFQUFFQyxXQUFXO1FBRXRCZ0IsSUFBSSxJQUFJTixLQUFLTTtRQUViLDBEQUEwRDtRQUMxRCxJQUFJLENBQUNqQixFQUFFdUIsQ0FBQyxJQUFJLENBQUNOLEVBQUVmLENBQUMsSUFBSWUsRUFBRU0sQ0FBQyxJQUFJLENBQUNOLEVBQUVNLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJWixLQUFLQztRQUVwRCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDSyxFQUFFTSxDQUFDLElBQUl2QixFQUFFdUIsQ0FBQyxJQUFJLENBQUN2QixFQUFFdUIsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUMxQixPQUFPcEIsU0FBUyxJQUFJUSxLQUFLWCxJQUFJVyxLQUFLaEQsU0FBUyxFQUFFZ0QsS0FBSy9DLFFBQVE7UUFDNUQ7UUFFQSxpREFBaUQ7UUFDakRXLFdBQVc7UUFFWCxJQUFJb0MsS0FBSzlDLE1BQU0sSUFBSSxHQUFHO1lBRXBCLHNEQUFzRDtZQUN0RCxvREFBb0Q7WUFDcEQwSyxJQUFJbkYsT0FBT3BELEdBQUdpQixFQUFFbEIsR0FBRyxJQUFJLEdBQUcsR0FBRztZQUM3QndJLEVBQUVySSxDQUFDLElBQUllLEVBQUVmLENBQUM7UUFDWixPQUFPO1lBQ0xxSSxJQUFJbkYsT0FBT3BELEdBQUdpQixHQUFHLEdBQUdOLEtBQUs5QyxNQUFNLEVBQUU7UUFDbkM7UUFFQTBLLElBQUlBLEVBQUVyRixLQUFLLENBQUNqQztRQUVaMUMsV0FBVztRQUVYLE9BQU95QixFQUFFMEUsS0FBSyxDQUFDNkQ7SUFDakI7SUFHQTs7Ozs7R0FLQyxHQUNEM0ksRUFBRTRJLGtCQUFrQixHQUFHNUksRUFBRTZJLEdBQUcsR0FBRztRQUM3QixPQUFPRCxtQkFBbUIsSUFBSTtJQUNoQztJQUdBOzs7O0dBSUMsR0FDRDVJLEVBQUUrSCxnQkFBZ0IsR0FBRy9ILEVBQUVpRyxFQUFFLEdBQUc7UUFDMUIsT0FBTzhCLGlCQUFpQixJQUFJO0lBQzlCO0lBR0E7Ozs7R0FJQyxHQUNEL0gsRUFBRThJLE9BQU8sR0FBRzlJLEVBQUVxQyxHQUFHLEdBQUc7UUFDbEIsSUFBSWpDLElBQUksSUFBSSxJQUFJLENBQUNDLFdBQVcsQ0FBQyxJQUFJO1FBQ2pDRCxFQUFFRSxDQUFDLEdBQUcsQ0FBQ0YsRUFBRUUsQ0FBQztRQUNWLE9BQU9DLFNBQVNIO0lBQ2xCO0lBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JDLEdBQ0RKLEVBQUV1RCxJQUFJLEdBQUd2RCxFQUFFK0ksR0FBRyxHQUFHLFNBQVUxSCxDQUFDO1FBQzFCLElBQUkySCxPQUFPckgsR0FBR2xCLEdBQUdhLEdBQUdSLEdBQUcwRCxLQUFLdkMsSUFBSUMsSUFBSVIsSUFBSUUsSUFDdEN4QixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QmdCLElBQUksSUFBSU4sS0FBS007UUFFYiw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDakIsRUFBRXVCLENBQUMsSUFBSSxDQUFDTixFQUFFTSxDQUFDLEVBQUU7WUFFaEIsK0JBQStCO1lBQy9CLElBQUksQ0FBQ3ZCLEVBQUVFLENBQUMsSUFBSSxDQUFDZSxFQUFFZixDQUFDLEVBQUVlLElBQUksSUFBSU4sS0FBS0M7aUJBTTFCLElBQUksQ0FBQ1osRUFBRXVCLENBQUMsRUFBRU4sSUFBSSxJQUFJTixLQUFLTSxFQUFFTSxDQUFDLElBQUl2QixFQUFFRSxDQUFDLEtBQUtlLEVBQUVmLENBQUMsR0FBR0YsSUFBSVk7WUFFckQsT0FBT0s7UUFDVDtRQUVDLHFCQUFxQjtRQUN0QixJQUFJakIsRUFBRUUsQ0FBQyxJQUFJZSxFQUFFZixDQUFDLEVBQUU7WUFDZGUsRUFBRWYsQ0FBQyxHQUFHLENBQUNlLEVBQUVmLENBQUM7WUFDVixPQUFPRixFQUFFMEUsS0FBSyxDQUFDekQ7UUFDakI7UUFFQUssS0FBS3RCLEVBQUV1QixDQUFDO1FBQ1JDLEtBQUtQLEVBQUVNLENBQUM7UUFDUk0sS0FBS2xCLEtBQUtoRCxTQUFTO1FBQ25CbUUsS0FBS25CLEtBQUsvQyxRQUFRO1FBRWxCLHVCQUF1QjtRQUN2QixJQUFJLENBQUMwRCxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUNFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFcEIseUJBQXlCO1lBQ3pCLDZCQUE2QjtZQUM3QixJQUFJLENBQUNBLEVBQUUsQ0FBQyxFQUFFLEVBQUVQLElBQUksSUFBSU4sS0FBS1g7WUFFekIsT0FBT3pCLFdBQVc0QixTQUFTYyxHQUFHWSxJQUFJQyxNQUFNYjtRQUMxQztRQUVBLDJEQUEyRDtRQUUzRCxnQ0FBZ0M7UUFDaENQLElBQUk3QixVQUFVbUIsRUFBRUssQ0FBQyxHQUFHZDtRQUNwQmMsSUFBSXhCLFVBQVVvQyxFQUFFWixDQUFDLEdBQUdkO1FBRXBCK0IsS0FBS0EsR0FBR3lCLEtBQUs7UUFDYjdCLElBQUlSLElBQUlMO1FBRVIsa0NBQWtDO1FBQ2xDLElBQUlhLEdBQUc7WUFFTCxJQUFJQSxJQUFJLEdBQUc7Z0JBQ1RLLElBQUlEO2dCQUNKSixJQUFJLENBQUNBO2dCQUNMa0QsTUFBTTVDLEdBQUc5QixNQUFNO1lBQ2pCLE9BQU87Z0JBQ0w2QixJQUFJQztnQkFDSm5CLElBQUlLO2dCQUNKMEQsTUFBTTlDLEdBQUc1QixNQUFNO1lBQ2pCO1lBRUEsd0VBQXdFO1lBQ3hFZ0IsSUFBSTVCLEtBQUtzQixJQUFJLENBQUN5QixLQUFLdEM7WUFDbkI2RSxNQUFNMUQsSUFBSTBELE1BQU0xRCxJQUFJLElBQUkwRCxNQUFNO1lBRTlCLElBQUlsRCxJQUFJa0QsS0FBSztnQkFDWGxELElBQUlrRDtnQkFDSjdDLEVBQUU3QixNQUFNLEdBQUc7WUFDYjtZQUVBLHFGQUFxRjtZQUNyRjZCLEVBQUUwRyxPQUFPO1lBQ1QsTUFBTy9HLEtBQU1LLEVBQUUyRyxJQUFJLENBQUM7WUFDcEIzRyxFQUFFMEcsT0FBTztRQUNYO1FBRUE3RCxNQUFNOUMsR0FBRzVCLE1BQU07UUFDZndCLElBQUlNLEdBQUc5QixNQUFNO1FBRWIsNEVBQTRFO1FBQzVFLElBQUkwRSxNQUFNbEQsSUFBSSxHQUFHO1lBQ2ZBLElBQUlrRDtZQUNKN0MsSUFBSUM7WUFDSkEsS0FBS0Y7WUFDTEEsS0FBS0M7UUFDUDtRQUVBLDBGQUEwRjtRQUMxRixJQUFLcUgsUUFBUSxHQUFHMUgsR0FBSTtZQUNsQjBILFFBQVEsQ0FBQ3RILEVBQUUsQ0FBQyxFQUFFSixFQUFFLEdBQUdJLEVBQUUsQ0FBQ0osRUFBRSxHQUFHTSxFQUFFLENBQUNOLEVBQUUsR0FBRzBILEtBQUksSUFBS3RKLE9BQU87WUFDbkRnQyxFQUFFLENBQUNKLEVBQUUsSUFBSTVCO1FBQ1g7UUFFQSxJQUFJc0osT0FBTztZQUNUdEgsR0FBR3VILE9BQU8sQ0FBQ0Q7WUFDWCxFQUFFdkk7UUFDSjtRQUVBLHlCQUF5QjtRQUN6Qiw2REFBNkQ7UUFDN0QsSUFBSytELE1BQU05QyxHQUFHNUIsTUFBTSxFQUFFNEIsRUFBRSxDQUFDLEVBQUU4QyxJQUFJLElBQUksR0FBSTlDLEdBQUc2RyxHQUFHO1FBRTdDbEgsRUFBRU0sQ0FBQyxHQUFHRDtRQUNOTCxFQUFFWixDQUFDLEdBQUdnSSxrQkFBa0IvRyxJQUFJakI7UUFFNUIsT0FBTzlCLFdBQVc0QixTQUFTYyxHQUFHWSxJQUFJQyxNQUFNYjtJQUMxQztJQUdBOzs7OztHQUtDLEdBQ0RyQixFQUFFakMsU0FBUyxHQUFHaUMsRUFBRW1DLEVBQUUsR0FBRyxTQUFVK0csQ0FBQztRQUM5QixJQUFJcEksR0FDRlYsSUFBSSxJQUFJO1FBRVYsSUFBSThJLE1BQU0sS0FBSyxLQUFLQSxNQUFNLENBQUMsQ0FBQ0EsS0FBS0EsTUFBTSxLQUFLQSxNQUFNLEdBQUcsTUFBTWhJLE1BQU1yQyxrQkFBa0JxSztRQUVuRixJQUFJOUksRUFBRXVCLENBQUMsRUFBRTtZQUNQYixJQUFJcUksYUFBYS9JLEVBQUV1QixDQUFDO1lBQ3BCLElBQUl1SCxLQUFLOUksRUFBRUssQ0FBQyxHQUFHLElBQUlLLEdBQUdBLElBQUlWLEVBQUVLLENBQUMsR0FBRztRQUNsQyxPQUFPO1lBQ0xLLElBQUlFO1FBQ047UUFFQSxPQUFPRjtJQUNUO0lBR0E7Ozs7R0FJQyxHQUNEZCxFQUFFb0osS0FBSyxHQUFHO1FBQ1IsSUFBSWhKLElBQUksSUFBSSxFQUNWVyxPQUFPWCxFQUFFQyxXQUFXO1FBRXRCLE9BQU9FLFNBQVMsSUFBSVEsS0FBS1gsSUFBSUEsRUFBRUssQ0FBQyxHQUFHLEdBQUdNLEtBQUsvQyxRQUFRO0lBQ3JEO0lBR0E7Ozs7Ozs7Ozs7Ozs7O0dBY0MsR0FDRGdDLEVBQUVxSixJQUFJLEdBQUdySixFQUFFc0osR0FBRyxHQUFHO1FBQ2YsSUFBSXJILElBQUlDLElBQ045QixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJLENBQUNELEVBQUUyQyxRQUFRLElBQUksT0FBTyxJQUFJaEMsS0FBS0M7UUFDbkMsSUFBSVosRUFBRTRDLE1BQU0sSUFBSSxPQUFPLElBQUlqQyxLQUFLWDtRQUVoQzZCLEtBQUtsQixLQUFLaEQsU0FBUztRQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNsQitDLEtBQUtoRCxTQUFTLEdBQUdrRSxLQUFLL0MsS0FBSzJCLEdBQUcsQ0FBQ1QsRUFBRUssQ0FBQyxFQUFFTCxFQUFFK0IsRUFBRSxNQUFNeEM7UUFDOUNvQixLQUFLL0MsUUFBUSxHQUFHO1FBRWhCb0MsSUFBSWlKLEtBQUt0SSxNQUFNcUIsaUJBQWlCckIsTUFBTVg7UUFFdENXLEtBQUtoRCxTQUFTLEdBQUdrRTtRQUNqQmxCLEtBQUsvQyxRQUFRLEdBQUdrRTtRQUVoQixPQUFPM0IsU0FBUzdCLFdBQVcsSUFBSTBCLEVBQUVpQyxHQUFHLEtBQUtqQyxHQUFHNkIsSUFBSUMsSUFBSTtJQUN0RDtJQUdBOzs7Ozs7Ozs7OztHQVdDLEdBQ0RsQyxFQUFFdUosVUFBVSxHQUFHdkosRUFBRWlGLElBQUksR0FBRztRQUN0QixJQUFJekMsR0FBR0MsR0FBR04sSUFBSU8sR0FBR0MsS0FBS0MsR0FDcEJ4QyxJQUFJLElBQUksRUFDUnVCLElBQUl2QixFQUFFdUIsQ0FBQyxFQUNQbEIsSUFBSUwsRUFBRUssQ0FBQyxFQUNQSCxJQUFJRixFQUFFRSxDQUFDLEVBQ1BTLE9BQU9YLEVBQUVDLFdBQVc7UUFFdEIsOEJBQThCO1FBQzlCLElBQUlDLE1BQU0sS0FBSyxDQUFDcUIsS0FBSyxDQUFDQSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzFCLE9BQU8sSUFBSVosS0FBSyxDQUFDVCxLQUFLQSxJQUFJLEtBQU0sRUFBQ3FCLEtBQUtBLENBQUMsQ0FBQyxFQUFFLElBQUlYLE1BQU1XLElBQUl2QixJQUFJLElBQUk7UUFDbEU7UUFFQXpCLFdBQVc7UUFFWCxvQkFBb0I7UUFDcEIyQixJQUFJcEIsS0FBSytGLElBQUksQ0FBQyxDQUFDN0U7UUFFZixnQ0FBZ0M7UUFDaEMsMEVBQTBFO1FBQzFFLElBQUlFLEtBQUssS0FBS0EsS0FBSyxJQUFJLEdBQUc7WUFDeEJtQyxJQUFJUSxlQUFldEI7WUFFbkIsSUFBSSxDQUFDYyxFQUFFM0MsTUFBTSxHQUFHVyxDQUFBQSxJQUFLLEtBQUssR0FBR2dDLEtBQUs7WUFDbENuQyxJQUFJcEIsS0FBSytGLElBQUksQ0FBQ3hDO1lBQ2RoQyxJQUFJeEIsVUFBVSxDQUFDd0IsSUFBSSxLQUFLLEtBQU1BLENBQUFBLElBQUksS0FBS0EsSUFBSTtZQUUzQyxJQUFJSCxLQUFLLElBQUksR0FBRztnQkFDZG1DLElBQUksT0FBT2hDO1lBQ2IsT0FBTztnQkFDTGdDLElBQUluQyxFQUFFNEMsYUFBYTtnQkFDbkJULElBQUlBLEVBQUVVLEtBQUssQ0FBQyxHQUFHVixFQUFFVyxPQUFPLENBQUMsT0FBTyxLQUFLM0M7WUFDdkM7WUFFQWlDLElBQUksSUFBSTNCLEtBQUswQjtRQUNmLE9BQU87WUFDTEMsSUFBSSxJQUFJM0IsS0FBS1QsRUFBRStDLFFBQVE7UUFDekI7UUFFQWxCLEtBQUssQ0FBQzFCLElBQUlNLEtBQUtoRCxTQUFTLElBQUk7UUFFNUIsNEJBQTRCO1FBQzVCLE9BQVM7WUFDUDZFLElBQUlGO1lBQ0pBLElBQUlFLEVBQUVXLElBQUksQ0FBQ0MsT0FBT3BELEdBQUd3QyxHQUFHVCxLQUFLLEdBQUcsSUFBSW1CLEtBQUssQ0FBQztZQUUxQyx1REFBdUQ7WUFDdkQsSUFBSUwsZUFBZUwsRUFBRWpCLENBQUMsRUFBRXdCLEtBQUssQ0FBQyxHQUFHaEIsUUFBUSxDQUFDTSxJQUFJUSxlQUFlUCxFQUFFZixDQUFDLEdBQUd3QixLQUFLLENBQUMsR0FBR2hCLEtBQUs7Z0JBQy9FTSxJQUFJQSxFQUFFVSxLQUFLLENBQUNoQixLQUFLLEdBQUdBLEtBQUs7Z0JBRXpCLHVGQUF1RjtnQkFDdkYsc0VBQXNFO2dCQUN0RSxJQUFJTSxLQUFLLFVBQVUsQ0FBQ0UsT0FBT0YsS0FBSyxRQUFRO29CQUV0Qyx5RkFBeUY7b0JBQ3pGLCtCQUErQjtvQkFDL0IsSUFBSSxDQUFDRSxLQUFLO3dCQUNScEMsU0FBU3FDLEdBQUduQyxJQUFJLEdBQUc7d0JBRW5CLElBQUltQyxFQUFFVSxLQUFLLENBQUNWLEdBQUdhLEVBQUUsQ0FBQ3JELElBQUk7NEJBQ3BCc0MsSUFBSUU7NEJBQ0o7d0JBQ0Y7b0JBQ0Y7b0JBRUFULE1BQU07b0JBQ05RLE1BQU07Z0JBQ1IsT0FBTztvQkFFTCxpRkFBaUY7b0JBQ2pGLDhEQUE4RDtvQkFDOUQsSUFBSSxDQUFDLENBQUNGLEtBQUssQ0FBQyxDQUFDQSxFQUFFVSxLQUFLLENBQUMsTUFBTVYsRUFBRWlCLE1BQU0sQ0FBQyxNQUFNLEtBQUs7d0JBRTdDLHdDQUF3Qzt3QkFDeENuRCxTQUFTbUMsR0FBR2pDLElBQUksR0FBRzt3QkFDbkIrQixJQUFJLENBQUNFLEVBQUVZLEtBQUssQ0FBQ1osR0FBR2UsRUFBRSxDQUFDckQ7b0JBQ3JCO29CQUVBO2dCQUNGO1lBQ0Y7UUFDRjtRQUVBekIsV0FBVztRQUVYLE9BQU80QixTQUFTbUMsR0FBR2pDLEdBQUdNLEtBQUsvQyxRQUFRLEVBQUV3RTtJQUN2QztJQUdBOzs7Ozs7Ozs7Ozs7R0FZQyxHQUNEeEMsRUFBRXdKLE9BQU8sR0FBR3hKLEVBQUV5SixHQUFHLEdBQUc7UUFDbEIsSUFBSXhILElBQUlDLElBQ045QixJQUFJLElBQUksRUFDUlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJLENBQUNELEVBQUUyQyxRQUFRLElBQUksT0FBTyxJQUFJaEMsS0FBS0M7UUFDbkMsSUFBSVosRUFBRTRDLE1BQU0sSUFBSSxPQUFPLElBQUlqQyxLQUFLWDtRQUVoQzZCLEtBQUtsQixLQUFLaEQsU0FBUztRQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNsQitDLEtBQUtoRCxTQUFTLEdBQUdrRSxLQUFLO1FBQ3RCbEIsS0FBSy9DLFFBQVEsR0FBRztRQUVoQm9DLElBQUlBLEVBQUVrSixHQUFHO1FBQ1RsSixFQUFFRSxDQUFDLEdBQUc7UUFDTkYsSUFBSW9ELE9BQU9wRCxHQUFHLElBQUlXLEtBQUssR0FBRytELEtBQUssQ0FBQzFFLEVBQUVrRCxLQUFLLENBQUNsRCxJQUFJNkUsSUFBSSxJQUFJaEQsS0FBSyxJQUFJO1FBRTdEbEIsS0FBS2hELFNBQVMsR0FBR2tFO1FBQ2pCbEIsS0FBSy9DLFFBQVEsR0FBR2tFO1FBRWhCLE9BQU8zQixTQUFTN0IsWUFBWSxLQUFLQSxZQUFZLElBQUkwQixFQUFFaUMsR0FBRyxLQUFLakMsR0FBRzZCLElBQUlDLElBQUk7SUFDeEU7SUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkMsR0FDRGxDLEVBQUVzRCxLQUFLLEdBQUd0RCxFQUFFMEosR0FBRyxHQUFHLFNBQVVySSxDQUFDO1FBQzNCLElBQUkySCxPQUFPdkksR0FBR2EsR0FBR1IsR0FBRzRCLEdBQUdpSCxJQUFJL0csR0FBR3BCLEtBQUtDLEtBQ2pDckIsSUFBSSxJQUFJLEVBQ1JXLE9BQU9YLEVBQUVDLFdBQVcsRUFDcEJxQixLQUFLdEIsRUFBRXVCLENBQUMsRUFDUkMsS0FBSyxDQUFDUCxJQUFJLElBQUlOLEtBQUtNLEVBQUMsRUFBR00sQ0FBQztRQUUxQk4sRUFBRWYsQ0FBQyxJQUFJRixFQUFFRSxDQUFDO1FBRVQsdUNBQXVDO1FBQ3hDLElBQUksQ0FBQ29CLE1BQU0sQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDRSxNQUFNLENBQUNBLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFbEMsT0FBTyxJQUFJYixLQUFLLENBQUNNLEVBQUVmLENBQUMsSUFBSW9CLE1BQU0sQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDRSxNQUFNQSxNQUFNLENBQUNBLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ0YsS0FJNURWLE1BSUEsQ0FBQ1UsTUFBTSxDQUFDRSxLQUFLUCxFQUFFZixDQUFDLEdBQUcsSUFBSWUsRUFBRWYsQ0FBQyxHQUFHO1FBQ25DO1FBRUFHLElBQUl4QixVQUFVbUIsRUFBRUssQ0FBQyxHQUFHZCxZQUFZVixVQUFVb0MsRUFBRVosQ0FBQyxHQUFHZDtRQUNoRDZCLE1BQU1FLEdBQUc1QixNQUFNO1FBQ2YyQixNQUFNRyxHQUFHOUIsTUFBTTtRQUVmLHdDQUF3QztRQUN4QyxJQUFJMEIsTUFBTUMsS0FBSztZQUNiaUIsSUFBSWhCO1lBQ0pBLEtBQUtFO1lBQ0xBLEtBQUtjO1lBQ0xpSCxLQUFLbkk7WUFDTEEsTUFBTUM7WUFDTkEsTUFBTWtJO1FBQ1I7UUFFQSwwQ0FBMEM7UUFDMUNqSCxJQUFJLEVBQUU7UUFDTmlILEtBQUtuSSxNQUFNQztRQUNYLElBQUtILElBQUlxSSxJQUFJckksS0FBTW9CLEVBQUU0RixJQUFJLENBQUM7UUFFMUIsWUFBWTtRQUNaLElBQUtoSCxJQUFJRyxLQUFLLEVBQUVILEtBQUssR0FBSTtZQUN2QjBILFFBQVE7WUFDUixJQUFLbEksSUFBSVUsTUFBTUYsR0FBR1IsSUFBSVEsR0FBSTtnQkFDeEJzQixJQUFJRixDQUFDLENBQUM1QixFQUFFLEdBQUdjLEVBQUUsQ0FBQ04sRUFBRSxHQUFHSSxFQUFFLENBQUNaLElBQUlRLElBQUksRUFBRSxHQUFHMEg7Z0JBQ25DdEcsQ0FBQyxDQUFDNUIsSUFBSSxHQUFHOEIsSUFBSWxELE9BQU87Z0JBQ3BCc0osUUFBUXBHLElBQUlsRCxPQUFPO1lBQ3JCO1lBRUFnRCxDQUFDLENBQUM1QixFQUFFLEdBQUcsQ0FBQzRCLENBQUMsQ0FBQzVCLEVBQUUsR0FBR2tJLEtBQUksSUFBS3RKLE9BQU87UUFDakM7UUFFQSx5QkFBeUI7UUFDekIsTUFBTyxDQUFDZ0QsQ0FBQyxDQUFDLEVBQUVpSCxHQUFHLEVBQUdqSCxFQUFFNkYsR0FBRztRQUV2QixJQUFJUyxPQUFPLEVBQUV2STthQUNSaUMsRUFBRThGLEtBQUs7UUFFWm5ILEVBQUVNLENBQUMsR0FBR2U7UUFDTnJCLEVBQUVaLENBQUMsR0FBR2dJLGtCQUFrQi9GLEdBQUdqQztRQUUzQixPQUFPOUIsV0FBVzRCLFNBQVNjLEdBQUdOLEtBQUtoRCxTQUFTLEVBQUVnRCxLQUFLL0MsUUFBUSxJQUFJcUQ7SUFDakU7SUFHQTs7Ozs7Ozs7O0dBU0MsR0FDRHJCLEVBQUU0SixRQUFRLEdBQUcsU0FBVXpILEVBQUUsRUFBRUQsRUFBRTtRQUMzQixPQUFPMkgsZUFBZSxJQUFJLEVBQUUsR0FBRzFILElBQUlEO0lBQ3JDO0lBR0E7Ozs7Ozs7OztHQVNDLEdBQ0RsQyxFQUFFOEosZUFBZSxHQUFHOUosRUFBRStKLElBQUksR0FBRyxTQUFVbkcsRUFBRSxFQUFFMUIsRUFBRTtRQUMzQyxJQUFJOUIsSUFBSSxJQUFJLEVBQ1ZXLE9BQU9YLEVBQUVDLFdBQVc7UUFFdEJELElBQUksSUFBSVcsS0FBS1g7UUFDYixJQUFJd0QsT0FBTyxLQUFLLEdBQUcsT0FBT3hEO1FBRTFCNEosV0FBV3BHLElBQUksR0FBR2xHO1FBRWxCLElBQUl3RSxPQUFPLEtBQUssR0FBR0EsS0FBS25CLEtBQUsvQyxRQUFRO2FBQ2hDZ00sV0FBVzlILElBQUksR0FBRztRQUV2QixPQUFPM0IsU0FBU0gsR0FBR3dELEtBQUt4RCxFQUFFSyxDQUFDLEdBQUcsR0FBR3lCO0lBQ25DO0lBR0E7Ozs7Ozs7R0FPQyxHQUNEbEMsRUFBRWtELGFBQWEsR0FBRyxTQUFVVSxFQUFFLEVBQUUxQixFQUFFO1FBQ2hDLElBQUkrSCxLQUNGN0osSUFBSSxJQUFJLEVBQ1JXLE9BQU9YLEVBQUVDLFdBQVc7UUFFdEIsSUFBSXVELE9BQU8sS0FBSyxHQUFHO1lBQ2pCcUcsTUFBTUMsZUFBZTlKLEdBQUc7UUFDMUIsT0FBTztZQUNMNEosV0FBV3BHLElBQUksR0FBR2xHO1lBRWxCLElBQUl3RSxPQUFPLEtBQUssR0FBR0EsS0FBS25CLEtBQUsvQyxRQUFRO2lCQUNoQ2dNLFdBQVc5SCxJQUFJLEdBQUc7WUFFdkI5QixJQUFJRyxTQUFTLElBQUlRLEtBQUtYLElBQUl3RCxLQUFLLEdBQUcxQjtZQUNsQytILE1BQU1DLGVBQWU5SixHQUFHLE1BQU13RCxLQUFLO1FBQ3JDO1FBRUEsT0FBT3hELEVBQUV1RixLQUFLLE1BQU0sQ0FBQ3ZGLEVBQUU0QyxNQUFNLEtBQUssTUFBTWlILE1BQU1BO0lBQ2hEO0lBR0E7Ozs7Ozs7Ozs7Ozs7OztHQWVDLEdBQ0RqSyxFQUFFbUssT0FBTyxHQUFHLFNBQVV2RyxFQUFFLEVBQUUxQixFQUFFO1FBQzFCLElBQUkrSCxLQUFLNUksR0FDUGpCLElBQUksSUFBSSxFQUNSVyxPQUFPWCxFQUFFQyxXQUFXO1FBRXRCLElBQUl1RCxPQUFPLEtBQUssR0FBRztZQUNqQnFHLE1BQU1DLGVBQWU5SjtRQUN2QixPQUFPO1lBQ0w0SixXQUFXcEcsSUFBSSxHQUFHbEc7WUFFbEIsSUFBSXdFLE9BQU8sS0FBSyxHQUFHQSxLQUFLbkIsS0FBSy9DLFFBQVE7aUJBQ2hDZ00sV0FBVzlILElBQUksR0FBRztZQUV2QmIsSUFBSWQsU0FBUyxJQUFJUSxLQUFLWCxJQUFJd0QsS0FBS3hELEVBQUVLLENBQUMsR0FBRyxHQUFHeUI7WUFDeEMrSCxNQUFNQyxlQUFlN0ksR0FBRyxPQUFPdUMsS0FBS3ZDLEVBQUVaLENBQUMsR0FBRztRQUM1QztRQUVBLHNGQUFzRjtRQUN0RixvQ0FBb0M7UUFDcEMsT0FBT0wsRUFBRXVGLEtBQUssTUFBTSxDQUFDdkYsRUFBRTRDLE1BQU0sS0FBSyxNQUFNaUgsTUFBTUE7SUFDaEQ7SUFHQTs7Ozs7Ozs7OztHQVVDLEdBQ0RqSyxFQUFFb0ssVUFBVSxHQUFHLFNBQVVDLElBQUk7UUFDM0IsSUFBSTFJLEdBQUcySSxJQUFJQyxJQUFJQyxJQUFJL0osR0FBR0ssR0FBRzJCLEdBQUdnSSxJQUFJQyxJQUFJekksSUFBSTBHLEdBQUdqRyxHQUN6Q3RDLElBQUksSUFBSSxFQUNSc0IsS0FBS3RCLEVBQUV1QixDQUFDLEVBQ1JaLE9BQU9YLEVBQUVDLFdBQVc7UUFFdEIsSUFBSSxDQUFDcUIsSUFBSSxPQUFPLElBQUlYLEtBQUtYO1FBRXpCc0ssS0FBS0osS0FBSyxJQUFJdkosS0FBSztRQUNuQndKLEtBQUtFLEtBQUssSUFBSTFKLEtBQUs7UUFFbkJZLElBQUksSUFBSVosS0FBS3dKO1FBQ2I5SixJQUFJa0IsRUFBRWxCLENBQUMsR0FBRzBJLGFBQWF6SCxNQUFNdEIsRUFBRUssQ0FBQyxHQUFHO1FBQ25DSyxJQUFJTCxJQUFJZDtRQUNSZ0MsRUFBRUEsQ0FBQyxDQUFDLEVBQUUsR0FBR3ZDLFFBQVEsSUFBSTBCLElBQUksSUFBSW5CLFdBQVdtQixJQUFJQTtRQUU1QyxJQUFJdUosUUFBUSxNQUFNO1lBRWhCLGtEQUFrRDtZQUNsREEsT0FBTzVKLElBQUksSUFBSWtCLElBQUkrSTtRQUNyQixPQUFPO1lBQ0xqSSxJQUFJLElBQUkxQixLQUFLc0o7WUFDYixJQUFJLENBQUM1SCxFQUFFcUUsS0FBSyxNQUFNckUsRUFBRTJFLEVBQUUsQ0FBQ3NELEtBQUssTUFBTXhKLE1BQU1yQyxrQkFBa0I0RDtZQUMxRDRILE9BQU81SCxFQUFFeEIsRUFBRSxDQUFDVSxLQUFNbEIsSUFBSSxJQUFJa0IsSUFBSStJLEtBQU1qSTtRQUN0QztRQUVBOUQsV0FBVztRQUNYOEQsSUFBSSxJQUFJMUIsS0FBS2tDLGVBQWV2QjtRQUM1Qk8sS0FBS2xCLEtBQUtoRCxTQUFTO1FBQ25CZ0QsS0FBS2hELFNBQVMsR0FBRzBDLElBQUlpQixHQUFHNUIsTUFBTSxHQUFHSCxXQUFXO1FBRTVDLE9BQVU7WUFDUmdKLElBQUluRixPQUFPZixHQUFHZCxHQUFHLEdBQUcsR0FBRztZQUN2QjZJLEtBQUtGLEdBQUcvRyxJQUFJLENBQUNvRixFQUFFckYsS0FBSyxDQUFDaUg7WUFDckIsSUFBSUMsR0FBR3JKLEdBQUcsQ0FBQ2tKLFNBQVMsR0FBRztZQUN2QkMsS0FBS0M7WUFDTEEsS0FBS0M7WUFDTEEsS0FBS0U7WUFDTEEsS0FBS0QsR0FBR2xILElBQUksQ0FBQ29GLEVBQUVyRixLQUFLLENBQUNrSDtZQUNyQkMsS0FBS0Q7WUFDTEEsS0FBSzdJO1lBQ0xBLElBQUljLEVBQUVxQyxLQUFLLENBQUM2RCxFQUFFckYsS0FBSyxDQUFDa0g7WUFDcEIvSCxJQUFJK0g7UUFDTjtRQUVBQSxLQUFLaEgsT0FBTzZHLEtBQUt2RixLQUFLLENBQUN3RixLQUFLQyxJQUFJLEdBQUcsR0FBRztRQUN0Q0UsS0FBS0EsR0FBR2xILElBQUksQ0FBQ2lILEdBQUdsSCxLQUFLLENBQUNvSDtRQUN0QkosS0FBS0EsR0FBRy9HLElBQUksQ0FBQ2lILEdBQUdsSCxLQUFLLENBQUNpSDtRQUN0QkUsR0FBR25LLENBQUMsR0FBR29LLEdBQUdwSyxDQUFDLEdBQUdGLEVBQUVFLENBQUM7UUFFakIsMkRBQTJEO1FBQzNEb0MsSUFBSWMsT0FBT2tILElBQUlILElBQUk5SixHQUFHLEdBQUdxRSxLQUFLLENBQUMxRSxHQUFHRCxHQUFHLEdBQUdnQixHQUFHLENBQUNxQyxPQUFPaUgsSUFBSUgsSUFBSTdKLEdBQUcsR0FBR3FFLEtBQUssQ0FBQzFFLEdBQUdELEdBQUcsTUFBTSxJQUM3RTtZQUFDdUs7WUFBSUg7U0FBRyxHQUFHO1lBQUNFO1lBQUlIO1NBQUc7UUFFekJ2SixLQUFLaEQsU0FBUyxHQUFHa0U7UUFDakJ0RCxXQUFXO1FBRVgsT0FBTytEO0lBQ1Q7SUFHQTs7Ozs7Ozs7O0dBU0MsR0FDRDFDLEVBQUUySyxhQUFhLEdBQUczSyxFQUFFNEssS0FBSyxHQUFHLFNBQVV6SSxFQUFFLEVBQUVELEVBQUU7UUFDMUMsT0FBTzJILGVBQWUsSUFBSSxFQUFFLElBQUkxSCxJQUFJRDtJQUN0QztJQUdBOzs7Ozs7Ozs7Ozs7Ozs7R0FlQyxHQUNEbEMsRUFBRTZLLFNBQVMsR0FBRyxTQUFVeEosQ0FBQyxFQUFFYSxFQUFFO1FBQzNCLElBQUk5QixJQUFJLElBQUksRUFDVlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QkQsSUFBSSxJQUFJVyxLQUFLWDtRQUViLElBQUlpQixLQUFLLE1BQU07WUFFYixnQ0FBZ0M7WUFDaEMsSUFBSSxDQUFDakIsRUFBRXVCLENBQUMsRUFBRSxPQUFPdkI7WUFFakJpQixJQUFJLElBQUlOLEtBQUs7WUFDYm1CLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNwQixPQUFPO1lBQ0xxRCxJQUFJLElBQUlOLEtBQUtNO1lBQ2IsSUFBSWEsT0FBTyxLQUFLLEdBQUc7Z0JBQ2pCQSxLQUFLbkIsS0FBSy9DLFFBQVE7WUFDcEIsT0FBTztnQkFDTGdNLFdBQVc5SCxJQUFJLEdBQUc7WUFDcEI7WUFFQSwwREFBMEQ7WUFDMUQsSUFBSSxDQUFDOUIsRUFBRXVCLENBQUMsRUFBRSxPQUFPTixFQUFFZixDQUFDLEdBQUdGLElBQUlpQjtZQUUzQixxRkFBcUY7WUFDckYsSUFBSSxDQUFDQSxFQUFFTSxDQUFDLEVBQUU7Z0JBQ1IsSUFBSU4sRUFBRWYsQ0FBQyxFQUFFZSxFQUFFZixDQUFDLEdBQUdGLEVBQUVFLENBQUM7Z0JBQ2xCLE9BQU9lO1lBQ1Q7UUFDRjtRQUVBLDhEQUE4RDtRQUM5RCxJQUFJQSxFQUFFTSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ1ZoRCxXQUFXO1lBQ1h5QixJQUFJb0QsT0FBT3BELEdBQUdpQixHQUFHLEdBQUdhLElBQUksR0FBR29CLEtBQUssQ0FBQ2pDO1lBQ2pDMUMsV0FBVztZQUNYNEIsU0FBU0g7UUFFWCxnREFBZ0Q7UUFDaEQsT0FBTztZQUNMaUIsRUFBRWYsQ0FBQyxHQUFHRixFQUFFRSxDQUFDO1lBQ1RGLElBQUlpQjtRQUNOO1FBRUEsT0FBT2pCO0lBQ1Q7SUFHQTs7OztHQUlDLEdBQ0RKLEVBQUU4SyxRQUFRLEdBQUc7UUFDWCxPQUFPLENBQUMsSUFBSTtJQUNkO0lBR0E7Ozs7Ozs7OztHQVNDLEdBQ0Q5SyxFQUFFK0ssT0FBTyxHQUFHLFNBQVU1SSxFQUFFLEVBQUVELEVBQUU7UUFDMUIsT0FBTzJILGVBQWUsSUFBSSxFQUFFLEdBQUcxSCxJQUFJRDtJQUNyQztJQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwQ0MsR0FDRGxDLEVBQUVnTCxPQUFPLEdBQUdoTCxFQUFFWCxHQUFHLEdBQUcsU0FBVWdDLENBQUM7UUFDN0IsSUFBSVosR0FBR0ssR0FBR21CLElBQUlTLEdBQUdSLElBQUk1QixHQUNuQkYsSUFBSSxJQUFJLEVBQ1JXLE9BQU9YLEVBQUVDLFdBQVcsRUFDcEI0SyxLQUFLLENBQUU1SixDQUFBQSxJQUFJLElBQUlOLEtBQUtNLEVBQUM7UUFFdkIsK0JBQStCO1FBQy9CLElBQUksQ0FBQ2pCLEVBQUV1QixDQUFDLElBQUksQ0FBQ04sRUFBRU0sQ0FBQyxJQUFJLENBQUN2QixFQUFFdUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDTixFQUFFTSxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sSUFBSVosS0FBSzNCLFFBQVEsQ0FBQ2dCLEdBQUc2SztRQUVwRTdLLElBQUksSUFBSVcsS0FBS1g7UUFFYixJQUFJQSxFQUFFcUQsRUFBRSxDQUFDLElBQUksT0FBT3JEO1FBRXBCNkIsS0FBS2xCLEtBQUtoRCxTQUFTO1FBQ25CbUUsS0FBS25CLEtBQUsvQyxRQUFRO1FBRWxCLElBQUlxRCxFQUFFb0MsRUFBRSxDQUFDLElBQUksT0FBT2xELFNBQVNILEdBQUc2QixJQUFJQztRQUVwQyxhQUFhO1FBQ2J6QixJQUFJeEIsVUFBVW9DLEVBQUVaLENBQUMsR0FBR2Q7UUFFcEIsMEVBQTBFO1FBQzFFLElBQUljLEtBQUtZLEVBQUVNLENBQUMsQ0FBQzdCLE1BQU0sR0FBRyxLQUFLLENBQUNnQixJQUFJbUssS0FBSyxJQUFJLENBQUNBLEtBQUtBLEVBQUMsS0FBTXJMLGtCQUFrQjtZQUN0RThDLElBQUl3SSxPQUFPbkssTUFBTVgsR0FBR1UsR0FBR21CO1lBQ3ZCLE9BQU9aLEVBQUVmLENBQUMsR0FBRyxJQUFJLElBQUlTLEtBQUssR0FBR2dELEdBQUcsQ0FBQ3JCLEtBQUtuQyxTQUFTbUMsR0FBR1QsSUFBSUM7UUFDeEQ7UUFFQTVCLElBQUlGLEVBQUVFLENBQUM7UUFFUCxtQkFBbUI7UUFDbkIsSUFBSUEsSUFBSSxHQUFHO1lBRVQseUJBQXlCO1lBQ3pCLElBQUlHLElBQUlZLEVBQUVNLENBQUMsQ0FBQzdCLE1BQU0sR0FBRyxHQUFHLE9BQU8sSUFBSWlCLEtBQUtDO1lBRXhDLCtFQUErRTtZQUMvRSxJQUFJLENBQUNLLEVBQUVNLENBQUMsQ0FBQ2xCLEVBQUUsR0FBRyxNQUFNLEdBQUdILElBQUk7WUFFM0IsY0FBYztZQUNkLElBQUlGLEVBQUVLLENBQUMsSUFBSSxLQUFLTCxFQUFFdUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLdkIsRUFBRXVCLENBQUMsQ0FBQzdCLE1BQU0sSUFBSSxHQUFHO2dCQUM5Q00sRUFBRUUsQ0FBQyxHQUFHQTtnQkFDTixPQUFPRjtZQUNUO1FBQ0Y7UUFFQSw0QkFBNEI7UUFDNUIsc0NBQXNDO1FBQ3RDLCtDQUErQztRQUMvQyxvREFBb0Q7UUFDcERVLElBQUkxQixRQUFRLENBQUNnQixHQUFHNks7UUFDaEJ4SyxJQUFJSyxLQUFLLEtBQUssQ0FBQ2lDLFNBQVNqQyxLQUNwQjdCLFVBQVVnTSxLQUFNL0wsQ0FBQUEsS0FBS3FJLEdBQUcsQ0FBQyxPQUFPdEUsZUFBZTdDLEVBQUV1QixDQUFDLEtBQUt6QyxLQUFLdEIsSUFBSSxHQUFHd0MsRUFBRUssQ0FBQyxHQUFHLE1BQ3pFLElBQUlNLEtBQUtELElBQUksSUFBSUwsQ0FBQztRQUV0QiwyRkFBMkY7UUFFM0Ysc0JBQXNCO1FBQ3RCLElBQUlBLElBQUlNLEtBQUsxQyxJQUFJLEdBQUcsS0FBS29DLElBQUlNLEtBQUszQyxJQUFJLEdBQUcsR0FBRyxPQUFPLElBQUkyQyxLQUFLTixJQUFJLElBQUlILElBQUksSUFBSTtRQUU1RTNCLFdBQVc7UUFDWG9DLEtBQUsvQyxRQUFRLEdBQUdvQyxFQUFFRSxDQUFDLEdBQUc7UUFFdEIscUZBQXFGO1FBQ3JGLHNGQUFzRjtRQUN0RixxREFBcUQ7UUFDckQsOEVBQThFO1FBQzlFUSxJQUFJNUIsS0FBSzBCLEdBQUcsQ0FBQyxJQUFJLENBQUNILElBQUksRUFBQyxFQUFHWCxNQUFNO1FBRWhDLHlCQUF5QjtRQUN6QjRDLElBQUlrRyxtQkFBbUJ2SCxFQUFFaUMsS0FBSyxDQUFDeUUsaUJBQWlCM0gsR0FBRzZCLEtBQUtuQixLQUFLbUI7UUFFN0QsMkRBQTJEO1FBQzNELElBQUlTLEVBQUVmLENBQUMsRUFBRTtZQUVQLGdFQUFnRTtZQUNoRWUsSUFBSW5DLFNBQVNtQyxHQUFHVCxLQUFLLEdBQUc7WUFFeEIsK0ZBQStGO1lBQy9GLGNBQWM7WUFDZCxJQUFJZ0csb0JBQW9CdkYsRUFBRWYsQ0FBQyxFQUFFTSxJQUFJQyxLQUFLO2dCQUNwQ3pCLElBQUl3QixLQUFLO2dCQUVULGlFQUFpRTtnQkFDakVTLElBQUluQyxTQUFTcUksbUJBQW1CdkgsRUFBRWlDLEtBQUssQ0FBQ3lFLGlCQUFpQjNILEdBQUdLLElBQUlLLEtBQUtMLElBQUlBLElBQUksR0FBRztnQkFFaEYsMkZBQTJGO2dCQUMzRixJQUFJLENBQUN3QyxlQUFlUCxFQUFFZixDQUFDLEVBQUV3QixLQUFLLENBQUNsQixLQUFLLEdBQUdBLEtBQUssTUFBTSxLQUFLLE1BQU07b0JBQzNEUyxJQUFJbkMsU0FBU21DLEdBQUdULEtBQUssR0FBRztnQkFDMUI7WUFDRjtRQUNGO1FBRUFTLEVBQUVwQyxDQUFDLEdBQUdBO1FBQ04zQixXQUFXO1FBQ1hvQyxLQUFLL0MsUUFBUSxHQUFHa0U7UUFFaEIsT0FBTzNCLFNBQVNtQyxHQUFHVCxJQUFJQztJQUN6QjtJQUdBOzs7Ozs7Ozs7O0dBVUMsR0FDRGxDLEVBQUVtTCxXQUFXLEdBQUcsU0FBVWhKLEVBQUUsRUFBRUQsRUFBRTtRQUM5QixJQUFJK0gsS0FDRjdKLElBQUksSUFBSSxFQUNSVyxPQUFPWCxFQUFFQyxXQUFXO1FBRXRCLElBQUk4QixPQUFPLEtBQUssR0FBRztZQUNqQjhILE1BQU1DLGVBQWU5SixHQUFHQSxFQUFFSyxDQUFDLElBQUlNLEtBQUs3QyxRQUFRLElBQUlrQyxFQUFFSyxDQUFDLElBQUlNLEtBQUs1QyxRQUFRO1FBQ3RFLE9BQU87WUFDTDZMLFdBQVc3SCxJQUFJLEdBQUd6RTtZQUVsQixJQUFJd0UsT0FBTyxLQUFLLEdBQUdBLEtBQUtuQixLQUFLL0MsUUFBUTtpQkFDaENnTSxXQUFXOUgsSUFBSSxHQUFHO1lBRXZCOUIsSUFBSUcsU0FBUyxJQUFJUSxLQUFLWCxJQUFJK0IsSUFBSUQ7WUFDOUIrSCxNQUFNQyxlQUFlOUosR0FBRytCLE1BQU0vQixFQUFFSyxDQUFDLElBQUlMLEVBQUVLLENBQUMsSUFBSU0sS0FBSzdDLFFBQVEsRUFBRWlFO1FBQzdEO1FBRUEsT0FBTy9CLEVBQUV1RixLQUFLLE1BQU0sQ0FBQ3ZGLEVBQUU0QyxNQUFNLEtBQUssTUFBTWlILE1BQU1BO0lBQ2hEO0lBR0E7Ozs7Ozs7Ozs7Ozs7R0FhQyxHQUNEakssRUFBRW9MLG1CQUFtQixHQUFHcEwsRUFBRXFMLElBQUksR0FBRyxTQUFVbEosRUFBRSxFQUFFRCxFQUFFO1FBQy9DLElBQUk5QixJQUFJLElBQUksRUFDVlcsT0FBT1gsRUFBRUMsV0FBVztRQUV0QixJQUFJOEIsT0FBTyxLQUFLLEdBQUc7WUFDakJBLEtBQUtwQixLQUFLaEQsU0FBUztZQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNwQixPQUFPO1lBQ0xnTSxXQUFXN0gsSUFBSSxHQUFHekU7WUFFbEIsSUFBSXdFLE9BQU8sS0FBSyxHQUFHQSxLQUFLbkIsS0FBSy9DLFFBQVE7aUJBQ2hDZ00sV0FBVzlILElBQUksR0FBRztRQUN6QjtRQUVBLE9BQU8zQixTQUFTLElBQUlRLEtBQUtYLElBQUkrQixJQUFJRDtJQUNuQztJQUdBOzs7Ozs7R0FNQyxHQUNEbEMsRUFBRXFELFFBQVEsR0FBRztRQUNYLElBQUlqRCxJQUFJLElBQUksRUFDVlcsT0FBT1gsRUFBRUMsV0FBVyxFQUNwQjRKLE1BQU1DLGVBQWU5SixHQUFHQSxFQUFFSyxDQUFDLElBQUlNLEtBQUs3QyxRQUFRLElBQUlrQyxFQUFFSyxDQUFDLElBQUlNLEtBQUs1QyxRQUFRO1FBRXRFLE9BQU9pQyxFQUFFdUYsS0FBSyxNQUFNLENBQUN2RixFQUFFNEMsTUFBTSxLQUFLLE1BQU1pSCxNQUFNQTtJQUNoRDtJQUdBOzs7R0FHQyxHQUNEakssRUFBRXNMLFNBQVMsR0FBR3RMLEVBQUV1TCxLQUFLLEdBQUc7UUFDdEIsT0FBT2hMLFNBQVMsSUFBSSxJQUFJLENBQUNGLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDSSxDQUFDLEdBQUcsR0FBRztJQUMxRDtJQUdBOzs7O0dBSUMsR0FDRFQsRUFBRXdMLE9BQU8sR0FBR3hMLEVBQUV5TCxNQUFNLEdBQUc7UUFDckIsSUFBSXJMLElBQUksSUFBSSxFQUNWVyxPQUFPWCxFQUFFQyxXQUFXLEVBQ3BCNEosTUFBTUMsZUFBZTlKLEdBQUdBLEVBQUVLLENBQUMsSUFBSU0sS0FBSzdDLFFBQVEsSUFBSWtDLEVBQUVLLENBQUMsSUFBSU0sS0FBSzVDLFFBQVE7UUFFdEUsT0FBT2lDLEVBQUV1RixLQUFLLEtBQUssTUFBTXNFLE1BQU1BO0lBQ2pDO0lBR0Esd0ZBQXdGO0lBR3hGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkNDLEdBR0QsU0FBU2hILGVBQWV0QixDQUFDO1FBQ3ZCLElBQUlMLEdBQUdSLEdBQUc0SyxJQUNSQyxrQkFBa0JoSyxFQUFFN0IsTUFBTSxHQUFHLEdBQzdCbUssTUFBTSxJQUNOcEcsSUFBSWxDLENBQUMsQ0FBQyxFQUFFO1FBRVYsSUFBSWdLLGtCQUFrQixHQUFHO1lBQ3ZCMUIsT0FBT3BHO1lBQ1AsSUFBS3ZDLElBQUksR0FBR0EsSUFBSXFLLGlCQUFpQnJLLElBQUs7Z0JBQ3BDb0ssS0FBSy9KLENBQUMsQ0FBQ0wsRUFBRSxHQUFHO2dCQUNaUixJQUFJbkIsV0FBVytMLEdBQUc1TCxNQUFNO2dCQUN4QixJQUFJZ0IsR0FBR21KLE9BQU8yQixjQUFjOUs7Z0JBQzVCbUosT0FBT3lCO1lBQ1Q7WUFFQTdILElBQUlsQyxDQUFDLENBQUNMLEVBQUU7WUFDUm9LLEtBQUs3SCxJQUFJO1lBQ1QvQyxJQUFJbkIsV0FBVytMLEdBQUc1TCxNQUFNO1lBQ3hCLElBQUlnQixHQUFHbUosT0FBTzJCLGNBQWM5SztRQUM5QixPQUFPLElBQUkrQyxNQUFNLEdBQUc7WUFDbEIsT0FBTztRQUNUO1FBRUEsbUNBQW1DO1FBQ25DLE1BQU9BLElBQUksT0FBTyxHQUFJQSxLQUFLO1FBRTNCLE9BQU9vRyxNQUFNcEc7SUFDZjtJQUdBLFNBQVNtRyxXQUFXMUksQ0FBQyxFQUFFVixHQUFHLEVBQUVDLEdBQUc7UUFDN0IsSUFBSVMsTUFBTSxDQUFDLENBQUNBLEtBQUtBLElBQUlWLE9BQU9VLElBQUlULEtBQUs7WUFDbkMsTUFBTUssTUFBTXJDLGtCQUFrQnlDO1FBQ2hDO0lBQ0Y7SUFHQTs7OztHQUlDLEdBQ0QsU0FBUzJHLG9CQUFvQnRHLENBQUMsRUFBRUwsQ0FBQyxFQUFFWSxFQUFFLEVBQUUySixTQUFTO1FBQzlDLElBQUlDLElBQUloTCxHQUFHNEIsR0FBR3FKO1FBRWQsbURBQW1EO1FBQ25ELElBQUtqTCxJQUFJYSxDQUFDLENBQUMsRUFBRSxFQUFFYixLQUFLLElBQUlBLEtBQUssR0FBSSxFQUFFUTtRQUVuQyxnREFBZ0Q7UUFDaEQsSUFBSSxFQUFFQSxJQUFJLEdBQUc7WUFDWEEsS0FBSzNCO1lBQ0xtTSxLQUFLO1FBQ1AsT0FBTztZQUNMQSxLQUFLNU0sS0FBS3NCLElBQUksQ0FBQyxDQUFDYyxJQUFJLEtBQUszQjtZQUN6QjJCLEtBQUszQjtRQUNQO1FBRUEsZ0RBQWdEO1FBQ2hELGlFQUFpRTtRQUNqRSxrREFBa0Q7UUFDbERtQixJQUFJMUIsUUFBUSxJQUFJTyxXQUFXMkI7UUFDM0J5SyxLQUFLcEssQ0FBQyxDQUFDbUssR0FBRyxHQUFHaEwsSUFBSTtRQUVqQixJQUFJK0ssYUFBYSxNQUFNO1lBQ3JCLElBQUl2SyxJQUFJLEdBQUc7Z0JBQ1QsSUFBSUEsS0FBSyxHQUFHeUssS0FBS0EsS0FBSyxNQUFNO3FCQUN2QixJQUFJekssS0FBSyxHQUFHeUssS0FBS0EsS0FBSyxLQUFLO2dCQUNoQ3JKLElBQUlSLEtBQUssS0FBSzZKLE1BQU0sU0FBUzdKLEtBQUssS0FBSzZKLE1BQU0sU0FBU0EsTUFBTSxTQUFTQSxNQUFNO1lBQzdFLE9BQU87Z0JBQ0xySixJQUFJLENBQUNSLEtBQUssS0FBSzZKLEtBQUssS0FBS2pMLEtBQUtvQixLQUFLLEtBQUs2SixLQUFLLEtBQUtqTCxJQUFJLE1BQ3BELENBQUNhLENBQUMsQ0FBQ21LLEtBQUssRUFBRSxHQUFHaEwsSUFBSSxNQUFNLE1BQU0xQixRQUFRLElBQUlrQyxJQUFJLEtBQUssS0FDaEQsQ0FBQ3lLLE1BQU1qTCxJQUFJLEtBQUtpTCxNQUFNLE1BQU0sQ0FBQ3BLLENBQUMsQ0FBQ21LLEtBQUssRUFBRSxHQUFHaEwsSUFBSSxNQUFNLE1BQU07WUFDL0Q7UUFDRixPQUFPO1lBQ0wsSUFBSVEsSUFBSSxHQUFHO2dCQUNULElBQUlBLEtBQUssR0FBR3lLLEtBQUtBLEtBQUssT0FBTztxQkFDeEIsSUFBSXpLLEtBQUssR0FBR3lLLEtBQUtBLEtBQUssTUFBTTtxQkFDNUIsSUFBSXpLLEtBQUssR0FBR3lLLEtBQUtBLEtBQUssS0FBSztnQkFDaENySixJQUFJLENBQUNtSixhQUFhM0osS0FBSyxNQUFNNkosTUFBTSxRQUFRLENBQUNGLGFBQWEzSixLQUFLLEtBQUs2SixNQUFNO1lBQzNFLE9BQU87Z0JBQ0xySixJQUFJLENBQUMsQ0FBQ21KLGFBQWEzSixLQUFLLE1BQU02SixLQUFLLEtBQUtqTCxLQUN4QyxDQUFFK0ssYUFBYTNKLEtBQUssS0FBTTZKLEtBQUssS0FBS2pMLElBQUksTUFDdEMsQ0FBQ2EsQ0FBQyxDQUFDbUssS0FBSyxFQUFFLEdBQUdoTCxJQUFJLE9BQU8sTUFBTTFCLFFBQVEsSUFBSWtDLElBQUksS0FBSztZQUN2RDtRQUNGO1FBRUEsT0FBT29CO0lBQ1Q7SUFHQSxrRUFBa0U7SUFDbEUsbURBQW1EO0lBQ25ELG1EQUFtRDtJQUNuRCxTQUFTc0osWUFBWS9CLEdBQUcsRUFBRWdDLE1BQU0sRUFBRUMsT0FBTztRQUN2QyxJQUFJM0ssR0FDRjRLLE1BQU07WUFBQztTQUFFLEVBQ1RDLE1BQ0E5SyxJQUFJLEdBQ0orSyxPQUFPcEMsSUFBSW5LLE1BQU07UUFFbkIsTUFBT3dCLElBQUkrSyxNQUFPO1lBQ2hCLElBQUtELE9BQU9ELElBQUlyTSxNQUFNLEVBQUVzTSxRQUFTRCxHQUFHLENBQUNDLEtBQUssSUFBSUg7WUFDOUNFLEdBQUcsQ0FBQyxFQUFFLElBQUl4TyxTQUFTeUYsT0FBTyxDQUFDNkcsSUFBSXZHLE1BQU0sQ0FBQ3BDO1lBQ3RDLElBQUtDLElBQUksR0FBR0EsSUFBSTRLLElBQUlyTSxNQUFNLEVBQUV5QixJQUFLO2dCQUMvQixJQUFJNEssR0FBRyxDQUFDNUssRUFBRSxHQUFHMkssVUFBVSxHQUFHO29CQUN4QixJQUFJQyxHQUFHLENBQUM1SyxJQUFJLEVBQUUsS0FBSyxLQUFLLEdBQUc0SyxHQUFHLENBQUM1SyxJQUFJLEVBQUUsR0FBRztvQkFDeEM0SyxHQUFHLENBQUM1SyxJQUFJLEVBQUUsSUFBSTRLLEdBQUcsQ0FBQzVLLEVBQUUsR0FBRzJLLFVBQVU7b0JBQ2pDQyxHQUFHLENBQUM1SyxFQUFFLElBQUkySztnQkFDWjtZQUNGO1FBQ0Y7UUFFQSxPQUFPQyxJQUFJOUQsT0FBTztJQUNwQjtJQUdBOzs7O0dBSUMsR0FDRCxTQUFTdEcsT0FBT2hCLElBQUksRUFBRVgsQ0FBQztRQUNyQixJQUFJVSxHQUFHMEQsS0FBS25EO1FBRVosSUFBSWpCLEVBQUU0QyxNQUFNLElBQUksT0FBTzVDO1FBRXZCLDREQUE0RDtRQUM1RCxnREFBZ0Q7UUFFaEQsc0VBQXNFO1FBQ3RFb0UsTUFBTXBFLEVBQUV1QixDQUFDLENBQUM3QixNQUFNO1FBQ2hCLElBQUkwRSxNQUFNLElBQUk7WUFDWjFELElBQUk1QixLQUFLc0IsSUFBSSxDQUFDZ0UsTUFBTTtZQUNwQm5ELElBQUksQ0FBQyxJQUFJcUQsUUFBUSxHQUFHNUQsRUFBQyxFQUFHdUMsUUFBUTtRQUNsQyxPQUFPO1lBQ0x2QyxJQUFJO1lBQ0pPLElBQUk7UUFDTjtRQUVBTixLQUFLaEQsU0FBUyxJQUFJK0M7UUFFbEJWLElBQUl1RSxhQUFhNUQsTUFBTSxHQUFHWCxFQUFFa0QsS0FBSyxDQUFDakMsSUFBSSxJQUFJTixLQUFLO1FBRS9DLDZCQUE2QjtRQUM3QixJQUFLLElBQUlPLElBQUlSLEdBQUdRLEtBQU07WUFDcEIsSUFBSWdMLFFBQVFsTSxFQUFFa0QsS0FBSyxDQUFDbEQ7WUFDcEJBLElBQUlrTSxNQUFNaEosS0FBSyxDQUFDZ0osT0FBT3hILEtBQUssQ0FBQ3dILE9BQU9oSixLQUFLLENBQUMsR0FBR0MsSUFBSSxDQUFDO1FBQ3BEO1FBRUF4QyxLQUFLaEQsU0FBUyxJQUFJK0M7UUFFbEIsT0FBT1Y7SUFDVDtJQUdBOztHQUVDLEdBQ0QsSUFBSW9ELFNBQVM7UUFFWCx1REFBdUQ7UUFDdkQsU0FBUytJLGdCQUFnQm5NLENBQUMsRUFBRVUsQ0FBQyxFQUFFMEcsSUFBSTtZQUNqQyxJQUFJZ0YsTUFDRnhELFFBQVEsR0FDUjFILElBQUlsQixFQUFFTixNQUFNO1lBRWQsSUFBS00sSUFBSUEsRUFBRStDLEtBQUssSUFBSTdCLEtBQU07Z0JBQ3hCa0wsT0FBT3BNLENBQUMsQ0FBQ2tCLEVBQUUsR0FBR1IsSUFBSWtJO2dCQUNsQjVJLENBQUMsQ0FBQ2tCLEVBQUUsR0FBR2tMLE9BQU9oRixPQUFPO2dCQUNyQndCLFFBQVF3RCxPQUFPaEYsT0FBTztZQUN4QjtZQUVBLElBQUl3QixPQUFPNUksRUFBRTZJLE9BQU8sQ0FBQ0Q7WUFFckIsT0FBTzVJO1FBQ1Q7UUFFQSxTQUFTcU0sUUFBUUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUUsRUFBRUMsRUFBRTtZQUMzQixJQUFJdkwsR0FBR29CO1lBRVAsSUFBSWtLLE1BQU1DLElBQUk7Z0JBQ1puSyxJQUFJa0ssS0FBS0MsS0FBSyxJQUFJLENBQUM7WUFDckIsT0FBTztnQkFDTCxJQUFLdkwsSUFBSW9CLElBQUksR0FBR3BCLElBQUlzTCxJQUFJdEwsSUFBSztvQkFDM0IsSUFBSW9MLENBQUMsQ0FBQ3BMLEVBQUUsSUFBSXFMLENBQUMsQ0FBQ3JMLEVBQUUsRUFBRTt3QkFDaEJvQixJQUFJZ0ssQ0FBQyxDQUFDcEwsRUFBRSxHQUFHcUwsQ0FBQyxDQUFDckwsRUFBRSxHQUFHLElBQUksQ0FBQzt3QkFDdkI7b0JBQ0Y7Z0JBQ0Y7WUFDRjtZQUVBLE9BQU9vQjtRQUNUO1FBRUEsU0FBU29LLFNBQVNKLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFLEVBQUVwRixJQUFJO1lBQzlCLElBQUlsRyxJQUFJO1lBRVIscUJBQXFCO1lBQ3JCLE1BQU9zTCxNQUFPO2dCQUNaRixDQUFDLENBQUNFLEdBQUcsSUFBSXRMO2dCQUNUQSxJQUFJb0wsQ0FBQyxDQUFDRSxHQUFHLEdBQUdELENBQUMsQ0FBQ0MsR0FBRyxHQUFHLElBQUk7Z0JBQ3hCRixDQUFDLENBQUNFLEdBQUcsR0FBR3RMLElBQUlrRyxPQUFPa0YsQ0FBQyxDQUFDRSxHQUFHLEdBQUdELENBQUMsQ0FBQ0MsR0FBRztZQUNsQztZQUVBLHdCQUF3QjtZQUN4QixNQUFPLENBQUNGLENBQUMsQ0FBQyxFQUFFLElBQUlBLEVBQUU1TSxNQUFNLEdBQUcsR0FBSTRNLEVBQUVsRSxLQUFLO1FBQ3hDO1FBRUEsT0FBTyxTQUFVcEksQ0FBQyxFQUFFaUIsQ0FBQyxFQUFFWSxFQUFFLEVBQUVDLEVBQUUsRUFBRTBCLEVBQUUsRUFBRTRELElBQUk7WUFDckMsSUFBSXJHLEtBQUtWLEdBQUdhLEdBQUdSLEdBQUdpTSxTQUFTQyxNQUFNQyxNQUFNQyxPQUFPdkUsR0FBR3dFLElBQUlDLEtBQUtDLE1BQU1DLE1BQU1uTCxJQUFJUyxHQUFHMkssSUFBSUMsSUFBSUMsS0FDbkZDLElBQUlDLElBQ0o1TSxPQUFPWCxFQUFFQyxXQUFXLEVBQ3BCdU4sT0FBT3hOLEVBQUVFLENBQUMsSUFBSWUsRUFBRWYsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUN6Qm9CLEtBQUt0QixFQUFFdUIsQ0FBQyxFQUNSQyxLQUFLUCxFQUFFTSxDQUFDO1lBRVYsNkJBQTZCO1lBQzdCLElBQUksQ0FBQ0QsTUFBTSxDQUFDQSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUNFLE1BQU0sQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFFbEMsT0FBTyxJQUFJYixLQUNULENBQUNYLEVBQUVFLENBQUMsSUFBSSxDQUFDZSxFQUFFZixDQUFDLElBQUtvQixDQUFBQSxLQUFLRSxNQUFNRixFQUFFLENBQUMsRUFBRSxJQUFJRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUNBLEVBQUMsSUFBS1osTUFFcEQsd0VBQXdFO2dCQUN4RVUsTUFBTUEsRUFBRSxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUNFLEtBQUtnTSxPQUFPLElBQUlBLE9BQU87WUFDaEQ7WUFFQSxJQUFJcEcsTUFBTTtnQkFDUnVGLFVBQVU7Z0JBQ1Z0TSxJQUFJTCxFQUFFSyxDQUFDLEdBQUdZLEVBQUVaLENBQUM7WUFDZixPQUFPO2dCQUNMK0csT0FBTzlIO2dCQUNQcU4sVUFBVXBOO2dCQUNWYyxJQUFJeEIsVUFBVW1CLEVBQUVLLENBQUMsR0FBR3NNLFdBQVc5TixVQUFVb0MsRUFBRVosQ0FBQyxHQUFHc007WUFDakQ7WUFFQVcsS0FBSzlMLEdBQUc5QixNQUFNO1lBQ2QwTixLQUFLOUwsR0FBRzVCLE1BQU07WUFDZDZJLElBQUksSUFBSTVILEtBQUs2TTtZQUNiVCxLQUFLeEUsRUFBRWhILENBQUMsR0FBRyxFQUFFO1lBRWIsMENBQTBDO1lBQzFDLDRFQUE0RTtZQUM1RSxJQUFLTCxJQUFJLEdBQUdNLEVBQUUsQ0FBQ04sRUFBRSxJQUFLSSxDQUFBQSxFQUFFLENBQUNKLEVBQUUsSUFBSSxJQUFJQTtZQUVuQyxJQUFJTSxFQUFFLENBQUNOLEVBQUUsR0FBSUksQ0FBQUEsRUFBRSxDQUFDSixFQUFFLElBQUksSUFBSWI7WUFFMUIsSUFBSXdCLE1BQU0sTUFBTTtnQkFDZEUsS0FBS0YsS0FBS2xCLEtBQUtoRCxTQUFTO2dCQUN4Qm1FLEtBQUtuQixLQUFLL0MsUUFBUTtZQUNwQixPQUFPLElBQUk0RixJQUFJO2dCQUNiekIsS0FBS0YsS0FBTTdCLENBQUFBLEVBQUVLLENBQUMsR0FBR1ksRUFBRVosQ0FBQyxJQUFJO1lBQzFCLE9BQU87Z0JBQ0wwQixLQUFLRjtZQUNQO1lBRUEsSUFBSUUsS0FBSyxHQUFHO2dCQUNWZ0wsR0FBRzdFLElBQUksQ0FBQztnQkFDUjBFLE9BQU87WUFDVCxPQUFPO2dCQUVMLG9FQUFvRTtnQkFDcEU3SyxLQUFLQSxLQUFLNEssVUFBVSxJQUFJO2dCQUN4QnpMLElBQUk7Z0JBRUosZ0JBQWdCO2dCQUNoQixJQUFJb00sTUFBTSxHQUFHO29CQUNYNU0sSUFBSTtvQkFDSmMsS0FBS0EsRUFBRSxDQUFDLEVBQUU7b0JBQ1ZPO29CQUVBLGtCQUFrQjtvQkFDbEIsTUFBTyxDQUFDYixJQUFJa00sTUFBTTFNLENBQUFBLEtBQU1xQixNQUFNYixJQUFLO3dCQUNqQ3NCLElBQUk5QixJQUFJMEcsT0FBUTlGLENBQUFBLEVBQUUsQ0FBQ0osRUFBRSxJQUFJO3dCQUN6QjZMLEVBQUUsQ0FBQzdMLEVBQUUsR0FBR3NCLElBQUloQixLQUFLO3dCQUNqQmQsSUFBSThCLElBQUloQixLQUFLO29CQUNmO29CQUVBb0wsT0FBT2xNLEtBQUtRLElBQUlrTTtnQkFFbEIsaUJBQWlCO2dCQUNqQixPQUFPO29CQUVMLGdFQUFnRTtvQkFDaEUxTSxJQUFJMEcsT0FBUTVGLENBQUFBLEVBQUUsQ0FBQyxFQUFFLEdBQUcsS0FBSztvQkFFekIsSUFBSWQsSUFBSSxHQUFHO3dCQUNUYyxLQUFLMkssZ0JBQWdCM0ssSUFBSWQsR0FBRzBHO3dCQUM1QjlGLEtBQUs2SyxnQkFBZ0I3SyxJQUFJWixHQUFHMEc7d0JBQzVCa0csS0FBSzlMLEdBQUc5QixNQUFNO3dCQUNkME4sS0FBSzlMLEdBQUc1QixNQUFNO29CQUNoQjtvQkFFQXlOLEtBQUtHO29CQUNMTixNQUFNMUwsR0FBR3lCLEtBQUssQ0FBQyxHQUFHdUs7b0JBQ2xCTCxPQUFPRCxJQUFJdE4sTUFBTTtvQkFFakIsa0RBQWtEO29CQUNsRCxNQUFPdU4sT0FBT0ssSUFBS04sR0FBRyxDQUFDQyxPQUFPLEdBQUc7b0JBRWpDTSxLQUFLL0wsR0FBR3VCLEtBQUs7b0JBQ2J3SyxHQUFHMUUsT0FBTyxDQUFDO29CQUNYd0UsTUFBTTdMLEVBQUUsQ0FBQyxFQUFFO29CQUVYLElBQUlBLEVBQUUsQ0FBQyxFQUFFLElBQUk0RixPQUFPLEdBQUcsRUFBRWlHO29CQUV6QixHQUFHO3dCQUNEM00sSUFBSTt3QkFFSixpQ0FBaUM7d0JBQ2pDSyxNQUFNc0wsUUFBUTdLLElBQUl3TCxLQUFLTSxJQUFJTDt3QkFFM0IsMEJBQTBCO3dCQUMxQixJQUFJbE0sTUFBTSxHQUFHOzRCQUVYLDRCQUE0Qjs0QkFDNUJtTSxPQUFPRixHQUFHLENBQUMsRUFBRTs0QkFDYixJQUFJTSxNQUFNTCxNQUFNQyxPQUFPQSxPQUFPOUYsT0FBUTRGLENBQUFBLEdBQUcsQ0FBQyxFQUFFLElBQUk7NEJBRWhELHdFQUF3RTs0QkFDeEV0TSxJQUFJd00sT0FBT0csTUFBTTs0QkFFakIsY0FBYzs0QkFDZCwwQ0FBMEM7NEJBQzFDLHNEQUFzRDs0QkFDdEQsMkJBQTJCOzRCQUMzQix1Q0FBdUM7NEJBQ3ZDLDBDQUEwQzs0QkFDMUMsMERBQTBEOzRCQUUxRCxJQUFJM00sSUFBSSxHQUFHO2dDQUNULElBQUlBLEtBQUswRyxNQUFNMUcsSUFBSTBHLE9BQU87Z0NBRTFCLG1DQUFtQztnQ0FDbkN5RixPQUFPVixnQkFBZ0IzSyxJQUFJZCxHQUFHMEc7Z0NBQzlCMEYsUUFBUUQsS0FBS25OLE1BQU07Z0NBQ25CdU4sT0FBT0QsSUFBSXROLE1BQU07Z0NBRWpCLGlDQUFpQztnQ0FDakNxQixNQUFNc0wsUUFBUVEsTUFBTUcsS0FBS0YsT0FBT0c7Z0NBRWhDLHVCQUF1QjtnQ0FDdkIsSUFBSWxNLE9BQU8sR0FBRztvQ0FDWkw7b0NBRUEsaUNBQWlDO29DQUNqQ2dNLFNBQVNHLE1BQU1TLEtBQUtSLFFBQVFTLEtBQUsvTCxJQUFJc0wsT0FBTzFGO2dDQUM5Qzs0QkFDRixPQUFPO2dDQUVMLGFBQWE7Z0NBQ2Isb0ZBQW9GO2dDQUNwRiw0RUFBNEU7Z0NBQzVFLElBQUkxRyxLQUFLLEdBQUdLLE1BQU1MLElBQUk7Z0NBQ3RCbU0sT0FBT3JMLEdBQUd1QixLQUFLOzRCQUNqQjs0QkFFQStKLFFBQVFELEtBQUtuTixNQUFNOzRCQUNuQixJQUFJb04sUUFBUUcsTUFBTUosS0FBS2hFLE9BQU8sQ0FBQzs0QkFFL0IsbUNBQW1DOzRCQUNuQzZELFNBQVNNLEtBQUtILE1BQU1JLE1BQU03Rjs0QkFFMUIsdUNBQXVDOzRCQUN2QyxJQUFJckcsT0FBTyxDQUFDLEdBQUc7Z0NBQ2JrTSxPQUFPRCxJQUFJdE4sTUFBTTtnQ0FFakIscUNBQXFDO2dDQUNyQ3FCLE1BQU1zTCxRQUFRN0ssSUFBSXdMLEtBQUtNLElBQUlMO2dDQUUzQiwrREFBK0Q7Z0NBQy9ELElBQUlsTSxNQUFNLEdBQUc7b0NBQ1hMO29DQUVBLG1DQUFtQztvQ0FDbkNnTSxTQUFTTSxLQUFLTSxLQUFLTCxPQUFPTSxLQUFLL0wsSUFBSXlMLE1BQU03RjtnQ0FDM0M7NEJBQ0Y7NEJBRUE2RixPQUFPRCxJQUFJdE4sTUFBTTt3QkFDbkIsT0FBTyxJQUFJcUIsUUFBUSxHQUFHOzRCQUNwQkw7NEJBQ0FzTSxNQUFNO2dDQUFDOzZCQUFFO3dCQUNYLEVBQUssNEJBQTRCO3dCQUVqQyw4Q0FBOEM7d0JBQzlDRCxFQUFFLENBQUM3TCxJQUFJLEdBQUdSO3dCQUVWLHdCQUF3Qjt3QkFDeEIsSUFBSUssT0FBT2lNLEdBQUcsQ0FBQyxFQUFFLEVBQUU7NEJBQ2pCQSxHQUFHLENBQUNDLE9BQU8sR0FBRzNMLEVBQUUsQ0FBQzZMLEdBQUcsSUFBSTt3QkFDMUIsT0FBTzs0QkFDTEgsTUFBTTtnQ0FBQzFMLEVBQUUsQ0FBQzZMLEdBQUc7NkJBQUM7NEJBQ2RGLE9BQU87d0JBQ1Q7b0JBRUYsUUFBUyxDQUFDRSxPQUFPQyxNQUFNSixHQUFHLENBQUMsRUFBRSxLQUFLLEtBQUssTUFBTWpMLE1BQU07b0JBRW5ENkssT0FBT0ksR0FBRyxDQUFDLEVBQUUsS0FBSyxLQUFLO2dCQUN6QjtnQkFFQSxnQkFBZ0I7Z0JBQ2hCLElBQUksQ0FBQ0QsRUFBRSxDQUFDLEVBQUUsRUFBRUEsR0FBRzNFLEtBQUs7WUFDdEI7WUFFQSw4REFBOEQ7WUFDOUQsSUFBSXVFLFdBQVcsR0FBRztnQkFDaEJwRSxFQUFFbEksQ0FBQyxHQUFHQTtnQkFDTmpDLFVBQVV3TztZQUNaLE9BQU87Z0JBRUwsNkRBQTZEO2dCQUM3RCxJQUFLMUwsSUFBSSxHQUFHUixJQUFJcU0sRUFBRSxDQUFDLEVBQUUsRUFBRXJNLEtBQUssSUFBSUEsS0FBSyxHQUFJUTtnQkFDekNxSCxFQUFFbEksQ0FBQyxHQUFHYSxJQUFJYixJQUFJc00sVUFBVTtnQkFFeEJ4TSxTQUFTb0ksR0FBRy9FLEtBQUszQixLQUFLMEcsRUFBRWxJLENBQUMsR0FBRyxJQUFJd0IsSUFBSUMsSUFBSThLO1lBQzFDO1lBRUEsT0FBT3JFO1FBQ1Q7SUFDRjtJQUdBOzs7R0FHQyxHQUNBLFNBQVNwSSxTQUFTSCxDQUFDLEVBQUUrQixFQUFFLEVBQUVELEVBQUUsRUFBRTJMLFdBQVc7UUFDdkMsSUFBSUMsUUFBUXhNLEdBQUdDLEdBQUdULEdBQUdpTCxJQUFJZ0MsU0FBU2xLLEdBQUduQyxJQUFJc00sS0FDdkNqTixPQUFPWCxFQUFFQyxXQUFXO1FBRXRCLDBDQUEwQztRQUMxQzROLEtBQUssSUFBSTlMLE1BQU0sTUFBTTtZQUNuQlQsS0FBS3RCLEVBQUV1QixDQUFDO1lBRVIsZ0JBQWdCO1lBQ2hCLElBQUksQ0FBQ0QsSUFBSSxPQUFPdEI7WUFFaEIsaUZBQWlGO1lBQ2pGLHNEQUFzRDtZQUN0RCxpQ0FBaUM7WUFDakMscUNBQXFDO1lBQ3JDLDJGQUEyRjtZQUMzRiwwQkFBMEI7WUFDMUIsNkVBQTZFO1lBRTdFLDJEQUEyRDtZQUMzRCxJQUFLME4sU0FBUyxHQUFHaE4sSUFBSVksRUFBRSxDQUFDLEVBQUUsRUFBRVosS0FBSyxJQUFJQSxLQUFLLEdBQUlnTjtZQUM5Q3hNLElBQUlhLEtBQUsyTDtZQUVULGlEQUFpRDtZQUNqRCxJQUFJeE0sSUFBSSxHQUFHO2dCQUNUQSxLQUFLM0I7Z0JBQ0w0QixJQUFJWTtnQkFDSjBCLElBQUluQyxFQUFFLENBQUNzTSxNQUFNLEVBQUU7Z0JBRWYsMENBQTBDO2dCQUMxQ2pDLEtBQUtsSSxJQUFJekUsUUFBUSxJQUFJME8sU0FBU3ZNLElBQUksS0FBSyxLQUFLO1lBQzlDLE9BQU87Z0JBQ0x5TSxNQUFNOU8sS0FBS3NCLElBQUksQ0FBQyxDQUFDYyxJQUFJLEtBQUszQjtnQkFDMUJtQixJQUFJWSxHQUFHNUIsTUFBTTtnQkFDYixJQUFJa08sT0FBT2xOLEdBQUc7b0JBQ1osSUFBSStNLGFBQWE7d0JBRWYsdUVBQXVFO3dCQUN2RSxNQUFPL00sT0FBT2tOLEtBQU10TSxHQUFHNEcsSUFBSSxDQUFDO3dCQUM1QnpFLElBQUlrSSxLQUFLO3dCQUNUK0IsU0FBUzt3QkFDVHhNLEtBQUszQjt3QkFDTDRCLElBQUlELElBQUkzQixXQUFXO29CQUNyQixPQUFPO3dCQUNMLE1BQU1zTztvQkFDUjtnQkFDRixPQUFPO29CQUNMcEssSUFBSS9DLElBQUlZLEVBQUUsQ0FBQ3NNLElBQUk7b0JBRWYsaUNBQWlDO29CQUNqQyxJQUFLRixTQUFTLEdBQUdoTixLQUFLLElBQUlBLEtBQUssR0FBSWdOO29CQUVuQyxnQ0FBZ0M7b0JBQ2hDeE0sS0FBSzNCO29CQUVMLDREQUE0RDtvQkFDNUQsa0VBQWtFO29CQUNsRTRCLElBQUlELElBQUkzQixXQUFXbU87b0JBRW5CLDBDQUEwQztvQkFDMUMvQixLQUFLeEssSUFBSSxJQUFJLElBQUlzQyxJQUFJekUsUUFBUSxJQUFJME8sU0FBU3ZNLElBQUksS0FBSyxLQUFLO2dCQUMxRDtZQUNGO1lBRUEsMERBQTBEO1lBQzFEc00sY0FBY0EsZUFBZTFMLEtBQUssS0FDaENULEVBQUUsQ0FBQ3NNLE1BQU0sRUFBRSxLQUFLLEtBQUssS0FBTXpNLENBQUFBLElBQUksSUFBSXNDLElBQUlBLElBQUl6RSxRQUFRLElBQUkwTyxTQUFTdk0sSUFBSSxFQUFDO1lBRXZFLDRGQUE0RjtZQUM1RiwwRkFBMEY7WUFDMUYsaUJBQWlCO1lBRWpCd00sVUFBVTdMLEtBQUssSUFDWCxDQUFDNkosTUFBTThCLFdBQVUsS0FBTzNMLENBQUFBLE1BQU0sS0FBS0EsTUFBTzlCLENBQUFBLEVBQUVFLENBQUMsR0FBRyxJQUFJLElBQUksRUFBQyxJQUN6RHlMLEtBQUssS0FBS0EsTUFBTSxLQUFNN0osQ0FBQUEsTUFBTSxLQUFLMkwsZUFBZTNMLE1BQU0sS0FHdEQsQ0FBRVosSUFBSSxJQUFJQyxJQUFJLElBQUlzQyxJQUFJekUsUUFBUSxJQUFJME8sU0FBU3ZNLEtBQUssSUFBSUcsRUFBRSxDQUFDc00sTUFBTSxFQUFFLElBQUksS0FBTSxLQUN2RTlMLE1BQU85QixDQUFBQSxFQUFFRSxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUM7WUFFNUIsSUFBSTZCLEtBQUssS0FBSyxDQUFDVCxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQkEsR0FBRzVCLE1BQU0sR0FBRztnQkFDWixJQUFJaU8sU0FBUztvQkFFWCxnQ0FBZ0M7b0JBQ2hDNUwsTUFBTS9CLEVBQUVLLENBQUMsR0FBRztvQkFFWixtQ0FBbUM7b0JBQ25DaUIsRUFBRSxDQUFDLEVBQUUsR0FBR3RDLFFBQVEsSUFBSSxDQUFDTyxXQUFXd0MsS0FBS3hDLFFBQU8sSUFBS0E7b0JBQ2pEUyxFQUFFSyxDQUFDLEdBQUcsQ0FBQzBCLE1BQU07Z0JBQ2YsT0FBTztvQkFFTCxRQUFRO29CQUNSVCxFQUFFLENBQUMsRUFBRSxHQUFHdEIsRUFBRUssQ0FBQyxHQUFHO2dCQUNoQjtnQkFFQSxPQUFPTDtZQUNUO1lBRUEsd0JBQXdCO1lBQ3hCLElBQUlrQixLQUFLLEdBQUc7Z0JBQ1ZJLEdBQUc1QixNQUFNLEdBQUdrTztnQkFDWmxOLElBQUk7Z0JBQ0prTjtZQUNGLE9BQU87Z0JBQ0x0TSxHQUFHNUIsTUFBTSxHQUFHa08sTUFBTTtnQkFDbEJsTixJQUFJMUIsUUFBUSxJQUFJTyxXQUFXMkI7Z0JBRTNCLHVEQUF1RDtnQkFDdkQsZ0RBQWdEO2dCQUNoREksRUFBRSxDQUFDc00sSUFBSSxHQUFHek0sSUFBSSxJQUFJLENBQUNzQyxJQUFJekUsUUFBUSxJQUFJME8sU0FBU3ZNLEtBQUtuQyxRQUFRLElBQUltQyxLQUFLLEtBQUtULElBQUk7WUFDN0U7WUFFQSxJQUFJaU4sU0FBUztnQkFDWCxPQUFTO29CQUVQLHlEQUF5RDtvQkFDekQsSUFBSUMsT0FBTyxHQUFHO3dCQUVaLG1EQUFtRDt3QkFDbkQsSUFBSzFNLElBQUksR0FBR0MsSUFBSUcsRUFBRSxDQUFDLEVBQUUsRUFBRUgsS0FBSyxJQUFJQSxLQUFLLEdBQUlEO3dCQUN6Q0MsSUFBSUcsRUFBRSxDQUFDLEVBQUUsSUFBSVo7d0JBQ2IsSUFBS0EsSUFBSSxHQUFHUyxLQUFLLElBQUlBLEtBQUssR0FBSVQ7d0JBRTlCLHNDQUFzQzt3QkFDdEMsSUFBSVEsS0FBS1IsR0FBRzs0QkFDVlYsRUFBRUssQ0FBQzs0QkFDSCxJQUFJaUIsRUFBRSxDQUFDLEVBQUUsSUFBSWhDLE1BQU1nQyxFQUFFLENBQUMsRUFBRSxHQUFHO3dCQUM3Qjt3QkFFQTtvQkFDRixPQUFPO3dCQUNMQSxFQUFFLENBQUNzTSxJQUFJLElBQUlsTjt3QkFDWCxJQUFJWSxFQUFFLENBQUNzTSxJQUFJLElBQUl0TyxNQUFNO3dCQUNyQmdDLEVBQUUsQ0FBQ3NNLE1BQU0sR0FBRzt3QkFDWmxOLElBQUk7b0JBQ047Z0JBQ0Y7WUFDRjtZQUVBLHlCQUF5QjtZQUN6QixJQUFLUSxJQUFJSSxHQUFHNUIsTUFBTSxFQUFFNEIsRUFBRSxDQUFDLEVBQUVKLEVBQUUsS0FBSyxHQUFJSSxHQUFHNkcsR0FBRztRQUM1QztRQUVBLElBQUk1SixVQUFVO1lBRVosWUFBWTtZQUNaLElBQUl5QixFQUFFSyxDQUFDLEdBQUdNLEtBQUsxQyxJQUFJLEVBQUU7Z0JBRW5CLFlBQVk7Z0JBQ1orQixFQUFFdUIsQ0FBQyxHQUFHO2dCQUNOdkIsRUFBRUssQ0FBQyxHQUFHTztZQUVSLGFBQWE7WUFDYixPQUFPLElBQUlaLEVBQUVLLENBQUMsR0FBR00sS0FBSzNDLElBQUksRUFBRTtnQkFFMUIsUUFBUTtnQkFDUmdDLEVBQUVLLENBQUMsR0FBRztnQkFDTkwsRUFBRXVCLENBQUMsR0FBRztvQkFBQztpQkFBRTtZQUNULHlCQUF5QjtZQUMzQixFQUFFLCtCQUErQjtRQUNuQztRQUVBLE9BQU92QjtJQUNUO0lBR0EsU0FBUzhKLGVBQWU5SixDQUFDLEVBQUU4TixLQUFLLEVBQUUvTCxFQUFFO1FBQ2xDLElBQUksQ0FBQy9CLEVBQUUyQyxRQUFRLElBQUksT0FBT29MLGtCQUFrQi9OO1FBQzVDLElBQUlVLEdBQ0ZMLElBQUlMLEVBQUVLLENBQUMsRUFDUHdKLE1BQU1oSCxlQUFlN0MsRUFBRXVCLENBQUMsR0FDeEI2QyxNQUFNeUYsSUFBSW5LLE1BQU07UUFFbEIsSUFBSW9PLE9BQU87WUFDVCxJQUFJL0wsTUFBTSxDQUFDckIsSUFBSXFCLEtBQUtxQyxHQUFFLElBQUssR0FBRztnQkFDNUJ5RixNQUFNQSxJQUFJdkcsTUFBTSxDQUFDLEtBQUssTUFBTXVHLElBQUk5RyxLQUFLLENBQUMsS0FBS3lJLGNBQWM5SztZQUMzRCxPQUFPLElBQUkwRCxNQUFNLEdBQUc7Z0JBQ2xCeUYsTUFBTUEsSUFBSXZHLE1BQU0sQ0FBQyxLQUFLLE1BQU11RyxJQUFJOUcsS0FBSyxDQUFDO1lBQ3hDO1lBRUE4RyxNQUFNQSxNQUFPN0osQ0FBQUEsRUFBRUssQ0FBQyxHQUFHLElBQUksTUFBTSxJQUFHLElBQUtMLEVBQUVLLENBQUM7UUFDMUMsT0FBTyxJQUFJQSxJQUFJLEdBQUc7WUFDaEJ3SixNQUFNLE9BQU8yQixjQUFjLENBQUNuTCxJQUFJLEtBQUt3SjtZQUNyQyxJQUFJOUgsTUFBTSxDQUFDckIsSUFBSXFCLEtBQUtxQyxHQUFFLElBQUssR0FBR3lGLE9BQU8yQixjQUFjOUs7UUFDckQsT0FBTyxJQUFJTCxLQUFLK0QsS0FBSztZQUNuQnlGLE9BQU8yQixjQUFjbkwsSUFBSSxJQUFJK0Q7WUFDN0IsSUFBSXJDLE1BQU0sQ0FBQ3JCLElBQUlxQixLQUFLMUIsSUFBSSxLQUFLLEdBQUd3SixNQUFNQSxNQUFNLE1BQU0yQixjQUFjOUs7UUFDbEUsT0FBTztZQUNMLElBQUksQ0FBQ0EsSUFBSUwsSUFBSSxLQUFLK0QsS0FBS3lGLE1BQU1BLElBQUk5RyxLQUFLLENBQUMsR0FBR3JDLEtBQUssTUFBTW1KLElBQUk5RyxLQUFLLENBQUNyQztZQUMvRCxJQUFJcUIsTUFBTSxDQUFDckIsSUFBSXFCLEtBQUtxQyxHQUFFLElBQUssR0FBRztnQkFDNUIsSUFBSS9ELElBQUksTUFBTStELEtBQUt5RixPQUFPO2dCQUMxQkEsT0FBTzJCLGNBQWM5SztZQUN2QjtRQUNGO1FBRUEsT0FBT21KO0lBQ1Q7SUFHQSw2REFBNkQ7SUFDN0QsU0FBU3hCLGtCQUFrQnFGLE1BQU0sRUFBRXJOLENBQUM7UUFDbEMsSUFBSW9ELElBQUlpSyxNQUFNLENBQUMsRUFBRTtRQUVqQixrRUFBa0U7UUFDbEUsSUFBTXJOLEtBQUtkLFVBQVVrRSxLQUFLLElBQUlBLEtBQUssR0FBSXBEO1FBQ3ZDLE9BQU9BO0lBQ1Q7SUFHQSxTQUFTdUgsUUFBUWpILElBQUksRUFBRW9CLEVBQUUsRUFBRUYsRUFBRTtRQUMzQixJQUFJRSxLQUFLdEMsZ0JBQWdCO1lBRXZCLHNEQUFzRDtZQUN0RGxCLFdBQVc7WUFDWCxJQUFJc0QsSUFBSWxCLEtBQUtoRCxTQUFTLEdBQUdrRTtZQUN6QixNQUFNZixNQUFNcEM7UUFDZDtRQUNBLE9BQU95QixTQUFTLElBQUlRLEtBQUtuRCxPQUFPdUUsSUFBSSxHQUFHO0lBQ3pDO0lBR0EsU0FBU3lELE1BQU03RSxJQUFJLEVBQUVvQixFQUFFLEVBQUVELEVBQUU7UUFDekIsSUFBSUMsS0FBS3BDLGNBQWMsTUFBTW1CLE1BQU1wQztRQUNuQyxPQUFPeUIsU0FBUyxJQUFJUSxLQUFLbEQsS0FBS3NFLElBQUlELElBQUk7SUFDeEM7SUFHQSxTQUFTaUgsYUFBYTJFLE1BQU07UUFDMUIsSUFBSWpLLElBQUlpSyxPQUFPaE8sTUFBTSxHQUFHLEdBQ3RCMEUsTUFBTVgsSUFBSWxFLFdBQVc7UUFFdkJrRSxJQUFJaUssTUFBTSxDQUFDakssRUFBRTtRQUViLGlCQUFpQjtRQUNqQixJQUFJQSxHQUFHO1lBRUwsMERBQTBEO1lBQzFELE1BQU9BLElBQUksTUFBTSxHQUFHQSxLQUFLLEdBQUlXO1lBRTdCLDhDQUE4QztZQUM5QyxJQUFLWCxJQUFJaUssTUFBTSxDQUFDLEVBQUUsRUFBRWpLLEtBQUssSUFBSUEsS0FBSyxHQUFJVztRQUN4QztRQUVBLE9BQU9BO0lBQ1Q7SUFHQSxTQUFTb0gsY0FBYzlLLENBQUM7UUFDdEIsSUFBSXNOLEtBQUs7UUFDVCxNQUFPdE4sS0FBTXNOLE1BQU07UUFDbkIsT0FBT0E7SUFDVDtJQUdBOzs7Ozs7R0FNQyxHQUNELFNBQVNsRCxPQUFPbkssSUFBSSxFQUFFWCxDQUFDLEVBQUVxQyxDQUFDLEVBQUVSLEVBQUU7UUFDNUIsSUFBSTRMLGFBQ0ZuTCxJQUFJLElBQUkzQixLQUFLLElBRWIsc0RBQXNEO1FBQ3RELDZEQUE2RDtRQUM3REQsSUFBSTVCLEtBQUtzQixJQUFJLENBQUN5QixLQUFLdEMsV0FBVztRQUVoQ2hCLFdBQVc7UUFFWCxPQUFTO1lBQ1AsSUFBSThELElBQUksR0FBRztnQkFDVEMsSUFBSUEsRUFBRVksS0FBSyxDQUFDbEQ7Z0JBQ1osSUFBSWlPLFNBQVMzTCxFQUFFZixDQUFDLEVBQUViLElBQUkrTSxjQUFjO1lBQ3RDO1lBRUFwTCxJQUFJeEQsVUFBVXdELElBQUk7WUFDbEIsSUFBSUEsTUFBTSxHQUFHO2dCQUVYLDJGQUEyRjtnQkFDM0ZBLElBQUlDLEVBQUVmLENBQUMsQ0FBQzdCLE1BQU0sR0FBRztnQkFDakIsSUFBSStOLGVBQWVuTCxFQUFFZixDQUFDLENBQUNjLEVBQUUsS0FBSyxHQUFHLEVBQUVDLEVBQUVmLENBQUMsQ0FBQ2MsRUFBRTtnQkFDekM7WUFDRjtZQUVBckMsSUFBSUEsRUFBRWtELEtBQUssQ0FBQ2xEO1lBQ1ppTyxTQUFTak8sRUFBRXVCLENBQUMsRUFBRWI7UUFDaEI7UUFFQW5DLFdBQVc7UUFFWCxPQUFPK0Q7SUFDVDtJQUdBLFNBQVM0TCxNQUFNN0wsQ0FBQztRQUNkLE9BQU9BLEVBQUVkLENBQUMsQ0FBQ2MsRUFBRWQsQ0FBQyxDQUFDN0IsTUFBTSxHQUFHLEVBQUUsR0FBRztJQUMvQjtJQUdBOztHQUVDLEdBQ0QsU0FBU3lPLFNBQVN4TixJQUFJLEVBQUV5TixJQUFJLEVBQUVDLElBQUk7UUFDaEMsSUFBSXBOLEdBQ0ZqQixJQUFJLElBQUlXLEtBQUt5TixJQUFJLENBQUMsRUFBRSxHQUNwQmxOLElBQUk7UUFFTixNQUFPLEVBQUVBLElBQUlrTixLQUFLMU8sTUFBTSxFQUFHO1lBQ3pCdUIsSUFBSSxJQUFJTixLQUFLeU4sSUFBSSxDQUFDbE4sRUFBRTtZQUNwQixJQUFJLENBQUNELEVBQUVmLENBQUMsRUFBRTtnQkFDUkYsSUFBSWlCO2dCQUNKO1lBQ0YsT0FBTyxJQUFJakIsQ0FBQyxDQUFDcU8sS0FBSyxDQUFDcE4sSUFBSTtnQkFDckJqQixJQUFJaUI7WUFDTjtRQUNGO1FBRUEsT0FBT2pCO0lBQ1Q7SUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEJDLEdBQ0QsU0FBU3dJLG1CQUFtQnhJLENBQUMsRUFBRStCLEVBQUU7UUFDL0IsSUFBSXVGLGFBQWFJLE9BQU92RyxHQUFHbEMsS0FBS3FQLEtBQUs5TCxHQUFHMEQsS0FDdEMzRCxNQUFNLEdBQ05yQixJQUFJLEdBQ0pSLElBQUksR0FDSkMsT0FBT1gsRUFBRUMsV0FBVyxFQUNwQjZCLEtBQUtuQixLQUFLL0MsUUFBUSxFQUNsQmlFLEtBQUtsQixLQUFLaEQsU0FBUztRQUVyQixrQkFBa0I7UUFDbEIsSUFBSSxDQUFDcUMsRUFBRXVCLENBQUMsSUFBSSxDQUFDdkIsRUFBRXVCLENBQUMsQ0FBQyxFQUFFLElBQUl2QixFQUFFSyxDQUFDLEdBQUcsSUFBSTtZQUUvQixPQUFPLElBQUlNLEtBQUtYLEVBQUV1QixDQUFDLEdBQ2YsQ0FBQ3ZCLEVBQUV1QixDQUFDLENBQUMsRUFBRSxHQUFHLElBQUl2QixFQUFFRSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFDaENGLEVBQUVFLENBQUMsR0FBR0YsRUFBRUUsQ0FBQyxHQUFHLElBQUksSUFBSUYsSUFBSSxJQUFJO1FBQ2xDO1FBRUEsSUFBSStCLE1BQU0sTUFBTTtZQUNkeEQsV0FBVztZQUNYMkgsTUFBTXJFO1FBQ1IsT0FBTztZQUNMcUUsTUFBTW5FO1FBQ1I7UUFFQVMsSUFBSSxJQUFJN0IsS0FBSztRQUViLHNCQUFzQjtRQUN0QixNQUFPWCxFQUFFSyxDQUFDLEdBQUcsQ0FBQyxFQUFHO1lBRWYsY0FBYztZQUNkTCxJQUFJQSxFQUFFa0QsS0FBSyxDQUFDVjtZQUNaOUIsS0FBSztRQUNQO1FBRUEscUZBQXFGO1FBQ3JGLCtEQUErRDtRQUMvRGdILFFBQVE1SSxLQUFLcUksR0FBRyxDQUFDbkksUUFBUSxHQUFHMEIsTUFBTTVCLEtBQUt0QixJQUFJLEdBQUcsSUFBSSxJQUFJO1FBQ3REMEksT0FBT3dCO1FBQ1BKLGNBQWNySSxNQUFNcVAsTUFBTSxJQUFJM04sS0FBSztRQUNuQ0EsS0FBS2hELFNBQVMsR0FBR3VJO1FBRWpCLE9BQVM7WUFDUGpILE1BQU1rQixTQUFTbEIsSUFBSWlFLEtBQUssQ0FBQ2xELElBQUlrRyxLQUFLO1lBQ2xDb0IsY0FBY0EsWUFBWXBFLEtBQUssQ0FBQyxFQUFFaEM7WUFDbENzQixJQUFJOEwsSUFBSW5MLElBQUksQ0FBQ0MsT0FBT25FLEtBQUtxSSxhQUFhcEIsS0FBSztZQUUzQyxJQUFJckQsZUFBZUwsRUFBRWpCLENBQUMsRUFBRXdCLEtBQUssQ0FBQyxHQUFHbUQsU0FBU3JELGVBQWV5TCxJQUFJL00sQ0FBQyxFQUFFd0IsS0FBSyxDQUFDLEdBQUdtRCxNQUFNO2dCQUM3RS9FLElBQUlUO2dCQUNKLE1BQU9TLElBQUttTixNQUFNbk8sU0FBU21PLElBQUlwTCxLQUFLLENBQUNvTCxNQUFNcEksS0FBSztnQkFFaEQsMkRBQTJEO2dCQUMzRCxpRUFBaUU7Z0JBQ2pFLHVDQUF1QztnQkFDdkMsMkZBQTJGO2dCQUMzRixzREFBc0Q7Z0JBQ3RELElBQUluRSxNQUFNLE1BQU07b0JBRWQsSUFBSVEsTUFBTSxLQUFLc0Ysb0JBQW9CeUcsSUFBSS9NLENBQUMsRUFBRTJFLE1BQU13QixPQUFPNUYsSUFBSVMsTUFBTTt3QkFDL0Q1QixLQUFLaEQsU0FBUyxHQUFHdUksT0FBTzt3QkFDeEJvQixjQUFjckksTUFBTXVELElBQUksSUFBSTdCLEtBQUs7d0JBQ2pDTyxJQUFJO3dCQUNKcUI7b0JBQ0YsT0FBTzt3QkFDTCxPQUFPcEMsU0FBU21PLEtBQUszTixLQUFLaEQsU0FBUyxHQUFHa0UsSUFBSUMsSUFBSXZELFdBQVc7b0JBQzNEO2dCQUNGLE9BQU87b0JBQ0xvQyxLQUFLaEQsU0FBUyxHQUFHa0U7b0JBQ2pCLE9BQU95TTtnQkFDVDtZQUNGO1lBRUFBLE1BQU05TDtRQUNSO0lBQ0Y7SUFHQTs7Ozs7Ozs7Ozs7Ozs7R0FjQyxHQUNELFNBQVNtRixpQkFBaUIxRyxDQUFDLEVBQUVjLEVBQUU7UUFDN0IsSUFBSXdNLEdBQUdDLElBQUlsSCxhQUFhakgsR0FBR29PLFdBQVdsTSxLQUFLK0wsS0FBSzlMLEdBQUcwRCxLQUFLd0ksSUFBSWxJLElBQzFEbkUsSUFBSSxHQUNKcUYsUUFBUSxJQUNSMUgsSUFBSWlCLEdBQ0pLLEtBQUt0QixFQUFFdUIsQ0FBQyxFQUNSWixPQUFPWCxFQUFFQyxXQUFXLEVBQ3BCNkIsS0FBS25CLEtBQUsvQyxRQUFRLEVBQ2xCaUUsS0FBS2xCLEtBQUtoRCxTQUFTO1FBRXJCLDBDQUEwQztRQUMxQyxJQUFJcUMsRUFBRUUsQ0FBQyxHQUFHLEtBQUssQ0FBQ29CLE1BQU0sQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDdEIsRUFBRUssQ0FBQyxJQUFJaUIsRUFBRSxDQUFDLEVBQUUsSUFBSSxLQUFLQSxHQUFHNUIsTUFBTSxJQUFJLEdBQUc7WUFDcEUsT0FBTyxJQUFJaUIsS0FBS1csTUFBTSxDQUFDQSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJdEIsRUFBRUUsQ0FBQyxJQUFJLElBQUlVLE1BQU1VLEtBQUssSUFBSXRCO1FBQ3BFO1FBRUEsSUFBSStCLE1BQU0sTUFBTTtZQUNkeEQsV0FBVztZQUNYMkgsTUFBTXJFO1FBQ1IsT0FBTztZQUNMcUUsTUFBTW5FO1FBQ1I7UUFFQXBCLEtBQUtoRCxTQUFTLEdBQUd1SSxPQUFPd0I7UUFDeEI2RyxJQUFJMUwsZUFBZXZCO1FBQ25Ca04sS0FBS0QsRUFBRWpMLE1BQU0sQ0FBQztRQUVkLElBQUl4RSxLQUFLaUIsR0FBRyxDQUFDTSxJQUFJTCxFQUFFSyxDQUFDLElBQUksUUFBUTtZQUU5QixzQkFBc0I7WUFDdEIsd0VBQXdFO1lBQ3hFLDZDQUE2QztZQUM3QywyRkFBMkY7WUFDM0YseUZBQXlGO1lBQ3pGLDJFQUEyRTtZQUMzRSxpQ0FBaUM7WUFFakMsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCwrQkFBK0I7WUFDL0IsTUFBT21PLEtBQUssS0FBS0EsTUFBTSxLQUFLQSxNQUFNLEtBQUtELEVBQUVqTCxNQUFNLENBQUMsS0FBSyxFQUFHO2dCQUN0RHRELElBQUlBLEVBQUVrRCxLQUFLLENBQUNqQztnQkFDWnNOLElBQUkxTCxlQUFlN0MsRUFBRXVCLENBQUM7Z0JBQ3RCaU4sS0FBS0QsRUFBRWpMLE1BQU0sQ0FBQztnQkFDZGpCO1lBQ0Y7WUFFQWhDLElBQUlMLEVBQUVLLENBQUM7WUFFUCxJQUFJbU8sS0FBSyxHQUFHO2dCQUNWeE8sSUFBSSxJQUFJVyxLQUFLLE9BQU80TjtnQkFDcEJsTztZQUNGLE9BQU87Z0JBQ0xMLElBQUksSUFBSVcsS0FBSzZOLEtBQUssTUFBTUQsRUFBRXhMLEtBQUssQ0FBQztZQUNsQztRQUNGLE9BQU87WUFFTCw0RkFBNEY7WUFDNUYsdUZBQXVGO1lBQ3ZGLGdEQUFnRDtZQUNoRFAsSUFBSW9GLFFBQVFqSCxNQUFNdUYsTUFBTSxHQUFHckUsSUFBSXFCLEtBQUssQ0FBQzdDLElBQUk7WUFDekNMLElBQUkySCxpQkFBaUIsSUFBSWhILEtBQUs2TixLQUFLLE1BQU1ELEVBQUV4TCxLQUFLLENBQUMsS0FBS21ELE1BQU13QixPQUFPdkUsSUFBSSxDQUFDWDtZQUN4RTdCLEtBQUtoRCxTQUFTLEdBQUdrRTtZQUVqQixPQUFPRSxNQUFNLE9BQU81QixTQUFTSCxHQUFHNkIsSUFBSUMsSUFBSXZELFdBQVcsUUFBUXlCO1FBQzdEO1FBRUEscUNBQXFDO1FBQ3JDME8sS0FBSzFPO1FBRUwsaUJBQWlCO1FBQ2pCLG1FQUFtRTtRQUNuRSx5Q0FBeUM7UUFDekNzTyxNQUFNRyxZQUFZek8sSUFBSW9ELE9BQU9wRCxFQUFFMEUsS0FBSyxDQUFDLElBQUkxRSxFQUFFbUQsSUFBSSxDQUFDLElBQUkrQyxLQUFLO1FBQ3pETSxLQUFLckcsU0FBU0gsRUFBRWtELEtBQUssQ0FBQ2xELElBQUlrRyxLQUFLO1FBQy9Cb0IsY0FBYztRQUVkLE9BQVM7WUFDUG1ILFlBQVl0TyxTQUFTc08sVUFBVXZMLEtBQUssQ0FBQ3NELEtBQUtOLEtBQUs7WUFDL0MxRCxJQUFJOEwsSUFBSW5MLElBQUksQ0FBQ0MsT0FBT3FMLFdBQVcsSUFBSTlOLEtBQUsyRyxjQUFjcEIsS0FBSztZQUUzRCxJQUFJckQsZUFBZUwsRUFBRWpCLENBQUMsRUFBRXdCLEtBQUssQ0FBQyxHQUFHbUQsU0FBU3JELGVBQWV5TCxJQUFJL00sQ0FBQyxFQUFFd0IsS0FBSyxDQUFDLEdBQUdtRCxNQUFNO2dCQUM3RW9JLE1BQU1BLElBQUlwTCxLQUFLLENBQUM7Z0JBRWhCLHVGQUF1RjtnQkFDdkYsMkZBQTJGO2dCQUMzRixJQUFJN0MsTUFBTSxHQUFHaU8sTUFBTUEsSUFBSW5MLElBQUksQ0FBQ3lFLFFBQVFqSCxNQUFNdUYsTUFBTSxHQUFHckUsSUFBSXFCLEtBQUssQ0FBQzdDLElBQUk7Z0JBQ2pFaU8sTUFBTWxMLE9BQU9rTCxLQUFLLElBQUkzTixLQUFLMEIsSUFBSTZELEtBQUs7Z0JBRXBDLGtGQUFrRjtnQkFDbEYsa0VBQWtFO2dCQUNsRSxrRUFBa0U7Z0JBQ2xFLHVDQUF1QztnQkFDdkMsZ0ZBQWdGO2dCQUNoRixzREFBc0Q7Z0JBQ3RELElBQUluRSxNQUFNLE1BQU07b0JBQ2QsSUFBSThGLG9CQUFvQnlHLElBQUkvTSxDQUFDLEVBQUUyRSxNQUFNd0IsT0FBTzVGLElBQUlTLE1BQU07d0JBQ3BENUIsS0FBS2hELFNBQVMsR0FBR3VJLE9BQU93Qjt3QkFDeEJsRixJQUFJaU0sWUFBWXpPLElBQUlvRCxPQUFPc0wsR0FBR2hLLEtBQUssQ0FBQyxJQUFJZ0ssR0FBR3ZMLElBQUksQ0FBQyxJQUFJK0MsS0FBSzt3QkFDekRNLEtBQUtyRyxTQUFTSCxFQUFFa0QsS0FBSyxDQUFDbEQsSUFBSWtHLEtBQUs7d0JBQy9Cb0IsY0FBYy9FLE1BQU07b0JBQ3RCLE9BQU87d0JBQ0wsT0FBT3BDLFNBQVNtTyxLQUFLM04sS0FBS2hELFNBQVMsR0FBR2tFLElBQUlDLElBQUl2RCxXQUFXO29CQUMzRDtnQkFDRixPQUFPO29CQUNMb0MsS0FBS2hELFNBQVMsR0FBR2tFO29CQUNqQixPQUFPeU07Z0JBQ1Q7WUFDRjtZQUVBQSxNQUFNOUw7WUFDTjhFLGVBQWU7UUFDakI7SUFDRjtJQUdBLGtCQUFrQjtJQUNsQixTQUFTeUcsa0JBQWtCL04sQ0FBQztRQUMxQixZQUFZO1FBQ1osT0FBTzJPLE9BQU8zTyxFQUFFRSxDQUFDLEdBQUdGLEVBQUVFLENBQUMsR0FBRztJQUM1QjtJQUdBOztHQUVDLEdBQ0QsU0FBUzBPLGFBQWE1TyxDQUFDLEVBQUU2SixHQUFHO1FBQzFCLElBQUl4SixHQUFHYSxHQUFHa0Q7UUFFVixpQkFBaUI7UUFDakIsSUFBSSxDQUFDL0QsSUFBSXdKLElBQUk3RyxPQUFPLENBQUMsSUFBRyxJQUFLLENBQUMsR0FBRzZHLE1BQU1BLElBQUlnRixPQUFPLENBQUMsS0FBSztRQUV4RCxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDM04sSUFBSTJJLElBQUlpRixNQUFNLENBQUMsS0FBSSxJQUFLLEdBQUc7WUFFOUIsc0JBQXNCO1lBQ3RCLElBQUl6TyxJQUFJLEdBQUdBLElBQUlhO1lBQ2ZiLEtBQUssQ0FBQ3dKLElBQUk5RyxLQUFLLENBQUM3QixJQUFJO1lBQ3BCMkksTUFBTUEsSUFBSWtGLFNBQVMsQ0FBQyxHQUFHN047UUFDekIsT0FBTyxJQUFJYixJQUFJLEdBQUc7WUFFaEIsV0FBVztZQUNYQSxJQUFJd0osSUFBSW5LLE1BQU07UUFDaEI7UUFFQSwyQkFBMkI7UUFDM0IsSUFBS3dCLElBQUksR0FBRzJJLElBQUltRixVQUFVLENBQUM5TixPQUFPLElBQUlBO1FBRXRDLDRCQUE0QjtRQUM1QixJQUFLa0QsTUFBTXlGLElBQUluSyxNQUFNLEVBQUVtSyxJQUFJbUYsVUFBVSxDQUFDNUssTUFBTSxPQUFPLElBQUksRUFBRUE7UUFDekR5RixNQUFNQSxJQUFJOUcsS0FBSyxDQUFDN0IsR0FBR2tEO1FBRW5CLElBQUl5RixLQUFLO1lBQ1B6RixPQUFPbEQ7WUFDUGxCLEVBQUVLLENBQUMsR0FBR0EsSUFBSUEsSUFBSWEsSUFBSTtZQUNsQmxCLEVBQUV1QixDQUFDLEdBQUcsRUFBRTtZQUVSLGlCQUFpQjtZQUVqQiw2QkFBNkI7WUFDN0IscUVBQXFFO1lBQ3JFTCxJQUFJLENBQUNiLElBQUksS0FBS2Q7WUFDZCxJQUFJYyxJQUFJLEdBQUdhLEtBQUszQjtZQUVoQixJQUFJMkIsSUFBSWtELEtBQUs7Z0JBQ1gsSUFBSWxELEdBQUdsQixFQUFFdUIsQ0FBQyxDQUFDMkcsSUFBSSxDQUFDLENBQUMyQixJQUFJOUcsS0FBSyxDQUFDLEdBQUc3QjtnQkFDOUIsSUFBS2tELE9BQU83RSxVQUFVMkIsSUFBSWtELEtBQU1wRSxFQUFFdUIsQ0FBQyxDQUFDMkcsSUFBSSxDQUFDLENBQUMyQixJQUFJOUcsS0FBSyxDQUFDN0IsR0FBR0EsS0FBSzNCO2dCQUM1RHNLLE1BQU1BLElBQUk5RyxLQUFLLENBQUM3QjtnQkFDaEJBLElBQUkzQixXQUFXc0ssSUFBSW5LLE1BQU07WUFDM0IsT0FBTztnQkFDTHdCLEtBQUtrRDtZQUNQO1lBRUEsTUFBT2xELEtBQU0ySSxPQUFPO1lBQ3BCN0osRUFBRXVCLENBQUMsQ0FBQzJHLElBQUksQ0FBQyxDQUFDMkI7WUFFVixJQUFJdEwsVUFBVTtnQkFFWixZQUFZO2dCQUNaLElBQUl5QixFQUFFSyxDQUFDLEdBQUdMLEVBQUVDLFdBQVcsQ0FBQ2hDLElBQUksRUFBRTtvQkFFNUIsWUFBWTtvQkFDWitCLEVBQUV1QixDQUFDLEdBQUc7b0JBQ052QixFQUFFSyxDQUFDLEdBQUdPO2dCQUVSLGFBQWE7Z0JBQ2IsT0FBTyxJQUFJWixFQUFFSyxDQUFDLEdBQUdMLEVBQUVDLFdBQVcsQ0FBQ2pDLElBQUksRUFBRTtvQkFFbkMsUUFBUTtvQkFDUmdDLEVBQUVLLENBQUMsR0FBRztvQkFDTkwsRUFBRXVCLENBQUMsR0FBRzt3QkFBQztxQkFBRTtnQkFDVCxrQ0FBa0M7Z0JBQ3BDLEVBQUUsd0NBQXdDO1lBQzVDO1FBQ0YsT0FBTztZQUVMLFFBQVE7WUFDUnZCLEVBQUVLLENBQUMsR0FBRztZQUNOTCxFQUFFdUIsQ0FBQyxHQUFHO2dCQUFDO2FBQUU7UUFDWDtRQUVBLE9BQU92QjtJQUNUO0lBR0E7O0dBRUMsR0FDRCxTQUFTaVAsV0FBV2pQLENBQUMsRUFBRTZKLEdBQUc7UUFDeEIsSUFBSXpDLE1BQU16RyxNQUFNdU8sU0FBU2hPLEdBQUdpTyxTQUFTL0ssS0FBS2dMLEdBQUc5TixJQUFJeUc7UUFFakQsSUFBSThCLElBQUk3RyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUc7WUFDekI2RyxNQUFNQSxJQUFJZ0YsT0FBTyxDQUFDLGdCQUFnQjtZQUNsQyxJQUFJeFAsVUFBVWdRLElBQUksQ0FBQ3hGLE1BQU0sT0FBTytFLGFBQWE1TyxHQUFHNko7UUFDbEQsT0FBTyxJQUFJQSxRQUFRLGNBQWNBLFFBQVEsT0FBTztZQUM5QyxJQUFJLENBQUMsQ0FBQ0EsS0FBSzdKLEVBQUVFLENBQUMsR0FBR1U7WUFDakJaLEVBQUVLLENBQUMsR0FBR087WUFDTlosRUFBRXVCLENBQUMsR0FBRztZQUNOLE9BQU92QjtRQUNUO1FBRUEsSUFBSWIsTUFBTWtRLElBQUksQ0FBQ3hGLE1BQU87WUFDcEJ6QyxPQUFPO1lBQ1B5QyxNQUFNQSxJQUFJeUYsV0FBVztRQUN2QixPQUFPLElBQUlwUSxTQUFTbVEsSUFBSSxDQUFDeEYsTUFBTztZQUM5QnpDLE9BQU87UUFDVCxPQUFPLElBQUloSSxRQUFRaVEsSUFBSSxDQUFDeEYsTUFBTztZQUM3QnpDLE9BQU87UUFDVCxPQUFPO1lBQ0wsTUFBTXRHLE1BQU1yQyxrQkFBa0JvTDtRQUNoQztRQUVBLG1DQUFtQztRQUNuQzNJLElBQUkySSxJQUFJaUYsTUFBTSxDQUFDO1FBRWYsSUFBSTVOLElBQUksR0FBRztZQUNUa08sSUFBSSxDQUFDdkYsSUFBSTlHLEtBQUssQ0FBQzdCLElBQUk7WUFDbkIySSxNQUFNQSxJQUFJa0YsU0FBUyxDQUFDLEdBQUc3TjtRQUN6QixPQUFPO1lBQ0wySSxNQUFNQSxJQUFJOUcsS0FBSyxDQUFDO1FBQ2xCO1FBRUEsK0ZBQStGO1FBQy9GLGtDQUFrQztRQUNsQzdCLElBQUkySSxJQUFJN0csT0FBTyxDQUFDO1FBQ2hCbU0sVUFBVWpPLEtBQUs7UUFDZlAsT0FBT1gsRUFBRUMsV0FBVztRQUVwQixJQUFJa1AsU0FBUztZQUNYdEYsTUFBTUEsSUFBSWdGLE9BQU8sQ0FBQyxLQUFLO1lBQ3ZCekssTUFBTXlGLElBQUluSyxNQUFNO1lBQ2hCd0IsSUFBSWtELE1BQU1sRDtZQUVWLHFEQUFxRDtZQUNyRGdPLFVBQVVwRSxPQUFPbkssTUFBTSxJQUFJQSxLQUFLeUcsT0FBT2xHLEdBQUdBLElBQUk7UUFDaEQ7UUFFQUksS0FBS3NLLFlBQVkvQixLQUFLekMsTUFBTTlIO1FBQzVCeUksS0FBS3pHLEdBQUc1QixNQUFNLEdBQUc7UUFFakIseUJBQXlCO1FBQ3pCLElBQUt3QixJQUFJNkcsSUFBSXpHLEVBQUUsQ0FBQ0osRUFBRSxLQUFLLEdBQUcsRUFBRUEsRUFBR0ksR0FBRzZHLEdBQUc7UUFDckMsSUFBSWpILElBQUksR0FBRyxPQUFPLElBQUlQLEtBQUtYLEVBQUVFLENBQUMsR0FBRztRQUNqQ0YsRUFBRUssQ0FBQyxHQUFHZ0ksa0JBQWtCL0csSUFBSXlHO1FBQzVCL0gsRUFBRXVCLENBQUMsR0FBR0Q7UUFDTi9DLFdBQVc7UUFFWCx3RUFBd0U7UUFDeEUsc0ZBQXNGO1FBQ3RGLG9FQUFvRTtRQUNwRSw4RkFBOEY7UUFDOUYsMkZBQTJGO1FBQzNGLHlFQUF5RTtRQUN6RSxJQUFJNFEsU0FBU25QLElBQUlvRCxPQUFPcEQsR0FBR2tQLFNBQVM5SyxNQUFNO1FBRTFDLG1EQUFtRDtRQUNuRCxJQUFJZ0wsR0FBR3BQLElBQUlBLEVBQUVrRCxLQUFLLENBQUNwRSxLQUFLaUIsR0FBRyxDQUFDcVAsS0FBSyxLQUFLcFEsUUFBUSxHQUFHb1EsS0FBS2pSLFFBQVFjLEdBQUcsQ0FBQyxHQUFHbVE7UUFDckU3USxXQUFXO1FBRVgsT0FBT3lCO0lBQ1Q7SUFHQTs7OztHQUlDLEdBQ0QsU0FBU2lKLEtBQUt0SSxJQUFJLEVBQUVYLENBQUM7UUFDbkIsSUFBSVUsR0FDRjBELE1BQU1wRSxFQUFFdUIsQ0FBQyxDQUFDN0IsTUFBTTtRQUVsQixJQUFJMEUsTUFBTSxHQUFHO1lBQ1gsT0FBT3BFLEVBQUU0QyxNQUFNLEtBQUs1QyxJQUFJdUUsYUFBYTVELE1BQU0sR0FBR1gsR0FBR0E7UUFDbkQ7UUFFQSxxRUFBcUU7UUFDckUsMkRBQTJEO1FBQzNELDREQUE0RDtRQUU1RCxzRUFBc0U7UUFDdEVVLElBQUksTUFBTTVCLEtBQUsrRixJQUFJLENBQUNUO1FBQ3BCMUQsSUFBSUEsSUFBSSxLQUFLLEtBQUtBLElBQUk7UUFFdEJWLElBQUlBLEVBQUVrRCxLQUFLLENBQUMsSUFBSW9CLFFBQVEsR0FBRzVEO1FBQzNCVixJQUFJdUUsYUFBYTVELE1BQU0sR0FBR1gsR0FBR0E7UUFFN0IsNkJBQTZCO1FBQzdCLElBQUl1UCxRQUNGeEssS0FBSyxJQUFJcEUsS0FBSyxJQUNkcUUsTUFBTSxJQUFJckUsS0FBSyxLQUNmc0UsTUFBTSxJQUFJdEUsS0FBSztRQUNqQixNQUFPRCxLQUFNO1lBQ1g2TyxTQUFTdlAsRUFBRWtELEtBQUssQ0FBQ2xEO1lBQ2pCQSxJQUFJQSxFQUFFa0QsS0FBSyxDQUFDNkIsR0FBRzVCLElBQUksQ0FBQ29NLE9BQU9yTSxLQUFLLENBQUM4QixJQUFJOUIsS0FBSyxDQUFDcU0sUUFBUTdLLEtBQUssQ0FBQ087UUFDM0Q7UUFFQSxPQUFPakY7SUFDVDtJQUdBLCtEQUErRDtJQUMvRCxTQUFTdUUsYUFBYTVELElBQUksRUFBRTBCLENBQUMsRUFBRXJDLENBQUMsRUFBRWlCLENBQUMsRUFBRXVPLFlBQVk7UUFDL0MsSUFBSXJPLEdBQUdxQixHQUFHaU4sR0FBR2pKLElBQ1h0RixJQUFJLEdBQ0pXLEtBQUtsQixLQUFLaEQsU0FBUyxFQUNuQitDLElBQUk1QixLQUFLc0IsSUFBSSxDQUFDeUIsS0FBS3RDO1FBRXJCaEIsV0FBVztRQUNYaUksS0FBS3hHLEVBQUVrRCxLQUFLLENBQUNsRDtRQUNieVAsSUFBSSxJQUFJOU8sS0FBS007UUFFYixPQUFTO1lBQ1B1QixJQUFJWSxPQUFPcU0sRUFBRXZNLEtBQUssQ0FBQ3NELEtBQUssSUFBSTdGLEtBQUswQixNQUFNQSxNQUFNUixJQUFJO1lBQ2pENE4sSUFBSUQsZUFBZXZPLEVBQUVrQyxJQUFJLENBQUNYLEtBQUt2QixFQUFFeUQsS0FBSyxDQUFDbEM7WUFDdkN2QixJQUFJbUMsT0FBT1osRUFBRVUsS0FBSyxDQUFDc0QsS0FBSyxJQUFJN0YsS0FBSzBCLE1BQU1BLE1BQU1SLElBQUk7WUFDakRXLElBQUlpTixFQUFFdE0sSUFBSSxDQUFDbEM7WUFFWCxJQUFJdUIsRUFBRWpCLENBQUMsQ0FBQ2IsRUFBRSxLQUFLLEtBQUssR0FBRztnQkFDckIsSUFBS1MsSUFBSVQsR0FBRzhCLEVBQUVqQixDQUFDLENBQUNKLEVBQUUsS0FBS3NPLEVBQUVsTyxDQUFDLENBQUNKLEVBQUUsSUFBSUE7Z0JBQ2pDLElBQUlBLEtBQUssQ0FBQyxHQUFHO1lBQ2Y7WUFFQUEsSUFBSXNPO1lBQ0pBLElBQUl4TztZQUNKQSxJQUFJdUI7WUFDSkEsSUFBSXJCO1lBQ0pEO1FBQ0Y7UUFFQTNDLFdBQVc7UUFDWGlFLEVBQUVqQixDQUFDLENBQUM3QixNQUFNLEdBQUdnQixJQUFJO1FBRWpCLE9BQU84QjtJQUNUO0lBR0EsNENBQTRDO0lBQzVDLFNBQVM4QixRQUFRaUksQ0FBQyxFQUFFbE0sQ0FBQztRQUNuQixJQUFJZ0MsSUFBSWtLO1FBQ1IsTUFBTyxFQUFFbE0sRUFBR2dDLEtBQUtrSztRQUNqQixPQUFPbEs7SUFDVDtJQUdBLDZFQUE2RTtJQUM3RSxTQUFTTCxpQkFBaUJyQixJQUFJLEVBQUVYLENBQUM7UUFDL0IsSUFBSXdDLEdBQ0YrQyxRQUFRdkYsRUFBRUUsQ0FBQyxHQUFHLEdBQ2R3UCxLQUFLbEssTUFBTTdFLE1BQU1BLEtBQUtoRCxTQUFTLEVBQUUsSUFDakMySCxTQUFTb0ssR0FBR3hNLEtBQUssQ0FBQztRQUVwQmxELElBQUlBLEVBQUVELEdBQUc7UUFFVCxJQUFJQyxFQUFFNEYsR0FBRyxDQUFDTixTQUFTO1lBQ2pCaEgsV0FBV2lILFFBQVEsSUFBSTtZQUN2QixPQUFPdkY7UUFDVDtRQUVBd0MsSUFBSXhDLEVBQUU2RCxRQUFRLENBQUM2TDtRQUVmLElBQUlsTixFQUFFSSxNQUFNLElBQUk7WUFDZHRFLFdBQVdpSCxRQUFRLElBQUk7UUFDekIsT0FBTztZQUNMdkYsSUFBSUEsRUFBRTBFLEtBQUssQ0FBQ2xDLEVBQUVVLEtBQUssQ0FBQ3dNO1lBRXBCLGNBQWM7WUFDZCxJQUFJMVAsRUFBRTRGLEdBQUcsQ0FBQ04sU0FBUztnQkFDakJoSCxXQUFXNFAsTUFBTTFMLEtBQU0rQyxRQUFRLElBQUksSUFBTUEsUUFBUSxJQUFJO2dCQUNyRCxPQUFPdkY7WUFDVDtZQUVBMUIsV0FBVzRQLE1BQU0xTCxLQUFNK0MsUUFBUSxJQUFJLElBQU1BLFFBQVEsSUFBSTtRQUN2RDtRQUVBLE9BQU92RixFQUFFMEUsS0FBSyxDQUFDZ0wsSUFBSTNQLEdBQUc7SUFDeEI7SUFHQTs7OztHQUlDLEdBQ0QsU0FBUzBKLGVBQWV6SixDQUFDLEVBQUU4TCxPQUFPLEVBQUUvSixFQUFFLEVBQUVELEVBQUU7UUFDeEMsSUFBSXNGLE1BQU0vRyxHQUFHYSxHQUFHUixHQUFHMEQsS0FBS3VKLFNBQVM5RCxLQUFLdkksSUFBSUwsR0FDeENOLE9BQU9YLEVBQUVDLFdBQVcsRUFDcEI2TixRQUFRL0wsT0FBTyxLQUFLO1FBRXRCLElBQUkrTCxPQUFPO1lBQ1RsRSxXQUFXN0gsSUFBSSxHQUFHekU7WUFDbEIsSUFBSXdFLE9BQU8sS0FBSyxHQUFHQSxLQUFLbkIsS0FBSy9DLFFBQVE7aUJBQ2hDZ00sV0FBVzlILElBQUksR0FBRztRQUN6QixPQUFPO1lBQ0xDLEtBQUtwQixLQUFLaEQsU0FBUztZQUNuQm1FLEtBQUtuQixLQUFLL0MsUUFBUTtRQUNwQjtRQUVBLElBQUksQ0FBQ29DLEVBQUUyQyxRQUFRLElBQUk7WUFDakJrSCxNQUFNa0Usa0JBQWtCL047UUFDMUIsT0FBTztZQUNMNkosTUFBTUMsZUFBZTlKO1lBQ3JCa0IsSUFBSTJJLElBQUk3RyxPQUFPLENBQUM7WUFFaEIsd0ZBQXdGO1lBQ3hGLGdFQUFnRTtZQUNoRSwwREFBMEQ7WUFDMUQseURBQXlEO1lBRXpELElBQUk4SyxPQUFPO2dCQUNUMUcsT0FBTztnQkFDUCxJQUFJMEUsV0FBVyxJQUFJO29CQUNqQi9KLEtBQUtBLEtBQUssSUFBSTtnQkFDaEIsT0FBTyxJQUFJK0osV0FBVyxHQUFHO29CQUN2Qi9KLEtBQUtBLEtBQUssSUFBSTtnQkFDaEI7WUFDRixPQUFPO2dCQUNMcUYsT0FBTzBFO1lBQ1Q7WUFFQSw2RkFBNkY7WUFDN0YsMkNBQTJDO1lBRTNDLGVBQWU7WUFDZixJQUFJNUssS0FBSyxHQUFHO2dCQUNWMkksTUFBTUEsSUFBSWdGLE9BQU8sQ0FBQyxLQUFLO2dCQUN2QjVOLElBQUksSUFBSU4sS0FBSztnQkFDYk0sRUFBRVosQ0FBQyxHQUFHd0osSUFBSW5LLE1BQU0sR0FBR3dCO2dCQUNuQkQsRUFBRU0sQ0FBQyxHQUFHcUssWUFBWTlCLGVBQWU3SSxJQUFJLElBQUltRztnQkFDekNuRyxFQUFFWixDQUFDLEdBQUdZLEVBQUVNLENBQUMsQ0FBQzdCLE1BQU07WUFDbEI7WUFFQTRCLEtBQUtzSyxZQUFZL0IsS0FBSyxJQUFJekM7WUFDMUIvRyxJQUFJK0QsTUFBTTlDLEdBQUc1QixNQUFNO1lBRW5CLHlCQUF5QjtZQUN6QixNQUFPNEIsRUFBRSxDQUFDLEVBQUU4QyxJQUFJLElBQUksR0FBSTlDLEdBQUc2RyxHQUFHO1lBRTlCLElBQUksQ0FBQzdHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ1Z1SSxNQUFNaUUsUUFBUSxTQUFTO1lBQ3pCLE9BQU87Z0JBQ0wsSUFBSTVNLElBQUksR0FBRztvQkFDVGI7Z0JBQ0YsT0FBTztvQkFDTEwsSUFBSSxJQUFJVyxLQUFLWDtvQkFDYkEsRUFBRXVCLENBQUMsR0FBR0Q7b0JBQ050QixFQUFFSyxDQUFDLEdBQUdBO29CQUNOTCxJQUFJb0QsT0FBT3BELEdBQUdpQixHQUFHYyxJQUFJRCxJQUFJLEdBQUdzRjtvQkFDNUI5RixLQUFLdEIsRUFBRXVCLENBQUM7b0JBQ1JsQixJQUFJTCxFQUFFSyxDQUFDO29CQUNQc04sVUFBVXZQO2dCQUNaO2dCQUVBLDZFQUE2RTtnQkFDN0U4QyxJQUFJSSxFQUFFLENBQUNTLEdBQUc7Z0JBQ1ZyQixJQUFJMEcsT0FBTztnQkFDWHVHLFVBQVVBLFdBQVdyTSxFQUFFLENBQUNTLEtBQUssRUFBRSxLQUFLLEtBQUs7Z0JBRXpDNEwsVUFBVTdMLEtBQUssSUFDWCxDQUFDWixNQUFNLEtBQUssS0FBS3lNLE9BQU0sS0FBTzdMLENBQUFBLE9BQU8sS0FBS0EsT0FBUTlCLENBQUFBLEVBQUVFLENBQUMsR0FBRyxJQUFJLElBQUksRUFBQyxJQUNqRWdCLElBQUlSLEtBQUtRLE1BQU1SLEtBQU1vQixDQUFBQSxPQUFPLEtBQUs2TCxXQUFXN0wsT0FBTyxLQUFLUixFQUFFLENBQUNTLEtBQUssRUFBRSxHQUFHLEtBQ3JFRCxPQUFROUIsQ0FBQUEsRUFBRUUsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFDO2dCQUUzQm9CLEdBQUc1QixNQUFNLEdBQUdxQztnQkFFWixJQUFJNEwsU0FBUztvQkFFWCwwRUFBMEU7b0JBQzFFLE1BQU8sRUFBRXJNLEVBQUUsQ0FBQyxFQUFFUyxHQUFHLEdBQUdxRixPQUFPLEdBQUk7d0JBQzdCOUYsRUFBRSxDQUFDUyxHQUFHLEdBQUc7d0JBQ1QsSUFBSSxDQUFDQSxJQUFJOzRCQUNQLEVBQUUxQjs0QkFDRmlCLEdBQUd1SCxPQUFPLENBQUM7d0JBQ2I7b0JBQ0Y7Z0JBQ0Y7Z0JBRUEsNEJBQTRCO2dCQUM1QixJQUFLekUsTUFBTTlDLEdBQUc1QixNQUFNLEVBQUUsQ0FBQzRCLEVBQUUsQ0FBQzhDLE1BQU0sRUFBRSxFQUFFLEVBQUVBO2dCQUV0QyxnQ0FBZ0M7Z0JBQ2hDLElBQUtsRCxJQUFJLEdBQUcySSxNQUFNLElBQUkzSSxJQUFJa0QsS0FBS2xELElBQUsySSxPQUFPdE0sU0FBUytGLE1BQU0sQ0FBQ2hDLEVBQUUsQ0FBQ0osRUFBRTtnQkFFaEUsOEJBQThCO2dCQUM5QixJQUFJNE0sT0FBTztvQkFDVCxJQUFJMUosTUFBTSxHQUFHO3dCQUNYLElBQUkwSCxXQUFXLE1BQU1BLFdBQVcsR0FBRzs0QkFDakM1SyxJQUFJNEssV0FBVyxLQUFLLElBQUk7NEJBQ3hCLElBQUssRUFBRTFILEtBQUtBLE1BQU1sRCxHQUFHa0QsTUFBT3lGLE9BQU87NEJBQ25DdkksS0FBS3NLLFlBQVkvQixLQUFLekMsTUFBTTBFOzRCQUM1QixJQUFLMUgsTUFBTTlDLEdBQUc1QixNQUFNLEVBQUUsQ0FBQzRCLEVBQUUsQ0FBQzhDLE1BQU0sRUFBRSxFQUFFLEVBQUVBOzRCQUV0Qyw0QkFBNEI7NEJBQzVCLElBQUtsRCxJQUFJLEdBQUcySSxNQUFNLE1BQU0zSSxJQUFJa0QsS0FBS2xELElBQUsySSxPQUFPdE0sU0FBUytGLE1BQU0sQ0FBQ2hDLEVBQUUsQ0FBQ0osRUFBRTt3QkFDcEUsT0FBTzs0QkFDTDJJLE1BQU1BLElBQUl2RyxNQUFNLENBQUMsS0FBSyxNQUFNdUcsSUFBSTlHLEtBQUssQ0FBQzt3QkFDeEM7b0JBQ0Y7b0JBRUE4RyxNQUFPQSxNQUFPeEosQ0FBQUEsSUFBSSxJQUFJLE1BQU0sSUFBRyxJQUFLQTtnQkFDdEMsT0FBTyxJQUFJQSxJQUFJLEdBQUc7b0JBQ2hCLE1BQU8sRUFBRUEsR0FBSXdKLE1BQU0sTUFBTUE7b0JBQ3pCQSxNQUFNLE9BQU9BO2dCQUNmLE9BQU87b0JBQ0wsSUFBSSxFQUFFeEosSUFBSStELEtBQUssSUFBSy9ELEtBQUsrRCxLQUFLL0QsS0FBT3dKLE9BQU87eUJBQ3ZDLElBQUl4SixJQUFJK0QsS0FBS3lGLE1BQU1BLElBQUk5RyxLQUFLLENBQUMsR0FBRzFDLEtBQUssTUFBTXdKLElBQUk5RyxLQUFLLENBQUMxQztnQkFDNUQ7WUFDRjtZQUVBd0osTUFBTSxDQUFDaUMsV0FBVyxLQUFLLE9BQU9BLFdBQVcsSUFBSSxPQUFPQSxXQUFXLElBQUksT0FBTyxFQUFDLElBQUtqQztRQUNsRjtRQUVBLE9BQU83SixFQUFFRSxDQUFDLEdBQUcsSUFBSSxNQUFNMkosTUFBTUE7SUFDL0I7SUFHQSxpQ0FBaUM7SUFDakMsU0FBU29FLFNBQVNsQyxHQUFHLEVBQUUzSCxHQUFHO1FBQ3hCLElBQUkySCxJQUFJck0sTUFBTSxHQUFHMEUsS0FBSztZQUNwQjJILElBQUlyTSxNQUFNLEdBQUcwRTtZQUNiLE9BQU87UUFDVDtJQUNGO0lBR0Esa0JBQWtCO0lBR2xCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwQ0MsR0FHRDs7Ozs7R0FLQyxHQUNELFNBQVNyRSxJQUFJQyxDQUFDO1FBQ1osT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBR0QsR0FBRztJQUN4QjtJQUdBOzs7OztHQUtDLEdBQ0QsU0FBU3NGLEtBQUtyRixDQUFDO1FBQ2IsT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBR3FGLElBQUk7SUFDekI7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTTSxNQUFNM0YsQ0FBQztRQUNkLE9BQU8sSUFBSSxJQUFJLENBQUNBLEdBQUcyRixLQUFLO0lBQzFCO0lBR0E7Ozs7Ozs7R0FPQyxHQUNELFNBQVNnRCxJQUFJM0ksQ0FBQyxFQUFFaUIsQ0FBQztRQUNmLE9BQU8sSUFBSSxJQUFJLENBQUNqQixHQUFHbUQsSUFBSSxDQUFDbEM7SUFDMUI7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTd0UsS0FBS3pGLENBQUM7UUFDYixPQUFPLElBQUksSUFBSSxDQUFDQSxHQUFHeUYsSUFBSTtJQUN6QjtJQUdBOzs7Ozs7R0FNQyxHQUNELFNBQVNNLE1BQU0vRixDQUFDO1FBQ2QsT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBRytGLEtBQUs7SUFDMUI7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTTSxLQUFLckcsQ0FBQztRQUNiLE9BQU8sSUFBSSxJQUFJLENBQUNBLEdBQUdxRyxJQUFJO0lBQ3pCO0lBR0E7Ozs7OztHQU1DLEdBQ0QsU0FBU0osTUFBTWpHLENBQUM7UUFDZCxPQUFPLElBQUksSUFBSSxDQUFDQSxHQUFHaUcsS0FBSztJQUMxQjtJQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3QkMsR0FDRCxTQUFTMEosTUFBTTFPLENBQUMsRUFBRWpCLENBQUM7UUFDakJpQixJQUFJLElBQUksSUFBSSxDQUFDQTtRQUNiakIsSUFBSSxJQUFJLElBQUksQ0FBQ0E7UUFDYixJQUFJc0MsR0FDRlQsS0FBSyxJQUFJLENBQUNsRSxTQUFTLEVBQ25CbUUsS0FBSyxJQUFJLENBQUNsRSxRQUFRLEVBQ2xCc0ksTUFBTXJFLEtBQUs7UUFFYixhQUFhO1FBQ2IsSUFBSSxDQUFDWixFQUFFZixDQUFDLElBQUksQ0FBQ0YsRUFBRUUsQ0FBQyxFQUFFO1lBQ2hCb0MsSUFBSSxJQUFJLElBQUksQ0FBQzFCO1FBRWYsaUJBQWlCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDSyxFQUFFTSxDQUFDLElBQUksQ0FBQ3ZCLEVBQUV1QixDQUFDLEVBQUU7WUFDdkJlLElBQUlrRCxNQUFNLElBQUksRUFBRVUsS0FBSyxHQUFHaEQsS0FBSyxDQUFDbEQsRUFBRUUsQ0FBQyxHQUFHLElBQUksT0FBTztZQUMvQ29DLEVBQUVwQyxDQUFDLEdBQUdlLEVBQUVmLENBQUM7UUFFWCw0QkFBNEI7UUFDNUIsT0FBTyxJQUFJLENBQUNGLEVBQUV1QixDQUFDLElBQUlOLEVBQUUyQixNQUFNLElBQUk7WUFDN0JOLElBQUl0QyxFQUFFRSxDQUFDLEdBQUcsSUFBSXNGLE1BQU0sSUFBSSxFQUFFM0QsSUFBSUMsTUFBTSxJQUFJLElBQUksQ0FBQztZQUM3Q1EsRUFBRXBDLENBQUMsR0FBR2UsRUFBRWYsQ0FBQztRQUVYLDRCQUE0QjtRQUM1QixPQUFPLElBQUksQ0FBQ2UsRUFBRU0sQ0FBQyxJQUFJdkIsRUFBRTRDLE1BQU0sSUFBSTtZQUM3Qk4sSUFBSWtELE1BQU0sSUFBSSxFQUFFVSxLQUFLLEdBQUdoRCxLQUFLLENBQUM7WUFDOUJaLEVBQUVwQyxDQUFDLEdBQUdlLEVBQUVmLENBQUM7UUFFWCwyQkFBMkI7UUFDM0IsT0FBTyxJQUFJRixFQUFFRSxDQUFDLEdBQUcsR0FBRztZQUNsQixJQUFJLENBQUN2QyxTQUFTLEdBQUd1STtZQUNqQixJQUFJLENBQUN0SSxRQUFRLEdBQUc7WUFDaEIwRSxJQUFJLElBQUksQ0FBQytELElBQUksQ0FBQ2pELE9BQU9uQyxHQUFHakIsR0FBR2tHLEtBQUs7WUFDaENsRyxJQUFJd0YsTUFBTSxJQUFJLEVBQUVVLEtBQUs7WUFDckIsSUFBSSxDQUFDdkksU0FBUyxHQUFHa0U7WUFDakIsSUFBSSxDQUFDakUsUUFBUSxHQUFHa0U7WUFDaEJRLElBQUlyQixFQUFFZixDQUFDLEdBQUcsSUFBSW9DLEVBQUVvQyxLQUFLLENBQUMxRSxLQUFLc0MsRUFBRWEsSUFBSSxDQUFDbkQ7UUFDcEMsT0FBTztZQUNMc0MsSUFBSSxJQUFJLENBQUMrRCxJQUFJLENBQUNqRCxPQUFPbkMsR0FBR2pCLEdBQUdrRyxLQUFLO1FBQ2xDO1FBRUEsT0FBTzVEO0lBQ1Q7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTSCxLQUFLbkMsQ0FBQztRQUNiLE9BQU8sSUFBSSxJQUFJLENBQUNBLEdBQUdtQyxJQUFJO0lBQ3pCO0lBR0E7Ozs7O0dBS0MsR0FDRCxTQUFTL0IsS0FBS0osQ0FBQztRQUNiLE9BQU9HLFNBQVNILElBQUksSUFBSSxJQUFJLENBQUNBLElBQUlBLEVBQUVLLENBQUMsR0FBRyxHQUFHO0lBQzVDO0lBR0E7Ozs7Ozs7R0FPQyxHQUNELFNBQVNFLE1BQU1QLENBQUMsRUFBRVEsR0FBRyxFQUFFQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSSxJQUFJLENBQUNULEdBQUdPLEtBQUssQ0FBQ0MsS0FBS0M7SUFDaEM7SUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkMsR0FDRCxTQUFTbVAsT0FBT0MsR0FBRztRQUNqQixJQUFJLENBQUNBLE9BQU8sT0FBT0EsUUFBUSxVQUFVLE1BQU0vTyxNQUFNdEMsZUFBZTtRQUNoRSxJQUFJMEMsR0FBR2tPLEdBQUdVLEdBQ1JDLGNBQWNGLElBQUlHLFFBQVEsS0FBSyxNQUMvQkMsS0FBSztZQUNIO1lBQWE7WUFBRzNTO1lBQ2hCO1lBQVk7WUFBRztZQUNmO1lBQVksQ0FBQ0Q7WUFBVztZQUN4QjtZQUFZO1lBQUdBO1lBQ2Y7WUFBUTtZQUFHQTtZQUNYO1lBQVEsQ0FBQ0E7WUFBVztZQUNwQjtZQUFVO1lBQUc7U0FDZDtRQUVILElBQUs2RCxJQUFJLEdBQUdBLElBQUkrTyxHQUFHdlEsTUFBTSxFQUFFd0IsS0FBSyxFQUFHO1lBQ2pDLElBQUlrTyxJQUFJYSxFQUFFLENBQUMvTyxFQUFFLEVBQUU2TyxhQUFhLElBQUksQ0FBQ1gsRUFBRSxHQUFHMVIsUUFBUSxDQUFDMFIsRUFBRTtZQUNqRCxJQUFJLENBQUNVLElBQUlELEdBQUcsQ0FBQ1QsRUFBRSxNQUFNLEtBQUssR0FBRztnQkFDM0IsSUFBSXZRLFVBQVVpUixPQUFPQSxLQUFLQSxLQUFLRyxFQUFFLENBQUMvTyxJQUFJLEVBQUUsSUFBSTRPLEtBQUtHLEVBQUUsQ0FBQy9PLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQ2tPLEVBQUUsR0FBR1U7cUJBQ2pFLE1BQU1oUCxNQUFNckMsa0JBQWtCMlEsSUFBSSxPQUFPVTtZQUNoRDtRQUNGO1FBRUEsSUFBSVYsSUFBSSxVQUFVVyxhQUFhLElBQUksQ0FBQ1gsRUFBRSxHQUFHMVIsUUFBUSxDQUFDMFIsRUFBRTtRQUNwRCxJQUFJLENBQUNVLElBQUlELEdBQUcsQ0FBQ1QsRUFBRSxNQUFNLEtBQUssR0FBRztZQUMzQixJQUFJVSxNQUFNLFFBQVFBLE1BQU0sU0FBU0EsTUFBTSxLQUFLQSxNQUFNLEdBQUc7Z0JBQ25ELElBQUlBLEdBQUc7b0JBQ0wsSUFBSSxPQUFPNVIsVUFBVSxlQUFlQSxVQUNqQ0EsQ0FBQUEsT0FBT2dTLGVBQWUsSUFBSWhTLE9BQU9pUyxXQUFXLEdBQUc7d0JBQ2hELElBQUksQ0FBQ2YsRUFBRSxHQUFHO29CQUNaLE9BQU87d0JBQ0wsTUFBTXRPLE1BQU1uQztvQkFDZDtnQkFDRixPQUFPO29CQUNMLElBQUksQ0FBQ3lRLEVBQUUsR0FBRztnQkFDWjtZQUNGLE9BQU87Z0JBQ0wsTUFBTXRPLE1BQU1yQyxrQkFBa0IyUSxJQUFJLE9BQU9VO1lBQzNDO1FBQ0Y7UUFFQSxPQUFPLElBQUk7SUFDYjtJQUdBOzs7Ozs7R0FNQyxHQUNELFNBQVNsTyxJQUFJNUIsQ0FBQztRQUNaLE9BQU8sSUFBSSxJQUFJLENBQUNBLEdBQUc0QixHQUFHO0lBQ3hCO0lBR0E7Ozs7OztHQU1DLEdBQ0QsU0FBU3VDLEtBQUtuRSxDQUFDO1FBQ2IsT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBR21FLElBQUk7SUFDekI7SUFHQTs7OztHQUlDLEdBQ0QsU0FBU2lNLE1BQU1QLEdBQUc7UUFDaEIsSUFBSTNPLEdBQUdrTyxHQUFHYTtRQUVWOzs7Ozs7S0FNQyxHQUNELFNBQVM5UixRQUFRMlIsQ0FBQztZQUNoQixJQUFJelAsR0FBR2EsR0FBR3NCLEdBQ1J4QyxJQUFJLElBQUk7WUFFViw4QkFBOEI7WUFDOUIsSUFBSSxDQUFFQSxDQUFBQSxhQUFhN0IsT0FBTSxHQUFJLE9BQU8sSUFBSUEsUUFBUTJSO1lBRWhELDJGQUEyRjtZQUMzRiwwQkFBMEI7WUFDMUI5UCxFQUFFQyxXQUFXLEdBQUc5QjtZQUVoQixhQUFhO1lBQ2IsSUFBSWtTLGtCQUFrQlAsSUFBSTtnQkFDeEI5UCxFQUFFRSxDQUFDLEdBQUc0UCxFQUFFNVAsQ0FBQztnQkFFVCxJQUFJM0IsVUFBVTtvQkFDWixJQUFJLENBQUN1UixFQUFFdk8sQ0FBQyxJQUFJdU8sRUFBRXpQLENBQUMsR0FBR2xDLFFBQVFGLElBQUksRUFBRTt3QkFFOUIsWUFBWTt3QkFDWitCLEVBQUVLLENBQUMsR0FBR087d0JBQ05aLEVBQUV1QixDQUFDLEdBQUc7b0JBQ1IsT0FBTyxJQUFJdU8sRUFBRXpQLENBQUMsR0FBR2xDLFFBQVFILElBQUksRUFBRTt3QkFFN0IsUUFBUTt3QkFDUmdDLEVBQUVLLENBQUMsR0FBRzt3QkFDTkwsRUFBRXVCLENBQUMsR0FBRzs0QkFBQzt5QkFBRTtvQkFDWCxPQUFPO3dCQUNMdkIsRUFBRUssQ0FBQyxHQUFHeVAsRUFBRXpQLENBQUM7d0JBQ1RMLEVBQUV1QixDQUFDLEdBQUd1TyxFQUFFdk8sQ0FBQyxDQUFDd0IsS0FBSztvQkFDakI7Z0JBQ0YsT0FBTztvQkFDTC9DLEVBQUVLLENBQUMsR0FBR3lQLEVBQUV6UCxDQUFDO29CQUNUTCxFQUFFdUIsQ0FBQyxHQUFHdU8sRUFBRXZPLENBQUMsR0FBR3VPLEVBQUV2TyxDQUFDLENBQUN3QixLQUFLLEtBQUsrTSxFQUFFdk8sQ0FBQztnQkFDL0I7Z0JBRUE7WUFDRjtZQUVBaUIsSUFBSSxPQUFPc047WUFFWCxJQUFJdE4sTUFBTSxVQUFVO2dCQUNsQixJQUFJc04sTUFBTSxHQUFHO29CQUNYOVAsRUFBRUUsQ0FBQyxHQUFHLElBQUk0UCxJQUFJLElBQUksQ0FBQyxJQUFJO29CQUN2QjlQLEVBQUVLLENBQUMsR0FBRztvQkFDTkwsRUFBRXVCLENBQUMsR0FBRzt3QkFBQztxQkFBRTtvQkFDVDtnQkFDRjtnQkFFQSxJQUFJdU8sSUFBSSxHQUFHO29CQUNUQSxJQUFJLENBQUNBO29CQUNMOVAsRUFBRUUsQ0FBQyxHQUFHLENBQUM7Z0JBQ1QsT0FBTztvQkFDTEYsRUFBRUUsQ0FBQyxHQUFHO2dCQUNSO2dCQUVBLGdDQUFnQztnQkFDaEMsSUFBSTRQLE1BQU0sQ0FBQyxDQUFDQSxLQUFLQSxJQUFJLEtBQUs7b0JBQ3hCLElBQUt6UCxJQUFJLEdBQUdhLElBQUk0TyxHQUFHNU8sS0FBSyxJQUFJQSxLQUFLLEdBQUliO29CQUVyQyxJQUFJOUIsVUFBVTt3QkFDWixJQUFJOEIsSUFBSWxDLFFBQVFGLElBQUksRUFBRTs0QkFDcEIrQixFQUFFSyxDQUFDLEdBQUdPOzRCQUNOWixFQUFFdUIsQ0FBQyxHQUFHO3dCQUNSLE9BQU8sSUFBSWxCLElBQUlsQyxRQUFRSCxJQUFJLEVBQUU7NEJBQzNCZ0MsRUFBRUssQ0FBQyxHQUFHOzRCQUNOTCxFQUFFdUIsQ0FBQyxHQUFHO2dDQUFDOzZCQUFFO3dCQUNYLE9BQU87NEJBQ0x2QixFQUFFSyxDQUFDLEdBQUdBOzRCQUNOTCxFQUFFdUIsQ0FBQyxHQUFHO2dDQUFDdU87NkJBQUU7d0JBQ1g7b0JBQ0YsT0FBTzt3QkFDTDlQLEVBQUVLLENBQUMsR0FBR0E7d0JBQ05MLEVBQUV1QixDQUFDLEdBQUc7NEJBQUN1Tzt5QkFBRTtvQkFDWDtvQkFFQTtnQkFFRixpQkFBaUI7Z0JBQ2pCLE9BQU8sSUFBSUEsSUFBSSxNQUFNLEdBQUc7b0JBQ3RCLElBQUksQ0FBQ0EsR0FBRzlQLEVBQUVFLENBQUMsR0FBR1U7b0JBQ2RaLEVBQUVLLENBQUMsR0FBR087b0JBQ05aLEVBQUV1QixDQUFDLEdBQUc7b0JBQ047Z0JBQ0Y7Z0JBRUEsT0FBT3FOLGFBQWE1TyxHQUFHOFAsRUFBRTdNLFFBQVE7WUFFbkMsT0FBTyxJQUFJVCxNQUFNLFVBQVU7Z0JBQ3pCLE1BQU0xQixNQUFNckMsa0JBQWtCcVI7WUFDaEM7WUFFQSxjQUFjO1lBQ2QsSUFBSSxDQUFDNU8sSUFBSTRPLEVBQUVkLFVBQVUsQ0FBQyxFQUFDLE1BQU8sSUFBSTtnQkFDaENjLElBQUlBLEVBQUUvTSxLQUFLLENBQUM7Z0JBQ1ovQyxFQUFFRSxDQUFDLEdBQUcsQ0FBQztZQUNULE9BQU87Z0JBQ0wsYUFBYTtnQkFDYixJQUFJZ0IsTUFBTSxJQUFJNE8sSUFBSUEsRUFBRS9NLEtBQUssQ0FBQztnQkFDMUIvQyxFQUFFRSxDQUFDLEdBQUc7WUFDUjtZQUVBLE9BQU9iLFVBQVVnUSxJQUFJLENBQUNTLEtBQUtsQixhQUFhNU8sR0FBRzhQLEtBQUtiLFdBQVdqUCxHQUFHOFA7UUFDaEU7UUFFQTNSLFFBQVFtUyxTQUFTLEdBQUcxUTtRQUVwQnpCLFFBQVFvUyxRQUFRLEdBQUc7UUFDbkJwUyxRQUFRcVMsVUFBVSxHQUFHO1FBQ3JCclMsUUFBUXNTLFVBQVUsR0FBRztRQUNyQnRTLFFBQVF1UyxXQUFXLEdBQUc7UUFDdEJ2UyxRQUFRd1MsYUFBYSxHQUFHO1FBQ3hCeFMsUUFBUXlTLGVBQWUsR0FBRztRQUMxQnpTLFFBQVEwUyxlQUFlLEdBQUc7UUFDMUIxUyxRQUFRMlMsZUFBZSxHQUFHO1FBQzFCM1MsUUFBUTRTLGdCQUFnQixHQUFHO1FBQzNCNVMsUUFBUTZTLE1BQU0sR0FBRztRQUVqQjdTLFFBQVF5UixNQUFNLEdBQUd6UixRQUFROFMsR0FBRyxHQUFHckI7UUFDL0J6UixRQUFRaVMsS0FBSyxHQUFHQTtRQUNoQmpTLFFBQVFrQixTQUFTLEdBQUdnUjtRQUVwQmxTLFFBQVE0QixHQUFHLEdBQUdBO1FBQ2Q1QixRQUFRa0gsSUFBSSxHQUFHQTtRQUNmbEgsUUFBUXdILEtBQUssR0FBR0EsT0FBYyxNQUFNO1FBQ3BDeEgsUUFBUXdLLEdBQUcsR0FBR0E7UUFDZHhLLFFBQVFzSCxJQUFJLEdBQUdBO1FBQ2Z0SCxRQUFRNEgsS0FBSyxHQUFHQSxPQUFjLE1BQU07UUFDcEM1SCxRQUFRa0ksSUFBSSxHQUFHQTtRQUNmbEksUUFBUThILEtBQUssR0FBR0EsT0FBYyxNQUFNO1FBQ3BDOUgsUUFBUXdSLEtBQUssR0FBR0E7UUFDaEJ4UixRQUFRZ0UsSUFBSSxHQUFHQSxNQUFlLE1BQU07UUFDcENoRSxRQUFRaUMsSUFBSSxHQUFHQTtRQUNmakMsUUFBUW9DLEtBQUssR0FBR0E7UUFDaEJwQyxRQUFReUQsR0FBRyxHQUFHQTtRQUNkekQsUUFBUWdHLElBQUksR0FBR0EsTUFBZSxNQUFNO1FBQ3BDaEcsUUFBUXdGLEdBQUcsR0FBR0E7UUFDZHhGLFFBQVFzSyxHQUFHLEdBQUdBO1FBQ2R0SyxRQUFRWSxLQUFLLEdBQUdBO1FBQ2hCWixRQUFRK1MsS0FBSyxHQUFHQSxPQUFjLE1BQU07UUFDcEMvUyxRQUFRMEgsRUFBRSxHQUFHQTtRQUNiMUgsUUFBUWdKLEdBQUcsR0FBR0E7UUFDZGhKLFFBQVFnVCxLQUFLLEdBQUdBLE9BQWMsTUFBTTtRQUNwQ2hULFFBQVFpVCxJQUFJLEdBQUdBLE1BQWUsTUFBTTtRQUNwQ2pULFFBQVFzQyxHQUFHLEdBQUdBO1FBQ2R0QyxRQUFRcUMsR0FBRyxHQUFHQTtRQUNkckMsUUFBUW1LLEdBQUcsR0FBR0E7UUFDZG5LLFFBQVFtTCxHQUFHLEdBQUdBO1FBQ2RuTCxRQUFRYyxHQUFHLEdBQUdBO1FBQ2RkLFFBQVFrVCxNQUFNLEdBQUdBO1FBQ2pCbFQsUUFBUTZLLEtBQUssR0FBR0E7UUFDaEI3SyxRQUFRcVAsSUFBSSxHQUFHQSxNQUFlLE1BQU07UUFDcENyUCxRQUFRK0ssR0FBRyxHQUFHQTtRQUNkL0ssUUFBUXlHLElBQUksR0FBR0EsTUFBZSxNQUFNO1FBQ3BDekcsUUFBUTBHLElBQUksR0FBR0E7UUFDZjFHLFFBQVEySixHQUFHLEdBQUdBO1FBQ2QzSixRQUFRbVEsR0FBRyxHQUFHQTtRQUNkblEsUUFBUWtMLEdBQUcsR0FBR0E7UUFDZGxMLFFBQVFnSCxJQUFJLEdBQUdBLE1BQWUsTUFBTTtRQUNwQ2hILFFBQVFnTixLQUFLLEdBQUdBLE9BQWMsTUFBTTtRQUVwQyxJQUFJMEUsUUFBUSxLQUFLLEdBQUdBLE1BQU0sQ0FBQztRQUMzQixJQUFJQSxLQUFLO1lBQ1AsSUFBSUEsSUFBSUcsUUFBUSxLQUFLLE1BQU07Z0JBQ3pCQyxLQUFLO29CQUFDO29CQUFhO29CQUFZO29CQUFZO29CQUFZO29CQUFRO29CQUFRO29CQUFVO2lCQUFTO2dCQUMxRixJQUFLL08sSUFBSSxHQUFHQSxJQUFJK08sR0FBR3ZRLE1BQU0sRUFBRyxJQUFJLENBQUNtUSxJQUFJeUIsY0FBYyxDQUFDbEMsSUFBSWEsRUFBRSxDQUFDL08sSUFBSSxHQUFHMk8sR0FBRyxDQUFDVCxFQUFFLEdBQUcsSUFBSSxDQUFDQSxFQUFFO1lBQ3BGO1FBQ0Y7UUFFQWpSLFFBQVF5UixNQUFNLENBQUNDO1FBRWYsT0FBTzFSO0lBQ1Q7SUFHQTs7Ozs7OztHQU9DLEdBQ0QsU0FBU3dGLElBQUkzRCxDQUFDLEVBQUVpQixDQUFDO1FBQ2YsT0FBTyxJQUFJLElBQUksQ0FBQ2pCLEdBQUcyRCxHQUFHLENBQUMxQztJQUN6QjtJQUdBOzs7Ozs7R0FNQyxHQUNELFNBQVN3SCxJQUFJekksQ0FBQztRQUNaLE9BQU8sSUFBSSxJQUFJLENBQUNBLEdBQUd5SSxHQUFHO0lBQ3hCO0lBR0E7Ozs7O0dBS0MsR0FDRCxTQUFTMUosTUFBTWlCLENBQUM7UUFDZCxPQUFPRyxTQUFTSCxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJQSxFQUFFSyxDQUFDLEdBQUcsR0FBRztJQUM1QztJQUdBOzs7Ozs7OztHQVFDLEdBQ0QsU0FBUzZRO1FBQ1AsSUFBSWhRLEdBQUdtQixHQUNMRyxJQUFJLElBQUksSUFBSSxDQUFDO1FBRWZqRSxXQUFXO1FBRVgsSUFBSzJDLElBQUksR0FBR0EsSUFBSXFRLFVBQVU3UixNQUFNLEVBQUc7WUFDakMyQyxJQUFJLElBQUksSUFBSSxDQUFDa1AsU0FBUyxDQUFDclEsSUFBSTtZQUMzQixJQUFJLENBQUNtQixFQUFFZCxDQUFDLEVBQUU7Z0JBQ1IsSUFBSWMsRUFBRW5DLENBQUMsRUFBRTtvQkFDUDNCLFdBQVc7b0JBQ1gsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJO2dCQUN0QjtnQkFDQWlFLElBQUlIO1lBQ04sT0FBTyxJQUFJRyxFQUFFakIsQ0FBQyxFQUFFO2dCQUNkaUIsSUFBSUEsRUFBRVcsSUFBSSxDQUFDZCxFQUFFYSxLQUFLLENBQUNiO1lBQ3JCO1FBQ0Y7UUFFQTlELFdBQVc7UUFFWCxPQUFPaUUsRUFBRXFDLElBQUk7SUFDZjtJQUdBOzs7O0dBSUMsR0FDRCxTQUFTd0wsa0JBQWtCUixHQUFHO1FBQzVCLE9BQU9BLGVBQWUxUixXQUFXMFIsT0FBT0EsSUFBSWhRLFdBQVcsS0FBS2pCLE9BQU87SUFDckU7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTaUgsR0FBRzdGLENBQUM7UUFDWCxPQUFPLElBQUksSUFBSSxDQUFDQSxHQUFHNkYsRUFBRTtJQUN2QjtJQUdBOzs7Ozs7Ozs7R0FTQyxHQUNELFNBQVNzQixJQUFJbkgsQ0FBQyxFQUFFaUIsQ0FBQztRQUNmLE9BQU8sSUFBSSxJQUFJLENBQUNqQixHQUFHbUgsR0FBRyxDQUFDbEc7SUFDekI7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTbVEsS0FBS3BSLENBQUM7UUFDYixPQUFPLElBQUksSUFBSSxDQUFDQSxHQUFHbUgsR0FBRyxDQUFDO0lBQ3pCO0lBR0E7Ozs7OztHQU1DLEdBQ0QsU0FBU2dLLE1BQU1uUixDQUFDO1FBQ2QsT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBR21ILEdBQUcsQ0FBQztJQUN6QjtJQUdBOzs7OztHQUtDLEdBQ0QsU0FBUzFHO1FBQ1AsT0FBTzBOLFNBQVMsSUFBSSxFQUFFb0QsV0FBVztJQUNuQztJQUdBOzs7OztHQUtDLEdBQ0QsU0FBUy9RO1FBQ1AsT0FBTzJOLFNBQVMsSUFBSSxFQUFFb0QsV0FBVztJQUNuQztJQUdBOzs7Ozs7O0dBT0MsR0FDRCxTQUFTakosSUFBSXRJLENBQUMsRUFBRWlCLENBQUM7UUFDZixPQUFPLElBQUksSUFBSSxDQUFDakIsR0FBR3NJLEdBQUcsQ0FBQ3JIO0lBQ3pCO0lBR0E7Ozs7Ozs7R0FPQyxHQUNELFNBQVNxSSxJQUFJdEosQ0FBQyxFQUFFaUIsQ0FBQztRQUNmLE9BQU8sSUFBSSxJQUFJLENBQUNqQixHQUFHc0osR0FBRyxDQUFDckk7SUFDekI7SUFHQTs7Ozs7OztHQU9DLEdBQ0QsU0FBU2hDLElBQUllLENBQUMsRUFBRWlCLENBQUM7UUFDZixPQUFPLElBQUksSUFBSSxDQUFDakIsR0FBR2YsR0FBRyxDQUFDZ0M7SUFDekI7SUFHQTs7Ozs7OztHQU9DLEdBQ0QsU0FBU29RLE9BQU90UCxFQUFFO1FBQ2hCLElBQUlSLEdBQUdsQixHQUFHSyxHQUFHMkIsR0FDWG5CLElBQUksR0FDSm9CLElBQUksSUFBSSxJQUFJLENBQUMsSUFDYnFKLEtBQUssRUFBRTtRQUVULElBQUk1SixPQUFPLEtBQUssR0FBR0EsS0FBSyxJQUFJLENBQUNwRSxTQUFTO2FBQ2pDaU0sV0FBVzdILElBQUksR0FBR3pFO1FBRXZCb0QsSUFBSTVCLEtBQUtzQixJQUFJLENBQUMyQixLQUFLeEM7UUFFbkIsSUFBSSxDQUFDLElBQUksQ0FBQ3JCLE1BQU0sRUFBRTtZQUNoQixNQUFPZ0QsSUFBSVIsR0FBSWlMLEVBQUUsQ0FBQ3pLLElBQUksR0FBR3BDLEtBQUt1UyxNQUFNLEtBQUssTUFBTTtRQUVqRCw4Q0FBOEM7UUFDOUMsT0FBTyxJQUFJblQsT0FBT2dTLGVBQWUsRUFBRTtZQUNqQzNPLElBQUlyRCxPQUFPZ1MsZUFBZSxDQUFDLElBQUlzQixZQUFZOVE7WUFFM0MsTUFBT1EsSUFBSVIsR0FBSTtnQkFDYjJCLElBQUlkLENBQUMsQ0FBQ0wsRUFBRTtnQkFFUixzQkFBc0I7Z0JBQ3RCLHlFQUF5RTtnQkFDekUsSUFBSW1CLEtBQUssUUFBUTtvQkFDZmQsQ0FBQyxDQUFDTCxFQUFFLEdBQUdoRCxPQUFPZ1MsZUFBZSxDQUFDLElBQUlzQixZQUFZLEdBQUcsQ0FBQyxFQUFFO2dCQUN0RCxPQUFPO29CQUVMLHVCQUF1QjtvQkFDdkIsNEJBQTRCO29CQUM1QjdGLEVBQUUsQ0FBQ3pLLElBQUksR0FBR21CLElBQUk7Z0JBQ2hCO1lBQ0Y7UUFFRix5Q0FBeUM7UUFDekMsT0FBTyxJQUFJbkUsT0FBT2lTLFdBQVcsRUFBRTtZQUU3QixTQUFTO1lBQ1Q1TyxJQUFJckQsT0FBT2lTLFdBQVcsQ0FBQ3pQLEtBQUs7WUFFNUIsTUFBT1EsSUFBSVIsR0FBSTtnQkFFYixzQkFBc0I7Z0JBQ3RCMkIsSUFBSWQsQ0FBQyxDQUFDTCxFQUFFLEdBQUlLLENBQUFBLENBQUMsQ0FBQ0wsSUFBSSxFQUFFLElBQUksS0FBTUssQ0FBQUEsQ0FBQyxDQUFDTCxJQUFJLEVBQUUsSUFBSSxFQUFDLElBQU0sRUFBQ0ssQ0FBQyxDQUFDTCxJQUFJLEVBQUUsR0FBRyxJQUFHLEtBQU0sRUFBQztnQkFFdkUsd0VBQXdFO2dCQUN4RSxJQUFJbUIsS0FBSyxRQUFRO29CQUNmbkUsT0FBT2lTLFdBQVcsQ0FBQyxHQUFHc0IsSUFBSSxDQUFDbFEsR0FBR0w7Z0JBQ2hDLE9BQU87b0JBRUwsdUJBQXVCO29CQUN2Qiw0QkFBNEI7b0JBQzVCeUssR0FBR3pELElBQUksQ0FBQzdGLElBQUk7b0JBQ1puQixLQUFLO2dCQUNQO1lBQ0Y7WUFFQUEsSUFBSVIsSUFBSTtRQUNWLE9BQU87WUFDTCxNQUFNSSxNQUFNbkM7UUFDZDtRQUVBK0IsSUFBSWlMLEVBQUUsQ0FBQyxFQUFFekssRUFBRTtRQUNYYSxNQUFNeEM7UUFFTixvREFBb0Q7UUFDcEQsSUFBSW1CLEtBQUtxQixJQUFJO1lBQ1hNLElBQUlyRCxRQUFRLElBQUlPLFdBQVd3QztZQUMzQjRKLEVBQUUsQ0FBQ3pLLEVBQUUsR0FBRyxDQUFDUixJQUFJMkIsSUFBSSxLQUFLQTtRQUN4QjtRQUVBLHdDQUF3QztRQUN4QyxNQUFPc0osRUFBRSxDQUFDekssRUFBRSxLQUFLLEdBQUdBLElBQUt5SyxHQUFHeEQsR0FBRztRQUUvQixRQUFRO1FBQ1IsSUFBSWpILElBQUksR0FBRztZQUNUYixJQUFJO1lBQ0pzTCxLQUFLO2dCQUFDO2FBQUU7UUFDVixPQUFPO1lBQ0x0TCxJQUFJLENBQUM7WUFFTCx1RUFBdUU7WUFDdkUsTUFBT3NMLEVBQUUsQ0FBQyxFQUFFLEtBQUssR0FBR3RMLEtBQUtkLFNBQVVvTSxHQUFHdkQsS0FBSztZQUUzQyx1RUFBdUU7WUFDdkUsSUFBSzFILElBQUksR0FBRzJCLElBQUlzSixFQUFFLENBQUMsRUFBRSxFQUFFdEosS0FBSyxJQUFJQSxLQUFLLEdBQUkzQjtZQUV6QyxpRUFBaUU7WUFDakUsSUFBSUEsSUFBSW5CLFVBQVVjLEtBQUtkLFdBQVdtQjtRQUNwQztRQUVBNEIsRUFBRWpDLENBQUMsR0FBR0E7UUFDTmlDLEVBQUVmLENBQUMsR0FBR29LO1FBRU4sT0FBT3JKO0lBQ1Q7SUFHQTs7Ozs7OztHQU9DLEdBQ0QsU0FBUzBHLE1BQU1oSixDQUFDO1FBQ2QsT0FBT0csU0FBU0gsSUFBSSxJQUFJLElBQUksQ0FBQ0EsSUFBSUEsRUFBRUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDekMsUUFBUTtJQUN6RDtJQUdBOzs7Ozs7Ozs7O0dBVUMsR0FDRCxTQUFTNFAsS0FBS3hOLENBQUM7UUFDYkEsSUFBSSxJQUFJLElBQUksQ0FBQ0E7UUFDYixPQUFPQSxFQUFFdUIsQ0FBQyxHQUFJdkIsRUFBRXVCLENBQUMsQ0FBQyxFQUFFLEdBQUd2QixFQUFFRSxDQUFDLEdBQUcsSUFBSUYsRUFBRUUsQ0FBQyxHQUFJRixFQUFFRSxDQUFDLElBQUlVO0lBQ2pEO0lBR0E7Ozs7OztHQU1DLEdBQ0QsU0FBU3NJLElBQUlsSixDQUFDO1FBQ1osT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBR2tKLEdBQUc7SUFDeEI7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTdEUsS0FBSzVFLENBQUM7UUFDYixPQUFPLElBQUksSUFBSSxDQUFDQSxHQUFHNEUsSUFBSTtJQUN6QjtJQUdBOzs7Ozs7R0FNQyxHQUNELFNBQVNDLEtBQUs3RSxDQUFDO1FBQ2IsT0FBTyxJQUFJLElBQUksQ0FBQ0EsR0FBRzZFLElBQUk7SUFDekI7SUFHQTs7Ozs7OztHQU9DLEdBQ0QsU0FBU2lELElBQUk5SCxDQUFDLEVBQUVpQixDQUFDO1FBQ2YsT0FBTyxJQUFJLElBQUksQ0FBQ2pCLEdBQUc4SCxHQUFHLENBQUM3RztJQUN6QjtJQUdBOzs7Ozs7OztHQVFDLEdBQ0QsU0FBU3FOO1FBQ1AsSUFBSXBOLElBQUksR0FDTmtOLE9BQU9tRCxXQUNQdlIsSUFBSSxJQUFJLElBQUksQ0FBQ29PLElBQUksQ0FBQ2xOLEVBQUU7UUFFdEIzQyxXQUFXO1FBQ1gsTUFBT3lCLEVBQUVFLENBQUMsSUFBSSxFQUFFZ0IsSUFBSWtOLEtBQUsxTyxNQUFNLEVBQUdNLElBQUlBLEVBQUVtRCxJQUFJLENBQUNpTCxJQUFJLENBQUNsTixFQUFFO1FBQ3BEM0MsV0FBVztRQUVYLE9BQU80QixTQUFTSCxHQUFHLElBQUksQ0FBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUNDLFFBQVE7SUFDbEQ7SUFHQTs7Ozs7O0dBTUMsR0FDRCxTQUFTeUwsSUFBSXJKLENBQUM7UUFDWixPQUFPLElBQUksSUFBSSxDQUFDQSxHQUFHcUosR0FBRztJQUN4QjtJQUdBOzs7Ozs7R0FNQyxHQUNELFNBQVNsRSxLQUFLbkYsQ0FBQztRQUNiLE9BQU8sSUFBSSxJQUFJLENBQUNBLEdBQUdtRixJQUFJO0lBQ3pCO0lBR0E7Ozs7O0dBS0MsR0FDRCxTQUFTZ0csTUFBTW5MLENBQUM7UUFDZCxPQUFPRyxTQUFTSCxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJQSxFQUFFSyxDQUFDLEdBQUcsR0FBRztJQUM1QztJQUdBLG9EQUFvRDtJQUNwRGxDLFVBQVVpUyxNQUFNMVM7SUFDaEJTLFFBQVFtUyxTQUFTLENBQUNyUSxXQUFXLEdBQUc5QjtJQUNoQ0EsT0FBTyxDQUFDLFVBQVUsR0FBR0EsUUFBUUEsT0FBTyxHQUFHQTtJQUV2QywwREFBMEQ7SUFDMURYLE9BQU8sSUFBSVcsUUFBUVg7SUFDbkJDLEtBQUssSUFBSVUsUUFBUVY7SUFHakIsVUFBVTtJQUdWLE9BQU87SUFDUCxJQUFJLElBQXlDLEVBQUU7UUFDN0NpVSxtQ0FBTztZQUNMLE9BQU92VDtRQUNULENBQUM7QUFBQSxrR0FBQztJQUVKLDJEQUEyRDtJQUMzRCxPQUFPLEVBcUJOO0FBQ0gsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL2RlY2ltYWwuanMvZGVjaW1hbC5qcz9hZWRhIl0sInNvdXJjZXNDb250ZW50IjpbIjsoZnVuY3Rpb24gKGdsb2JhbFNjb3BlKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuXHJcbiAgLyohXHJcbiAgICogIGRlY2ltYWwuanMgdjEwLjQuM1xyXG4gICAqICBBbiBhcmJpdHJhcnktcHJlY2lzaW9uIERlY2ltYWwgdHlwZSBmb3IgSmF2YVNjcmlwdC5cclxuICAgKiAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvZGVjaW1hbC5qc1xyXG4gICAqICBDb3B5cmlnaHQgKGMpIDIwMjIgTWljaGFlbCBNY2xhdWdobGluIDxNOGNoODhsQGdtYWlsLmNvbT5cclxuICAgKiAgTUlUIExpY2VuY2VcclxuICAgKi9cclxuXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBFRElUQUJMRSBERUZBVUxUUyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuICAgIC8vIFRoZSBtYXhpbXVtIGV4cG9uZW50IG1hZ25pdHVkZS5cclxuICAgIC8vIFRoZSBsaW1pdCBvbiB0aGUgdmFsdWUgb2YgYHRvRXhwTmVnYCwgYHRvRXhwUG9zYCwgYG1pbkVgIGFuZCBgbWF4RWAuXHJcbiAgdmFyIEVYUF9MSU1JVCA9IDllMTUsICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOWUxNVxyXG5cclxuICAgIC8vIFRoZSBsaW1pdCBvbiB0aGUgdmFsdWUgb2YgYHByZWNpc2lvbmAsIGFuZCBvbiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGFyZ3VtZW50IHRvXHJcbiAgICAvLyBgdG9EZWNpbWFsUGxhY2VzYCwgYHRvRXhwb25lbnRpYWxgLCBgdG9GaXhlZGAsIGB0b1ByZWNpc2lvbmAgYW5kIGB0b1NpZ25pZmljYW50RGlnaXRzYC5cclxuICAgIE1BWF9ESUdJVFMgPSAxZTksICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byAxZTlcclxuXHJcbiAgICAvLyBCYXNlIGNvbnZlcnNpb24gYWxwaGFiZXQuXHJcbiAgICBOVU1FUkFMUyA9ICcwMTIzNDU2Nzg5YWJjZGVmJyxcclxuXHJcbiAgICAvLyBUaGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgMTAgKDEwMjUgZGlnaXRzKS5cclxuICAgIExOMTAgPSAnMi4zMDI1ODUwOTI5OTQwNDU2ODQwMTc5OTE0NTQ2ODQzNjQyMDc2MDExMDE0ODg2Mjg3NzI5NzYwMzMzMjc5MDA5Njc1NzI2MDk2NzczNTI0ODAyMzU5OTcyMDUwODk1OTgyOTgzNDE5Njc3ODQwNDIyODYyNDg2MzM0MDk1MjU0NjUwODI4MDY3NTY2NjYyODczNjkwOTg3ODE2ODk0ODI5MDcyMDgzMjU1NTQ2ODA4NDM3OTk4OTQ4MjYyMzMxOTg1MjgzOTM1MDUzMDg5NjUzNzc3MzI2Mjg4NDYxNjMzNjYyMjIyODc2OTgyMTk4ODY3NDY1NDM2Njc0NzQ0MDQyNDMyNzQzNjUxNTUwNDg5MzQzMTQ5MzkzOTE0Nzk2MTk0MDQ0MDAyMjIxMDUxMDE3MTQxNzQ4MDAzNjg4MDg0MDEyNjQ3MDgwNjg1NTY3NzQzMjE2MjI4MzU1MjIwMTE0ODA0NjYzNzE1NjU5MTIxMzczNDUwNzQ3ODU2OTQ3NjgzNDYzNjE2NzkyMTAxODA2NDQ1MDcwNjQ4MDAwMjc3NTAyNjg0OTE2NzQ2NTUwNTg2ODU2OTM1NjczNDIwNjcwNTgxMTM2NDI5MjI0NTU0NDA1NzU4OTI1NzI0MjA4MjQxMzE0Njk1Njg5MDE2NzU4OTQwMjU2Nzc2MzExMzU2OTE5MjkyMDMzMzc2NTg3MTQxNjYwMjMwMTA1NzAzMDg5NjM0NTcyMDc1NDQwMzcwODQ3NDY5OTQwMTY4MjY5MjgyODA4NDgxMTg0Mjg5MzE0ODQ4NTI0OTQ4NjQ0ODcxOTI3ODA5Njc2MjcxMjc1Nzc1Mzk3MDI3NjY4NjA1OTUyNDk2NzE2Njc0MTgzNDg1NzA0NDIyNTA3MTk3OTY1MDA0NzE0OTUxMDUwNDkyMjE0Nzc2NTY3NjM2OTM4NjYyOTc2OTc5NTIyMTEwNzE4MjY0NTQ5NzM0NzcyNjYyNDI1NzA5NDI5MzIyNTgyNzk4NTAyNTg1NTA5Nzg1MjY1MzgzMjA3NjA2NzI2MzE3MTY0MzA5NTA1OTk1MDg3ODA3NTIzNzEwMzMzMTAxMTk3ODU3NTQ3MzMxNTQxNDIxODA4NDI3NTQzODYzNTkxNzc4MTE3MDU0MzA5ODI3NDgyMzg1MDQ1NjQ4MDE5MDk1NjEwMjk5MjkxODI0MzE4MjM3NTI1MzU3NzA5NzUwNTM5NTY1MTg3Njk3NTEwMzc0OTcwODg4NjkyMTgwMjA1MTg5MzM5NTA3MjM4NTM5MjA1MTQ0NjM0MTk3MjY1Mjg3Mjg2OTY1MTEwODYyNTcxNDkyMTk4ODQ5OTc4NzQ4ODczNzcxMzQ1Njg2MjA5MTY3MDU4JyxcclxuXHJcbiAgICAvLyBQaSAoMTAyNSBkaWdpdHMpLlxyXG4gICAgUEkgPSAnMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1MDI4ODQxOTcxNjkzOTkzNzUxMDU4MjA5NzQ5NDQ1OTIzMDc4MTY0MDYyODYyMDg5OTg2MjgwMzQ4MjUzNDIxMTcwNjc5ODIxNDgwODY1MTMyODIzMDY2NDcwOTM4NDQ2MDk1NTA1ODIyMzE3MjUzNTk0MDgxMjg0ODExMTc0NTAyODQxMDI3MDE5Mzg1MjExMDU1NTk2NDQ2MjI5NDg5NTQ5MzAzODE5NjQ0Mjg4MTA5NzU2NjU5MzM0NDYxMjg0NzU2NDgyMzM3ODY3ODMxNjUyNzEyMDE5MDkxNDU2NDg1NjY5MjM0NjAzNDg2MTA0NTQzMjY2NDgyMTMzOTM2MDcyNjAyNDkxNDEyNzM3MjQ1ODcwMDY2MDYzMTU1ODgxNzQ4ODE1MjA5MjA5NjI4MjkyNTQwOTE3MTUzNjQzNjc4OTI1OTAzNjAwMTEzMzA1MzA1NDg4MjA0NjY1MjEzODQxNDY5NTE5NDE1MTE2MDk0MzMwNTcyNzAzNjU3NTk1OTE5NTMwOTIxODYxMTczODE5MzI2MTE3OTMxMDUxMTg1NDgwNzQ0NjIzNzk5NjI3NDk1NjczNTE4ODU3NTI3MjQ4OTEyMjc5MzgxODMwMTE5NDkxMjk4MzM2NzMzNjI0NDA2NTY2NDMwODYwMjEzOTQ5NDYzOTUyMjQ3MzcxOTA3MDIxNzk4NjA5NDM3MDI3NzA1MzkyMTcxNzYyOTMxNzY3NTIzODQ2NzQ4MTg0Njc2Njk0MDUxMzIwMDA1NjgxMjcxNDUyNjM1NjA4Mjc3ODU3NzEzNDI3NTc3ODk2MDkxNzM2MzcxNzg3MjE0Njg0NDA5MDEyMjQ5NTM0MzAxNDY1NDk1ODUzNzEwNTA3OTIyNzk2ODkyNTg5MjM1NDIwMTk5NTYxMTIxMjkwMjE5NjA4NjQwMzQ0MTgxNTk4MTM2Mjk3NzQ3NzEzMDk5NjA1MTg3MDcyMTEzNDk5OTk5OTgzNzI5NzgwNDk5NTEwNTk3MzE3MzI4MTYwOTYzMTg1OTUwMjQ0NTk0NTUzNDY5MDgzMDI2NDI1MjIzMDgyNTMzNDQ2ODUwMzUyNjE5MzExODgxNzEwMTAwMDMxMzc4Mzg3NTI4ODY1ODc1MzMyMDgzODE0MjA2MTcxNzc2NjkxNDczMDM1OTgyNTM0OTA0Mjg3NTU0Njg3MzExNTk1NjI4NjM4ODIzNTM3ODc1OTM3NTE5NTc3ODE4NTc3ODA1MzIxNzEyMjY4MDY2MTMwMDE5Mjc4NzY2MTExOTU5MDkyMTY0MjAxOTg5MzgwOTUyNTcyMDEwNjU0ODU4NjMyNzg5JyxcclxuXHJcblxyXG4gICAgLy8gVGhlIGluaXRpYWwgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIG9mIHRoZSBEZWNpbWFsIGNvbnN0cnVjdG9yLlxyXG4gICAgREVGQVVMVFMgPSB7XHJcblxyXG4gICAgICAvLyBUaGVzZSB2YWx1ZXMgbXVzdCBiZSBpbnRlZ2VycyB3aXRoaW4gdGhlIHN0YXRlZCByYW5nZXMgKGluY2x1c2l2ZSkuXHJcbiAgICAgIC8vIE1vc3Qgb2YgdGhlc2UgdmFsdWVzIGNhbiBiZSBjaGFuZ2VkIGF0IHJ1bi10aW1lIHVzaW5nIHRoZSBgRGVjaW1hbC5jb25maWdgIG1ldGhvZC5cclxuXHJcbiAgICAgIC8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzaWduaWZpY2FudCBkaWdpdHMgb2YgdGhlIHJlc3VsdCBvZiBhIGNhbGN1bGF0aW9uIG9yIGJhc2UgY29udmVyc2lvbi5cclxuICAgICAgLy8gRS5nLiBgRGVjaW1hbC5jb25maWcoeyBwcmVjaXNpb246IDIwIH0pO2BcclxuICAgICAgcHJlY2lzaW9uOiAyMCwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSB0byBNQVhfRElHSVRTXHJcblxyXG4gICAgICAvLyBUaGUgcm91bmRpbmcgbW9kZSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gYHByZWNpc2lvbmAuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIFJPVU5EX1VQICAgICAgICAgMCBBd2F5IGZyb20gemVyby5cclxuICAgICAgLy8gUk9VTkRfRE9XTiAgICAgICAxIFRvd2FyZHMgemVyby5cclxuICAgICAgLy8gUk9VTkRfQ0VJTCAgICAgICAyIFRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBST1VORF9GTE9PUiAgICAgIDMgVG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgIC8vIFJPVU5EX0hBTEZfVVAgICAgNCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdXAuXHJcbiAgICAgIC8vIFJPVU5EX0hBTEZfRE9XTiAgNSBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgZG93bi5cclxuICAgICAgLy8gUk9VTkRfSEFMRl9FVkVOICA2IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIGV2ZW4gbmVpZ2hib3VyLlxyXG4gICAgICAvLyBST1VORF9IQUxGX0NFSUwgIDcgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBST1VORF9IQUxGX0ZMT09SIDggVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgLUluZmluaXR5LlxyXG4gICAgICAvL1xyXG4gICAgICAvLyBFLmcuXHJcbiAgICAgIC8vIGBEZWNpbWFsLnJvdW5kaW5nID0gNDtgXHJcbiAgICAgIC8vIGBEZWNpbWFsLnJvdW5kaW5nID0gRGVjaW1hbC5ST1VORF9IQUxGX1VQO2BcclxuICAgICAgcm91bmRpbmc6IDQsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byA4XHJcblxyXG4gICAgICAvLyBUaGUgbW9kdWxvIG1vZGUgdXNlZCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBtb2R1bHVzOiBhIG1vZCBuLlxyXG4gICAgICAvLyBUaGUgcXVvdGllbnQgKHEgPSBhIC8gbikgaXMgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcm91bmRpbmcgbW9kZS5cclxuICAgICAgLy8gVGhlIHJlbWFpbmRlciAocikgaXMgY2FsY3VsYXRlZCBhczogciA9IGEgLSBuICogcS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVVAgICAgICAgICAwIFRoZSByZW1haW5kZXIgaXMgcG9zaXRpdmUgaWYgdGhlIGRpdmlkZW5kIGlzIG5lZ2F0aXZlLCBlbHNlIGlzIG5lZ2F0aXZlLlxyXG4gICAgICAvLyBET1dOICAgICAgIDEgVGhlIHJlbWFpbmRlciBoYXMgdGhlIHNhbWUgc2lnbiBhcyB0aGUgZGl2aWRlbmQgKEphdmFTY3JpcHQgJSkuXHJcbiAgICAgIC8vIEZMT09SICAgICAgMyBUaGUgcmVtYWluZGVyIGhhcyB0aGUgc2FtZSBzaWduIGFzIHRoZSBkaXZpc29yIChQeXRob24gJSkuXHJcbiAgICAgIC8vIEhBTEZfRVZFTiAgNiBUaGUgSUVFRSA3NTQgcmVtYWluZGVyIGZ1bmN0aW9uLlxyXG4gICAgICAvLyBFVUNMSUQgICAgIDkgRXVjbGlkaWFuIGRpdmlzaW9uLiBxID0gc2lnbihuKSAqIGZsb29yKGEgLyBhYnMobikpLiBBbHdheXMgcG9zaXRpdmUuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIFRydW5jYXRlZCBkaXZpc2lvbiAoMSksIGZsb29yZWQgZGl2aXNpb24gKDMpLCB0aGUgSUVFRSA3NTQgcmVtYWluZGVyICg2KSwgYW5kIEV1Y2xpZGlhblxyXG4gICAgICAvLyBkaXZpc2lvbiAoOSkgYXJlIGNvbW1vbmx5IHVzZWQgZm9yIHRoZSBtb2R1bHVzIG9wZXJhdGlvbi4gVGhlIG90aGVyIHJvdW5kaW5nIG1vZGVzIGNhbiBhbHNvXHJcbiAgICAgIC8vIGJlIHVzZWQsIGJ1dCB0aGV5IG1heSBub3QgZ2l2ZSB1c2VmdWwgcmVzdWx0cy5cclxuICAgICAgbW9kdWxvOiAxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byA5XHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGJlbmVhdGggd2hpY2ggYHRvU3RyaW5nYCByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAgICAvLyBKYXZhU2NyaXB0IG51bWJlcnM6IC03XHJcbiAgICAgIHRvRXhwTmVnOiAtNywgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gLUVYUF9MSU1JVFxyXG5cclxuICAgICAgLy8gVGhlIGV4cG9uZW50IHZhbHVlIGF0IGFuZCBhYm92ZSB3aGljaCBgdG9TdHJpbmdgIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgIC8vIEphdmFTY3JpcHQgbnVtYmVyczogMjFcclxuICAgICAgdG9FeHBQb3M6ICAyMSwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBFWFBfTElNSVRcclxuXHJcbiAgICAgIC8vIFRoZSBtaW5pbXVtIGV4cG9uZW50IHZhbHVlLCBiZW5lYXRoIHdoaWNoIHVuZGVyZmxvdyB0byB6ZXJvIG9jY3Vycy5cclxuICAgICAgLy8gSmF2YVNjcmlwdCBudW1iZXJzOiAtMzI0ICAoNWUtMzI0KVxyXG4gICAgICBtaW5FOiAtRVhQX0xJTUlULCAgICAgICAgICAgICAgICAgICAgICAvLyAtMSB0byAtRVhQX0xJTUlUXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBleHBvbmVudCB2YWx1ZSwgYWJvdmUgd2hpY2ggb3ZlcmZsb3cgdG8gSW5maW5pdHkgb2NjdXJzLlxyXG4gICAgICAvLyBKYXZhU2NyaXB0IG51bWJlcnM6IDMwOCAgKDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KVxyXG4gICAgICBtYXhFOiBFWFBfTElNSVQsICAgICAgICAgICAgICAgICAgICAgICAvLyAxIHRvIEVYUF9MSU1JVFxyXG5cclxuICAgICAgLy8gV2hldGhlciB0byB1c2UgY3J5cHRvZ3JhcGhpY2FsbHktc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiwgaWYgYXZhaWxhYmxlLlxyXG4gICAgICBjcnlwdG86IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVlL2ZhbHNlXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIE9GIEVESVRBQkxFIERFRkFVTFRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG4gICAgRGVjaW1hbCwgaW5leGFjdCwgbm9Db25mbGljdCwgcXVhZHJhbnQsXHJcbiAgICBleHRlcm5hbCA9IHRydWUsXHJcblxyXG4gICAgZGVjaW1hbEVycm9yID0gJ1tEZWNpbWFsRXJyb3JdICcsXHJcbiAgICBpbnZhbGlkQXJndW1lbnQgPSBkZWNpbWFsRXJyb3IgKyAnSW52YWxpZCBhcmd1bWVudDogJyxcclxuICAgIHByZWNpc2lvbkxpbWl0RXhjZWVkZWQgPSBkZWNpbWFsRXJyb3IgKyAnUHJlY2lzaW9uIGxpbWl0IGV4Y2VlZGVkJyxcclxuICAgIGNyeXB0b1VuYXZhaWxhYmxlID0gZGVjaW1hbEVycm9yICsgJ2NyeXB0byB1bmF2YWlsYWJsZScsXHJcbiAgICB0YWcgPSAnW29iamVjdCBEZWNpbWFsXScsXHJcblxyXG4gICAgbWF0aGZsb29yID0gTWF0aC5mbG9vcixcclxuICAgIG1hdGhwb3cgPSBNYXRoLnBvdyxcclxuXHJcbiAgICBpc0JpbmFyeSA9IC9eMGIoWzAxXSsoXFwuWzAxXSopP3xcXC5bMDFdKykocFsrLV0/XFxkKyk/JC9pLFxyXG4gICAgaXNIZXggPSAvXjB4KFswLTlhLWZdKyhcXC5bMC05YS1mXSopP3xcXC5bMC05YS1mXSspKHBbKy1dP1xcZCspPyQvaSxcclxuICAgIGlzT2N0YWwgPSAvXjBvKFswLTddKyhcXC5bMC03XSopP3xcXC5bMC03XSspKHBbKy1dP1xcZCspPyQvaSxcclxuICAgIGlzRGVjaW1hbCA9IC9eKFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKGVbKy1dP1xcZCspPyQvaSxcclxuXHJcbiAgICBCQVNFID0gMWU3LFxyXG4gICAgTE9HX0JBU0UgPSA3LFxyXG4gICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXHJcblxyXG4gICAgTE4xMF9QUkVDSVNJT04gPSBMTjEwLmxlbmd0aCAtIDEsXHJcbiAgICBQSV9QUkVDSVNJT04gPSBQSS5sZW5ndGggLSAxLFxyXG5cclxuICAgIC8vIERlY2ltYWwucHJvdG90eXBlIG9iamVjdFxyXG4gICAgUCA9IHsgdG9TdHJpbmdUYWc6IHRhZyB9O1xyXG5cclxuXHJcbiAgLy8gRGVjaW1hbCBwcm90b3R5cGUgbWV0aG9kc1xyXG5cclxuXHJcbiAgLypcclxuICAgKiAgYWJzb2x1dGVWYWx1ZSAgICAgICAgICAgICBhYnNcclxuICAgKiAgY2VpbFxyXG4gICAqICBjbGFtcGVkVG8gICAgICAgICAgICAgICAgIGNsYW1wXHJcbiAgICogIGNvbXBhcmVkVG8gICAgICAgICAgICAgICAgY21wXHJcbiAgICogIGNvc2luZSAgICAgICAgICAgICAgICAgICAgY29zXHJcbiAgICogIGN1YmVSb290ICAgICAgICAgICAgICAgICAgY2JydFxyXG4gICAqICBkZWNpbWFsUGxhY2VzICAgICAgICAgICAgIGRwXHJcbiAgICogIGRpdmlkZWRCeSAgICAgICAgICAgICAgICAgZGl2XHJcbiAgICogIGRpdmlkZWRUb0ludGVnZXJCeSAgICAgICAgZGl2VG9JbnRcclxuICAgKiAgZXF1YWxzICAgICAgICAgICAgICAgICAgICBlcVxyXG4gICAqICBmbG9vclxyXG4gICAqICBncmVhdGVyVGhhbiAgICAgICAgICAgICAgIGd0XHJcbiAgICogIGdyZWF0ZXJUaGFuT3JFcXVhbFRvICAgICAgZ3RlXHJcbiAgICogIGh5cGVyYm9saWNDb3NpbmUgICAgICAgICAgY29zaFxyXG4gICAqICBoeXBlcmJvbGljU2luZSAgICAgICAgICAgIHNpbmhcclxuICAgKiAgaHlwZXJib2xpY1RhbmdlbnQgICAgICAgICB0YW5oXHJcbiAgICogIGludmVyc2VDb3NpbmUgICAgICAgICAgICAgYWNvc1xyXG4gICAqICBpbnZlcnNlSHlwZXJib2xpY0Nvc2luZSAgIGFjb3NoXHJcbiAgICogIGludmVyc2VIeXBlcmJvbGljU2luZSAgICAgYXNpbmhcclxuICAgKiAgaW52ZXJzZUh5cGVyYm9saWNUYW5nZW50ICBhdGFuaFxyXG4gICAqICBpbnZlcnNlU2luZSAgICAgICAgICAgICAgIGFzaW5cclxuICAgKiAgaW52ZXJzZVRhbmdlbnQgICAgICAgICAgICBhdGFuXHJcbiAgICogIGlzRmluaXRlXHJcbiAgICogIGlzSW50ZWdlciAgICAgICAgICAgICAgICAgaXNJbnRcclxuICAgKiAgaXNOYU5cclxuICAgKiAgaXNOZWdhdGl2ZSAgICAgICAgICAgICAgICBpc05lZ1xyXG4gICAqICBpc1Bvc2l0aXZlICAgICAgICAgICAgICAgIGlzUG9zXHJcbiAgICogIGlzWmVyb1xyXG4gICAqICBsZXNzVGhhbiAgICAgICAgICAgICAgICAgIGx0XHJcbiAgICogIGxlc3NUaGFuT3JFcXVhbFRvICAgICAgICAgbHRlXHJcbiAgICogIGxvZ2FyaXRobSAgICAgICAgICAgICAgICAgbG9nXHJcbiAgICogIFttYXhpbXVtXSAgICAgICAgICAgICAgICAgW21heF1cclxuICAgKiAgW21pbmltdW1dICAgICAgICAgICAgICAgICBbbWluXVxyXG4gICAqICBtaW51cyAgICAgICAgICAgICAgICAgICAgIHN1YlxyXG4gICAqICBtb2R1bG8gICAgICAgICAgICAgICAgICAgIG1vZFxyXG4gICAqICBuYXR1cmFsRXhwb25lbnRpYWwgICAgICAgIGV4cFxyXG4gICAqICBuYXR1cmFsTG9nYXJpdGhtICAgICAgICAgIGxuXHJcbiAgICogIG5lZ2F0ZWQgICAgICAgICAgICAgICAgICAgbmVnXHJcbiAgICogIHBsdXMgICAgICAgICAgICAgICAgICAgICAgYWRkXHJcbiAgICogIHByZWNpc2lvbiAgICAgICAgICAgICAgICAgc2RcclxuICAgKiAgcm91bmRcclxuICAgKiAgc2luZSAgICAgICAgICAgICAgICAgICAgICBzaW5cclxuICAgKiAgc3F1YXJlUm9vdCAgICAgICAgICAgICAgICBzcXJ0XHJcbiAgICogIHRhbmdlbnQgICAgICAgICAgICAgICAgICAgdGFuXHJcbiAgICogIHRpbWVzICAgICAgICAgICAgICAgICAgICAgbXVsXHJcbiAgICogIHRvQmluYXJ5XHJcbiAgICogIHRvRGVjaW1hbFBsYWNlcyAgICAgICAgICAgdG9EUFxyXG4gICAqICB0b0V4cG9uZW50aWFsXHJcbiAgICogIHRvRml4ZWRcclxuICAgKiAgdG9GcmFjdGlvblxyXG4gICAqICB0b0hleGFkZWNpbWFsICAgICAgICAgICAgIHRvSGV4XHJcbiAgICogIHRvTmVhcmVzdFxyXG4gICAqICB0b051bWJlclxyXG4gICAqICB0b09jdGFsXHJcbiAgICogIHRvUG93ZXIgICAgICAgICAgICAgICAgICAgcG93XHJcbiAgICogIHRvUHJlY2lzaW9uXHJcbiAgICogIHRvU2lnbmlmaWNhbnREaWdpdHMgICAgICAgdG9TRFxyXG4gICAqICB0b1N0cmluZ1xyXG4gICAqICB0cnVuY2F0ZWQgICAgICAgICAgICAgICAgIHRydW5jXHJcbiAgICogIHZhbHVlT2YgICAgICAgICAgICAgICAgICAgdG9KU09OXHJcbiAgICovXHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmFic29sdXRlVmFsdWUgPSBQLmFicyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XHJcbiAgICBpZiAoeC5zIDwgMCkgeC5zID0gMTtcclxuICAgIHJldHVybiBmaW5hbGlzZSh4KTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHJvdW5kZWQgdG8gYSB3aG9sZSBudW1iZXIgaW4gdGhlXHJcbiAgICogZGlyZWN0aW9uIG9mIHBvc2l0aXZlIEluZmluaXR5LlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5jZWlsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGZpbmFsaXNlKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLCB0aGlzLmUgKyAxLCAyKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGNsYW1wZWQgdG8gdGhlIHJhbmdlXHJcbiAgICogZGVsaW5lYXRlZCBieSBgbWluYCBhbmQgYG1heGAuXHJcbiAgICpcclxuICAgKiBtaW4ge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKiBtYXgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuY2xhbXBlZFRvID0gUC5jbGFtcCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG4gICAgdmFyIGssXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuICAgIG1pbiA9IG5ldyBDdG9yKG1pbik7XHJcbiAgICBtYXggPSBuZXcgQ3RvcihtYXgpO1xyXG4gICAgaWYgKCFtaW4ucyB8fCAhbWF4LnMpIHJldHVybiBuZXcgQ3RvcihOYU4pO1xyXG4gICAgaWYgKG1pbi5ndChtYXgpKSB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBtYXgpO1xyXG4gICAgayA9IHguY21wKG1pbik7XHJcbiAgICByZXR1cm4gayA8IDAgPyBtaW4gOiB4LmNtcChtYXgpID4gMCA/IG1heCA6IG5ldyBDdG9yKHgpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVyblxyXG4gICAqICAgMSAgICBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgYHlgLFxyXG4gICAqICAtMSAgICBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGxlc3MgdGhhbiB0aGUgdmFsdWUgb2YgYHlgLFxyXG4gICAqICAgMCAgICBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUsXHJcbiAgICogICBOYU4gIGlmIHRoZSB2YWx1ZSBvZiBlaXRoZXIgRGVjaW1hbCBpcyBOYU4uXHJcbiAgICpcclxuICAgKi9cclxuICBQLmNvbXBhcmVkVG8gPSBQLmNtcCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgaSwgaiwgeGRMLCB5ZEwsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICB4ZCA9IHguZCxcclxuICAgICAgeWQgPSAoeSA9IG5ldyB4LmNvbnN0cnVjdG9yKHkpKS5kLFxyXG4gICAgICB4cyA9IHgucyxcclxuICAgICAgeXMgPSB5LnM7XHJcblxyXG4gICAgLy8gRWl0aGVyIE5hTiBvciDCsUluZmluaXR5P1xyXG4gICAgaWYgKCF4ZCB8fCAheWQpIHtcclxuICAgICAgcmV0dXJuICF4cyB8fCAheXMgPyBOYU4gOiB4cyAhPT0geXMgPyB4cyA6IHhkID09PSB5ZCA/IDAgOiAheGQgXiB4cyA8IDAgPyAxIDogLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRWl0aGVyIHplcm8/XHJcbiAgICBpZiAoIXhkWzBdIHx8ICF5ZFswXSkgcmV0dXJuIHhkWzBdID8geHMgOiB5ZFswXSA/IC15cyA6IDA7XHJcblxyXG4gICAgLy8gU2lnbnMgZGlmZmVyP1xyXG4gICAgaWYgKHhzICE9PSB5cykgcmV0dXJuIHhzO1xyXG5cclxuICAgIC8vIENvbXBhcmUgZXhwb25lbnRzLlxyXG4gICAgaWYgKHguZSAhPT0geS5lKSByZXR1cm4geC5lID4geS5lIF4geHMgPCAwID8gMSA6IC0xO1xyXG5cclxuICAgIHhkTCA9IHhkLmxlbmd0aDtcclxuICAgIHlkTCA9IHlkLmxlbmd0aDtcclxuXHJcbiAgICAvLyBDb21wYXJlIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gICAgZm9yIChpID0gMCwgaiA9IHhkTCA8IHlkTCA/IHhkTCA6IHlkTDsgaSA8IGo7ICsraSkge1xyXG4gICAgICBpZiAoeGRbaV0gIT09IHlkW2ldKSByZXR1cm4geGRbaV0gPiB5ZFtpXSBeIHhzIDwgMCA/IDEgOiAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb21wYXJlIGxlbmd0aHMuXHJcbiAgICByZXR1cm4geGRMID09PSB5ZEwgPyAwIDogeGRMID4geWRMIF4geHMgPCAwID8gMSA6IC0xO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBjb3NpbmUgb2YgdGhlIHZhbHVlIGluIHJhZGlhbnMgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogRG9tYWluOiBbLUluZmluaXR5LCBJbmZpbml0eV1cclxuICAgKiBSYW5nZTogWy0xLCAxXVxyXG4gICAqXHJcbiAgICogY29zKDApICAgICAgICAgPSAxXHJcbiAgICogY29zKC0wKSAgICAgICAgPSAxXHJcbiAgICogY29zKEluZmluaXR5KSAgPSBOYU5cclxuICAgKiBjb3MoLUluZmluaXR5KSA9IE5hTlxyXG4gICAqIGNvcyhOYU4pICAgICAgID0gTmFOXHJcbiAgICpcclxuICAgKi9cclxuICBQLmNvc2luZSA9IFAuY29zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHByLCBybSxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmICgheC5kKSByZXR1cm4gbmV3IEN0b3IoTmFOKTtcclxuXHJcbiAgICAvLyBjb3MoMCkgPSBjb3MoLTApID0gMVxyXG4gICAgaWYgKCF4LmRbMF0pIHJldHVybiBuZXcgQ3RvcigxKTtcclxuXHJcbiAgICBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSBwciArIE1hdGgubWF4KHguZSwgeC5zZCgpKSArIExPR19CQVNFO1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcblxyXG4gICAgeCA9IGNvc2luZShDdG9yLCB0b0xlc3NUaGFuSGFsZlBpKEN0b3IsIHgpKTtcclxuXHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByO1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IHJtO1xyXG5cclxuICAgIHJldHVybiBmaW5hbGlzZShxdWFkcmFudCA9PSAyIHx8IHF1YWRyYW50ID09IDMgPyB4Lm5lZygpIDogeCwgcHIsIHJtLCB0cnVlKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBjdWJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCwgcm91bmRlZCB0b1xyXG4gICAqIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiAgY2JydCgwKSAgPSAgMFxyXG4gICAqICBjYnJ0KC0wKSA9IC0wXHJcbiAgICogIGNicnQoMSkgID0gIDFcclxuICAgKiAgY2JydCgtMSkgPSAtMVxyXG4gICAqICBjYnJ0KE4pICA9ICBOXHJcbiAgICogIGNicnQoLUkpID0gLUlcclxuICAgKiAgY2JydChJKSAgPSAgSVxyXG4gICAqXHJcbiAgICogTWF0aC5jYnJ0KHgpID0gKHggPCAwID8gLU1hdGgucG93KC14LCAxLzMpIDogTWF0aC5wb3coeCwgMS8zKSlcclxuICAgKlxyXG4gICAqL1xyXG4gIFAuY3ViZVJvb3QgPSBQLmNicnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZSwgbSwgbiwgciwgcmVwLCBzLCBzZCwgdCwgdDMsIHQzcGx1c3gsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSB8fCB4LmlzWmVybygpKSByZXR1cm4gbmV3IEN0b3IoeCk7XHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEluaXRpYWwgZXN0aW1hdGUuXHJcbiAgICBzID0geC5zICogbWF0aHBvdyh4LnMgKiB4LCAxIC8gMyk7XHJcblxyXG4gICAgIC8vIE1hdGguY2JydCB1bmRlcmZsb3cvb3ZlcmZsb3c/XHJcbiAgICAgLy8gUGFzcyB4IHRvIE1hdGgucG93IGFzIGludGVnZXIsIHRoZW4gYWRqdXN0IHRoZSBleHBvbmVudCBvZiB0aGUgcmVzdWx0LlxyXG4gICAgaWYgKCFzIHx8IE1hdGguYWJzKHMpID09IDEgLyAwKSB7XHJcbiAgICAgIG4gPSBkaWdpdHNUb1N0cmluZyh4LmQpO1xyXG4gICAgICBlID0geC5lO1xyXG5cclxuICAgICAgLy8gQWRqdXN0IG4gZXhwb25lbnQgc28gaXQgaXMgYSBtdWx0aXBsZSBvZiAzIGF3YXkgZnJvbSB4IGV4cG9uZW50LlxyXG4gICAgICBpZiAocyA9IChlIC0gbi5sZW5ndGggKyAxKSAlIDMpIG4gKz0gKHMgPT0gMSB8fCBzID09IC0yID8gJzAnIDogJzAwJyk7XHJcbiAgICAgIHMgPSBtYXRocG93KG4sIDEgLyAzKTtcclxuXHJcbiAgICAgIC8vIFJhcmVseSwgZSBtYXkgYmUgb25lIGxlc3MgdGhhbiB0aGUgcmVzdWx0IGV4cG9uZW50IHZhbHVlLlxyXG4gICAgICBlID0gbWF0aGZsb29yKChlICsgMSkgLyAzKSAtIChlICUgMyA9PSAoZSA8IDAgPyAtMSA6IDIpKTtcclxuXHJcbiAgICAgIGlmIChzID09IDEgLyAwKSB7XHJcbiAgICAgICAgbiA9ICc1ZScgKyBlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG4gPSBzLnRvRXhwb25lbnRpYWwoKTtcclxuICAgICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoJ2UnKSArIDEpICsgZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgciA9IG5ldyBDdG9yKG4pO1xyXG4gICAgICByLnMgPSB4LnM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByID0gbmV3IEN0b3Iocy50b1N0cmluZygpKTtcclxuICAgIH1cclxuXHJcbiAgICBzZCA9IChlID0gQ3Rvci5wcmVjaXNpb24pICsgMztcclxuXHJcbiAgICAvLyBIYWxsZXkncyBtZXRob2QuXHJcbiAgICAvLyBUT0RPPyBDb21wYXJlIE5ld3RvbidzIG1ldGhvZC5cclxuICAgIGZvciAoOzspIHtcclxuICAgICAgdCA9IHI7XHJcbiAgICAgIHQzID0gdC50aW1lcyh0KS50aW1lcyh0KTtcclxuICAgICAgdDNwbHVzeCA9IHQzLnBsdXMoeCk7XHJcbiAgICAgIHIgPSBkaXZpZGUodDNwbHVzeC5wbHVzKHgpLnRpbWVzKHQpLCB0M3BsdXN4LnBsdXModDMpLCBzZCArIDIsIDEpO1xyXG5cclxuICAgICAgLy8gVE9ETz8gUmVwbGFjZSB3aXRoIGZvci1sb29wIGFuZCBjaGVja1JvdW5kaW5nRGlnaXRzLlxyXG4gICAgICBpZiAoZGlnaXRzVG9TdHJpbmcodC5kKS5zbGljZSgwLCBzZCkgPT09IChuID0gZGlnaXRzVG9TdHJpbmcoci5kKSkuc2xpY2UoMCwgc2QpKSB7XHJcbiAgICAgICAgbiA9IG4uc2xpY2Uoc2QgLSAzLCBzZCArIDEpO1xyXG5cclxuICAgICAgICAvLyBUaGUgNHRoIHJvdW5kaW5nIGRpZ2l0IG1heSBiZSBpbiBlcnJvciBieSAtMSBzbyBpZiB0aGUgNCByb3VuZGluZyBkaWdpdHMgYXJlIDk5OTkgb3IgNDk5OVxyXG4gICAgICAgIC8vICwgaS5lLiBhcHByb2FjaGluZyBhIHJvdW5kaW5nIGJvdW5kYXJ5LCBjb250aW51ZSB0aGUgaXRlcmF0aW9uLlxyXG4gICAgICAgIGlmIChuID09ICc5OTk5JyB8fCAhcmVwICYmIG4gPT0gJzQ5OTknKSB7XHJcblxyXG4gICAgICAgICAgLy8gT24gdGhlIGZpcnN0IGl0ZXJhdGlvbiBvbmx5LCBjaGVjayB0byBzZWUgaWYgcm91bmRpbmcgdXAgZ2l2ZXMgdGhlIGV4YWN0IHJlc3VsdCBhcyB0aGVcclxuICAgICAgICAgIC8vIG5pbmVzIG1heSBpbmZpbml0ZWx5IHJlcGVhdC5cclxuICAgICAgICAgIGlmICghcmVwKSB7XHJcbiAgICAgICAgICAgIGZpbmFsaXNlKHQsIGUgKyAxLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0LnRpbWVzKHQpLnRpbWVzKHQpLmVxKHgpKSB7XHJcbiAgICAgICAgICAgICAgciA9IHQ7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZCArPSA0O1xyXG4gICAgICAgICAgcmVwID0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vIElmIHRoZSByb3VuZGluZyBkaWdpdHMgYXJlIG51bGwsIDB7MCw0fSBvciA1MHswLDN9LCBjaGVjayBmb3IgYW4gZXhhY3QgcmVzdWx0LlxyXG4gICAgICAgICAgLy8gSWYgbm90LCB0aGVuIHRoZXJlIGFyZSBmdXJ0aGVyIGRpZ2l0cyBhbmQgbSB3aWxsIGJlIHRydXRoeS5cclxuICAgICAgICAgIGlmICghK24gfHwgIStuLnNsaWNlKDEpICYmIG4uY2hhckF0KDApID09ICc1Jykge1xyXG5cclxuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgdG8gdGhlIGZpcnN0IHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgICAgICBmaW5hbGlzZShyLCBlICsgMSwgMSk7XHJcbiAgICAgICAgICAgIG0gPSAhci50aW1lcyhyKS50aW1lcyhyKS5lcSh4KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHIsIGUsIEN0b3Iucm91bmRpbmcsIG0pO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmRlY2ltYWxQbGFjZXMgPSBQLmRwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHcsXHJcbiAgICAgIGQgPSB0aGlzLmQsXHJcbiAgICAgIG4gPSBOYU47XHJcblxyXG4gICAgaWYgKGQpIHtcclxuICAgICAgdyA9IGQubGVuZ3RoIC0gMTtcclxuICAgICAgbiA9ICh3IC0gbWF0aGZsb29yKHRoaXMuZSAvIExPR19CQVNFKSkgKiBMT0dfQkFTRTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3Qgd29yZC5cclxuICAgICAgdyA9IGRbd107XHJcbiAgICAgIGlmICh3KSBmb3IgKDsgdyAlIDEwID09IDA7IHcgLz0gMTApIG4tLTtcclxuICAgICAgaWYgKG4gPCAwKSBuID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiAgbiAvIDAgPSBJXHJcbiAgICogIG4gLyBOID0gTlxyXG4gICAqICBuIC8gSSA9IDBcclxuICAgKiAgMCAvIG4gPSAwXHJcbiAgICogIDAgLyAwID0gTlxyXG4gICAqICAwIC8gTiA9IE5cclxuICAgKiAgMCAvIEkgPSAwXHJcbiAgICogIE4gLyBuID0gTlxyXG4gICAqICBOIC8gMCA9IE5cclxuICAgKiAgTiAvIE4gPSBOXHJcbiAgICogIE4gLyBJID0gTlxyXG4gICAqICBJIC8gbiA9IElcclxuICAgKiAgSSAvIDAgPSBJXHJcbiAgICogIEkgLyBOID0gTlxyXG4gICAqICBJIC8gSSA9IE5cclxuICAgKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgZGl2aWRlZCBieSBgeWAsIHJvdW5kZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5kaXZpZGVkQnkgPSBQLmRpdiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICByZXR1cm4gZGl2aWRlKHRoaXMsIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHkpKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgaW50ZWdlciBwYXJ0IG9mIGRpdmlkaW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWxcclxuICAgKiBieSB0aGUgdmFsdWUgb2YgYHlgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmRpdmlkZWRUb0ludGVnZXJCeSA9IFAuZGl2VG9JbnQgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgdmFyIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuICAgIHJldHVybiBmaW5hbGlzZShkaXZpZGUoeCwgbmV3IEN0b3IoeSksIDAsIDEsIDEpLCBDdG9yLnByZWNpc2lvbiwgQ3Rvci5yb3VuZGluZyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBlcXVhbCB0byB0aGUgdmFsdWUgb2YgYHlgLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5lcXVhbHMgPSBQLmVxID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHJldHVybiB0aGlzLmNtcCh5KSA9PT0gMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHJvdW5kZWQgdG8gYSB3aG9sZSBudW1iZXIgaW4gdGhlXHJcbiAgICogZGlyZWN0aW9uIG9mIG5lZ2F0aXZlIEluZmluaXR5LlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5mbG9vciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmaW5hbGlzZShuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSwgdGhpcy5lICsgMSwgMyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBncmVhdGVyIHRoYW4gdGhlIHZhbHVlIG9mIGB5YCwgb3RoZXJ3aXNlIHJldHVyblxyXG4gICAqIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5ncmVhdGVyVGhhbiA9IFAuZ3QgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgcmV0dXJuIHRoaXMuY21wKHkpID4gMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2YgYHlgLFxyXG4gICAqIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmdyZWF0ZXJUaGFuT3JFcXVhbFRvID0gUC5ndGUgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgdmFyIGsgPSB0aGlzLmNtcCh5KTtcclxuICAgIHJldHVybiBrID09IDEgfHwgayA9PT0gMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgaHlwZXJib2xpYyBjb3NpbmUgb2YgdGhlIHZhbHVlIGluIHJhZGlhbnMgb2YgdGhpc1xyXG4gICAqIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFstSW5maW5pdHksIEluZmluaXR5XVxyXG4gICAqIFJhbmdlOiBbMSwgSW5maW5pdHldXHJcbiAgICpcclxuICAgKiBjb3NoKHgpID0gMSArIHheMi8yISArIHheNC80ISArIHheNi82ISArIC4uLlxyXG4gICAqXHJcbiAgICogY29zaCgwKSAgICAgICAgID0gMVxyXG4gICAqIGNvc2goLTApICAgICAgICA9IDFcclxuICAgKiBjb3NoKEluZmluaXR5KSAgPSBJbmZpbml0eVxyXG4gICAqIGNvc2goLUluZmluaXR5KSA9IEluZmluaXR5XHJcbiAgICogY29zaChOYU4pICAgICAgID0gTmFOXHJcbiAgICpcclxuICAgKiAgeCAgICAgICAgdGltZSB0YWtlbiAobXMpICAgcmVzdWx0XHJcbiAgICogMTAwMCAgICAgIDkgICAgICAgICAgICAgICAgIDkuODUwMzU1NTcwMDg1MjM0OTY5NGUrNDMzXHJcbiAgICogMTAwMDAgICAgIDI1ICAgICAgICAgICAgICAgIDQuNDAzNDA5MTEyODMxNDYwNzkzNmUrNDM0MlxyXG4gICAqIDEwMDAwMCAgICAxNzEgICAgICAgICAgICAgICAxLjQwMzMzMTY4MDIxMzA2MTU4OTdlKzQzNDI5XHJcbiAgICogMTAwMDAwMCAgIDM4MTcgICAgICAgICAgICAgIDEuNTE2NjA3Njk4NDAxMDQzNzcyNWUrNDM0Mjk0XHJcbiAgICogMTAwMDAwMDAgIGFiYW5kb25lZCBhZnRlciAyIG1pbnV0ZSB3YWl0XHJcbiAgICpcclxuICAgKiBUT0RPPyBDb21wYXJlIHBlcmZvcm1hbmNlIG9mIGNvc2goeCkgPSAwLjUgKiAoZXhwKHgpICsgZXhwKC14KSlcclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaHlwZXJib2xpY0Nvc2luZSA9IFAuY29zaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBrLCBuLCBwciwgcm0sIGxlbixcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICBvbmUgPSBuZXcgQ3RvcigxKTtcclxuXHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSkgcmV0dXJuIG5ldyBDdG9yKHgucyA/IDEgLyAwIDogTmFOKTtcclxuICAgIGlmICh4LmlzWmVybygpKSByZXR1cm4gb25lO1xyXG5cclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoeC5lLCB4LnNkKCkpICsgNDtcclxuICAgIEN0b3Iucm91bmRpbmcgPSAxO1xyXG4gICAgbGVuID0geC5kLmxlbmd0aDtcclxuXHJcbiAgICAvLyBBcmd1bWVudCByZWR1Y3Rpb246IGNvcyg0eCkgPSAxIC0gOGNvc14yKHgpICsgOGNvc140KHgpICsgMVxyXG4gICAgLy8gaS5lLiBjb3MoeCkgPSAxIC0gY29zXjIoeC80KSg4IC0gOGNvc14yKHgvNCkpXHJcblxyXG4gICAgLy8gRXN0aW1hdGUgdGhlIG9wdGltdW0gbnVtYmVyIG9mIHRpbWVzIHRvIHVzZSB0aGUgYXJndW1lbnQgcmVkdWN0aW9uLlxyXG4gICAgLy8gVE9ETz8gRXN0aW1hdGlvbiByZXVzZWQgZnJvbSBjb3NpbmUoKSBhbmQgbWF5IG5vdCBiZSBvcHRpbWFsIGhlcmUuXHJcbiAgICBpZiAobGVuIDwgMzIpIHtcclxuICAgICAgayA9IE1hdGguY2VpbChsZW4gLyAzKTtcclxuICAgICAgbiA9ICgxIC8gdGlueVBvdyg0LCBrKSkudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGsgPSAxNjtcclxuICAgICAgbiA9ICcyLjMyODMwNjQzNjUzODY5NjI4OTA2MjVlLTEwJztcclxuICAgIH1cclxuXHJcbiAgICB4ID0gdGF5bG9yU2VyaWVzKEN0b3IsIDEsIHgudGltZXMobiksIG5ldyBDdG9yKDEpLCB0cnVlKTtcclxuXHJcbiAgICAvLyBSZXZlcnNlIGFyZ3VtZW50IHJlZHVjdGlvblxyXG4gICAgdmFyIGNvc2gyX3gsXHJcbiAgICAgIGkgPSBrLFxyXG4gICAgICBkOCA9IG5ldyBDdG9yKDgpO1xyXG4gICAgZm9yICg7IGktLTspIHtcclxuICAgICAgY29zaDJfeCA9IHgudGltZXMoeCk7XHJcbiAgICAgIHggPSBvbmUubWludXMoY29zaDJfeC50aW1lcyhkOC5taW51cyhjb3NoMl94LnRpbWVzKGQ4KSkpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmluYWxpc2UoeCwgQ3Rvci5wcmVjaXNpb24gPSBwciwgQ3Rvci5yb3VuZGluZyA9IHJtLCB0cnVlKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgaHlwZXJib2xpYyBzaW5lIG9mIHRoZSB2YWx1ZSBpbiByYWRpYW5zIG9mIHRoaXNcclxuICAgKiBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogRG9tYWluOiBbLUluZmluaXR5LCBJbmZpbml0eV1cclxuICAgKiBSYW5nZTogWy1JbmZpbml0eSwgSW5maW5pdHldXHJcbiAgICpcclxuICAgKiBzaW5oKHgpID0geCArIHheMy8zISArIHheNS81ISArIHheNy83ISArIC4uLlxyXG4gICAqXHJcbiAgICogc2luaCgwKSAgICAgICAgID0gMFxyXG4gICAqIHNpbmgoLTApICAgICAgICA9IC0wXHJcbiAgICogc2luaChJbmZpbml0eSkgID0gSW5maW5pdHlcclxuICAgKiBzaW5oKC1JbmZpbml0eSkgPSAtSW5maW5pdHlcclxuICAgKiBzaW5oKE5hTikgICAgICAgPSBOYU5cclxuICAgKlxyXG4gICAqIHggICAgICAgIHRpbWUgdGFrZW4gKG1zKVxyXG4gICAqIDEwICAgICAgIDIgbXNcclxuICAgKiAxMDAgICAgICA1IG1zXHJcbiAgICogMTAwMCAgICAgMTQgbXNcclxuICAgKiAxMDAwMCAgICA4MiBtc1xyXG4gICAqIDEwMDAwMCAgIDg4NiBtcyAgICAgICAgICAgIDEuNDAzMzMxNjgwMjEzMDYxNTg5N2UrNDM0MjlcclxuICAgKiAyMDAwMDAgICAyNjEzIG1zXHJcbiAgICogMzAwMDAwICAgNTQwNyBtc1xyXG4gICAqIDQwMDAwMCAgIDg4MjQgbXNcclxuICAgKiA1MDAwMDAgICAxMzAyNiBtcyAgICAgICAgICA4LjcwODA2NDM2MTI3MTgwODQxMjllKzIxNzE0NlxyXG4gICAqIDEwMDAwMDAgIDQ4NTQzIG1zXHJcbiAgICpcclxuICAgKiBUT0RPPyBDb21wYXJlIHBlcmZvcm1hbmNlIG9mIHNpbmgoeCkgPSAwLjUgKiAoZXhwKHgpIC0gZXhwKC14KSlcclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaHlwZXJib2xpY1NpbmUgPSBQLnNpbmggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaywgcHIsIHJtLCBsZW4sXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSB8fCB4LmlzWmVybygpKSByZXR1cm4gbmV3IEN0b3IoeCk7XHJcblxyXG4gICAgcHIgPSBDdG9yLnByZWNpc2lvbjtcclxuICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHIgKyBNYXRoLm1heCh4LmUsIHguc2QoKSkgKyA0O1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcbiAgICBsZW4gPSB4LmQubGVuZ3RoO1xyXG5cclxuICAgIGlmIChsZW4gPCAzKSB7XHJcbiAgICAgIHggPSB0YXlsb3JTZXJpZXMoQ3RvciwgMiwgeCwgeCwgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gQWx0ZXJuYXRpdmUgYXJndW1lbnQgcmVkdWN0aW9uOiBzaW5oKDN4KSA9IHNpbmgoeCkoMyArIDRzaW5oXjIoeCkpXHJcbiAgICAgIC8vIGkuZS4gc2luaCh4KSA9IHNpbmgoeC8zKSgzICsgNHNpbmheMih4LzMpKVxyXG4gICAgICAvLyAzIG11bHRpcGxpY2F0aW9ucyBhbmQgMSBhZGRpdGlvblxyXG5cclxuICAgICAgLy8gQXJndW1lbnQgcmVkdWN0aW9uOiBzaW5oKDV4KSA9IHNpbmgoeCkoNSArIHNpbmheMih4KSgyMCArIDE2c2luaF4yKHgpKSlcclxuICAgICAgLy8gaS5lLiBzaW5oKHgpID0gc2luaCh4LzUpKDUgKyBzaW5oXjIoeC81KSgyMCArIDE2c2luaF4yKHgvNSkpKVxyXG4gICAgICAvLyA0IG11bHRpcGxpY2F0aW9ucyBhbmQgMiBhZGRpdGlvbnNcclxuXHJcbiAgICAgIC8vIEVzdGltYXRlIHRoZSBvcHRpbXVtIG51bWJlciBvZiB0aW1lcyB0byB1c2UgdGhlIGFyZ3VtZW50IHJlZHVjdGlvbi5cclxuICAgICAgayA9IDEuNCAqIE1hdGguc3FydChsZW4pO1xyXG4gICAgICBrID0gayA+IDE2ID8gMTYgOiBrIHwgMDtcclxuXHJcbiAgICAgIHggPSB4LnRpbWVzKDEgLyB0aW55UG93KDUsIGspKTtcclxuICAgICAgeCA9IHRheWxvclNlcmllcyhDdG9yLCAyLCB4LCB4LCB0cnVlKTtcclxuXHJcbiAgICAgIC8vIFJldmVyc2UgYXJndW1lbnQgcmVkdWN0aW9uXHJcbiAgICAgIHZhciBzaW5oMl94LFxyXG4gICAgICAgIGQ1ID0gbmV3IEN0b3IoNSksXHJcbiAgICAgICAgZDE2ID0gbmV3IEN0b3IoMTYpLFxyXG4gICAgICAgIGQyMCA9IG5ldyBDdG9yKDIwKTtcclxuICAgICAgZm9yICg7IGstLTspIHtcclxuICAgICAgICBzaW5oMl94ID0geC50aW1lcyh4KTtcclxuICAgICAgICB4ID0geC50aW1lcyhkNS5wbHVzKHNpbmgyX3gudGltZXMoZDE2LnRpbWVzKHNpbmgyX3gpLnBsdXMoZDIwKSkpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0gcm07XHJcblxyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHgsIHByLCBybSwgdHJ1ZSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGh5cGVyYm9saWMgdGFuZ2VudCBvZiB0aGUgdmFsdWUgaW4gcmFkaWFucyBvZiB0aGlzXHJcbiAgICogRGVjaW1hbC5cclxuICAgKlxyXG4gICAqIERvbWFpbjogWy1JbmZpbml0eSwgSW5maW5pdHldXHJcbiAgICogUmFuZ2U6IFstMSwgMV1cclxuICAgKlxyXG4gICAqIHRhbmgoeCkgPSBzaW5oKHgpIC8gY29zaCh4KVxyXG4gICAqXHJcbiAgICogdGFuaCgwKSAgICAgICAgID0gMFxyXG4gICAqIHRhbmgoLTApICAgICAgICA9IC0wXHJcbiAgICogdGFuaChJbmZpbml0eSkgID0gMVxyXG4gICAqIHRhbmgoLUluZmluaXR5KSA9IC0xXHJcbiAgICogdGFuaChOYU4pICAgICAgID0gTmFOXHJcbiAgICpcclxuICAgKi9cclxuICBQLmh5cGVyYm9saWNUYW5nZW50ID0gUC50YW5oID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHByLCBybSxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmICgheC5pc0Zpbml0ZSgpKSByZXR1cm4gbmV3IEN0b3IoeC5zKTtcclxuICAgIGlmICh4LmlzWmVybygpKSByZXR1cm4gbmV3IEN0b3IoeCk7XHJcblxyXG4gICAgcHIgPSBDdG9yLnByZWNpc2lvbjtcclxuICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHIgKyA3O1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcblxyXG4gICAgcmV0dXJuIGRpdmlkZSh4LnNpbmgoKSwgeC5jb3NoKCksIEN0b3IucHJlY2lzaW9uID0gcHIsIEN0b3Iucm91bmRpbmcgPSBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGFyY2Nvc2luZSAoaW52ZXJzZSBjb3NpbmUpIGluIHJhZGlhbnMgb2YgdGhlIHZhbHVlIG9mXHJcbiAgICogdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogRG9tYWluOiBbLTEsIDFdXHJcbiAgICogUmFuZ2U6IFswLCBwaV1cclxuICAgKlxyXG4gICAqIGFjb3MoeCkgPSBwaS8yIC0gYXNpbih4KVxyXG4gICAqXHJcbiAgICogYWNvcygwKSAgICAgICA9IHBpLzJcclxuICAgKiBhY29zKC0wKSAgICAgID0gcGkvMlxyXG4gICAqIGFjb3MoMSkgICAgICAgPSAwXHJcbiAgICogYWNvcygtMSkgICAgICA9IHBpXHJcbiAgICogYWNvcygxLzIpICAgICA9IHBpLzNcclxuICAgKiBhY29zKC0xLzIpICAgID0gMipwaS8zXHJcbiAgICogYWNvcyh8eHwgPiAxKSA9IE5hTlxyXG4gICAqIGFjb3MoTmFOKSAgICAgPSBOYU5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaW52ZXJzZUNvc2luZSA9IFAuYWNvcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBoYWxmUGksXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgayA9IHguYWJzKCkuY21wKDEpLFxyXG4gICAgICBwciA9IEN0b3IucHJlY2lzaW9uLFxyXG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcblxyXG4gICAgaWYgKGsgIT09IC0xKSB7XHJcbiAgICAgIHJldHVybiBrID09PSAwXHJcbiAgICAgICAgLy8gfHh8IGlzIDFcclxuICAgICAgICA/IHguaXNOZWcoKSA/IGdldFBpKEN0b3IsIHByLCBybSkgOiBuZXcgQ3RvcigwKVxyXG4gICAgICAgIC8vIHx4fCA+IDEgb3IgeCBpcyBOYU5cclxuICAgICAgICA6IG5ldyBDdG9yKE5hTik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHguaXNaZXJvKCkpIHJldHVybiBnZXRQaShDdG9yLCBwciArIDQsIHJtKS50aW1lcygwLjUpO1xyXG5cclxuICAgIC8vIFRPRE8/IFNwZWNpYWwgY2FzZSBhY29zKDAuNSkgPSBwaS8zIGFuZCBhY29zKC0wLjUpID0gMipwaS8zXHJcblxyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSBwciArIDY7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0gMTtcclxuXHJcbiAgICB4ID0geC5hc2luKCk7XHJcbiAgICBoYWxmUGkgPSBnZXRQaShDdG9yLCBwciArIDQsIHJtKS50aW1lcygwLjUpO1xyXG5cclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0gcm07XHJcblxyXG4gICAgcmV0dXJuIGhhbGZQaS5taW51cyh4KTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgaW52ZXJzZSBvZiB0aGUgaHlwZXJib2xpYyBjb3NpbmUgaW4gcmFkaWFucyBvZiB0aGVcclxuICAgKiB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFsxLCBJbmZpbml0eV1cclxuICAgKiBSYW5nZTogWzAsIEluZmluaXR5XVxyXG4gICAqXHJcbiAgICogYWNvc2goeCkgPSBsbih4ICsgc3FydCh4XjIgLSAxKSlcclxuICAgKlxyXG4gICAqIGFjb3NoKHggPCAxKSAgICAgPSBOYU5cclxuICAgKiBhY29zaChOYU4pICAgICAgID0gTmFOXHJcbiAgICogYWNvc2goSW5maW5pdHkpICA9IEluZmluaXR5XHJcbiAgICogYWNvc2goLUluZmluaXR5KSA9IE5hTlxyXG4gICAqIGFjb3NoKDApICAgICAgICAgPSBOYU5cclxuICAgKiBhY29zaCgtMCkgICAgICAgID0gTmFOXHJcbiAgICogYWNvc2goMSkgICAgICAgICA9IDBcclxuICAgKiBhY29zaCgtMSkgICAgICAgID0gTmFOXHJcbiAgICpcclxuICAgKi9cclxuICBQLmludmVyc2VIeXBlcmJvbGljQ29zaW5lID0gUC5hY29zaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwciwgcm0sXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoeC5sdGUoMSkpIHJldHVybiBuZXcgQ3Rvcih4LmVxKDEpID8gMCA6IE5hTik7XHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSkgcmV0dXJuIG5ldyBDdG9yKHgpO1xyXG5cclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoTWF0aC5hYnMoeC5lKSwgeC5zZCgpKSArIDQ7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0gMTtcclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcblxyXG4gICAgeCA9IHgudGltZXMoeCkubWludXMoMSkuc3FydCgpLnBsdXMoeCk7XHJcblxyXG4gICAgZXh0ZXJuYWwgPSB0cnVlO1xyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcclxuICAgIEN0b3Iucm91bmRpbmcgPSBybTtcclxuXHJcbiAgICByZXR1cm4geC5sbigpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBpbnZlcnNlIG9mIHRoZSBoeXBlcmJvbGljIHNpbmUgaW4gcmFkaWFucyBvZiB0aGUgdmFsdWVcclxuICAgKiBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFstSW5maW5pdHksIEluZmluaXR5XVxyXG4gICAqIFJhbmdlOiBbLUluZmluaXR5LCBJbmZpbml0eV1cclxuICAgKlxyXG4gICAqIGFzaW5oKHgpID0gbG4oeCArIHNxcnQoeF4yICsgMSkpXHJcbiAgICpcclxuICAgKiBhc2luaChOYU4pICAgICAgID0gTmFOXHJcbiAgICogYXNpbmgoSW5maW5pdHkpICA9IEluZmluaXR5XHJcbiAgICogYXNpbmgoLUluZmluaXR5KSA9IC1JbmZpbml0eVxyXG4gICAqIGFzaW5oKDApICAgICAgICAgPSAwXHJcbiAgICogYXNpbmgoLTApICAgICAgICA9IC0wXHJcbiAgICpcclxuICAgKi9cclxuICBQLmludmVyc2VIeXBlcmJvbGljU2luZSA9IFAuYXNpbmggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgcHIsIHJtLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgaWYgKCF4LmlzRmluaXRlKCkgfHwgeC5pc1plcm8oKSkgcmV0dXJuIG5ldyBDdG9yKHgpO1xyXG5cclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByICsgMiAqIE1hdGgubWF4KE1hdGguYWJzKHguZSksIHguc2QoKSkgKyA2O1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG5cclxuICAgIHggPSB4LnRpbWVzKHgpLnBsdXMoMSkuc3FydCgpLnBsdXMoeCk7XHJcblxyXG4gICAgZXh0ZXJuYWwgPSB0cnVlO1xyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcclxuICAgIEN0b3Iucm91bmRpbmcgPSBybTtcclxuXHJcbiAgICByZXR1cm4geC5sbigpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBpbnZlcnNlIG9mIHRoZSBoeXBlcmJvbGljIHRhbmdlbnQgaW4gcmFkaWFucyBvZiB0aGVcclxuICAgKiB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFstMSwgMV1cclxuICAgKiBSYW5nZTogWy1JbmZpbml0eSwgSW5maW5pdHldXHJcbiAgICpcclxuICAgKiBhdGFuaCh4KSA9IDAuNSAqIGxuKCgxICsgeCkgLyAoMSAtIHgpKVxyXG4gICAqXHJcbiAgICogYXRhbmgofHh8ID4gMSkgICA9IE5hTlxyXG4gICAqIGF0YW5oKE5hTikgICAgICAgPSBOYU5cclxuICAgKiBhdGFuaChJbmZpbml0eSkgID0gTmFOXHJcbiAgICogYXRhbmgoLUluZmluaXR5KSA9IE5hTlxyXG4gICAqIGF0YW5oKDApICAgICAgICAgPSAwXHJcbiAgICogYXRhbmgoLTApICAgICAgICA9IC0wXHJcbiAgICogYXRhbmgoMSkgICAgICAgICA9IEluZmluaXR5XHJcbiAgICogYXRhbmgoLTEpICAgICAgICA9IC1JbmZpbml0eVxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5pbnZlcnNlSHlwZXJib2xpY1RhbmdlbnQgPSBQLmF0YW5oID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHByLCBybSwgd3ByLCB4c2QsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSkgcmV0dXJuIG5ldyBDdG9yKE5hTik7XHJcbiAgICBpZiAoeC5lID49IDApIHJldHVybiBuZXcgQ3Rvcih4LmFicygpLmVxKDEpID8geC5zIC8gMCA6IHguaXNaZXJvKCkgPyB4IDogTmFOKTtcclxuXHJcbiAgICBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgeHNkID0geC5zZCgpO1xyXG5cclxuICAgIGlmIChNYXRoLm1heCh4c2QsIHByKSA8IDIgKiAteC5lIC0gMSkgcmV0dXJuIGZpbmFsaXNlKG5ldyBDdG9yKHgpLCBwciwgcm0sIHRydWUpO1xyXG5cclxuICAgIEN0b3IucHJlY2lzaW9uID0gd3ByID0geHNkIC0geC5lO1xyXG5cclxuICAgIHggPSBkaXZpZGUoeC5wbHVzKDEpLCBuZXcgQ3RvcigxKS5taW51cyh4KSwgd3ByICsgcHIsIDEpO1xyXG5cclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHIgKyA0O1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcblxyXG4gICAgeCA9IHgubG4oKTtcclxuXHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByO1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IHJtO1xyXG5cclxuICAgIHJldHVybiB4LnRpbWVzKDAuNSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGFyY3NpbmUgKGludmVyc2Ugc2luZSkgaW4gcmFkaWFucyBvZiB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAqIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFstSW5maW5pdHksIEluZmluaXR5XVxyXG4gICAqIFJhbmdlOiBbLXBpLzIsIHBpLzJdXHJcbiAgICpcclxuICAgKiBhc2luKHgpID0gMiphdGFuKHgvKDEgKyBzcXJ0KDEgLSB4XjIpKSlcclxuICAgKlxyXG4gICAqIGFzaW4oMCkgICAgICAgPSAwXHJcbiAgICogYXNpbigtMCkgICAgICA9IC0wXHJcbiAgICogYXNpbigxLzIpICAgICA9IHBpLzZcclxuICAgKiBhc2luKC0xLzIpICAgID0gLXBpLzZcclxuICAgKiBhc2luKDEpICAgICAgID0gcGkvMlxyXG4gICAqIGFzaW4oLTEpICAgICAgPSAtcGkvMlxyXG4gICAqIGFzaW4ofHh8ID4gMSkgPSBOYU5cclxuICAgKiBhc2luKE5hTikgICAgID0gTmFOXHJcbiAgICpcclxuICAgKiBUT0RPPyBDb21wYXJlIHBlcmZvcm1hbmNlIG9mIFRheWxvciBzZXJpZXMuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmludmVyc2VTaW5lID0gUC5hc2luID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGhhbGZQaSwgayxcclxuICAgICAgcHIsIHJtLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgaWYgKHguaXNaZXJvKCkpIHJldHVybiBuZXcgQ3Rvcih4KTtcclxuXHJcbiAgICBrID0geC5hYnMoKS5jbXAoMSk7XHJcbiAgICBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG5cclxuICAgIGlmIChrICE9PSAtMSkge1xyXG5cclxuICAgICAgLy8gfHh8IGlzIDFcclxuICAgICAgaWYgKGsgPT09IDApIHtcclxuICAgICAgICBoYWxmUGkgPSBnZXRQaShDdG9yLCBwciArIDQsIHJtKS50aW1lcygwLjUpO1xyXG4gICAgICAgIGhhbGZQaS5zID0geC5zO1xyXG4gICAgICAgIHJldHVybiBoYWxmUGk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHx4fCA+IDEgb3IgeCBpcyBOYU5cclxuICAgICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETz8gU3BlY2lhbCBjYXNlIGFzaW4oMS8yKSA9IHBpLzYgYW5kIGFzaW4oLTEvMikgPSAtcGkvNlxyXG5cclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHIgKyA2O1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcblxyXG4gICAgeCA9IHguZGl2KG5ldyBDdG9yKDEpLm1pbnVzKHgudGltZXMoeCkpLnNxcnQoKS5wbHVzKDEpKS5hdGFuKCk7XHJcblxyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcclxuICAgIEN0b3Iucm91bmRpbmcgPSBybTtcclxuXHJcbiAgICByZXR1cm4geC50aW1lcygyKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgYXJjdGFuZ2VudCAoaW52ZXJzZSB0YW5nZW50KSBpbiByYWRpYW5zIG9mIHRoZSB2YWx1ZVxyXG4gICAqIG9mIHRoaXMgRGVjaW1hbC5cclxuICAgKlxyXG4gICAqIERvbWFpbjogWy1JbmZpbml0eSwgSW5maW5pdHldXHJcbiAgICogUmFuZ2U6IFstcGkvMiwgcGkvMl1cclxuICAgKlxyXG4gICAqIGF0YW4oeCkgPSB4IC0geF4zLzMgKyB4XjUvNSAtIHheNy83ICsgLi4uXHJcbiAgICpcclxuICAgKiBhdGFuKDApICAgICAgICAgPSAwXHJcbiAgICogYXRhbigtMCkgICAgICAgID0gLTBcclxuICAgKiBhdGFuKDEpICAgICAgICAgPSBwaS80XHJcbiAgICogYXRhbigtMSkgICAgICAgID0gLXBpLzRcclxuICAgKiBhdGFuKEluZmluaXR5KSAgPSBwaS8yXHJcbiAgICogYXRhbigtSW5maW5pdHkpID0gLXBpLzJcclxuICAgKiBhdGFuKE5hTikgICAgICAgPSBOYU5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaW52ZXJzZVRhbmdlbnQgPSBQLmF0YW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaSwgaiwgaywgbiwgcHgsIHQsIHIsIHdwciwgeDIsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgcHIgPSBDdG9yLnByZWNpc2lvbixcclxuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG5cclxuICAgIGlmICgheC5pc0Zpbml0ZSgpKSB7XHJcbiAgICAgIGlmICgheC5zKSByZXR1cm4gbmV3IEN0b3IoTmFOKTtcclxuICAgICAgaWYgKHByICsgNCA8PSBQSV9QUkVDSVNJT04pIHtcclxuICAgICAgICByID0gZ2V0UGkoQ3RvciwgcHIgKyA0LCBybSkudGltZXMoMC41KTtcclxuICAgICAgICByLnMgPSB4LnM7XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoeC5pc1plcm8oKSkge1xyXG4gICAgICByZXR1cm4gbmV3IEN0b3IoeCk7XHJcbiAgICB9IGVsc2UgaWYgKHguYWJzKCkuZXEoMSkgJiYgcHIgKyA0IDw9IFBJX1BSRUNJU0lPTikge1xyXG4gICAgICByID0gZ2V0UGkoQ3RvciwgcHIgKyA0LCBybSkudGltZXMoMC4yNSk7XHJcbiAgICAgIHIucyA9IHgucztcclxuICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgPSBwciArIDEwO1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IDE7XHJcblxyXG4gICAgLy8gVE9ETz8gaWYgKHggPj0gMSAmJiBwciA8PSBQSV9QUkVDSVNJT04pIGF0YW4oeCkgPSBoYWxmUGkgKiB4LnMgLSBhdGFuKDEgLyB4KTtcclxuXHJcbiAgICAvLyBBcmd1bWVudCByZWR1Y3Rpb25cclxuICAgIC8vIEVuc3VyZSB8eHwgPCAwLjQyXHJcbiAgICAvLyBhdGFuKHgpID0gMiAqIGF0YW4oeCAvICgxICsgc3FydCgxICsgeF4yKSkpXHJcblxyXG4gICAgayA9IE1hdGgubWluKDI4LCB3cHIgLyBMT0dfQkFTRSArIDIgfCAwKTtcclxuXHJcbiAgICBmb3IgKGkgPSBrOyBpOyAtLWkpIHggPSB4LmRpdih4LnRpbWVzKHgpLnBsdXMoMSkuc3FydCgpLnBsdXMoMSkpO1xyXG5cclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcblxyXG4gICAgaiA9IE1hdGguY2VpbCh3cHIgLyBMT0dfQkFTRSk7XHJcbiAgICBuID0gMTtcclxuICAgIHgyID0geC50aW1lcyh4KTtcclxuICAgIHIgPSBuZXcgQ3Rvcih4KTtcclxuICAgIHB4ID0geDtcclxuXHJcbiAgICAvLyBhdGFuKHgpID0geCAtIHheMy8zICsgeF41LzUgLSB4XjcvNyArIC4uLlxyXG4gICAgZm9yICg7IGkgIT09IC0xOykge1xyXG4gICAgICBweCA9IHB4LnRpbWVzKHgyKTtcclxuICAgICAgdCA9IHIubWludXMocHguZGl2KG4gKz0gMikpO1xyXG5cclxuICAgICAgcHggPSBweC50aW1lcyh4Mik7XHJcbiAgICAgIHIgPSB0LnBsdXMocHguZGl2KG4gKz0gMikpO1xyXG5cclxuICAgICAgaWYgKHIuZFtqXSAhPT0gdm9pZCAwKSBmb3IgKGkgPSBqOyByLmRbaV0gPT09IHQuZFtpXSAmJiBpLS07KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaykgciA9IHIudGltZXMoMiA8PCAoayAtIDEpKTtcclxuXHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHIsIEN0b3IucHJlY2lzaW9uID0gcHIsIEN0b3Iucm91bmRpbmcgPSBybSwgdHJ1ZSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBhIGZpbml0ZSBudW1iZXIsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmlzRmluaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5kO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgYW4gaW50ZWdlciwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaXNJbnRlZ2VyID0gUC5pc0ludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhIXRoaXMuZCAmJiBtYXRoZmxvb3IodGhpcy5lIC8gTE9HX0JBU0UpID4gdGhpcy5kLmxlbmd0aCAtIDI7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBOYU4sIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmlzTmFOID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICF0aGlzLnM7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpcyBuZWdhdGl2ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaXNOZWdhdGl2ZSA9IFAuaXNOZWcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zIDwgMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIHBvc2l0aXZlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5pc1Bvc2l0aXZlID0gUC5pc1BvcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnMgPiAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgMCBvciAtMCwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAuaXNaZXJvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5kICYmIHRoaXMuZFswXSA9PT0gMDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGlzIGxlc3MgdGhhbiBgeWAsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICpcclxuICAgKi9cclxuICBQLmxlc3NUaGFuID0gUC5sdCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPCAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGB5YCwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAubGVzc1RoYW5PckVxdWFsVG8gPSBQLmx0ZSA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPCAxO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0aGUgbG9nYXJpdGhtIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgdG8gdGhlIHNwZWNpZmllZCBiYXNlLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gXHJcbiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIElmIG5vIGJhc2UgaXMgc3BlY2lmaWVkLCByZXR1cm4gbG9nWzEwXShhcmcpLlxyXG4gICAqXHJcbiAgICogbG9nW2Jhc2VdKGFyZykgPSBsbihhcmcpIC8gbG4oYmFzZSlcclxuICAgKlxyXG4gICAqIFRoZSByZXN1bHQgd2lsbCBhbHdheXMgYmUgY29ycmVjdGx5IHJvdW5kZWQgaWYgdGhlIGJhc2Ugb2YgdGhlIGxvZyBpcyAxMCwgYW5kICdhbG1vc3QgYWx3YXlzJ1xyXG4gICAqIG90aGVyd2lzZTpcclxuICAgKlxyXG4gICAqIERlcGVuZGluZyBvbiB0aGUgcm91bmRpbmcgbW9kZSwgdGhlIHJlc3VsdCBtYXkgYmUgaW5jb3JyZWN0bHkgcm91bmRlZCBpZiB0aGUgZmlyc3QgZmlmdGVlblxyXG4gICAqIHJvdW5kaW5nIGRpZ2l0cyBhcmUgWzQ5XTk5OTk5OTk5OTk5OTk5IG9yIFs1MF0wMDAwMDAwMDAwMDAwMC4gSW4gdGhhdCBjYXNlLCB0aGUgbWF4aW11bSBlcnJvclxyXG4gICAqIGJldHdlZW4gdGhlIHJlc3VsdCBhbmQgdGhlIGNvcnJlY3RseSByb3VuZGVkIHJlc3VsdCB3aWxsIGJlIG9uZSB1bHAgKHVuaXQgaW4gdGhlIGxhc3QgcGxhY2UpLlxyXG4gICAqXHJcbiAgICogbG9nWy1iXShhKSAgICAgICA9IE5hTlxyXG4gICAqIGxvZ1swXShhKSAgICAgICAgPSBOYU5cclxuICAgKiBsb2dbMV0oYSkgICAgICAgID0gTmFOXHJcbiAgICogbG9nW05hTl0oYSkgICAgICA9IE5hTlxyXG4gICAqIGxvZ1tJbmZpbml0eV0oYSkgPSBOYU5cclxuICAgKiBsb2dbYl0oMCkgICAgICAgID0gLUluZmluaXR5XHJcbiAgICogbG9nW2JdKC0wKSAgICAgICA9IC1JbmZpbml0eVxyXG4gICAqIGxvZ1tiXSgtYSkgICAgICAgPSBOYU5cclxuICAgKiBsb2dbYl0oMSkgICAgICAgID0gMFxyXG4gICAqIGxvZ1tiXShJbmZpbml0eSkgPSBJbmZpbml0eVxyXG4gICAqIGxvZ1tiXShOYU4pICAgICAgPSBOYU5cclxuICAgKlxyXG4gICAqIFtiYXNlXSB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBUaGUgYmFzZSBvZiB0aGUgbG9nYXJpdGhtLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5sb2dhcml0aG0gPSBQLmxvZyA9IGZ1bmN0aW9uIChiYXNlKSB7XHJcbiAgICB2YXIgaXNCYXNlMTAsIGQsIGRlbm9taW5hdG9yLCBrLCBpbmYsIG51bSwgc2QsIHIsXHJcbiAgICAgIGFyZyA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSBhcmcuY29uc3RydWN0b3IsXHJcbiAgICAgIHByID0gQ3Rvci5wcmVjaXNpb24sXHJcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZyxcclxuICAgICAgZ3VhcmQgPSA1O1xyXG5cclxuICAgIC8vIERlZmF1bHQgYmFzZSBpcyAxMC5cclxuICAgIGlmIChiYXNlID09IG51bGwpIHtcclxuICAgICAgYmFzZSA9IG5ldyBDdG9yKDEwKTtcclxuICAgICAgaXNCYXNlMTAgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYmFzZSA9IG5ldyBDdG9yKGJhc2UpO1xyXG4gICAgICBkID0gYmFzZS5kO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIE5hTiBpZiBiYXNlIGlzIG5lZ2F0aXZlLCBvciBub24tZmluaXRlLCBvciBpcyAwIG9yIDEuXHJcbiAgICAgIGlmIChiYXNlLnMgPCAwIHx8ICFkIHx8ICFkWzBdIHx8IGJhc2UuZXEoMSkpIHJldHVybiBuZXcgQ3RvcihOYU4pO1xyXG5cclxuICAgICAgaXNCYXNlMTAgPSBiYXNlLmVxKDEwKTtcclxuICAgIH1cclxuXHJcbiAgICBkID0gYXJnLmQ7XHJcblxyXG4gICAgLy8gSXMgYXJnIG5lZ2F0aXZlLCBub24tZmluaXRlLCAwIG9yIDE/XHJcbiAgICBpZiAoYXJnLnMgPCAwIHx8ICFkIHx8ICFkWzBdIHx8IGFyZy5lcSgxKSkge1xyXG4gICAgICByZXR1cm4gbmV3IEN0b3IoZCAmJiAhZFswXSA/IC0xIC8gMCA6IGFyZy5zICE9IDEgPyBOYU4gOiBkID8gMCA6IDEgLyAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgcmVzdWx0IHdpbGwgaGF2ZSBhIG5vbi10ZXJtaW5hdGluZyBkZWNpbWFsIGV4cGFuc2lvbiBpZiBiYXNlIGlzIDEwIGFuZCBhcmcgaXMgbm90IGFuXHJcbiAgICAvLyBpbnRlZ2VyIHBvd2VyIG9mIDEwLlxyXG4gICAgaWYgKGlzQmFzZTEwKSB7XHJcbiAgICAgIGlmIChkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBpbmYgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAoayA9IGRbMF07IGsgJSAxMCA9PT0gMDspIGsgLz0gMTA7XHJcbiAgICAgICAgaW5mID0gayAhPT0gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICBzZCA9IHByICsgZ3VhcmQ7XHJcbiAgICBudW0gPSBuYXR1cmFsTG9nYXJpdGhtKGFyZywgc2QpO1xyXG4gICAgZGVub21pbmF0b3IgPSBpc0Jhc2UxMCA/IGdldExuMTAoQ3Rvciwgc2QgKyAxMCkgOiBuYXR1cmFsTG9nYXJpdGhtKGJhc2UsIHNkKTtcclxuXHJcbiAgICAvLyBUaGUgcmVzdWx0IHdpbGwgaGF2ZSA1IHJvdW5kaW5nIGRpZ2l0cy5cclxuICAgIHIgPSBkaXZpZGUobnVtLCBkZW5vbWluYXRvciwgc2QsIDEpO1xyXG5cclxuICAgIC8vIElmIGF0IGEgcm91bmRpbmcgYm91bmRhcnksIGkuZS4gdGhlIHJlc3VsdCdzIHJvdW5kaW5nIGRpZ2l0cyBhcmUgWzQ5XTk5OTkgb3IgWzUwXTAwMDAsXHJcbiAgICAvLyBjYWxjdWxhdGUgMTAgZnVydGhlciBkaWdpdHMuXHJcbiAgICAvL1xyXG4gICAgLy8gSWYgdGhlIHJlc3VsdCBpcyBrbm93biB0byBoYXZlIGFuIGluZmluaXRlIGRlY2ltYWwgZXhwYW5zaW9uLCByZXBlYXQgdGhpcyB1bnRpbCBpdCBpcyBjbGVhclxyXG4gICAgLy8gdGhhdCB0aGUgcmVzdWx0IGlzIGFib3ZlIG9yIGJlbG93IHRoZSBib3VuZGFyeS4gT3RoZXJ3aXNlLCBpZiBhZnRlciBjYWxjdWxhdGluZyB0aGUgMTBcclxuICAgIC8vIGZ1cnRoZXIgZGlnaXRzLCB0aGUgbGFzdCAxNCBhcmUgbmluZXMsIHJvdW5kIHVwIGFuZCBhc3N1bWUgdGhlIHJlc3VsdCBpcyBleGFjdC5cclxuICAgIC8vIEFsc28gYXNzdW1lIHRoZSByZXN1bHQgaXMgZXhhY3QgaWYgdGhlIGxhc3QgMTQgYXJlIHplcm8uXHJcbiAgICAvL1xyXG4gICAgLy8gRXhhbXBsZSBvZiBhIHJlc3VsdCB0aGF0IHdpbGwgYmUgaW5jb3JyZWN0bHkgcm91bmRlZDpcclxuICAgIC8vIGxvZ1sxMDQ4NTc2XSg0NTAzNTk5NjI3MzcwNTAyKSA9IDIuNjAwMDAwMDAwMDAwMDAwMDk2MTAyNzk1MTE0NDQ3NDYuLi5cclxuICAgIC8vIFRoZSBhYm92ZSByZXN1bHQgY29ycmVjdGx5IHJvdW5kZWQgdXNpbmcgUk9VTkRfQ0VJTCB0byAxIGRlY2ltYWwgcGxhY2Ugc2hvdWxkIGJlIDIuNywgYnV0IGl0XHJcbiAgICAvLyB3aWxsIGJlIGdpdmVuIGFzIDIuNiBhcyB0aGVyZSBhcmUgMTUgemVyb3MgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHJlcXVlc3RlZCBkZWNpbWFsIHBsYWNlLCBzb1xyXG4gICAgLy8gdGhlIGV4YWN0IHJlc3VsdCB3b3VsZCBiZSBhc3N1bWVkIHRvIGJlIDIuNiwgd2hpY2ggcm91bmRlZCB1c2luZyBST1VORF9DRUlMIHRvIDEgZGVjaW1hbFxyXG4gICAgLy8gcGxhY2UgaXMgc3RpbGwgMi42LlxyXG4gICAgaWYgKGNoZWNrUm91bmRpbmdEaWdpdHMoci5kLCBrID0gcHIsIHJtKSkge1xyXG5cclxuICAgICAgZG8ge1xyXG4gICAgICAgIHNkICs9IDEwO1xyXG4gICAgICAgIG51bSA9IG5hdHVyYWxMb2dhcml0aG0oYXJnLCBzZCk7XHJcbiAgICAgICAgZGVub21pbmF0b3IgPSBpc0Jhc2UxMCA/IGdldExuMTAoQ3Rvciwgc2QgKyAxMCkgOiBuYXR1cmFsTG9nYXJpdGhtKGJhc2UsIHNkKTtcclxuICAgICAgICByID0gZGl2aWRlKG51bSwgZGVub21pbmF0b3IsIHNkLCAxKTtcclxuXHJcbiAgICAgICAgaWYgKCFpbmYpIHtcclxuXHJcbiAgICAgICAgICAvLyBDaGVjayBmb3IgMTQgbmluZXMgZnJvbSB0aGUgMm5kIHJvdW5kaW5nIGRpZ2l0LCBhcyB0aGUgZmlyc3QgbWF5IGJlIDQuXHJcbiAgICAgICAgICBpZiAoK2RpZ2l0c1RvU3RyaW5nKHIuZCkuc2xpY2UoayArIDEsIGsgKyAxNSkgKyAxID09IDFlMTQpIHtcclxuICAgICAgICAgICAgciA9IGZpbmFsaXNlKHIsIHByICsgMSwgMCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IHdoaWxlIChjaGVja1JvdW5kaW5nRGlnaXRzKHIuZCwgayArPSAxMCwgcm0pKTtcclxuICAgIH1cclxuXHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHIsIHByLCBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIG1heGltdW0gb2YgdGhlIGFyZ3VtZW50cyBhbmQgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbC5cclxuICAgKlxyXG4gICAqIGFyZ3VtZW50cyB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgUC5tYXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKGFyZ3VtZW50cywgdGhpcyk7XHJcbiAgICByZXR1cm4gbWF4T3JNaW4odGhpcy5jb25zdHJ1Y3RvciwgYXJndW1lbnRzLCAnbHQnKTtcclxuICB9O1xyXG4gICAqL1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgbWluaW11bSBvZiB0aGUgYXJndW1lbnRzIGFuZCB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICpcclxuICBQLm1pbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmNhbGwoYXJndW1lbnRzLCB0aGlzKTtcclxuICAgIHJldHVybiBtYXhPck1pbih0aGlzLmNvbnN0cnVjdG9yLCBhcmd1bWVudHMsICdndCcpO1xyXG4gIH07XHJcbiAgICovXHJcblxyXG5cclxuICAvKlxyXG4gICAqICBuIC0gMCA9IG5cclxuICAgKiAgbiAtIE4gPSBOXHJcbiAgICogIG4gLSBJID0gLUlcclxuICAgKiAgMCAtIG4gPSAtblxyXG4gICAqICAwIC0gMCA9IDBcclxuICAgKiAgMCAtIE4gPSBOXHJcbiAgICogIDAgLSBJID0gLUlcclxuICAgKiAgTiAtIG4gPSBOXHJcbiAgICogIE4gLSAwID0gTlxyXG4gICAqICBOIC0gTiA9IE5cclxuICAgKiAgTiAtIEkgPSBOXHJcbiAgICogIEkgLSBuID0gSVxyXG4gICAqICBJIC0gMCA9IElcclxuICAgKiAgSSAtIE4gPSBOXHJcbiAgICogIEkgLSBJID0gTlxyXG4gICAqXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBtaW51cyBgeWAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmBcclxuICAgKiBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5taW51cyA9IFAuc3ViID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciBkLCBlLCBpLCBqLCBrLCBsZW4sIHByLCBybSwgeGQsIHhlLCB4TFR5LCB5ZCxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIHkgPSBuZXcgQ3Rvcih5KTtcclxuXHJcbiAgICAvLyBJZiBlaXRoZXIgaXMgbm90IGZpbml0ZS4uLlxyXG4gICAgaWYgKCF4LmQgfHwgIXkuZCkge1xyXG5cclxuICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgaXMgTmFOLlxyXG4gICAgICBpZiAoIXgucyB8fCAheS5zKSB5ID0gbmV3IEN0b3IoTmFOKTtcclxuXHJcbiAgICAgIC8vIFJldHVybiB5IG5lZ2F0ZWQgaWYgeCBpcyBmaW5pdGUgYW5kIHkgaXMgwrFJbmZpbml0eS5cclxuICAgICAgZWxzZSBpZiAoeC5kKSB5LnMgPSAteS5zO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIHggaWYgeSBpcyBmaW5pdGUgYW5kIHggaXMgwrFJbmZpbml0eS5cclxuICAgICAgLy8gUmV0dXJuIHggaWYgYm90aCBhcmUgwrFJbmZpbml0eSB3aXRoIGRpZmZlcmVudCBzaWducy5cclxuICAgICAgLy8gUmV0dXJuIE5hTiBpZiBib3RoIGFyZSDCsUluZmluaXR5IHdpdGggdGhlIHNhbWUgc2lnbi5cclxuICAgICAgZWxzZSB5ID0gbmV3IEN0b3IoeS5kIHx8IHgucyAhPT0geS5zID8geCA6IE5hTik7XHJcblxyXG4gICAgICByZXR1cm4geTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBzaWducyBkaWZmZXIuLi5cclxuICAgIGlmICh4LnMgIT0geS5zKSB7XHJcbiAgICAgIHkucyA9IC15LnM7XHJcbiAgICAgIHJldHVybiB4LnBsdXMoeSk7XHJcbiAgICB9XHJcblxyXG4gICAgeGQgPSB4LmQ7XHJcbiAgICB5ZCA9IHkuZDtcclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcblxyXG4gICAgLy8gSWYgZWl0aGVyIGlzIHplcm8uLi5cclxuICAgIGlmICgheGRbMF0gfHwgIXlkWzBdKSB7XHJcblxyXG4gICAgICAvLyBSZXR1cm4geSBuZWdhdGVkIGlmIHggaXMgemVybyBhbmQgeSBpcyBub24temVyby5cclxuICAgICAgaWYgKHlkWzBdKSB5LnMgPSAteS5zO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIHggaWYgeSBpcyB6ZXJvIGFuZCB4IGlzIG5vbi16ZXJvLlxyXG4gICAgICBlbHNlIGlmICh4ZFswXSkgeSA9IG5ldyBDdG9yKHgpO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIHplcm8gaWYgYm90aCBhcmUgemVyby5cclxuICAgICAgLy8gRnJvbSBJRUVFIDc1NCAoMjAwOCkgNi4zOiAwIC0gMCA9IC0wIC0gLTAgPSAtMCB3aGVuIHJvdW5kaW5nIHRvIC1JbmZpbml0eS5cclxuICAgICAgZWxzZSByZXR1cm4gbmV3IEN0b3Iocm0gPT09IDMgPyAtMCA6IDApO1xyXG5cclxuICAgICAgcmV0dXJuIGV4dGVybmFsID8gZmluYWxpc2UoeSwgcHIsIHJtKSA6IHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8geCBhbmQgeSBhcmUgZmluaXRlLCBub24temVybyBudW1iZXJzIHdpdGggdGhlIHNhbWUgc2lnbi5cclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgYmFzZSAxZTcgZXhwb25lbnRzLlxyXG4gICAgZSA9IG1hdGhmbG9vcih5LmUgLyBMT0dfQkFTRSk7XHJcbiAgICB4ZSA9IG1hdGhmbG9vcih4LmUgLyBMT0dfQkFTRSk7XHJcblxyXG4gICAgeGQgPSB4ZC5zbGljZSgpO1xyXG4gICAgayA9IHhlIC0gZTtcclxuXHJcbiAgICAvLyBJZiBiYXNlIDFlNyBleHBvbmVudHMgZGlmZmVyLi4uXHJcbiAgICBpZiAoaykge1xyXG4gICAgICB4TFR5ID0gayA8IDA7XHJcblxyXG4gICAgICBpZiAoeExUeSkge1xyXG4gICAgICAgIGQgPSB4ZDtcclxuICAgICAgICBrID0gLWs7XHJcbiAgICAgICAgbGVuID0geWQubGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGQgPSB5ZDtcclxuICAgICAgICBlID0geGU7XHJcbiAgICAgICAgbGVuID0geGQubGVuZ3RoO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBOdW1iZXJzIHdpdGggbWFzc2l2ZWx5IGRpZmZlcmVudCBleHBvbmVudHMgd291bGQgcmVzdWx0IGluIGEgdmVyeSBoaWdoIG51bWJlciBvZlxyXG4gICAgICAvLyB6ZXJvcyBuZWVkaW5nIHRvIGJlIHByZXBlbmRlZCwgYnV0IHRoaXMgY2FuIGJlIGF2b2lkZWQgd2hpbGUgc3RpbGwgZW5zdXJpbmcgY29ycmVjdFxyXG4gICAgICAvLyByb3VuZGluZyBieSBsaW1pdGluZyB0aGUgbnVtYmVyIG9mIHplcm9zIHRvIGBNYXRoLmNlaWwocHIgLyBMT0dfQkFTRSkgKyAyYC5cclxuICAgICAgaSA9IE1hdGgubWF4KE1hdGguY2VpbChwciAvIExPR19CQVNFKSwgbGVuKSArIDI7XHJcblxyXG4gICAgICBpZiAoayA+IGkpIHtcclxuICAgICAgICBrID0gaTtcclxuICAgICAgICBkLmxlbmd0aCA9IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLlxyXG4gICAgICBkLnJldmVyc2UoKTtcclxuICAgICAgZm9yIChpID0gazsgaS0tOykgZC5wdXNoKDApO1xyXG4gICAgICBkLnJldmVyc2UoKTtcclxuXHJcbiAgICAvLyBCYXNlIDFlNyBleHBvbmVudHMgZXF1YWwuXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gQ2hlY2sgZGlnaXRzIHRvIGRldGVybWluZSB3aGljaCBpcyB0aGUgYmlnZ2VyIG51bWJlci5cclxuXHJcbiAgICAgIGkgPSB4ZC5sZW5ndGg7XHJcbiAgICAgIGxlbiA9IHlkLmxlbmd0aDtcclxuICAgICAgeExUeSA9IGkgPCBsZW47XHJcbiAgICAgIGlmICh4TFR5KSBsZW4gPSBpO1xyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHhkW2ldICE9IHlkW2ldKSB7XHJcbiAgICAgICAgICB4TFR5ID0geGRbaV0gPCB5ZFtpXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgayA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHhMVHkpIHtcclxuICAgICAgZCA9IHhkO1xyXG4gICAgICB4ZCA9IHlkO1xyXG4gICAgICB5ZCA9IGQ7XHJcbiAgICAgIHkucyA9IC15LnM7XHJcbiAgICB9XHJcblxyXG4gICAgbGVuID0geGQubGVuZ3RoO1xyXG5cclxuICAgIC8vIEFwcGVuZCB6ZXJvcyB0byBgeGRgIGlmIHNob3J0ZXIuXHJcbiAgICAvLyBEb24ndCBhZGQgemVyb3MgdG8gYHlkYCBpZiBzaG9ydGVyIGFzIHN1YnRyYWN0aW9uIG9ubHkgbmVlZHMgdG8gc3RhcnQgYXQgYHlkYCBsZW5ndGguXHJcbiAgICBmb3IgKGkgPSB5ZC5sZW5ndGggLSBsZW47IGkgPiAwOyAtLWkpIHhkW2xlbisrXSA9IDA7XHJcblxyXG4gICAgLy8gU3VidHJhY3QgeWQgZnJvbSB4ZC5cclxuICAgIGZvciAoaSA9IHlkLmxlbmd0aDsgaSA+IGs7KSB7XHJcblxyXG4gICAgICBpZiAoeGRbLS1pXSA8IHlkW2ldKSB7XHJcbiAgICAgICAgZm9yIChqID0gaTsgaiAmJiB4ZFstLWpdID09PSAwOykgeGRbal0gPSBCQVNFIC0gMTtcclxuICAgICAgICAtLXhkW2pdO1xyXG4gICAgICAgIHhkW2ldICs9IEJBU0U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHhkW2ldIC09IHlkW2ldO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoOyB4ZFstLWxlbl0gPT09IDA7KSB4ZC5wb3AoKTtcclxuXHJcbiAgICAvLyBSZW1vdmUgbGVhZGluZyB6ZXJvcyBhbmQgYWRqdXN0IGV4cG9uZW50IGFjY29yZGluZ2x5LlxyXG4gICAgZm9yICg7IHhkWzBdID09PSAwOyB4ZC5zaGlmdCgpKSAtLWU7XHJcblxyXG4gICAgLy8gWmVybz9cclxuICAgIGlmICgheGRbMF0pIHJldHVybiBuZXcgQ3RvcihybSA9PT0gMyA/IC0wIDogMCk7XHJcblxyXG4gICAgeS5kID0geGQ7XHJcbiAgICB5LmUgPSBnZXRCYXNlMTBFeHBvbmVudCh4ZCwgZSk7XHJcblxyXG4gICAgcmV0dXJuIGV4dGVybmFsID8gZmluYWxpc2UoeSwgcHIsIHJtKSA6IHk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogICBuICUgMCA9ICBOXHJcbiAgICogICBuICUgTiA9ICBOXHJcbiAgICogICBuICUgSSA9ICBuXHJcbiAgICogICAwICUgbiA9ICAwXHJcbiAgICogIC0wICUgbiA9IC0wXHJcbiAgICogICAwICUgMCA9ICBOXHJcbiAgICogICAwICUgTiA9ICBOXHJcbiAgICogICAwICUgSSA9ICAwXHJcbiAgICogICBOICUgbiA9ICBOXHJcbiAgICogICBOICUgMCA9ICBOXHJcbiAgICogICBOICUgTiA9ICBOXHJcbiAgICogICBOICUgSSA9ICBOXHJcbiAgICogICBJICUgbiA9ICBOXHJcbiAgICogICBJICUgMCA9ICBOXHJcbiAgICogICBJICUgTiA9ICBOXHJcbiAgICogICBJICUgSSA9ICBOXHJcbiAgICpcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIG1vZHVsbyBgeWAsIHJvdW5kZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogVGhlIHJlc3VsdCBkZXBlbmRzIG9uIHRoZSBtb2R1bG8gbW9kZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAubW9kdWxvID0gUC5tb2QgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgdmFyIHEsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICB5ID0gbmV3IEN0b3IoeSk7XHJcblxyXG4gICAgLy8gUmV0dXJuIE5hTiBpZiB4IGlzIMKxSW5maW5pdHkgb3IgTmFOLCBvciB5IGlzIE5hTiBvciDCsTAuXHJcbiAgICBpZiAoIXguZCB8fCAheS5zIHx8IHkuZCAmJiAheS5kWzBdKSByZXR1cm4gbmV3IEN0b3IoTmFOKTtcclxuXHJcbiAgICAvLyBSZXR1cm4geCBpZiB5IGlzIMKxSW5maW5pdHkgb3IgeCBpcyDCsTAuXHJcbiAgICBpZiAoIXkuZCB8fCB4LmQgJiYgIXguZFswXSkge1xyXG4gICAgICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoeCksIEN0b3IucHJlY2lzaW9uLCBDdG9yLnJvdW5kaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmV2ZW50IHJvdW5kaW5nIG9mIGludGVybWVkaWF0ZSBjYWxjdWxhdGlvbnMuXHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChDdG9yLm1vZHVsbyA9PSA5KSB7XHJcblxyXG4gICAgICAvLyBFdWNsaWRpYW4gZGl2aXNpb246IHEgPSBzaWduKHkpICogZmxvb3IoeCAvIGFicyh5KSlcclxuICAgICAgLy8gcmVzdWx0ID0geCAtIHEgKiB5ICAgIHdoZXJlICAwIDw9IHJlc3VsdCA8IGFicyh5KVxyXG4gICAgICBxID0gZGl2aWRlKHgsIHkuYWJzKCksIDAsIDMsIDEpO1xyXG4gICAgICBxLnMgKj0geS5zO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcSA9IGRpdmlkZSh4LCB5LCAwLCBDdG9yLm1vZHVsbywgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcSA9IHEudGltZXMoeSk7XHJcblxyXG4gICAgZXh0ZXJuYWwgPSB0cnVlO1xyXG5cclxuICAgIHJldHVybiB4Lm1pbnVzKHEpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGV4cG9uZW50aWFsIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwsXHJcbiAgICogaS5lLiB0aGUgYmFzZSBlIHJhaXNlZCB0byB0aGUgcG93ZXIgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKi9cclxuICBQLm5hdHVyYWxFeHBvbmVudGlhbCA9IFAuZXhwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG5hdHVyYWxFeHBvbmVudGlhbCh0aGlzKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCxcclxuICAgKiByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKi9cclxuICBQLm5hdHVyYWxMb2dhcml0aG0gPSBQLmxuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG5hdHVyYWxMb2dhcml0aG0odGhpcyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBuZWdhdGVkLCBpLmUuIGFzIGlmIG11bHRpcGxpZWQgYnlcclxuICAgKiAtMS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAubmVnYXRlZCA9IFAubmVnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHggPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtcclxuICAgIHgucyA9IC14LnM7XHJcbiAgICByZXR1cm4gZmluYWxpc2UoeCk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogIG4gKyAwID0gblxyXG4gICAqICBuICsgTiA9IE5cclxuICAgKiAgbiArIEkgPSBJXHJcbiAgICogIDAgKyBuID0gblxyXG4gICAqICAwICsgMCA9IDBcclxuICAgKiAgMCArIE4gPSBOXHJcbiAgICogIDAgKyBJID0gSVxyXG4gICAqICBOICsgbiA9IE5cclxuICAgKiAgTiArIDAgPSBOXHJcbiAgICogIE4gKyBOID0gTlxyXG4gICAqICBOICsgSSA9IE5cclxuICAgKiAgSSArIG4gPSBJXHJcbiAgICogIEkgKyAwID0gSVxyXG4gICAqICBJICsgTiA9IE5cclxuICAgKiAgSSArIEkgPSBJXHJcbiAgICpcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHBsdXMgYHlgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gXHJcbiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAucGx1cyA9IFAuYWRkID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciBjYXJyeSwgZCwgZSwgaSwgaywgbGVuLCBwciwgcm0sIHhkLCB5ZCxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIHkgPSBuZXcgQ3Rvcih5KTtcclxuXHJcbiAgICAvLyBJZiBlaXRoZXIgaXMgbm90IGZpbml0ZS4uLlxyXG4gICAgaWYgKCF4LmQgfHwgIXkuZCkge1xyXG5cclxuICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgaXMgTmFOLlxyXG4gICAgICBpZiAoIXgucyB8fCAheS5zKSB5ID0gbmV3IEN0b3IoTmFOKTtcclxuXHJcbiAgICAgIC8vIFJldHVybiB4IGlmIHkgaXMgZmluaXRlIGFuZCB4IGlzIMKxSW5maW5pdHkuXHJcbiAgICAgIC8vIFJldHVybiB4IGlmIGJvdGggYXJlIMKxSW5maW5pdHkgd2l0aCB0aGUgc2FtZSBzaWduLlxyXG4gICAgICAvLyBSZXR1cm4gTmFOIGlmIGJvdGggYXJlIMKxSW5maW5pdHkgd2l0aCBkaWZmZXJlbnQgc2lnbnMuXHJcbiAgICAgIC8vIFJldHVybiB5IGlmIHggaXMgZmluaXRlIGFuZCB5IGlzIMKxSW5maW5pdHkuXHJcbiAgICAgIGVsc2UgaWYgKCF4LmQpIHkgPSBuZXcgQ3Rvcih5LmQgfHwgeC5zID09PSB5LnMgPyB4IDogTmFOKTtcclxuXHJcbiAgICAgIHJldHVybiB5O1xyXG4gICAgfVxyXG5cclxuICAgICAvLyBJZiBzaWducyBkaWZmZXIuLi5cclxuICAgIGlmICh4LnMgIT0geS5zKSB7XHJcbiAgICAgIHkucyA9IC15LnM7XHJcbiAgICAgIHJldHVybiB4Lm1pbnVzKHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHhkID0geC5kO1xyXG4gICAgeWQgPSB5LmQ7XHJcbiAgICBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG5cclxuICAgIC8vIElmIGVpdGhlciBpcyB6ZXJvLi4uXHJcbiAgICBpZiAoIXhkWzBdIHx8ICF5ZFswXSkge1xyXG5cclxuICAgICAgLy8gUmV0dXJuIHggaWYgeSBpcyB6ZXJvLlxyXG4gICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLlxyXG4gICAgICBpZiAoIXlkWzBdKSB5ID0gbmV3IEN0b3IoeCk7XHJcblxyXG4gICAgICByZXR1cm4gZXh0ZXJuYWwgPyBmaW5hbGlzZSh5LCBwciwgcm0pIDogeTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB4IGFuZCB5IGFyZSBmaW5pdGUsIG5vbi16ZXJvIG51bWJlcnMgd2l0aCB0aGUgc2FtZSBzaWduLlxyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBiYXNlIDFlNyBleHBvbmVudHMuXHJcbiAgICBrID0gbWF0aGZsb29yKHguZSAvIExPR19CQVNFKTtcclxuICAgIGUgPSBtYXRoZmxvb3IoeS5lIC8gTE9HX0JBU0UpO1xyXG5cclxuICAgIHhkID0geGQuc2xpY2UoKTtcclxuICAgIGkgPSBrIC0gZTtcclxuXHJcbiAgICAvLyBJZiBiYXNlIDFlNyBleHBvbmVudHMgZGlmZmVyLi4uXHJcbiAgICBpZiAoaSkge1xyXG5cclxuICAgICAgaWYgKGkgPCAwKSB7XHJcbiAgICAgICAgZCA9IHhkO1xyXG4gICAgICAgIGkgPSAtaTtcclxuICAgICAgICBsZW4gPSB5ZC5sZW5ndGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZCA9IHlkO1xyXG4gICAgICAgIGUgPSBrO1xyXG4gICAgICAgIGxlbiA9IHhkLmxlbmd0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTGltaXQgbnVtYmVyIG9mIHplcm9zIHByZXBlbmRlZCB0byBtYXgoY2VpbChwciAvIExPR19CQVNFKSwgbGVuKSArIDEuXHJcbiAgICAgIGsgPSBNYXRoLmNlaWwocHIgLyBMT0dfQkFTRSk7XHJcbiAgICAgIGxlbiA9IGsgPiBsZW4gPyBrICsgMSA6IGxlbiArIDE7XHJcblxyXG4gICAgICBpZiAoaSA+IGxlbikge1xyXG4gICAgICAgIGkgPSBsZW47XHJcbiAgICAgICAgZC5sZW5ndGggPSAxO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBQcmVwZW5kIHplcm9zIHRvIGVxdWFsaXNlIGV4cG9uZW50cy4gTm90ZTogRmFzdGVyIHRvIHVzZSByZXZlcnNlIHRoZW4gZG8gdW5zaGlmdHMuXHJcbiAgICAgIGQucmV2ZXJzZSgpO1xyXG4gICAgICBmb3IgKDsgaS0tOykgZC5wdXNoKDApO1xyXG4gICAgICBkLnJldmVyc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBsZW4gPSB4ZC5sZW5ndGg7XHJcbiAgICBpID0geWQubGVuZ3RoO1xyXG5cclxuICAgIC8vIElmIHlkIGlzIGxvbmdlciB0aGFuIHhkLCBzd2FwIHhkIGFuZCB5ZCBzbyB4ZCBwb2ludHMgdG8gdGhlIGxvbmdlciBhcnJheS5cclxuICAgIGlmIChsZW4gLSBpIDwgMCkge1xyXG4gICAgICBpID0gbGVuO1xyXG4gICAgICBkID0geWQ7XHJcbiAgICAgIHlkID0geGQ7XHJcbiAgICAgIHhkID0gZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5ZC5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4ZCBjYW4gYmUgbGVmdCBhcyB0aGV5IGFyZS5cclxuICAgIGZvciAoY2FycnkgPSAwOyBpOykge1xyXG4gICAgICBjYXJyeSA9ICh4ZFstLWldID0geGRbaV0gKyB5ZFtpXSArIGNhcnJ5KSAvIEJBU0UgfCAwO1xyXG4gICAgICB4ZFtpXSAlPSBCQVNFO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjYXJyeSkge1xyXG4gICAgICB4ZC51bnNoaWZ0KGNhcnJ5KTtcclxuICAgICAgKytlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgZm9yIHplcm8sIGFzICt4ICsgK3kgIT0gMCAmJiAteCArIC15ICE9IDBcclxuICAgIGZvciAobGVuID0geGQubGVuZ3RoOyB4ZFstLWxlbl0gPT0gMDspIHhkLnBvcCgpO1xyXG5cclxuICAgIHkuZCA9IHhkO1xyXG4gICAgeS5lID0gZ2V0QmFzZTEwRXhwb25lbnQoeGQsIGUpO1xyXG5cclxuICAgIHJldHVybiBleHRlcm5hbCA/IGZpbmFsaXNlKHksIHByLCBybSkgOiB5O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0aGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogW3pdIHtib29sZWFufG51bWJlcn0gV2hldGhlciB0byBjb3VudCBpbnRlZ2VyLXBhcnQgdHJhaWxpbmcgemVyb3M6IHRydWUsIGZhbHNlLCAxIG9yIDAuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnByZWNpc2lvbiA9IFAuc2QgPSBmdW5jdGlvbiAoeikge1xyXG4gICAgdmFyIGssXHJcbiAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgIGlmICh6ICE9PSB2b2lkIDAgJiYgeiAhPT0gISF6ICYmIHogIT09IDEgJiYgeiAhPT0gMCkgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgeik7XHJcblxyXG4gICAgaWYgKHguZCkge1xyXG4gICAgICBrID0gZ2V0UHJlY2lzaW9uKHguZCk7XHJcbiAgICAgIGlmICh6ICYmIHguZSArIDEgPiBrKSBrID0geC5lICsgMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGsgPSBOYU47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGs7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCByb3VuZGVkIHRvIGEgd2hvbGUgbnVtYmVyIHVzaW5nXHJcbiAgICogcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5yb3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgcmV0dXJuIGZpbmFsaXNlKG5ldyBDdG9yKHgpLCB4LmUgKyAxLCBDdG9yLnJvdW5kaW5nKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgc2luZSBvZiB0aGUgdmFsdWUgaW4gcmFkaWFucyBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFstSW5maW5pdHksIEluZmluaXR5XVxyXG4gICAqIFJhbmdlOiBbLTEsIDFdXHJcbiAgICpcclxuICAgKiBzaW4oeCkgPSB4IC0geF4zLzMhICsgeF41LzUhIC0gLi4uXHJcbiAgICpcclxuICAgKiBzaW4oMCkgICAgICAgICA9IDBcclxuICAgKiBzaW4oLTApICAgICAgICA9IC0wXHJcbiAgICogc2luKEluZmluaXR5KSAgPSBOYU5cclxuICAgKiBzaW4oLUluZmluaXR5KSA9IE5hTlxyXG4gICAqIHNpbihOYU4pICAgICAgID0gTmFOXHJcbiAgICpcclxuICAgKi9cclxuICBQLnNpbmUgPSBQLnNpbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwciwgcm0sXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSkgcmV0dXJuIG5ldyBDdG9yKE5hTik7XHJcbiAgICBpZiAoeC5pc1plcm8oKSkgcmV0dXJuIG5ldyBDdG9yKHgpO1xyXG5cclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoeC5lLCB4LnNkKCkpICsgTE9HX0JBU0U7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0gMTtcclxuXHJcbiAgICB4ID0gc2luZShDdG9yLCB0b0xlc3NUaGFuSGFsZlBpKEN0b3IsIHgpKTtcclxuXHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByO1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IHJtO1xyXG5cclxuICAgIHJldHVybiBmaW5hbGlzZShxdWFkcmFudCA+IDIgPyB4Lm5lZygpIDogeCwgcHIsIHJtLCB0cnVlKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhpcyBEZWNpbWFsLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gXHJcbiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqICBzcXJ0KC1uKSA9ICBOXHJcbiAgICogIHNxcnQoTikgID0gIE5cclxuICAgKiAgc3FydCgtSSkgPSAgTlxyXG4gICAqICBzcXJ0KEkpICA9ICBJXHJcbiAgICogIHNxcnQoMCkgID0gIDBcclxuICAgKiAgc3FydCgtMCkgPSAtMFxyXG4gICAqXHJcbiAgICovXHJcbiAgUC5zcXVhcmVSb290ID0gUC5zcXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG0sIG4sIHNkLCByLCByZXAsIHQsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBkID0geC5kLFxyXG4gICAgICBlID0geC5lLFxyXG4gICAgICBzID0geC5zLFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICAvLyBOZWdhdGl2ZS9OYU4vSW5maW5pdHkvemVybz9cclxuICAgIGlmIChzICE9PSAxIHx8ICFkIHx8ICFkWzBdKSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ3RvcighcyB8fCBzIDwgMCAmJiAoIWQgfHwgZFswXSkgPyBOYU4gOiBkID8geCA6IDEgLyAwKTtcclxuICAgIH1cclxuXHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEluaXRpYWwgZXN0aW1hdGUuXHJcbiAgICBzID0gTWF0aC5zcXJ0KCt4KTtcclxuXHJcbiAgICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xyXG4gICAgLy8gUGFzcyB4IHRvIE1hdGguc3FydCBhcyBpbnRlZ2VyLCB0aGVuIGFkanVzdCB0aGUgZXhwb25lbnQgb2YgdGhlIHJlc3VsdC5cclxuICAgIGlmIChzID09IDAgfHwgcyA9PSAxIC8gMCkge1xyXG4gICAgICBuID0gZGlnaXRzVG9TdHJpbmcoZCk7XHJcblxyXG4gICAgICBpZiAoKG4ubGVuZ3RoICsgZSkgJSAyID09IDApIG4gKz0gJzAnO1xyXG4gICAgICBzID0gTWF0aC5zcXJ0KG4pO1xyXG4gICAgICBlID0gbWF0aGZsb29yKChlICsgMSkgLyAyKSAtIChlIDwgMCB8fCBlICUgMik7XHJcblxyXG4gICAgICBpZiAocyA9PSAxIC8gMCkge1xyXG4gICAgICAgIG4gPSAnNWUnICsgZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XHJcbiAgICAgICAgbiA9IG4uc2xpY2UoMCwgbi5pbmRleE9mKCdlJykgKyAxKSArIGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHIgPSBuZXcgQ3RvcihuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHIgPSBuZXcgQ3RvcihzLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNkID0gKGUgPSBDdG9yLnByZWNpc2lvbikgKyAzO1xyXG5cclxuICAgIC8vIE5ld3Rvbi1SYXBoc29uIGl0ZXJhdGlvbi5cclxuICAgIGZvciAoOzspIHtcclxuICAgICAgdCA9IHI7XHJcbiAgICAgIHIgPSB0LnBsdXMoZGl2aWRlKHgsIHQsIHNkICsgMiwgMSkpLnRpbWVzKDAuNSk7XHJcblxyXG4gICAgICAvLyBUT0RPPyBSZXBsYWNlIHdpdGggZm9yLWxvb3AgYW5kIGNoZWNrUm91bmRpbmdEaWdpdHMuXHJcbiAgICAgIGlmIChkaWdpdHNUb1N0cmluZyh0LmQpLnNsaWNlKDAsIHNkKSA9PT0gKG4gPSBkaWdpdHNUb1N0cmluZyhyLmQpKS5zbGljZSgwLCBzZCkpIHtcclxuICAgICAgICBuID0gbi5zbGljZShzZCAtIDMsIHNkICsgMSk7XHJcblxyXG4gICAgICAgIC8vIFRoZSA0dGggcm91bmRpbmcgZGlnaXQgbWF5IGJlIGluIGVycm9yIGJ5IC0xIHNvIGlmIHRoZSA0IHJvdW5kaW5nIGRpZ2l0cyBhcmUgOTk5OSBvclxyXG4gICAgICAgIC8vIDQ5OTksIGkuZS4gYXBwcm9hY2hpbmcgYSByb3VuZGluZyBib3VuZGFyeSwgY29udGludWUgdGhlIGl0ZXJhdGlvbi5cclxuICAgICAgICBpZiAobiA9PSAnOTk5OScgfHwgIXJlcCAmJiBuID09ICc0OTk5Jykge1xyXG5cclxuICAgICAgICAgIC8vIE9uIHRoZSBmaXJzdCBpdGVyYXRpb24gb25seSwgY2hlY2sgdG8gc2VlIGlmIHJvdW5kaW5nIHVwIGdpdmVzIHRoZSBleGFjdCByZXN1bHQgYXMgdGhlXHJcbiAgICAgICAgICAvLyBuaW5lcyBtYXkgaW5maW5pdGVseSByZXBlYXQuXHJcbiAgICAgICAgICBpZiAoIXJlcCkge1xyXG4gICAgICAgICAgICBmaW5hbGlzZSh0LCBlICsgMSwgMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodC50aW1lcyh0KS5lcSh4KSkge1xyXG4gICAgICAgICAgICAgIHIgPSB0O1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2QgKz0gNDtcclxuICAgICAgICAgIHJlcCA9IDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBJZiB0aGUgcm91bmRpbmcgZGlnaXRzIGFyZSBudWxsLCAwezAsNH0gb3IgNTB7MCwzfSwgY2hlY2sgZm9yIGFuIGV4YWN0IHJlc3VsdC5cclxuICAgICAgICAgIC8vIElmIG5vdCwgdGhlbiB0aGVyZSBhcmUgZnVydGhlciBkaWdpdHMgYW5kIG0gd2lsbCBiZSB0cnV0aHkuXHJcbiAgICAgICAgICBpZiAoIStuIHx8ICErbi5zbGljZSgxKSAmJiBuLmNoYXJBdCgwKSA9PSAnNScpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHRvIHRoZSBmaXJzdCByb3VuZGluZyBkaWdpdC5cclxuICAgICAgICAgICAgZmluYWxpc2UociwgZSArIDEsIDEpO1xyXG4gICAgICAgICAgICBtID0gIXIudGltZXMocikuZXEoeCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXh0ZXJuYWwgPSB0cnVlO1xyXG5cclxuICAgIHJldHVybiBmaW5hbGlzZShyLCBlLCBDdG9yLnJvdW5kaW5nLCBtKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdGFuZ2VudCBvZiB0aGUgdmFsdWUgaW4gcmFkaWFucyBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICpcclxuICAgKiBEb21haW46IFstSW5maW5pdHksIEluZmluaXR5XVxyXG4gICAqIFJhbmdlOiBbLUluZmluaXR5LCBJbmZpbml0eV1cclxuICAgKlxyXG4gICAqIHRhbigwKSAgICAgICAgID0gMFxyXG4gICAqIHRhbigtMCkgICAgICAgID0gLTBcclxuICAgKiB0YW4oSW5maW5pdHkpICA9IE5hTlxyXG4gICAqIHRhbigtSW5maW5pdHkpID0gTmFOXHJcbiAgICogdGFuKE5hTikgICAgICAgPSBOYU5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAudGFuZ2VudCA9IFAudGFuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHByLCBybSxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmICgheC5pc0Zpbml0ZSgpKSByZXR1cm4gbmV3IEN0b3IoTmFOKTtcclxuICAgIGlmICh4LmlzWmVybygpKSByZXR1cm4gbmV3IEN0b3IoeCk7XHJcblxyXG4gICAgcHIgPSBDdG9yLnByZWNpc2lvbjtcclxuICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgIEN0b3IucHJlY2lzaW9uID0gcHIgKyAxMDtcclxuICAgIEN0b3Iucm91bmRpbmcgPSAxO1xyXG5cclxuICAgIHggPSB4LnNpbigpO1xyXG4gICAgeC5zID0gMTtcclxuICAgIHggPSBkaXZpZGUoeCwgbmV3IEN0b3IoMSkubWludXMoeC50aW1lcyh4KSkuc3FydCgpLCBwciArIDEwLCAwKTtcclxuXHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByO1xyXG4gICAgQ3Rvci5yb3VuZGluZyA9IHJtO1xyXG5cclxuICAgIHJldHVybiBmaW5hbGlzZShxdWFkcmFudCA9PSAyIHx8IHF1YWRyYW50ID09IDQgPyB4Lm5lZygpIDogeCwgcHIsIHJtLCB0cnVlKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiAgbiAqIDAgPSAwXHJcbiAgICogIG4gKiBOID0gTlxyXG4gICAqICBuICogSSA9IElcclxuICAgKiAgMCAqIG4gPSAwXHJcbiAgICogIDAgKiAwID0gMFxyXG4gICAqICAwICogTiA9IE5cclxuICAgKiAgMCAqIEkgPSBOXHJcbiAgICogIE4gKiBuID0gTlxyXG4gICAqICBOICogMCA9IE5cclxuICAgKiAgTiAqIE4gPSBOXHJcbiAgICogIE4gKiBJID0gTlxyXG4gICAqICBJICogbiA9IElcclxuICAgKiAgSSAqIDAgPSBOXHJcbiAgICogIEkgKiBOID0gTlxyXG4gICAqICBJICogSSA9IElcclxuICAgKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoaXMgRGVjaW1hbCB0aW1lcyBgeWAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAgc2lnbmlmaWNhbnRcclxuICAgKiBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50aW1lcyA9IFAubXVsID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciBjYXJyeSwgZSwgaSwgaywgciwgckwsIHQsIHhkTCwgeWRMLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHhkID0geC5kLFxyXG4gICAgICB5ZCA9ICh5ID0gbmV3IEN0b3IoeSkpLmQ7XHJcblxyXG4gICAgeS5zICo9IHgucztcclxuXHJcbiAgICAgLy8gSWYgZWl0aGVyIGlzIE5hTiwgwrFJbmZpbml0eSBvciDCsTAuLi5cclxuICAgIGlmICgheGQgfHwgIXhkWzBdIHx8ICF5ZCB8fCAheWRbMF0pIHtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgQ3RvcigheS5zIHx8IHhkICYmICF4ZFswXSAmJiAheWQgfHwgeWQgJiYgIXlkWzBdICYmICF4ZFxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gTmFOIGlmIGVpdGhlciBpcyBOYU4uXHJcbiAgICAgICAgLy8gUmV0dXJuIE5hTiBpZiB4IGlzIMKxMCBhbmQgeSBpcyDCsUluZmluaXR5LCBvciB5IGlzIMKxMCBhbmQgeCBpcyDCsUluZmluaXR5LlxyXG4gICAgICAgID8gTmFOXHJcblxyXG4gICAgICAgIC8vIFJldHVybiDCsUluZmluaXR5IGlmIGVpdGhlciBpcyDCsUluZmluaXR5LlxyXG4gICAgICAgIC8vIFJldHVybiDCsTAgaWYgZWl0aGVyIGlzIMKxMC5cclxuICAgICAgICA6ICF4ZCB8fCAheWQgPyB5LnMgLyAwIDogeS5zICogMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZSA9IG1hdGhmbG9vcih4LmUgLyBMT0dfQkFTRSkgKyBtYXRoZmxvb3IoeS5lIC8gTE9HX0JBU0UpO1xyXG4gICAgeGRMID0geGQubGVuZ3RoO1xyXG4gICAgeWRMID0geWQubGVuZ3RoO1xyXG5cclxuICAgIC8vIEVuc3VyZSB4ZCBwb2ludHMgdG8gdGhlIGxvbmdlciBhcnJheS5cclxuICAgIGlmICh4ZEwgPCB5ZEwpIHtcclxuICAgICAgciA9IHhkO1xyXG4gICAgICB4ZCA9IHlkO1xyXG4gICAgICB5ZCA9IHI7XHJcbiAgICAgIHJMID0geGRMO1xyXG4gICAgICB4ZEwgPSB5ZEw7XHJcbiAgICAgIHlkTCA9IHJMO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaXRpYWxpc2UgdGhlIHJlc3VsdCBhcnJheSB3aXRoIHplcm9zLlxyXG4gICAgciA9IFtdO1xyXG4gICAgckwgPSB4ZEwgKyB5ZEw7XHJcbiAgICBmb3IgKGkgPSByTDsgaS0tOykgci5wdXNoKDApO1xyXG5cclxuICAgIC8vIE11bHRpcGx5IVxyXG4gICAgZm9yIChpID0geWRMOyAtLWkgPj0gMDspIHtcclxuICAgICAgY2FycnkgPSAwO1xyXG4gICAgICBmb3IgKGsgPSB4ZEwgKyBpOyBrID4gaTspIHtcclxuICAgICAgICB0ID0gcltrXSArIHlkW2ldICogeGRbayAtIGkgLSAxXSArIGNhcnJ5O1xyXG4gICAgICAgIHJbay0tXSA9IHQgJSBCQVNFIHwgMDtcclxuICAgICAgICBjYXJyeSA9IHQgLyBCQVNFIHwgMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcltrXSA9IChyW2tdICsgY2FycnkpICUgQkFTRSB8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yICg7ICFyWy0tckxdOykgci5wb3AoKTtcclxuXHJcbiAgICBpZiAoY2FycnkpICsrZTtcclxuICAgIGVsc2Ugci5zaGlmdCgpO1xyXG5cclxuICAgIHkuZCA9IHI7XHJcbiAgICB5LmUgPSBnZXRCYXNlMTBFeHBvbmVudChyLCBlKTtcclxuXHJcbiAgICByZXR1cm4gZXh0ZXJuYWwgPyBmaW5hbGlzZSh5LCBDdG9yLnByZWNpc2lvbiwgQ3Rvci5yb3VuZGluZykgOiB5O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpbiBiYXNlIDIsIHJvdW5kIHRvIGBzZGAgc2lnbmlmaWNhbnRcclxuICAgKiBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm1gLlxyXG4gICAqXHJcbiAgICogSWYgdGhlIG9wdGlvbmFsIGBzZGAgYXJndW1lbnQgaXMgcHJlc2VudCB0aGVuIHJldHVybiBiaW5hcnkgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICpcclxuICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvQmluYXJ5ID0gZnVuY3Rpb24gKHNkLCBybSkge1xyXG4gICAgcmV0dXJuIHRvU3RyaW5nQmluYXJ5KHRoaXMsIDIsIHNkLCBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCByb3VuZGVkIHRvIGEgbWF4aW11bSBvZiBgZHBgXHJcbiAgICogZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm1gIG9yIGByb3VuZGluZ2AgaWYgYHJtYCBpcyBvbWl0dGVkLlxyXG4gICAqXHJcbiAgICogSWYgYGRwYCBpcyBvbWl0dGVkLCByZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogW2RwXSB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlcy4gSW50ZWdlciwgMCB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvRGVjaW1hbFBsYWNlcyA9IFAudG9EUCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgeCA9IG5ldyBDdG9yKHgpO1xyXG4gICAgaWYgKGRwID09PSB2b2lkIDApIHJldHVybiB4O1xyXG5cclxuICAgIGNoZWNrSW50MzIoZHAsIDAsIE1BWF9ESUdJVFMpO1xyXG5cclxuICAgIGlmIChybSA9PT0gdm9pZCAwKSBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICBlbHNlIGNoZWNrSW50MzIocm0sIDAsIDgpO1xyXG5cclxuICAgIHJldHVybiBmaW5hbGlzZSh4LCBkcCArIHguZSArIDEsIHJtKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaW4gZXhwb25lbnRpYWwgbm90YXRpb24gcm91bmRlZCB0b1xyXG4gICAqIGBkcGAgZml4ZWQgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogW2RwXSB7bnVtYmVyfSBEZWNpbWFsIHBsYWNlcy4gSW50ZWdlciwgMCB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvRXhwb25lbnRpYWwgPSBmdW5jdGlvbiAoZHAsIHJtKSB7XHJcbiAgICB2YXIgc3RyLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgaWYgKGRwID09PSB2b2lkIDApIHtcclxuICAgICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeCwgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVja0ludDMyKGRwLCAwLCBNQVhfRElHSVRTKTtcclxuXHJcbiAgICAgIGlmIChybSA9PT0gdm9pZCAwKSBybSA9IEN0b3Iucm91bmRpbmc7XHJcbiAgICAgIGVsc2UgY2hlY2tJbnQzMihybSwgMCwgOCk7XHJcblxyXG4gICAgICB4ID0gZmluYWxpc2UobmV3IEN0b3IoeCksIGRwICsgMSwgcm0pO1xyXG4gICAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCB0cnVlLCBkcCArIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB4LmlzTmVnKCkgJiYgIXguaXNaZXJvKCkgPyAnLScgKyBzdHIgOiBzdHI7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIGluIG5vcm1hbCAoZml4ZWQtcG9pbnQpIG5vdGF0aW9uIHRvXHJcbiAgICogYGRwYCBmaXhlZCBkZWNpbWFsIHBsYWNlcyBhbmQgcm91bmRlZCB1c2luZyByb3VuZGluZyBtb2RlIGBybWAgb3IgYHJvdW5kaW5nYCBpZiBgcm1gIGlzXHJcbiAgICogb21pdHRlZC5cclxuICAgKlxyXG4gICAqIEFzIHdpdGggSmF2YVNjcmlwdCBudW1iZXJzLCAoLTApLnRvRml4ZWQoMCkgaXMgJzAnLCBidXQgZS5nLiAoLTAuMDAwMDEpLnRvRml4ZWQoMCkgaXMgJy0wJy5cclxuICAgKlxyXG4gICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYX0RJR0lUUyBpbmNsdXNpdmUuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogKC0wKS50b0ZpeGVkKDApIGlzICcwJywgYnV0ICgtMC4xKS50b0ZpeGVkKDApIGlzICctMCcuXHJcbiAgICogKC0wKS50b0ZpeGVkKDEpIGlzICcwLjAnLCBidXQgKC0wLjAxKS50b0ZpeGVkKDEpIGlzICctMC4wJy5cclxuICAgKiAoLTApLnRvRml4ZWQoMykgaXMgJzAuMDAwJy5cclxuICAgKiAoLTAuNSkudG9GaXhlZCgwKSBpcyAnLTAnLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b0ZpeGVkID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gICAgdmFyIHN0ciwgeSxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmIChkcCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2hlY2tJbnQzMihkcCwgMCwgTUFYX0RJR0lUUyk7XHJcblxyXG4gICAgICBpZiAocm0gPT09IHZvaWQgMCkgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgICBlbHNlIGNoZWNrSW50MzIocm0sIDAsIDgpO1xyXG5cclxuICAgICAgeSA9IGZpbmFsaXNlKG5ldyBDdG9yKHgpLCBkcCArIHguZSArIDEsIHJtKTtcclxuICAgICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeSwgZmFsc2UsIGRwICsgeS5lICsgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gYWRkIHRoZSBtaW51cyBzaWduIGxvb2sgYXQgdGhlIHZhbHVlIGJlZm9yZSBpdCB3YXMgcm91bmRlZCxcclxuICAgIC8vIGkuZS4gbG9vayBhdCBgeGAgcmF0aGVyIHRoYW4gYHlgLlxyXG4gICAgcmV0dXJuIHguaXNOZWcoKSAmJiAheC5pc1plcm8oKSA/ICctJyArIHN0ciA6IHN0cjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgYXMgYSBzaW1wbGUgZnJhY3Rpb24gd2l0aCBhbiBpbnRlZ2VyXHJcbiAgICogbnVtZXJhdG9yIGFuZCBhbiBpbnRlZ2VyIGRlbm9taW5hdG9yLlxyXG4gICAqXHJcbiAgICogVGhlIGRlbm9taW5hdG9yIHdpbGwgYmUgYSBwb3NpdGl2ZSBub24temVybyB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNwZWNpZmllZCBtYXhpbXVtXHJcbiAgICogZGVub21pbmF0b3IuIElmIGEgbWF4aW11bSBkZW5vbWluYXRvciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZGVub21pbmF0b3Igd2lsbCBiZSB0aGUgbG93ZXN0XHJcbiAgICogdmFsdWUgbmVjZXNzYXJ5IHRvIHJlcHJlc2VudCB0aGUgbnVtYmVyIGV4YWN0bHkuXHJcbiAgICpcclxuICAgKiBbbWF4RF0ge251bWJlcnxzdHJpbmd8RGVjaW1hbH0gTWF4aW11bSBkZW5vbWluYXRvci4gSW50ZWdlciA+PSAxIGFuZCA8IEluZmluaXR5LlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b0ZyYWN0aW9uID0gZnVuY3Rpb24gKG1heEQpIHtcclxuICAgIHZhciBkLCBkMCwgZDEsIGQyLCBlLCBrLCBuLCBuMCwgbjEsIHByLCBxLCByLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgeGQgPSB4LmQsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmICgheGQpIHJldHVybiBuZXcgQ3Rvcih4KTtcclxuXHJcbiAgICBuMSA9IGQwID0gbmV3IEN0b3IoMSk7XHJcbiAgICBkMSA9IG4wID0gbmV3IEN0b3IoMCk7XHJcblxyXG4gICAgZCA9IG5ldyBDdG9yKGQxKTtcclxuICAgIGUgPSBkLmUgPSBnZXRQcmVjaXNpb24oeGQpIC0geC5lIC0gMTtcclxuICAgIGsgPSBlICUgTE9HX0JBU0U7XHJcbiAgICBkLmRbMF0gPSBtYXRocG93KDEwLCBrIDwgMCA/IExPR19CQVNFICsgayA6IGspO1xyXG5cclxuICAgIGlmIChtYXhEID09IG51bGwpIHtcclxuXHJcbiAgICAgIC8vIGQgaXMgMTAqKmUsIHRoZSBtaW5pbXVtIG1heC1kZW5vbWluYXRvciBuZWVkZWQuXHJcbiAgICAgIG1heEQgPSBlID4gMCA/IGQgOiBuMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG4gPSBuZXcgQ3RvcihtYXhEKTtcclxuICAgICAgaWYgKCFuLmlzSW50KCkgfHwgbi5sdChuMSkpIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIG4pO1xyXG4gICAgICBtYXhEID0gbi5ndChkKSA/IChlID4gMCA/IGQgOiBuMSkgOiBuO1xyXG4gICAgfVxyXG5cclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICBuID0gbmV3IEN0b3IoZGlnaXRzVG9TdHJpbmcoeGQpKTtcclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBDdG9yLnByZWNpc2lvbiA9IGUgPSB4ZC5sZW5ndGggKiBMT0dfQkFTRSAqIDI7XHJcblxyXG4gICAgZm9yICg7OykgIHtcclxuICAgICAgcSA9IGRpdmlkZShuLCBkLCAwLCAxLCAxKTtcclxuICAgICAgZDIgPSBkMC5wbHVzKHEudGltZXMoZDEpKTtcclxuICAgICAgaWYgKGQyLmNtcChtYXhEKSA9PSAxKSBicmVhaztcclxuICAgICAgZDAgPSBkMTtcclxuICAgICAgZDEgPSBkMjtcclxuICAgICAgZDIgPSBuMTtcclxuICAgICAgbjEgPSBuMC5wbHVzKHEudGltZXMoZDIpKTtcclxuICAgICAgbjAgPSBkMjtcclxuICAgICAgZDIgPSBkO1xyXG4gICAgICBkID0gbi5taW51cyhxLnRpbWVzKGQyKSk7XHJcbiAgICAgIG4gPSBkMjtcclxuICAgIH1cclxuXHJcbiAgICBkMiA9IGRpdmlkZShtYXhELm1pbnVzKGQwKSwgZDEsIDAsIDEsIDEpO1xyXG4gICAgbjAgPSBuMC5wbHVzKGQyLnRpbWVzKG4xKSk7XHJcbiAgICBkMCA9IGQwLnBsdXMoZDIudGltZXMoZDEpKTtcclxuICAgIG4wLnMgPSBuMS5zID0geC5zO1xyXG5cclxuICAgIC8vIERldGVybWluZSB3aGljaCBmcmFjdGlvbiBpcyBjbG9zZXIgdG8geCwgbjAvZDAgb3IgbjEvZDE/XHJcbiAgICByID0gZGl2aWRlKG4xLCBkMSwgZSwgMSkubWludXMoeCkuYWJzKCkuY21wKGRpdmlkZShuMCwgZDAsIGUsIDEpLm1pbnVzKHgpLmFicygpKSA8IDFcclxuICAgICAgICA/IFtuMSwgZDFdIDogW24wLCBkMF07XHJcblxyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcclxuICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuXHJcbiAgICByZXR1cm4gcjtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgaW4gYmFzZSAxNiwgcm91bmQgdG8gYHNkYCBzaWduaWZpY2FudFxyXG4gICAqIGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGBybWAuXHJcbiAgICpcclxuICAgKiBJZiB0aGUgb3B0aW9uYWwgYHNkYCBhcmd1bWVudCBpcyBwcmVzZW50IHRoZW4gcmV0dXJuIGJpbmFyeSBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgKlxyXG4gICAqIFtzZF0ge251bWJlcn0gU2lnbmlmaWNhbnQgZGlnaXRzLiBJbnRlZ2VyLCAxIHRvIE1BWF9ESUdJVFMgaW5jbHVzaXZlLlxyXG4gICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAudG9IZXhhZGVjaW1hbCA9IFAudG9IZXggPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgICByZXR1cm4gdG9TdHJpbmdCaW5hcnkodGhpcywgMTYsIHNkLCBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJucyBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuZWFyZXN0IG11bHRpcGxlIG9mIGB5YCBpbiB0aGUgZGlyZWN0aW9uIG9mIHJvdW5kaW5nXHJcbiAgICogbW9kZSBgcm1gLCBvciBgRGVjaW1hbC5yb3VuZGluZ2AgaWYgYHJtYCBpcyBvbWl0dGVkLCB0byB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsd2F5cyBoYXZlIHRoZSBzYW1lIHNpZ24gYXMgdGhpcyBEZWNpbWFsLCB1bmxlc3MgZWl0aGVyIHRoaXMgRGVjaW1hbFxyXG4gICAqIG9yIGB5YCBpcyBOYU4sIGluIHdoaWNoIGNhc2UgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIGFsc28gYmUgTmFOLlxyXG4gICAqXHJcbiAgICogVGhlIHJldHVybiB2YWx1ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHZhbHVlIG9mIGBwcmVjaXNpb25gLlxyXG4gICAqXHJcbiAgICogeSB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBUaGUgbWFnbml0dWRlIHRvIHJvdW5kIHRvIGEgbXVsdGlwbGUgb2YuXHJcbiAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogJ3RvTmVhcmVzdCgpIHJvdW5kaW5nIG1vZGUgbm90IGFuIGludGVnZXI6IHtybX0nXHJcbiAgICogJ3RvTmVhcmVzdCgpIHJvdW5kaW5nIG1vZGUgb3V0IG9mIHJhbmdlOiB7cm19J1xyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b05lYXJlc3QgPSBmdW5jdGlvbiAoeSwgcm0pIHtcclxuICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgeCA9IG5ldyBDdG9yKHgpO1xyXG5cclxuICAgIGlmICh5ID09IG51bGwpIHtcclxuXHJcbiAgICAgIC8vIElmIHggaXMgbm90IGZpbml0ZSwgcmV0dXJuIHguXHJcbiAgICAgIGlmICgheC5kKSByZXR1cm4geDtcclxuXHJcbiAgICAgIHkgPSBuZXcgQ3RvcigxKTtcclxuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeSA9IG5ldyBDdG9yKHkpO1xyXG4gICAgICBpZiAocm0gPT09IHZvaWQgMCkge1xyXG4gICAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjaGVja0ludDMyKHJtLCAwLCA4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgeCBpcyBub3QgZmluaXRlLCByZXR1cm4geCBpZiB5IGlzIG5vdCBOYU4sIGVsc2UgTmFOLlxyXG4gICAgICBpZiAoIXguZCkgcmV0dXJuIHkucyA/IHggOiB5O1xyXG5cclxuICAgICAgLy8gSWYgeSBpcyBub3QgZmluaXRlLCByZXR1cm4gSW5maW5pdHkgd2l0aCB0aGUgc2lnbiBvZiB4IGlmIHkgaXMgSW5maW5pdHksIGVsc2UgTmFOLlxyXG4gICAgICBpZiAoIXkuZCkge1xyXG4gICAgICAgIGlmICh5LnMpIHkucyA9IHgucztcclxuICAgICAgICByZXR1cm4geTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHkgaXMgbm90IHplcm8sIGNhbGN1bGF0ZSB0aGUgbmVhcmVzdCBtdWx0aXBsZSBvZiB5IHRvIHguXHJcbiAgICBpZiAoeS5kWzBdKSB7XHJcbiAgICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICAgIHggPSBkaXZpZGUoeCwgeSwgMCwgcm0sIDEpLnRpbWVzKHkpO1xyXG4gICAgICBleHRlcm5hbCA9IHRydWU7XHJcbiAgICAgIGZpbmFsaXNlKHgpO1xyXG5cclxuICAgIC8vIElmIHkgaXMgemVybywgcmV0dXJuIHplcm8gd2l0aCB0aGUgc2lnbiBvZiB4LlxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeS5zID0geC5zO1xyXG4gICAgICB4ID0geTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBjb252ZXJ0ZWQgdG8gYSBudW1iZXIgcHJpbWl0aXZlLlxyXG4gICAqIFplcm8ga2VlcHMgaXRzIHNpZ24uXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvTnVtYmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICt0aGlzO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgRGVjaW1hbCBpbiBiYXNlIDgsIHJvdW5kIHRvIGBzZGAgc2lnbmlmaWNhbnRcclxuICAgKiBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm1gLlxyXG4gICAqXHJcbiAgICogSWYgdGhlIG9wdGlvbmFsIGBzZGAgYXJndW1lbnQgaXMgcHJlc2VudCB0aGVuIHJldHVybiBiaW5hcnkgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICpcclxuICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvT2N0YWwgPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgICByZXR1cm4gdG9TdHJpbmdCaW5hcnkodGhpcywgOCwgc2QsIHJtKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHJhaXNlZCB0byB0aGUgcG93ZXIgYHlgLCByb3VuZGVkXHJcbiAgICogdG8gYHByZWNpc2lvbmAgc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIEVDTUFTY3JpcHQgY29tcGxpYW50LlxyXG4gICAqXHJcbiAgICogICBwb3coeCwgTmFOKSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gTmFOXHJcbiAgICogICBwb3coeCwgwrEwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDFcclxuXHJcbiAgICogICBwb3coTmFOLCBub24temVybykgICAgICAgICAgICAgICAgICAgID0gTmFOXHJcbiAgICogICBwb3coYWJzKHgpID4gMSwgK0luZmluaXR5KSAgICAgICAgICAgID0gK0luZmluaXR5XHJcbiAgICogICBwb3coYWJzKHgpID4gMSwgLUluZmluaXR5KSAgICAgICAgICAgID0gKzBcclxuICAgKiAgIHBvdyhhYnMoeCkgPT0gMSwgwrFJbmZpbml0eSkgICAgICAgICAgID0gTmFOXHJcbiAgICogICBwb3coYWJzKHgpIDwgMSwgK0luZmluaXR5KSAgICAgICAgICAgID0gKzBcclxuICAgKiAgIHBvdyhhYnMoeCkgPCAxLCAtSW5maW5pdHkpICAgICAgICAgICAgPSArSW5maW5pdHlcclxuICAgKiAgIHBvdygrSW5maW5pdHksIHkgPiAwKSAgICAgICAgICAgICAgICAgPSArSW5maW5pdHlcclxuICAgKiAgIHBvdygrSW5maW5pdHksIHkgPCAwKSAgICAgICAgICAgICAgICAgPSArMFxyXG4gICAqICAgcG93KC1JbmZpbml0eSwgb2RkIGludGVnZXIgPiAwKSAgICAgICA9IC1JbmZpbml0eVxyXG4gICAqICAgcG93KC1JbmZpbml0eSwgZXZlbiBpbnRlZ2VyID4gMCkgICAgICA9ICtJbmZpbml0eVxyXG4gICAqICAgcG93KC1JbmZpbml0eSwgb2RkIGludGVnZXIgPCAwKSAgICAgICA9IC0wXHJcbiAgICogICBwb3coLUluZmluaXR5LCBldmVuIGludGVnZXIgPCAwKSAgICAgID0gKzBcclxuICAgKiAgIHBvdygrMCwgeSA+IDApICAgICAgICAgICAgICAgICAgICAgICAgPSArMFxyXG4gICAqICAgcG93KCswLCB5IDwgMCkgICAgICAgICAgICAgICAgICAgICAgICA9ICtJbmZpbml0eVxyXG4gICAqICAgcG93KC0wLCBvZGQgaW50ZWdlciA+IDApICAgICAgICAgICAgICA9IC0wXHJcbiAgICogICBwb3coLTAsIGV2ZW4gaW50ZWdlciA+IDApICAgICAgICAgICAgID0gKzBcclxuICAgKiAgIHBvdygtMCwgb2RkIGludGVnZXIgPCAwKSAgICAgICAgICAgICAgPSAtSW5maW5pdHlcclxuICAgKiAgIHBvdygtMCwgZXZlbiBpbnRlZ2VyIDwgMCkgICAgICAgICAgICAgPSArSW5maW5pdHlcclxuICAgKiAgIHBvdyhmaW5pdGUgeCA8IDAsIGZpbml0ZSBub24taW50ZWdlcikgPSBOYU5cclxuICAgKlxyXG4gICAqIEZvciBub24taW50ZWdlciBvciB2ZXJ5IGxhcmdlIGV4cG9uZW50cyBwb3coeCwgeSkgaXMgY2FsY3VsYXRlZCB1c2luZ1xyXG4gICAqXHJcbiAgICogICB4XnkgPSBleHAoeSpsbih4KSlcclxuICAgKlxyXG4gICAqIEFzc3VtaW5nIHRoZSBmaXJzdCAxNSByb3VuZGluZyBkaWdpdHMgYXJlIGVhY2ggZXF1YWxseSBsaWtlbHkgdG8gYmUgYW55IGRpZ2l0IDAtOSwgdGhlXHJcbiAgICogcHJvYmFiaWxpdHkgb2YgYW4gaW5jb3JyZWN0bHkgcm91bmRlZCByZXN1bHRcclxuICAgKiBQKFs0OV05ezE0fSB8IFs1MF0wezE0fSkgPSAyICogMC4yICogMTBeLTE0ID0gNGUtMTUgPSAxLzIuNWUrMTRcclxuICAgKiBpLmUuIDEgaW4gMjUwLDAwMCwwMDAsMDAwLDAwMFxyXG4gICAqXHJcbiAgICogSWYgYSByZXN1bHQgaXMgaW5jb3JyZWN0bHkgcm91bmRlZCB0aGUgbWF4aW11bSBlcnJvciB3aWxsIGJlIDEgdWxwICh1bml0IGluIGxhc3QgcGxhY2UpLlxyXG4gICAqXHJcbiAgICogeSB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBUaGUgcG93ZXIgdG8gd2hpY2ggdG8gcmFpc2UgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b1Bvd2VyID0gUC5wb3cgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgdmFyIGUsIGssIHByLCByLCBybSwgcyxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICB5biA9ICsoeSA9IG5ldyBDdG9yKHkpKTtcclxuXHJcbiAgICAvLyBFaXRoZXIgwrFJbmZpbml0eSwgTmFOIG9yIMKxMD9cclxuICAgIGlmICgheC5kIHx8ICF5LmQgfHwgIXguZFswXSB8fCAheS5kWzBdKSByZXR1cm4gbmV3IEN0b3IobWF0aHBvdygreCwgeW4pKTtcclxuXHJcbiAgICB4ID0gbmV3IEN0b3IoeCk7XHJcblxyXG4gICAgaWYgKHguZXEoMSkpIHJldHVybiB4O1xyXG5cclxuICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XHJcblxyXG4gICAgaWYgKHkuZXEoMSkpIHJldHVybiBmaW5hbGlzZSh4LCBwciwgcm0pO1xyXG5cclxuICAgIC8vIHkgZXhwb25lbnRcclxuICAgIGUgPSBtYXRoZmxvb3IoeS5lIC8gTE9HX0JBU0UpO1xyXG5cclxuICAgIC8vIElmIHkgaXMgYSBzbWFsbCBpbnRlZ2VyIHVzZSB0aGUgJ2V4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nJyBhbGdvcml0aG0uXHJcbiAgICBpZiAoZSA+PSB5LmQubGVuZ3RoIC0gMSAmJiAoayA9IHluIDwgMCA/IC15biA6IHluKSA8PSBNQVhfU0FGRV9JTlRFR0VSKSB7XHJcbiAgICAgIHIgPSBpbnRQb3coQ3RvciwgeCwgaywgcHIpO1xyXG4gICAgICByZXR1cm4geS5zIDwgMCA/IG5ldyBDdG9yKDEpLmRpdihyKSA6IGZpbmFsaXNlKHIsIHByLCBybSk7XHJcbiAgICB9XHJcblxyXG4gICAgcyA9IHgucztcclxuXHJcbiAgICAvLyBpZiB4IGlzIG5lZ2F0aXZlXHJcbiAgICBpZiAocyA8IDApIHtcclxuXHJcbiAgICAgIC8vIGlmIHkgaXMgbm90IGFuIGludGVnZXJcclxuICAgICAgaWYgKGUgPCB5LmQubGVuZ3RoIC0gMSkgcmV0dXJuIG5ldyBDdG9yKE5hTik7XHJcblxyXG4gICAgICAvLyBSZXN1bHQgaXMgcG9zaXRpdmUgaWYgeCBpcyBuZWdhdGl2ZSBhbmQgdGhlIGxhc3QgZGlnaXQgb2YgaW50ZWdlciB5IGlzIGV2ZW4uXHJcbiAgICAgIGlmICgoeS5kW2VdICYgMSkgPT0gMCkgcyA9IDE7XHJcblxyXG4gICAgICAvLyBpZiB4LmVxKC0xKVxyXG4gICAgICBpZiAoeC5lID09IDAgJiYgeC5kWzBdID09IDEgJiYgeC5kLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgeC5zID0gcztcclxuICAgICAgICByZXR1cm4geDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEVzdGltYXRlIHJlc3VsdCBleHBvbmVudC5cclxuICAgIC8vIHheeSA9IDEwXmUsICB3aGVyZSBlID0geSAqIGxvZzEwKHgpXHJcbiAgICAvLyBsb2cxMCh4KSA9IGxvZzEwKHhfc2lnbmlmaWNhbmQpICsgeF9leHBvbmVudFxyXG4gICAgLy8gbG9nMTAoeF9zaWduaWZpY2FuZCkgPSBsbih4X3NpZ25pZmljYW5kKSAvIGxuKDEwKVxyXG4gICAgayA9IG1hdGhwb3coK3gsIHluKTtcclxuICAgIGUgPSBrID09IDAgfHwgIWlzRmluaXRlKGspXHJcbiAgICAgID8gbWF0aGZsb29yKHluICogKE1hdGgubG9nKCcwLicgKyBkaWdpdHNUb1N0cmluZyh4LmQpKSAvIE1hdGguTE4xMCArIHguZSArIDEpKVxyXG4gICAgICA6IG5ldyBDdG9yKGsgKyAnJykuZTtcclxuXHJcbiAgICAvLyBFeHBvbmVudCBlc3RpbWF0ZSBtYXkgYmUgaW5jb3JyZWN0IGUuZy4geDogMC45OTk5OTk5OTk5OTk5OTk5OTksIHk6IDIuMjksIGU6IDAsIHIuZTogLTEuXHJcblxyXG4gICAgLy8gT3ZlcmZsb3cvdW5kZXJmbG93P1xyXG4gICAgaWYgKGUgPiBDdG9yLm1heEUgKyAxIHx8IGUgPCBDdG9yLm1pbkUgLSAxKSByZXR1cm4gbmV3IEN0b3IoZSA+IDAgPyBzIC8gMCA6IDApO1xyXG5cclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0geC5zID0gMTtcclxuXHJcbiAgICAvLyBFc3RpbWF0ZSB0aGUgZXh0cmEgZ3VhcmQgZGlnaXRzIG5lZWRlZCB0byBlbnN1cmUgZml2ZSBjb3JyZWN0IHJvdW5kaW5nIGRpZ2l0cyBmcm9tXHJcbiAgICAvLyBuYXR1cmFsTG9nYXJpdGhtKHgpLiBFeGFtcGxlIG9mIGZhaWx1cmUgd2l0aG91dCB0aGVzZSBleHRyYSBkaWdpdHMgKHByZWNpc2lvbjogMTApOlxyXG4gICAgLy8gbmV3IERlY2ltYWwoMi4zMjQ1NikucG93KCcyMDg3OTg3NDM2NTM0NTY2LjQ2NDExJylcclxuICAgIC8vIHNob3VsZCBiZSAxLjE2MjM3NzgyM2UrNzY0OTE0OTA1MTczODE1LCBidXQgaXMgMS4xNjIzNTU4MjNlKzc2NDkxNDkwNTE3MzgxNVxyXG4gICAgayA9IE1hdGgubWluKDEyLCAoZSArICcnKS5sZW5ndGgpO1xyXG5cclxuICAgIC8vIHIgPSB4XnkgPSBleHAoeSpsbih4KSlcclxuICAgIHIgPSBuYXR1cmFsRXhwb25lbnRpYWwoeS50aW1lcyhuYXR1cmFsTG9nYXJpdGhtKHgsIHByICsgaykpLCBwcik7XHJcblxyXG4gICAgLy8gciBtYXkgYmUgSW5maW5pdHksIGUuZy4gKDAuOTk5OTk5OTk5OTk5OTk5OSkucG93KC0xZSs0MClcclxuICAgIGlmIChyLmQpIHtcclxuXHJcbiAgICAgIC8vIFRydW5jYXRlIHRvIHRoZSByZXF1aXJlZCBwcmVjaXNpb24gcGx1cyBmaXZlIHJvdW5kaW5nIGRpZ2l0cy5cclxuICAgICAgciA9IGZpbmFsaXNlKHIsIHByICsgNSwgMSk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgcm91bmRpbmcgZGlnaXRzIGFyZSBbNDldOTk5OSBvciBbNTBdMDAwMCBpbmNyZWFzZSB0aGUgcHJlY2lzaW9uIGJ5IDEwIGFuZCByZWNhbGN1bGF0ZVxyXG4gICAgICAvLyB0aGUgcmVzdWx0LlxyXG4gICAgICBpZiAoY2hlY2tSb3VuZGluZ0RpZ2l0cyhyLmQsIHByLCBybSkpIHtcclxuICAgICAgICBlID0gcHIgKyAxMDtcclxuXHJcbiAgICAgICAgLy8gVHJ1bmNhdGUgdG8gdGhlIGluY3JlYXNlZCBwcmVjaXNpb24gcGx1cyBmaXZlIHJvdW5kaW5nIGRpZ2l0cy5cclxuICAgICAgICByID0gZmluYWxpc2UobmF0dXJhbEV4cG9uZW50aWFsKHkudGltZXMobmF0dXJhbExvZ2FyaXRobSh4LCBlICsgaykpLCBlKSwgZSArIDUsIDEpO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgMTQgbmluZXMgZnJvbSB0aGUgMm5kIHJvdW5kaW5nIGRpZ2l0ICh0aGUgZmlyc3Qgcm91bmRpbmcgZGlnaXQgbWF5IGJlIDQgb3IgOSkuXHJcbiAgICAgICAgaWYgKCtkaWdpdHNUb1N0cmluZyhyLmQpLnNsaWNlKHByICsgMSwgcHIgKyAxNSkgKyAxID09IDFlMTQpIHtcclxuICAgICAgICAgIHIgPSBmaW5hbGlzZShyLCBwciArIDEsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHIucyA9IHM7XHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcbiAgICBDdG9yLnJvdW5kaW5nID0gcm07XHJcblxyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHIsIHByLCBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsIHJvdW5kZWQgdG8gYHNkYCBzaWduaWZpY2FudCBkaWdpdHNcclxuICAgKiB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiBSZXR1cm4gZXhwb25lbnRpYWwgbm90YXRpb24gaWYgYHNkYCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHMgbmVjZXNzYXJ5IHRvIHJlcHJlc2VudFxyXG4gICAqIHRoZSBpbnRlZ2VyIHBhcnQgb2YgdGhlIHZhbHVlIGluIG5vcm1hbCBub3RhdGlvbi5cclxuICAgKlxyXG4gICAqIFtzZF0ge251bWJlcn0gU2lnbmlmaWNhbnQgZGlnaXRzLiBJbnRlZ2VyLCAxIHRvIE1BWF9ESUdJVFMgaW5jbHVzaXZlLlxyXG4gICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIFAudG9QcmVjaXNpb24gPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgICB2YXIgc3RyLFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgaWYgKHNkID09PSB2b2lkIDApIHtcclxuICAgICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeCwgeC5lIDw9IEN0b3IudG9FeHBOZWcgfHwgeC5lID49IEN0b3IudG9FeHBQb3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2hlY2tJbnQzMihzZCwgMSwgTUFYX0RJR0lUUyk7XHJcblxyXG4gICAgICBpZiAocm0gPT09IHZvaWQgMCkgcm0gPSBDdG9yLnJvdW5kaW5nO1xyXG4gICAgICBlbHNlIGNoZWNrSW50MzIocm0sIDAsIDgpO1xyXG5cclxuICAgICAgeCA9IGZpbmFsaXNlKG5ldyBDdG9yKHgpLCBzZCwgcm0pO1xyXG4gICAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCBzZCA8PSB4LmUgfHwgeC5lIDw9IEN0b3IudG9FeHBOZWcsIHNkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geC5pc05lZygpICYmICF4LmlzWmVybygpID8gJy0nICsgc3RyIDogc3RyO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgcm91bmRlZCB0byBhIG1heGltdW0gb2YgYHNkYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGBybWAsIG9yIHRvIGBwcmVjaXNpb25gIGFuZCBgcm91bmRpbmdgIHJlc3BlY3RpdmVseSBpZlxyXG4gICAqIG9taXR0ZWQuXHJcbiAgICpcclxuICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICpcclxuICAgKiAndG9TRCgpIGRpZ2l0cyBvdXQgb2YgcmFuZ2U6IHtzZH0nXHJcbiAgICogJ3RvU0QoKSBkaWdpdHMgbm90IGFuIGludGVnZXI6IHtzZH0nXHJcbiAgICogJ3RvU0QoKSByb3VuZGluZyBtb2RlIG5vdCBhbiBpbnRlZ2VyOiB7cm19J1xyXG4gICAqICd0b1NEKCkgcm91bmRpbmcgbW9kZSBvdXQgb2YgcmFuZ2U6IHtybX0nXHJcbiAgICpcclxuICAgKi9cclxuICBQLnRvU2lnbmlmaWNhbnREaWdpdHMgPSBQLnRvU0QgPSBmdW5jdGlvbiAoc2QsIHJtKSB7XHJcbiAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGlmIChzZCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIHNkID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNoZWNrSW50MzIoc2QsIDEsIE1BWF9ESUdJVFMpO1xyXG5cclxuICAgICAgaWYgKHJtID09PSB2b2lkIDApIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgICAgZWxzZSBjaGVja0ludDMyKHJtLCAwLCA4KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoeCksIHNkLCBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBEZWNpbWFsLlxyXG4gICAqXHJcbiAgICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgRGVjaW1hbCBoYXMgYSBwb3NpdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBncmVhdGVyIHRoYW5cclxuICAgKiBgdG9FeHBQb3NgLCBvciBhIG5lZ2F0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGxlc3MgdGhhbiBgdG9FeHBOZWdgLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgsIHguZSA8PSBDdG9yLnRvRXhwTmVnIHx8IHguZSA+PSBDdG9yLnRvRXhwUG9zKTtcclxuXHJcbiAgICByZXR1cm4geC5pc05lZygpICYmICF4LmlzWmVybygpID8gJy0nICsgc3RyIDogc3RyO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwgdHJ1bmNhdGVkIHRvIGEgd2hvbGUgbnVtYmVyLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC50cnVuY2F0ZWQgPSBQLnRydW5jID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGZpbmFsaXNlKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLCB0aGlzLmUgKyAxLCAxKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIERlY2ltYWwuXHJcbiAgICogVW5saWtlIGB0b1N0cmluZ2AsIG5lZ2F0aXZlIHplcm8gd2lsbCBpbmNsdWRlIHRoZSBtaW51cyBzaWduLlxyXG4gICAqXHJcbiAgICovXHJcbiAgUC52YWx1ZU9mID0gUC50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCB4LmUgPD0gQ3Rvci50b0V4cE5lZyB8fCB4LmUgPj0gQ3Rvci50b0V4cFBvcyk7XHJcblxyXG4gICAgcmV0dXJuIHguaXNOZWcoKSA/ICctJyArIHN0ciA6IHN0cjtcclxuICB9O1xyXG5cclxuXHJcbiAgLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgRGVjaW1hbC5wcm90b3R5cGUgKFApIGFuZC9vciBEZWNpbWFsIG1ldGhvZHMsIGFuZCB0aGVpciBjYWxsZXJzLlxyXG5cclxuXHJcbiAgLypcclxuICAgKiAgZGlnaXRzVG9TdHJpbmcgICAgICAgICAgIFAuY3ViZVJvb3QsIFAubG9nYXJpdGhtLCBQLnNxdWFyZVJvb3QsIFAudG9GcmFjdGlvbiwgUC50b1Bvd2VyLFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluaXRlVG9TdHJpbmcsIG5hdHVyYWxFeHBvbmVudGlhbCwgbmF0dXJhbExvZ2FyaXRobVxyXG4gICAqICBjaGVja0ludDMyICAgICAgICAgICAgICAgUC50b0RlY2ltYWxQbGFjZXMsIFAudG9FeHBvbmVudGlhbCwgUC50b0ZpeGVkLCBQLnRvTmVhcmVzdCxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIFAudG9QcmVjaXNpb24sIFAudG9TaWduaWZpY2FudERpZ2l0cywgdG9TdHJpbmdCaW5hcnksIHJhbmRvbVxyXG4gICAqICBjaGVja1JvdW5kaW5nRGlnaXRzICAgICAgUC5sb2dhcml0aG0sIFAudG9Qb3dlciwgbmF0dXJhbEV4cG9uZW50aWFsLCBuYXR1cmFsTG9nYXJpdGhtXHJcbiAgICogIGNvbnZlcnRCYXNlICAgICAgICAgICAgICB0b1N0cmluZ0JpbmFyeSwgcGFyc2VPdGhlclxyXG4gICAqICBjb3MgICAgICAgICAgICAgICAgICAgICAgUC5jb3NcclxuICAgKiAgZGl2aWRlICAgICAgICAgICAgICAgICAgIFAuYXRhbmgsIFAuY3ViZVJvb3QsIFAuZGl2aWRlZEJ5LCBQLmRpdmlkZWRUb0ludGVnZXJCeSxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIFAubG9nYXJpdGhtLCBQLm1vZHVsbywgUC5zcXVhcmVSb290LCBQLnRhbiwgUC50YW5oLCBQLnRvRnJhY3Rpb24sXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBQLnRvTmVhcmVzdCwgdG9TdHJpbmdCaW5hcnksIG5hdHVyYWxFeHBvbmVudGlhbCwgbmF0dXJhbExvZ2FyaXRobSxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRheWxvclNlcmllcywgYXRhbjIsIHBhcnNlT3RoZXJcclxuICAgKiAgZmluYWxpc2UgICAgICAgICAgICAgICAgIFAuYWJzb2x1dGVWYWx1ZSwgUC5hdGFuLCBQLmF0YW5oLCBQLmNlaWwsIFAuY29zLCBQLmNvc2gsXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBQLmN1YmVSb290LCBQLmRpdmlkZWRUb0ludGVnZXJCeSwgUC5mbG9vciwgUC5sb2dhcml0aG0sIFAubWludXMsXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBQLm1vZHVsbywgUC5uZWdhdGVkLCBQLnBsdXMsIFAucm91bmQsIFAuc2luLCBQLnNpbmgsIFAuc3F1YXJlUm9vdCxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIFAudGFuLCBQLnRpbWVzLCBQLnRvRGVjaW1hbFBsYWNlcywgUC50b0V4cG9uZW50aWFsLCBQLnRvRml4ZWQsXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBQLnRvTmVhcmVzdCwgUC50b1Bvd2VyLCBQLnRvUHJlY2lzaW9uLCBQLnRvU2lnbmlmaWNhbnREaWdpdHMsXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBQLnRydW5jYXRlZCwgZGl2aWRlLCBnZXRMbjEwLCBnZXRQaSwgbmF0dXJhbEV4cG9uZW50aWFsLFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0dXJhbExvZ2FyaXRobSwgY2VpbCwgZmxvb3IsIHJvdW5kLCB0cnVuY1xyXG4gICAqICBmaW5pdGVUb1N0cmluZyAgICAgICAgICAgUC50b0V4cG9uZW50aWFsLCBQLnRvRml4ZWQsIFAudG9QcmVjaXNpb24sIFAudG9TdHJpbmcsIFAudmFsdWVPZixcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nQmluYXJ5XHJcbiAgICogIGdldEJhc2UxMEV4cG9uZW50ICAgICAgICBQLm1pbnVzLCBQLnBsdXMsIFAudGltZXMsIHBhcnNlT3RoZXJcclxuICAgKiAgZ2V0TG4xMCAgICAgICAgICAgICAgICAgIFAubG9nYXJpdGhtLCBuYXR1cmFsTG9nYXJpdGhtXHJcbiAgICogIGdldFBpICAgICAgICAgICAgICAgICAgICBQLmFjb3MsIFAuYXNpbiwgUC5hdGFuLCB0b0xlc3NUaGFuSGFsZlBpLCBhdGFuMlxyXG4gICAqICBnZXRQcmVjaXNpb24gICAgICAgICAgICAgUC5wcmVjaXNpb24sIFAudG9GcmFjdGlvblxyXG4gICAqICBnZXRaZXJvU3RyaW5nICAgICAgICAgICAgZGlnaXRzVG9TdHJpbmcsIGZpbml0ZVRvU3RyaW5nXHJcbiAgICogIGludFBvdyAgICAgICAgICAgICAgICAgICBQLnRvUG93ZXIsIHBhcnNlT3RoZXJcclxuICAgKiAgaXNPZGQgICAgICAgICAgICAgICAgICAgIHRvTGVzc1RoYW5IYWxmUGlcclxuICAgKiAgbWF4T3JNaW4gICAgICAgICAgICAgICAgIG1heCwgbWluXHJcbiAgICogIG5hdHVyYWxFeHBvbmVudGlhbCAgICAgICBQLm5hdHVyYWxFeHBvbmVudGlhbCwgUC50b1Bvd2VyXHJcbiAgICogIG5hdHVyYWxMb2dhcml0aG0gICAgICAgICBQLmFjb3NoLCBQLmFzaW5oLCBQLmF0YW5oLCBQLmxvZ2FyaXRobSwgUC5uYXR1cmFsTG9nYXJpdGhtLFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgUC50b1Bvd2VyLCBuYXR1cmFsRXhwb25lbnRpYWxcclxuICAgKiAgbm9uRmluaXRlVG9TdHJpbmcgICAgICAgIGZpbml0ZVRvU3RyaW5nLCB0b1N0cmluZ0JpbmFyeVxyXG4gICAqICBwYXJzZURlY2ltYWwgICAgICAgICAgICAgRGVjaW1hbFxyXG4gICAqICBwYXJzZU90aGVyICAgICAgICAgICAgICAgRGVjaW1hbFxyXG4gICAqICBzaW4gICAgICAgICAgICAgICAgICAgICAgUC5zaW5cclxuICAgKiAgdGF5bG9yU2VyaWVzICAgICAgICAgICAgIFAuY29zaCwgUC5zaW5oLCBjb3MsIHNpblxyXG4gICAqICB0b0xlc3NUaGFuSGFsZlBpICAgICAgICAgUC5jb3MsIFAuc2luXHJcbiAgICogIHRvU3RyaW5nQmluYXJ5ICAgICAgICAgICBQLnRvQmluYXJ5LCBQLnRvSGV4YWRlY2ltYWwsIFAudG9PY3RhbFxyXG4gICAqICB0cnVuY2F0ZSAgICAgICAgICAgICAgICAgaW50UG93XHJcbiAgICpcclxuICAgKiAgVGhyb3dzOiAgICAgICAgICAgICAgICAgIFAubG9nYXJpdGhtLCBQLnByZWNpc2lvbiwgUC50b0ZyYWN0aW9uLCBjaGVja0ludDMyLCBnZXRMbjEwLCBnZXRQaSxcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdHVyYWxMb2dhcml0aG0sIGNvbmZpZywgcGFyc2VPdGhlciwgcmFuZG9tLCBEZWNpbWFsXHJcbiAgICovXHJcblxyXG5cclxuICBmdW5jdGlvbiBkaWdpdHNUb1N0cmluZyhkKSB7XHJcbiAgICB2YXIgaSwgaywgd3MsXHJcbiAgICAgIGluZGV4T2ZMYXN0V29yZCA9IGQubGVuZ3RoIC0gMSxcclxuICAgICAgc3RyID0gJycsXHJcbiAgICAgIHcgPSBkWzBdO1xyXG5cclxuICAgIGlmIChpbmRleE9mTGFzdFdvcmQgPiAwKSB7XHJcbiAgICAgIHN0ciArPSB3O1xyXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgaW5kZXhPZkxhc3RXb3JkOyBpKyspIHtcclxuICAgICAgICB3cyA9IGRbaV0gKyAnJztcclxuICAgICAgICBrID0gTE9HX0JBU0UgLSB3cy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGspIHN0ciArPSBnZXRaZXJvU3RyaW5nKGspO1xyXG4gICAgICAgIHN0ciArPSB3cztcclxuICAgICAgfVxyXG5cclxuICAgICAgdyA9IGRbaV07XHJcbiAgICAgIHdzID0gdyArICcnO1xyXG4gICAgICBrID0gTE9HX0JBU0UgLSB3cy5sZW5ndGg7XHJcbiAgICAgIGlmIChrKSBzdHIgKz0gZ2V0WmVyb1N0cmluZyhrKTtcclxuICAgIH0gZWxzZSBpZiAodyA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gJzAnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcyBvZiBsYXN0IHcuXHJcbiAgICBmb3IgKDsgdyAlIDEwID09PSAwOykgdyAvPSAxMDtcclxuXHJcbiAgICByZXR1cm4gc3RyICsgdztcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBjaGVja0ludDMyKGksIG1pbiwgbWF4KSB7XHJcbiAgICBpZiAoaSAhPT0gfn5pIHx8IGkgPCBtaW4gfHwgaSA+IG1heCkge1xyXG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIENoZWNrIDUgcm91bmRpbmcgZGlnaXRzIGlmIGByZXBlYXRpbmdgIGlzIG51bGwsIDQgb3RoZXJ3aXNlLlxyXG4gICAqIGByZXBlYXRpbmcgPT0gbnVsbGAgaWYgY2FsbGVyIGlzIGBsb2dgIG9yIGBwb3dgLFxyXG4gICAqIGByZXBlYXRpbmcgIT0gbnVsbGAgaWYgY2FsbGVyIGlzIGBuYXR1cmFsTG9nYXJpdGhtYCBvciBgbmF0dXJhbEV4cG9uZW50aWFsYC5cclxuICAgKi9cclxuICBmdW5jdGlvbiBjaGVja1JvdW5kaW5nRGlnaXRzKGQsIGksIHJtLCByZXBlYXRpbmcpIHtcclxuICAgIHZhciBkaSwgaywgciwgcmQ7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBsZW5ndGggb2YgdGhlIGZpcnN0IHdvcmQgb2YgdGhlIGFycmF5IGQuXHJcbiAgICBmb3IgKGsgPSBkWzBdOyBrID49IDEwOyBrIC89IDEwKSAtLWk7XHJcblxyXG4gICAgLy8gSXMgdGhlIHJvdW5kaW5nIGRpZ2l0IGluIHRoZSBmaXJzdCB3b3JkIG9mIGQ/XHJcbiAgICBpZiAoLS1pIDwgMCkge1xyXG4gICAgICBpICs9IExPR19CQVNFO1xyXG4gICAgICBkaSA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkaSA9IE1hdGguY2VpbCgoaSArIDEpIC8gTE9HX0JBU0UpO1xyXG4gICAgICBpICU9IExPR19CQVNFO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGkgaXMgdGhlIGluZGV4ICgwIC0gNikgb2YgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgLy8gRS5nLiBpZiB3aXRoaW4gdGhlIHdvcmQgMzQ4NzU2MyB0aGUgZmlyc3Qgcm91bmRpbmcgZGlnaXQgaXMgNSxcclxuICAgIC8vIHRoZW4gaSA9IDQsIGsgPSAxMDAwLCByZCA9IDM0ODc1NjMgJSAxMDAwID0gNTYzXHJcbiAgICBrID0gbWF0aHBvdygxMCwgTE9HX0JBU0UgLSBpKTtcclxuICAgIHJkID0gZFtkaV0gJSBrIHwgMDtcclxuXHJcbiAgICBpZiAocmVwZWF0aW5nID09IG51bGwpIHtcclxuICAgICAgaWYgKGkgPCAzKSB7XHJcbiAgICAgICAgaWYgKGkgPT0gMCkgcmQgPSByZCAvIDEwMCB8IDA7XHJcbiAgICAgICAgZWxzZSBpZiAoaSA9PSAxKSByZCA9IHJkIC8gMTAgfCAwO1xyXG4gICAgICAgIHIgPSBybSA8IDQgJiYgcmQgPT0gOTk5OTkgfHwgcm0gPiAzICYmIHJkID09IDQ5OTk5IHx8IHJkID09IDUwMDAwIHx8IHJkID09IDA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgciA9IChybSA8IDQgJiYgcmQgKyAxID09IGsgfHwgcm0gPiAzICYmIHJkICsgMSA9PSBrIC8gMikgJiZcclxuICAgICAgICAgIChkW2RpICsgMV0gLyBrIC8gMTAwIHwgMCkgPT0gbWF0aHBvdygxMCwgaSAtIDIpIC0gMSB8fFxyXG4gICAgICAgICAgICAocmQgPT0gayAvIDIgfHwgcmQgPT0gMCkgJiYgKGRbZGkgKyAxXSAvIGsgLyAxMDAgfCAwKSA9PSAwO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaSA8IDQpIHtcclxuICAgICAgICBpZiAoaSA9PSAwKSByZCA9IHJkIC8gMTAwMCB8IDA7XHJcbiAgICAgICAgZWxzZSBpZiAoaSA9PSAxKSByZCA9IHJkIC8gMTAwIHwgMDtcclxuICAgICAgICBlbHNlIGlmIChpID09IDIpIHJkID0gcmQgLyAxMCB8IDA7XHJcbiAgICAgICAgciA9IChyZXBlYXRpbmcgfHwgcm0gPCA0KSAmJiByZCA9PSA5OTk5IHx8ICFyZXBlYXRpbmcgJiYgcm0gPiAzICYmIHJkID09IDQ5OTk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgciA9ICgocmVwZWF0aW5nIHx8IHJtIDwgNCkgJiYgcmQgKyAxID09IGsgfHxcclxuICAgICAgICAoIXJlcGVhdGluZyAmJiBybSA+IDMpICYmIHJkICsgMSA9PSBrIC8gMikgJiZcclxuICAgICAgICAgIChkW2RpICsgMV0gLyBrIC8gMTAwMCB8IDApID09IG1hdGhwb3coMTAsIGkgLSAzKSAtIDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG5cclxuICAvLyBDb252ZXJ0IHN0cmluZyBvZiBgYmFzZUluYCB0byBhbiBhcnJheSBvZiBudW1iZXJzIG9mIGBiYXNlT3V0YC5cclxuICAvLyBFZy4gY29udmVydEJhc2UoJzI1NScsIDEwLCAxNikgcmV0dXJucyBbMTUsIDE1XS5cclxuICAvLyBFZy4gY29udmVydEJhc2UoJ2ZmJywgMTYsIDEwKSByZXR1cm5zIFsyLCA1LCA1XS5cclxuICBmdW5jdGlvbiBjb252ZXJ0QmFzZShzdHIsIGJhc2VJbiwgYmFzZU91dCkge1xyXG4gICAgdmFyIGosXHJcbiAgICAgIGFyciA9IFswXSxcclxuICAgICAgYXJyTCxcclxuICAgICAgaSA9IDAsXHJcbiAgICAgIHN0ckwgPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgIGZvciAoOyBpIDwgc3RyTDspIHtcclxuICAgICAgZm9yIChhcnJMID0gYXJyLmxlbmd0aDsgYXJyTC0tOykgYXJyW2FyckxdICo9IGJhc2VJbjtcclxuICAgICAgYXJyWzBdICs9IE5VTUVSQUxTLmluZGV4T2Yoc3RyLmNoYXJBdChpKyspKTtcclxuICAgICAgZm9yIChqID0gMDsgaiA8IGFyci5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGlmIChhcnJbal0gPiBiYXNlT3V0IC0gMSkge1xyXG4gICAgICAgICAgaWYgKGFycltqICsgMV0gPT09IHZvaWQgMCkgYXJyW2ogKyAxXSA9IDA7XHJcbiAgICAgICAgICBhcnJbaiArIDFdICs9IGFycltqXSAvIGJhc2VPdXQgfCAwO1xyXG4gICAgICAgICAgYXJyW2pdICU9IGJhc2VPdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFyci5yZXZlcnNlKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBjb3MoeCkgPSAxIC0geF4yLzIhICsgeF40LzQhIC0gLi4uXHJcbiAgICogfHh8IDwgcGkvMlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY29zaW5lKEN0b3IsIHgpIHtcclxuICAgIHZhciBrLCBsZW4sIHk7XHJcblxyXG4gICAgaWYgKHguaXNaZXJvKCkpIHJldHVybiB4O1xyXG5cclxuICAgIC8vIEFyZ3VtZW50IHJlZHVjdGlvbjogY29zKDR4KSA9IDgqKGNvc140KHgpIC0gY29zXjIoeCkpICsgMVxyXG4gICAgLy8gaS5lLiBjb3MoeCkgPSA4Kihjb3NeNCh4LzQpIC0gY29zXjIoeC80KSkgKyAxXHJcblxyXG4gICAgLy8gRXN0aW1hdGUgdGhlIG9wdGltdW0gbnVtYmVyIG9mIHRpbWVzIHRvIHVzZSB0aGUgYXJndW1lbnQgcmVkdWN0aW9uLlxyXG4gICAgbGVuID0geC5kLmxlbmd0aDtcclxuICAgIGlmIChsZW4gPCAzMikge1xyXG4gICAgICBrID0gTWF0aC5jZWlsKGxlbiAvIDMpO1xyXG4gICAgICB5ID0gKDEgLyB0aW55UG93KDQsIGspKS50b1N0cmluZygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgayA9IDE2O1xyXG4gICAgICB5ID0gJzIuMzI4MzA2NDM2NTM4Njk2Mjg5MDYyNWUtMTAnO1xyXG4gICAgfVxyXG5cclxuICAgIEN0b3IucHJlY2lzaW9uICs9IGs7XHJcblxyXG4gICAgeCA9IHRheWxvclNlcmllcyhDdG9yLCAxLCB4LnRpbWVzKHkpLCBuZXcgQ3RvcigxKSk7XHJcblxyXG4gICAgLy8gUmV2ZXJzZSBhcmd1bWVudCByZWR1Y3Rpb25cclxuICAgIGZvciAodmFyIGkgPSBrOyBpLS07KSB7XHJcbiAgICAgIHZhciBjb3MyeCA9IHgudGltZXMoeCk7XHJcbiAgICAgIHggPSBjb3MyeC50aW1lcyhjb3MyeCkubWludXMoY29zMngpLnRpbWVzKDgpLnBsdXMoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgQ3Rvci5wcmVjaXNpb24gLT0gaztcclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFBlcmZvcm0gZGl2aXNpb24gaW4gdGhlIHNwZWNpZmllZCBiYXNlLlxyXG4gICAqL1xyXG4gIHZhciBkaXZpZGUgPSAoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIC8vIEFzc3VtZXMgbm9uLXplcm8geCBhbmQgaywgYW5kIGhlbmNlIG5vbi16ZXJvIHJlc3VsdC5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5SW50ZWdlcih4LCBrLCBiYXNlKSB7XHJcbiAgICAgIHZhciB0ZW1wLFxyXG4gICAgICAgIGNhcnJ5ID0gMCxcclxuICAgICAgICBpID0geC5sZW5ndGg7XHJcblxyXG4gICAgICBmb3IgKHggPSB4LnNsaWNlKCk7IGktLTspIHtcclxuICAgICAgICB0ZW1wID0geFtpXSAqIGsgKyBjYXJyeTtcclxuICAgICAgICB4W2ldID0gdGVtcCAlIGJhc2UgfCAwO1xyXG4gICAgICAgIGNhcnJ5ID0gdGVtcCAvIGJhc2UgfCAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2FycnkpIHgudW5zaGlmdChjYXJyeSk7XHJcblxyXG4gICAgICByZXR1cm4geDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21wYXJlKGEsIGIsIGFMLCBiTCkge1xyXG4gICAgICB2YXIgaSwgcjtcclxuXHJcbiAgICAgIGlmIChhTCAhPSBiTCkge1xyXG4gICAgICAgIHIgPSBhTCA+IGJMID8gMSA6IC0xO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAoaSA9IHIgPSAwOyBpIDwgYUw7IGkrKykge1xyXG4gICAgICAgICAgaWYgKGFbaV0gIT0gYltpXSkge1xyXG4gICAgICAgICAgICByID0gYVtpXSA+IGJbaV0gPyAxIDogLTE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3VidHJhY3QoYSwgYiwgYUwsIGJhc2UpIHtcclxuICAgICAgdmFyIGkgPSAwO1xyXG5cclxuICAgICAgLy8gU3VidHJhY3QgYiBmcm9tIGEuXHJcbiAgICAgIGZvciAoOyBhTC0tOykge1xyXG4gICAgICAgIGFbYUxdIC09IGk7XHJcbiAgICAgICAgaSA9IGFbYUxdIDwgYlthTF0gPyAxIDogMDtcclxuICAgICAgICBhW2FMXSA9IGkgKiBiYXNlICsgYVthTF0gLSBiW2FMXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgemVyb3MuXHJcbiAgICAgIGZvciAoOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7KSBhLnNoaWZ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5LCBwciwgcm0sIGRwLCBiYXNlKSB7XHJcbiAgICAgIHZhciBjbXAsIGUsIGksIGssIGxvZ0Jhc2UsIG1vcmUsIHByb2QsIHByb2RMLCBxLCBxZCwgcmVtLCByZW1MLCByZW0wLCBzZCwgdCwgeGksIHhMLCB5ZDAsXHJcbiAgICAgICAgeUwsIHl6LFxyXG4gICAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgIHNpZ24gPSB4LnMgPT0geS5zID8gMSA6IC0xLFxyXG4gICAgICAgIHhkID0geC5kLFxyXG4gICAgICAgIHlkID0geS5kO1xyXG5cclxuICAgICAgLy8gRWl0aGVyIE5hTiwgSW5maW5pdHkgb3IgMD9cclxuICAgICAgaWYgKCF4ZCB8fCAheGRbMF0gfHwgIXlkIHx8ICF5ZFswXSkge1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEN0b3IoLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgTmFOLCBvciBib3RoIEluZmluaXR5IG9yIDAuXHJcbiAgICAgICAgICAheC5zIHx8ICF5LnMgfHwgKHhkID8geWQgJiYgeGRbMF0gPT0geWRbMF0gOiAheWQpID8gTmFOIDpcclxuXHJcbiAgICAgICAgICAvLyBSZXR1cm4gwrEwIGlmIHggaXMgMCBvciB5IGlzIMKxSW5maW5pdHksIG9yIHJldHVybiDCsUluZmluaXR5IGFzIHkgaXMgMC5cclxuICAgICAgICAgIHhkICYmIHhkWzBdID09IDAgfHwgIXlkID8gc2lnbiAqIDAgOiBzaWduIC8gMCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChiYXNlKSB7XHJcbiAgICAgICAgbG9nQmFzZSA9IDE7XHJcbiAgICAgICAgZSA9IHguZSAtIHkuZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBiYXNlID0gQkFTRTtcclxuICAgICAgICBsb2dCYXNlID0gTE9HX0JBU0U7XHJcbiAgICAgICAgZSA9IG1hdGhmbG9vcih4LmUgLyBsb2dCYXNlKSAtIG1hdGhmbG9vcih5LmUgLyBsb2dCYXNlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgeUwgPSB5ZC5sZW5ndGg7XHJcbiAgICAgIHhMID0geGQubGVuZ3RoO1xyXG4gICAgICBxID0gbmV3IEN0b3Ioc2lnbik7XHJcbiAgICAgIHFkID0gcS5kID0gW107XHJcblxyXG4gICAgICAvLyBSZXN1bHQgZXhwb25lbnQgbWF5IGJlIG9uZSBsZXNzIHRoYW4gZS5cclxuICAgICAgLy8gVGhlIGRpZ2l0IGFycmF5IG9mIGEgRGVjaW1hbCBmcm9tIHRvU3RyaW5nQmluYXJ5IG1heSBoYXZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKGkgPSAwOyB5ZFtpXSA9PSAoeGRbaV0gfHwgMCk7IGkrKyk7XHJcblxyXG4gICAgICBpZiAoeWRbaV0gPiAoeGRbaV0gfHwgMCkpIGUtLTtcclxuXHJcbiAgICAgIGlmIChwciA9PSBudWxsKSB7XHJcbiAgICAgICAgc2QgPSBwciA9IEN0b3IucHJlY2lzaW9uO1xyXG4gICAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgICAgfSBlbHNlIGlmIChkcCkge1xyXG4gICAgICAgIHNkID0gcHIgKyAoeC5lIC0geS5lKSArIDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2QgPSBwcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNkIDwgMCkge1xyXG4gICAgICAgIHFkLnB1c2goMSk7XHJcbiAgICAgICAgbW9yZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgcHJlY2lzaW9uIGluIG51bWJlciBvZiBiYXNlIDEwIGRpZ2l0cyB0byBiYXNlIDFlNyBkaWdpdHMuXHJcbiAgICAgICAgc2QgPSBzZCAvIGxvZ0Jhc2UgKyAyIHwgMDtcclxuICAgICAgICBpID0gMDtcclxuXHJcbiAgICAgICAgLy8gZGl2aXNvciA8IDFlN1xyXG4gICAgICAgIGlmICh5TCA9PSAxKSB7XHJcbiAgICAgICAgICBrID0gMDtcclxuICAgICAgICAgIHlkID0geWRbMF07XHJcbiAgICAgICAgICBzZCsrO1xyXG5cclxuICAgICAgICAgIC8vIGsgaXMgdGhlIGNhcnJ5LlxyXG4gICAgICAgICAgZm9yICg7IChpIDwgeEwgfHwgaykgJiYgc2QtLTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQgPSBrICogYmFzZSArICh4ZFtpXSB8fCAwKTtcclxuICAgICAgICAgICAgcWRbaV0gPSB0IC8geWQgfCAwO1xyXG4gICAgICAgICAgICBrID0gdCAlIHlkIHwgMDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBtb3JlID0gayB8fCBpIDwgeEw7XHJcblxyXG4gICAgICAgIC8vIGRpdmlzb3IgPj0gMWU3XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBOb3JtYWxpc2UgeGQgYW5kIHlkIHNvIGhpZ2hlc3Qgb3JkZXIgZGlnaXQgb2YgeWQgaXMgPj0gYmFzZS8yXHJcbiAgICAgICAgICBrID0gYmFzZSAvICh5ZFswXSArIDEpIHwgMDtcclxuXHJcbiAgICAgICAgICBpZiAoayA+IDEpIHtcclxuICAgICAgICAgICAgeWQgPSBtdWx0aXBseUludGVnZXIoeWQsIGssIGJhc2UpO1xyXG4gICAgICAgICAgICB4ZCA9IG11bHRpcGx5SW50ZWdlcih4ZCwgaywgYmFzZSk7XHJcbiAgICAgICAgICAgIHlMID0geWQubGVuZ3RoO1xyXG4gICAgICAgICAgICB4TCA9IHhkLmxlbmd0aDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB4aSA9IHlMO1xyXG4gICAgICAgICAgcmVtID0geGQuc2xpY2UoMCwgeUwpO1xyXG4gICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgLy8gQWRkIHplcm9zIHRvIG1ha2UgcmVtYWluZGVyIGFzIGxvbmcgYXMgZGl2aXNvci5cclxuICAgICAgICAgIGZvciAoOyByZW1MIDwgeUw7KSByZW1bcmVtTCsrXSA9IDA7XHJcblxyXG4gICAgICAgICAgeXogPSB5ZC5zbGljZSgpO1xyXG4gICAgICAgICAgeXoudW5zaGlmdCgwKTtcclxuICAgICAgICAgIHlkMCA9IHlkWzBdO1xyXG5cclxuICAgICAgICAgIGlmICh5ZFsxXSA+PSBiYXNlIC8gMikgKyt5ZDA7XHJcblxyXG4gICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBrID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbXBhcmUgZGl2aXNvciBhbmQgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBjbXAgPSBjb21wYXJlKHlkLCByZW0sIHlMLCByZW1MKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIGRpdmlzb3IgPCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIGlmIChjbXAgPCAwKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0cmlhbCBkaWdpdCwgay5cclxuICAgICAgICAgICAgICByZW0wID0gcmVtWzBdO1xyXG4gICAgICAgICAgICAgIGlmICh5TCAhPSByZW1MKSByZW0wID0gcmVtMCAqIGJhc2UgKyAocmVtWzFdIHx8IDApO1xyXG5cclxuICAgICAgICAgICAgICAvLyBrIHdpbGwgYmUgaG93IG1hbnkgdGltZXMgdGhlIGRpdmlzb3IgZ29lcyBpbnRvIHRoZSBjdXJyZW50IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBrID0gcmVtMCAvIHlkMCB8IDA7XHJcblxyXG4gICAgICAgICAgICAgIC8vICBBbGdvcml0aG06XHJcbiAgICAgICAgICAgICAgLy8gIDEuIHByb2R1Y3QgPSBkaXZpc29yICogdHJpYWwgZGlnaXQgKGspXHJcbiAgICAgICAgICAgICAgLy8gIDIuIGlmIHByb2R1Y3QgPiByZW1haW5kZXI6IHByb2R1Y3QgLT0gZGl2aXNvciwgay0tXHJcbiAgICAgICAgICAgICAgLy8gIDMuIHJlbWFpbmRlciAtPSBwcm9kdWN0XHJcbiAgICAgICAgICAgICAgLy8gIDQuIGlmIHByb2R1Y3Qgd2FzIDwgcmVtYWluZGVyIGF0IDI6XHJcbiAgICAgICAgICAgICAgLy8gICAgNS4gY29tcGFyZSBuZXcgcmVtYWluZGVyIGFuZCBkaXZpc29yXHJcbiAgICAgICAgICAgICAgLy8gICAgNi4gSWYgcmVtYWluZGVyID4gZGl2aXNvcjogcmVtYWluZGVyIC09IGRpdmlzb3IsIGsrK1xyXG5cclxuICAgICAgICAgICAgICBpZiAoayA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrID49IGJhc2UpIGsgPSBiYXNlIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9kdWN0ID0gZGl2aXNvciAqIHRyaWFsIGRpZ2l0LlxyXG4gICAgICAgICAgICAgICAgcHJvZCA9IG11bHRpcGx5SW50ZWdlcih5ZCwgaywgYmFzZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICBjbXAgPSBjb21wYXJlKHByb2QsIHJlbSwgcHJvZEwsIHJlbUwpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHByb2R1Y3QgPiByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICBpZiAoY21wID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgay0tO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZGl2aXNvciBmcm9tIHByb2R1Y3QuXHJcbiAgICAgICAgICAgICAgICAgIHN1YnRyYWN0KHByb2QsIHlMIDwgcHJvZEwgPyB5eiA6IHlkLCBwcm9kTCwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjbXAgaXMgLTEuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBrIGlzIDAsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29tcGFyZSB5ZCBhbmQgcmVtIGFnYWluIGJlbG93LCBzbyBjaGFuZ2UgY21wIHRvIDFcclxuICAgICAgICAgICAgICAgIC8vIHRvIGF2b2lkIGl0LiBJZiBrIGlzIDEgdGhlcmUgaXMgYSBuZWVkIHRvIGNvbXBhcmUgeWQgYW5kIHJlbSBhZ2FpbiBiZWxvdy5cclxuICAgICAgICAgICAgICAgIGlmIChrID09IDApIGNtcCA9IGsgPSAxO1xyXG4gICAgICAgICAgICAgICAgcHJvZCA9IHlkLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIGlmIChwcm9kTCA8IHJlbUwpIHByb2QudW5zaGlmdCgwKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gU3VidHJhY3QgcHJvZHVjdCBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBzdWJ0cmFjdChyZW0sIHByb2QsIHJlbUwsIGJhc2UpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0IHdhcyA8IHByZXZpb3VzIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBpZiAoY21wID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIG5ldyByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICBjbXAgPSBjb21wYXJlKHlkLCByZW0sIHlMLCByZW1MKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBkaXZpc29yIDwgbmV3IHJlbWFpbmRlciwgc3VidHJhY3QgZGl2aXNvciBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICAgIGlmIChjbXAgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIGsrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAgIHN1YnRyYWN0KHJlbSwgeUwgPCByZW1MID8geXogOiB5ZCwgcmVtTCwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjbXAgPT09IDApIHtcclxuICAgICAgICAgICAgICBrKys7XHJcbiAgICAgICAgICAgICAgcmVtID0gWzBdO1xyXG4gICAgICAgICAgICB9ICAgIC8vIGlmIGNtcCA9PT0gMSwgayB3aWxsIGJlIDBcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgbmV4dCBkaWdpdCwgaywgdG8gdGhlIHJlc3VsdCBhcnJheS5cclxuICAgICAgICAgICAgcWRbaSsrXSA9IGs7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgaWYgKGNtcCAmJiByZW1bMF0pIHtcclxuICAgICAgICAgICAgICByZW1bcmVtTCsrXSA9IHhkW3hpXSB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlbSA9IFt4ZFt4aV1dO1xyXG4gICAgICAgICAgICAgIHJlbUwgPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfSB3aGlsZSAoKHhpKysgPCB4TCB8fCByZW1bMF0gIT09IHZvaWQgMCkgJiYgc2QtLSk7XHJcblxyXG4gICAgICAgICAgbW9yZSA9IHJlbVswXSAhPT0gdm9pZCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTGVhZGluZyB6ZXJvP1xyXG4gICAgICAgIGlmICghcWRbMF0pIHFkLnNoaWZ0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGxvZ0Jhc2UgaXMgMSB3aGVuIGRpdmlkZSBpcyBiZWluZyB1c2VkIGZvciBiYXNlIGNvbnZlcnNpb24uXHJcbiAgICAgIGlmIChsb2dCYXNlID09IDEpIHtcclxuICAgICAgICBxLmUgPSBlO1xyXG4gICAgICAgIGluZXhhY3QgPSBtb3JlO1xyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBUbyBjYWxjdWxhdGUgcS5lLCBmaXJzdCBnZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2YgcWRbMF0uXHJcbiAgICAgICAgZm9yIChpID0gMSwgayA9IHFkWzBdOyBrID49IDEwOyBrIC89IDEwKSBpKys7XHJcbiAgICAgICAgcS5lID0gaSArIGUgKiBsb2dCYXNlIC0gMTtcclxuXHJcbiAgICAgICAgZmluYWxpc2UocSwgZHAgPyBwciArIHEuZSArIDEgOiBwciwgcm0sIG1vcmUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcTtcclxuICAgIH07XHJcbiAgfSkoKTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUm91bmQgYHhgIHRvIGBzZGAgc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJtYC5cclxuICAgKiBDaGVjayBmb3Igb3Zlci91bmRlci1mbG93LlxyXG4gICAqL1xyXG4gICBmdW5jdGlvbiBmaW5hbGlzZSh4LCBzZCwgcm0sIGlzVHJ1bmNhdGVkKSB7XHJcbiAgICB2YXIgZGlnaXRzLCBpLCBqLCBrLCByZCwgcm91bmRVcCwgdywgeGQsIHhkaSxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgLy8gRG9uJ3Qgcm91bmQgaWYgc2QgaXMgbnVsbCBvciB1bmRlZmluZWQuXHJcbiAgICBvdXQ6IGlmIChzZCAhPSBudWxsKSB7XHJcbiAgICAgIHhkID0geC5kO1xyXG5cclxuICAgICAgLy8gSW5maW5pdHkvTmFOLlxyXG4gICAgICBpZiAoIXhkKSByZXR1cm4geDtcclxuXHJcbiAgICAgIC8vIHJkOiB0aGUgcm91bmRpbmcgZGlnaXQsIGkuZS4gdGhlIGRpZ2l0IGFmdGVyIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLlxyXG4gICAgICAvLyB3OiB0aGUgd29yZCBvZiB4ZCBjb250YWluaW5nIHJkLCBhIGJhc2UgMWU3IG51bWJlci5cclxuICAgICAgLy8geGRpOiB0aGUgaW5kZXggb2YgdyB3aXRoaW4geGQuXHJcbiAgICAgIC8vIGRpZ2l0czogdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygdy5cclxuICAgICAgLy8gaTogd2hhdCB3b3VsZCBiZSB0aGUgaW5kZXggb2YgcmQgd2l0aGluIHcgaWYgYWxsIHRoZSBudW1iZXJzIHdlcmUgNyBkaWdpdHMgbG9uZyAoaS5lLiBpZlxyXG4gICAgICAvLyB0aGV5IGhhZCBsZWFkaW5nIHplcm9zKVxyXG4gICAgICAvLyBqOiBpZiA+IDAsIHRoZSBhY3R1YWwgaW5kZXggb2YgcmQgd2l0aGluIHcgKGlmIDwgMCwgcmQgaXMgYSBsZWFkaW5nIHplcm8pLlxyXG5cclxuICAgICAgLy8gR2V0IHRoZSBsZW5ndGggb2YgdGhlIGZpcnN0IHdvcmQgb2YgdGhlIGRpZ2l0cyBhcnJheSB4ZC5cclxuICAgICAgZm9yIChkaWdpdHMgPSAxLCBrID0geGRbMF07IGsgPj0gMTA7IGsgLz0gMTApIGRpZ2l0cysrO1xyXG4gICAgICBpID0gc2QgLSBkaWdpdHM7XHJcblxyXG4gICAgICAvLyBJcyB0aGUgcm91bmRpbmcgZGlnaXQgaW4gdGhlIGZpcnN0IHdvcmQgb2YgeGQ/XHJcbiAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgIGkgKz0gTE9HX0JBU0U7XHJcbiAgICAgICAgaiA9IHNkO1xyXG4gICAgICAgIHcgPSB4ZFt4ZGkgPSAwXTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSByb3VuZGluZyBkaWdpdCBhdCBpbmRleCBqIG9mIHcuXHJcbiAgICAgICAgcmQgPSB3IC8gbWF0aHBvdygxMCwgZGlnaXRzIC0gaiAtIDEpICUgMTAgfCAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHhkaSA9IE1hdGguY2VpbCgoaSArIDEpIC8gTE9HX0JBU0UpO1xyXG4gICAgICAgIGsgPSB4ZC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHhkaSA+PSBrKSB7XHJcbiAgICAgICAgICBpZiAoaXNUcnVuY2F0ZWQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIE5lZWRlZCBieSBgbmF0dXJhbEV4cG9uZW50aWFsYCwgYG5hdHVyYWxMb2dhcml0aG1gIGFuZCBgc3F1YXJlUm9vdGAuXHJcbiAgICAgICAgICAgIGZvciAoOyBrKysgPD0geGRpOykgeGQucHVzaCgwKTtcclxuICAgICAgICAgICAgdyA9IHJkID0gMDtcclxuICAgICAgICAgICAgZGlnaXRzID0gMTtcclxuICAgICAgICAgICAgaSAlPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgaiA9IGkgLSBMT0dfQkFTRSArIDE7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBicmVhayBvdXQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHcgPSBrID0geGRbeGRpXTtcclxuXHJcbiAgICAgICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygdy5cclxuICAgICAgICAgIGZvciAoZGlnaXRzID0gMTsgayA+PSAxMDsgayAvPSAxMCkgZGlnaXRzKys7XHJcblxyXG4gICAgICAgICAgLy8gR2V0IHRoZSBpbmRleCBvZiByZCB3aXRoaW4gdy5cclxuICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgLy8gR2V0IHRoZSBpbmRleCBvZiByZCB3aXRoaW4gdywgYWRqdXN0ZWQgZm9yIGxlYWRpbmcgemVyb3MuXHJcbiAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2YgdyBpcyBnaXZlbiBieSBMT0dfQkFTRSAtIGRpZ2l0cy5cclxuICAgICAgICAgIGogPSBpIC0gTE9HX0JBU0UgKyBkaWdpdHM7XHJcblxyXG4gICAgICAgICAgLy8gR2V0IHRoZSByb3VuZGluZyBkaWdpdCBhdCBpbmRleCBqIG9mIHcuXHJcbiAgICAgICAgICByZCA9IGogPCAwID8gMCA6IHcgLyBtYXRocG93KDEwLCBkaWdpdHMgLSBqIC0gMSkgJSAxMCB8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XHJcbiAgICAgIGlzVHJ1bmNhdGVkID0gaXNUcnVuY2F0ZWQgfHwgc2QgPCAwIHx8XHJcbiAgICAgICAgeGRbeGRpICsgMV0gIT09IHZvaWQgMCB8fCAoaiA8IDAgPyB3IDogdyAlIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGogLSAxKSk7XHJcblxyXG4gICAgICAvLyBUaGUgZXhwcmVzc2lvbiBgdyAlIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGogLSAxKWAgcmV0dXJucyBhbGwgdGhlIGRpZ2l0cyBvZiB3IHRvIHRoZSByaWdodFxyXG4gICAgICAvLyBvZiB0aGUgZGlnaXQgYXQgKGxlZnQtdG8tcmlnaHQpIGluZGV4IGosIGUuZy4gaWYgdyBpcyA5MDg3MTQgYW5kIGogaXMgMiwgdGhlIGV4cHJlc3Npb25cclxuICAgICAgLy8gd2lsbCBnaXZlIDcxNC5cclxuXHJcbiAgICAgIHJvdW5kVXAgPSBybSA8IDRcclxuICAgICAgICA/IChyZCB8fCBpc1RydW5jYXRlZCkgJiYgKHJtID09IDAgfHwgcm0gPT0gKHgucyA8IDAgPyAzIDogMikpXHJcbiAgICAgICAgOiByZCA+IDUgfHwgcmQgPT0gNSAmJiAocm0gPT0gNCB8fCBpc1RydW5jYXRlZCB8fCBybSA9PSA2ICYmXHJcblxyXG4gICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZGlnaXQgdG8gdGhlIGxlZnQgb2YgdGhlIHJvdW5kaW5nIGRpZ2l0IGlzIG9kZC5cclxuICAgICAgICAgICgoaSA+IDAgPyBqID4gMCA/IHcgLyBtYXRocG93KDEwLCBkaWdpdHMgLSBqKSA6IDAgOiB4ZFt4ZGkgLSAxXSkgJSAxMCkgJiAxIHx8XHJcbiAgICAgICAgICAgIHJtID09ICh4LnMgPCAwID8gOCA6IDcpKTtcclxuXHJcbiAgICAgIGlmIChzZCA8IDEgfHwgIXhkWzBdKSB7XHJcbiAgICAgICAgeGQubGVuZ3RoID0gMDtcclxuICAgICAgICBpZiAocm91bmRVcCkge1xyXG5cclxuICAgICAgICAgIC8vIENvbnZlcnQgc2QgdG8gZGVjaW1hbCBwbGFjZXMuXHJcbiAgICAgICAgICBzZCAtPSB4LmUgKyAxO1xyXG5cclxuICAgICAgICAgIC8vIDEsIDAuMSwgMC4wMSwgMC4wMDEsIDAuMDAwMSBldGMuXHJcbiAgICAgICAgICB4ZFswXSA9IG1hdGhwb3coMTAsIChMT0dfQkFTRSAtIHNkICUgTE9HX0JBU0UpICUgTE9HX0JBU0UpO1xyXG4gICAgICAgICAgeC5lID0gLXNkIHx8IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgeGRbMF0gPSB4LmUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBleGNlc3MgZGlnaXRzLlxyXG4gICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgeGQubGVuZ3RoID0geGRpO1xyXG4gICAgICAgIGsgPSAxO1xyXG4gICAgICAgIHhkaS0tO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHhkLmxlbmd0aCA9IHhkaSArIDE7XHJcbiAgICAgICAgayA9IG1hdGhwb3coMTAsIExPR19CQVNFIC0gaSk7XHJcblxyXG4gICAgICAgIC8vIEUuZy4gNTY3MDAgYmVjb21lcyA1NjAwMCBpZiA3IGlzIHRoZSByb3VuZGluZyBkaWdpdC5cclxuICAgICAgICAvLyBqID4gMCBtZWFucyBpID4gbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2Ygdy5cclxuICAgICAgICB4ZFt4ZGldID0gaiA+IDAgPyAodyAvIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGopICUgbWF0aHBvdygxMCwgaikgfCAwKSAqIGsgOiAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocm91bmRVcCkge1xyXG4gICAgICAgIGZvciAoOzspIHtcclxuXHJcbiAgICAgICAgICAvLyBJcyB0aGUgZGlnaXQgdG8gYmUgcm91bmRlZCB1cCBpbiB0aGUgZmlyc3Qgd29yZCBvZiB4ZD9cclxuICAgICAgICAgIGlmICh4ZGkgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgLy8gaSB3aWxsIGJlIHRoZSBsZW5ndGggb2YgeGRbMF0gYmVmb3JlIGsgaXMgYWRkZWQuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDEsIGogPSB4ZFswXTsgaiA+PSAxMDsgaiAvPSAxMCkgaSsrO1xyXG4gICAgICAgICAgICBqID0geGRbMF0gKz0gaztcclxuICAgICAgICAgICAgZm9yIChrID0gMTsgaiA+PSAxMDsgaiAvPSAxMCkgaysrO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgaSAhPSBrIHRoZSBsZW5ndGggaGFzIGluY3JlYXNlZC5cclxuICAgICAgICAgICAgaWYgKGkgIT0gaykge1xyXG4gICAgICAgICAgICAgIHguZSsrO1xyXG4gICAgICAgICAgICAgIGlmICh4ZFswXSA9PSBCQVNFKSB4ZFswXSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeGRbeGRpXSArPSBrO1xyXG4gICAgICAgICAgICBpZiAoeGRbeGRpXSAhPSBCQVNFKSBicmVhaztcclxuICAgICAgICAgICAgeGRbeGRpLS1dID0gMDtcclxuICAgICAgICAgICAgayA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAoaSA9IHhkLmxlbmd0aDsgeGRbLS1pXSA9PT0gMDspIHhkLnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChleHRlcm5hbCkge1xyXG5cclxuICAgICAgLy8gT3ZlcmZsb3c/XHJcbiAgICAgIGlmICh4LmUgPiBDdG9yLm1heEUpIHtcclxuXHJcbiAgICAgICAgLy8gSW5maW5pdHkuXHJcbiAgICAgICAgeC5kID0gbnVsbDtcclxuICAgICAgICB4LmUgPSBOYU47XHJcblxyXG4gICAgICAvLyBVbmRlcmZsb3c/XHJcbiAgICAgIH0gZWxzZSBpZiAoeC5lIDwgQ3Rvci5taW5FKSB7XHJcblxyXG4gICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgeC5lID0gMDtcclxuICAgICAgICB4LmQgPSBbMF07XHJcbiAgICAgICAgLy8gQ3Rvci51bmRlcmZsb3cgPSB0cnVlO1xyXG4gICAgICB9IC8vIGVsc2UgQ3Rvci51bmRlcmZsb3cgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBmaW5pdGVUb1N0cmluZyh4LCBpc0V4cCwgc2QpIHtcclxuICAgIGlmICgheC5pc0Zpbml0ZSgpKSByZXR1cm4gbm9uRmluaXRlVG9TdHJpbmcoeCk7XHJcbiAgICB2YXIgayxcclxuICAgICAgZSA9IHguZSxcclxuICAgICAgc3RyID0gZGlnaXRzVG9TdHJpbmcoeC5kKSxcclxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICBpZiAoaXNFeHApIHtcclxuICAgICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMCkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSkgKyBnZXRaZXJvU3RyaW5nKGspO1xyXG4gICAgICB9IGVsc2UgaWYgKGxlbiA+IDEpIHtcclxuICAgICAgICBzdHIgPSBzdHIuY2hhckF0KDApICsgJy4nICsgc3RyLnNsaWNlKDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzdHIgPSBzdHIgKyAoeC5lIDwgMCA/ICdlJyA6ICdlKycpICsgeC5lO1xyXG4gICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG4gICAgICBzdHIgPSAnMC4nICsgZ2V0WmVyb1N0cmluZygtZSAtIDEpICsgc3RyO1xyXG4gICAgICBpZiAoc2QgJiYgKGsgPSBzZCAtIGxlbikgPiAwKSBzdHIgKz0gZ2V0WmVyb1N0cmluZyhrKTtcclxuICAgIH0gZWxzZSBpZiAoZSA+PSBsZW4pIHtcclxuICAgICAgc3RyICs9IGdldFplcm9TdHJpbmcoZSArIDEgLSBsZW4pO1xyXG4gICAgICBpZiAoc2QgJiYgKGsgPSBzZCAtIGUgLSAxKSA+IDApIHN0ciA9IHN0ciArICcuJyArIGdldFplcm9TdHJpbmcoayk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoKGsgPSBlICsgMSkgPCBsZW4pIHN0ciA9IHN0ci5zbGljZSgwLCBrKSArICcuJyArIHN0ci5zbGljZShrKTtcclxuICAgICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMCkge1xyXG4gICAgICAgIGlmIChlICsgMSA9PT0gbGVuKSBzdHIgKz0gJy4nO1xyXG4gICAgICAgIHN0ciArPSBnZXRaZXJvU3RyaW5nKGspO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0cjtcclxuICB9XHJcblxyXG5cclxuICAvLyBDYWxjdWxhdGUgdGhlIGJhc2UgMTAgZXhwb25lbnQgZnJvbSB0aGUgYmFzZSAxZTcgZXhwb25lbnQuXHJcbiAgZnVuY3Rpb24gZ2V0QmFzZTEwRXhwb25lbnQoZGlnaXRzLCBlKSB7XHJcbiAgICB2YXIgdyA9IGRpZ2l0c1swXTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2YgdGhlIGZpcnN0IHdvcmQgb2YgdGhlIGRpZ2l0cyBhcnJheS5cclxuICAgIGZvciAoIGUgKj0gTE9HX0JBU0U7IHcgPj0gMTA7IHcgLz0gMTApIGUrKztcclxuICAgIHJldHVybiBlO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGdldExuMTAoQ3Rvciwgc2QsIHByKSB7XHJcbiAgICBpZiAoc2QgPiBMTjEwX1BSRUNJU0lPTikge1xyXG5cclxuICAgICAgLy8gUmVzZXQgZ2xvYmFsIHN0YXRlIGluIGNhc2UgdGhlIGV4Y2VwdGlvbiBpcyBjYXVnaHQuXHJcbiAgICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuICAgICAgaWYgKHByKSBDdG9yLnByZWNpc2lvbiA9IHByO1xyXG4gICAgICB0aHJvdyBFcnJvcihwcmVjaXNpb25MaW1pdEV4Y2VlZGVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmaW5hbGlzZShuZXcgQ3RvcihMTjEwKSwgc2QsIDEsIHRydWUpO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGdldFBpKEN0b3IsIHNkLCBybSkge1xyXG4gICAgaWYgKHNkID4gUElfUFJFQ0lTSU9OKSB0aHJvdyBFcnJvcihwcmVjaXNpb25MaW1pdEV4Y2VlZGVkKTtcclxuICAgIHJldHVybiBmaW5hbGlzZShuZXcgQ3RvcihQSSksIHNkLCBybSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gZ2V0UHJlY2lzaW9uKGRpZ2l0cykge1xyXG4gICAgdmFyIHcgPSBkaWdpdHMubGVuZ3RoIC0gMSxcclxuICAgICAgbGVuID0gdyAqIExPR19CQVNFICsgMTtcclxuXHJcbiAgICB3ID0gZGlnaXRzW3ddO1xyXG5cclxuICAgIC8vIElmIG5vbi16ZXJvLi4uXHJcbiAgICBpZiAodykge1xyXG5cclxuICAgICAgLy8gU3VidHJhY3QgdGhlIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvcyBvZiB0aGUgbGFzdCB3b3JkLlxyXG4gICAgICBmb3IgKDsgdyAlIDEwID09IDA7IHcgLz0gMTApIGxlbi0tO1xyXG5cclxuICAgICAgLy8gQWRkIHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHRoZSBmaXJzdCB3b3JkLlxyXG4gICAgICBmb3IgKHcgPSBkaWdpdHNbMF07IHcgPj0gMTA7IHcgLz0gMTApIGxlbisrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsZW47XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gZ2V0WmVyb1N0cmluZyhrKSB7XHJcbiAgICB2YXIgenMgPSAnJztcclxuICAgIGZvciAoOyBrLS07KSB6cyArPSAnMCc7XHJcbiAgICByZXR1cm4genM7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgRGVjaW1hbCBgeGAgdG8gdGhlIHBvd2VyIGBuYCwgd2hlcmUgYG5gIGlzIGFuXHJcbiAgICogaW50ZWdlciBvZiB0eXBlIG51bWJlci5cclxuICAgKlxyXG4gICAqIEltcGxlbWVudHMgJ2V4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nJy4gQ2FsbGVkIGJ5IGBwb3dgIGFuZCBgcGFyc2VPdGhlcmAuXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBpbnRQb3coQ3RvciwgeCwgbiwgcHIpIHtcclxuICAgIHZhciBpc1RydW5jYXRlZCxcclxuICAgICAgciA9IG5ldyBDdG9yKDEpLFxyXG5cclxuICAgICAgLy8gTWF4IG4gb2YgOTAwNzE5OTI1NDc0MDk5MSB0YWtlcyA1MyBsb29wIGl0ZXJhdGlvbnMuXHJcbiAgICAgIC8vIE1heGltdW0gZGlnaXRzIGFycmF5IGxlbmd0aDsgbGVhdmVzIFsyOCwgMzRdIGd1YXJkIGRpZ2l0cy5cclxuICAgICAgayA9IE1hdGguY2VpbChwciAvIExPR19CQVNFICsgNCk7XHJcblxyXG4gICAgZXh0ZXJuYWwgPSBmYWxzZTtcclxuXHJcbiAgICBmb3IgKDs7KSB7XHJcbiAgICAgIGlmIChuICUgMikge1xyXG4gICAgICAgIHIgPSByLnRpbWVzKHgpO1xyXG4gICAgICAgIGlmICh0cnVuY2F0ZShyLmQsIGspKSBpc1RydW5jYXRlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG4gPSBtYXRoZmxvb3IobiAvIDIpO1xyXG4gICAgICBpZiAobiA9PT0gMCkge1xyXG5cclxuICAgICAgICAvLyBUbyBlbnN1cmUgY29ycmVjdCByb3VuZGluZyB3aGVuIHIuZCBpcyB0cnVuY2F0ZWQsIGluY3JlbWVudCB0aGUgbGFzdCB3b3JkIGlmIGl0IGlzIHplcm8uXHJcbiAgICAgICAgbiA9IHIuZC5sZW5ndGggLSAxO1xyXG4gICAgICAgIGlmIChpc1RydW5jYXRlZCAmJiByLmRbbl0gPT09IDApICsrci5kW25dO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB4ID0geC50aW1lcyh4KTtcclxuICAgICAgdHJ1bmNhdGUoeC5kLCBrKTtcclxuICAgIH1cclxuXHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gaXNPZGQobikge1xyXG4gICAgcmV0dXJuIG4uZFtuLmQubGVuZ3RoIC0gMV0gJiAxO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogSGFuZGxlIGBtYXhgIGFuZCBgbWluYC4gYGx0Z3RgIGlzICdsdCcgb3IgJ2d0Jy5cclxuICAgKi9cclxuICBmdW5jdGlvbiBtYXhPck1pbihDdG9yLCBhcmdzLCBsdGd0KSB7XHJcbiAgICB2YXIgeSxcclxuICAgICAgeCA9IG5ldyBDdG9yKGFyZ3NbMF0pLFxyXG4gICAgICBpID0gMDtcclxuXHJcbiAgICBmb3IgKDsgKytpIDwgYXJncy5sZW5ndGg7KSB7XHJcbiAgICAgIHkgPSBuZXcgQ3RvcihhcmdzW2ldKTtcclxuICAgICAgaWYgKCF5LnMpIHtcclxuICAgICAgICB4ID0geTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfSBlbHNlIGlmICh4W2x0Z3RdKHkpKSB7XHJcbiAgICAgICAgeCA9IHk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGV4cG9uZW50aWFsIG9mIGB4YCByb3VuZGVkIHRvIGBzZGAgc2lnbmlmaWNhbnRcclxuICAgKiBkaWdpdHMuXHJcbiAgICpcclxuICAgKiBUYXlsb3IvTWFjbGF1cmluIHNlcmllcy5cclxuICAgKlxyXG4gICAqIGV4cCh4KSA9IHheMC8wISArIHheMS8xISArIHheMi8yISArIHheMy8zISArIC4uLlxyXG4gICAqXHJcbiAgICogQXJndW1lbnQgcmVkdWN0aW9uOlxyXG4gICAqICAgUmVwZWF0IHggPSB4IC8gMzIsIGsgKz0gNSwgdW50aWwgfHh8IDwgMC4xXHJcbiAgICogICBleHAoeCkgPSBleHAoeCAvIDJeayleKDJeaylcclxuICAgKlxyXG4gICAqIFByZXZpb3VzbHksIHRoZSBhcmd1bWVudCB3YXMgaW5pdGlhbGx5IHJlZHVjZWQgYnlcclxuICAgKiBleHAoeCkgPSBleHAocikgKiAxMF5rICB3aGVyZSByID0geCAtIGsgKiBsbjEwLCBrID0gZmxvb3IoeCAvIGxuMTApXHJcbiAgICogdG8gZmlyc3QgcHV0IHIgaW4gdGhlIHJhbmdlIFswLCBsbjEwXSwgYmVmb3JlIGRpdmlkaW5nIGJ5IDMyIHVudGlsIHx4fCA8IDAuMSwgYnV0IHRoaXMgd2FzXHJcbiAgICogZm91bmQgdG8gYmUgc2xvd2VyIHRoYW4ganVzdCBkaXZpZGluZyByZXBlYXRlZGx5IGJ5IDMyIGFzIGFib3ZlLlxyXG4gICAqXHJcbiAgICogTWF4IGludGVnZXIgYXJndW1lbnQ6IGV4cCgnMjA3MjMyNjU4MzY5NDY0MTMnKSA9IDYuM2UrOTAwMDAwMDAwMDAwMDAwMFxyXG4gICAqIE1pbiBpbnRlZ2VyIGFyZ3VtZW50OiBleHAoJy0yMDcyMzI2NTgzNjk0NjQxMScpID0gMS4yZS05MDAwMDAwMDAwMDAwMDAwXHJcbiAgICogKE1hdGggb2JqZWN0IGludGVnZXIgbWluL21heDogTWF0aC5leHAoNzA5KSA9IDguMmUrMzA3LCBNYXRoLmV4cCgtNzQ1KSA9IDVlLTMyNClcclxuICAgKlxyXG4gICAqICBleHAoSW5maW5pdHkpICA9IEluZmluaXR5XHJcbiAgICogIGV4cCgtSW5maW5pdHkpID0gMFxyXG4gICAqICBleHAoTmFOKSAgICAgICA9IE5hTlxyXG4gICAqICBleHAowrEwKSAgICAgICAgPSAxXHJcbiAgICpcclxuICAgKiAgZXhwKHgpIGlzIG5vbi10ZXJtaW5hdGluZyBmb3IgYW55IGZpbml0ZSwgbm9uLXplcm8geC5cclxuICAgKlxyXG4gICAqICBUaGUgcmVzdWx0IHdpbGwgYWx3YXlzIGJlIGNvcnJlY3RseSByb3VuZGVkLlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gbmF0dXJhbEV4cG9uZW50aWFsKHgsIHNkKSB7XHJcbiAgICB2YXIgZGVub21pbmF0b3IsIGd1YXJkLCBqLCBwb3csIHN1bSwgdCwgd3ByLFxyXG4gICAgICByZXAgPSAwLFxyXG4gICAgICBpID0gMCxcclxuICAgICAgayA9IDAsXHJcbiAgICAgIEN0b3IgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICBybSA9IEN0b3Iucm91bmRpbmcsXHJcbiAgICAgIHByID0gQ3Rvci5wcmVjaXNpb247XHJcblxyXG4gICAgLy8gMC9OYU4vSW5maW5pdHk/XHJcbiAgICBpZiAoIXguZCB8fCAheC5kWzBdIHx8IHguZSA+IDE3KSB7XHJcblxyXG4gICAgICByZXR1cm4gbmV3IEN0b3IoeC5kXHJcbiAgICAgICAgPyAheC5kWzBdID8gMSA6IHgucyA8IDAgPyAwIDogMSAvIDBcclxuICAgICAgICA6IHgucyA/IHgucyA8IDAgPyAwIDogeCA6IDAgLyAwKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2QgPT0gbnVsbCkge1xyXG4gICAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG4gICAgICB3cHIgPSBwcjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdwciA9IHNkO1xyXG4gICAgfVxyXG5cclxuICAgIHQgPSBuZXcgQ3RvcigwLjAzMTI1KTtcclxuXHJcbiAgICAvLyB3aGlsZSBhYnMoeCkgPj0gMC4xXHJcbiAgICB3aGlsZSAoeC5lID4gLTIpIHtcclxuXHJcbiAgICAgIC8vIHggPSB4IC8gMl41XHJcbiAgICAgIHggPSB4LnRpbWVzKHQpO1xyXG4gICAgICBrICs9IDU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXNlIDIgKiBsb2cxMCgyXmspICsgNSAoZW1waXJpY2FsbHkgZGVyaXZlZCkgdG8gZXN0aW1hdGUgdGhlIGluY3JlYXNlIGluIHByZWNpc2lvblxyXG4gICAgLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSB0aGUgZmlyc3QgNCByb3VuZGluZyBkaWdpdHMgYXJlIGNvcnJlY3QuXHJcbiAgICBndWFyZCA9IE1hdGgubG9nKG1hdGhwb3coMiwgaykpIC8gTWF0aC5MTjEwICogMiArIDUgfCAwO1xyXG4gICAgd3ByICs9IGd1YXJkO1xyXG4gICAgZGVub21pbmF0b3IgPSBwb3cgPSBzdW0gPSBuZXcgQ3RvcigxKTtcclxuICAgIEN0b3IucHJlY2lzaW9uID0gd3ByO1xyXG5cclxuICAgIGZvciAoOzspIHtcclxuICAgICAgcG93ID0gZmluYWxpc2UocG93LnRpbWVzKHgpLCB3cHIsIDEpO1xyXG4gICAgICBkZW5vbWluYXRvciA9IGRlbm9taW5hdG9yLnRpbWVzKCsraSk7XHJcbiAgICAgIHQgPSBzdW0ucGx1cyhkaXZpZGUocG93LCBkZW5vbWluYXRvciwgd3ByLCAxKSk7XHJcblxyXG4gICAgICBpZiAoZGlnaXRzVG9TdHJpbmcodC5kKS5zbGljZSgwLCB3cHIpID09PSBkaWdpdHNUb1N0cmluZyhzdW0uZCkuc2xpY2UoMCwgd3ByKSkge1xyXG4gICAgICAgIGogPSBrO1xyXG4gICAgICAgIHdoaWxlIChqLS0pIHN1bSA9IGZpbmFsaXNlKHN1bS50aW1lcyhzdW0pLCB3cHIsIDEpO1xyXG5cclxuICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGZpcnN0IDQgcm91bmRpbmcgZGlnaXRzIGFyZSBbNDldOTk5LlxyXG4gICAgICAgIC8vIElmIHNvLCByZXBlYXQgdGhlIHN1bW1hdGlvbiB3aXRoIGEgaGlnaGVyIHByZWNpc2lvbiwgb3RoZXJ3aXNlXHJcbiAgICAgICAgLy8gZS5nLiB3aXRoIHByZWNpc2lvbjogMTgsIHJvdW5kaW5nOiAxXHJcbiAgICAgICAgLy8gZXhwKDE4LjQwNDI3MjQ2MjU5NTAzNDA4MzU2Nzc5MzkxOTg0Mzc2MSkgPSA5ODM3MjU2MC4xMjI5OTk5OTk5IChzaG91bGQgYmUgOTgzNzI1NjAuMTIzKVxyXG4gICAgICAgIC8vIGB3cHIgLSBndWFyZGAgaXMgdGhlIGluZGV4IG9mIGZpcnN0IHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgIGlmIChzZCA9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgaWYgKHJlcCA8IDMgJiYgY2hlY2tSb3VuZGluZ0RpZ2l0cyhzdW0uZCwgd3ByIC0gZ3VhcmQsIHJtLCByZXApKSB7XHJcbiAgICAgICAgICAgIEN0b3IucHJlY2lzaW9uID0gd3ByICs9IDEwO1xyXG4gICAgICAgICAgICBkZW5vbWluYXRvciA9IHBvdyA9IHQgPSBuZXcgQ3RvcigxKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICAgIHJlcCsrO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbmFsaXNlKHN1bSwgQ3Rvci5wcmVjaXNpb24gPSBwciwgcm0sIGV4dGVybmFsID0gdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcbiAgICAgICAgICByZXR1cm4gc3VtO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc3VtID0gdDtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBvZiBgeGAgcm91bmRlZCB0byBgc2RgIHNpZ25pZmljYW50XHJcbiAgICogZGlnaXRzLlxyXG4gICAqXHJcbiAgICogIGxuKC1uKSAgICAgICAgPSBOYU5cclxuICAgKiAgbG4oMCkgICAgICAgICA9IC1JbmZpbml0eVxyXG4gICAqICBsbigtMCkgICAgICAgID0gLUluZmluaXR5XHJcbiAgICogIGxuKDEpICAgICAgICAgPSAwXHJcbiAgICogIGxuKEluZmluaXR5KSAgPSBJbmZpbml0eVxyXG4gICAqICBsbigtSW5maW5pdHkpID0gTmFOXHJcbiAgICogIGxuKE5hTikgICAgICAgPSBOYU5cclxuICAgKlxyXG4gICAqICBsbihuKSAobiAhPSAxKSBpcyBub24tdGVybWluYXRpbmcuXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBuYXR1cmFsTG9nYXJpdGhtKHksIHNkKSB7XHJcbiAgICB2YXIgYywgYzAsIGRlbm9taW5hdG9yLCBlLCBudW1lcmF0b3IsIHJlcCwgc3VtLCB0LCB3cHIsIHgxLCB4MixcclxuICAgICAgbiA9IDEsXHJcbiAgICAgIGd1YXJkID0gMTAsXHJcbiAgICAgIHggPSB5LFxyXG4gICAgICB4ZCA9IHguZCxcclxuICAgICAgQ3RvciA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZyxcclxuICAgICAgcHIgPSBDdG9yLnByZWNpc2lvbjtcclxuXHJcbiAgICAvLyBJcyB4IG5lZ2F0aXZlIG9yIEluZmluaXR5LCBOYU4sIDAgb3IgMT9cclxuICAgIGlmICh4LnMgPCAwIHx8ICF4ZCB8fCAheGRbMF0gfHwgIXguZSAmJiB4ZFswXSA9PSAxICYmIHhkLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ3Rvcih4ZCAmJiAheGRbMF0gPyAtMSAvIDAgOiB4LnMgIT0gMSA/IE5hTiA6IHhkID8gMCA6IHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZCA9PSBudWxsKSB7XHJcbiAgICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICAgIHdwciA9IHByO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd3ByID0gc2Q7XHJcbiAgICB9XHJcblxyXG4gICAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgKz0gZ3VhcmQ7XHJcbiAgICBjID0gZGlnaXRzVG9TdHJpbmcoeGQpO1xyXG4gICAgYzAgPSBjLmNoYXJBdCgwKTtcclxuXHJcbiAgICBpZiAoTWF0aC5hYnMoZSA9IHguZSkgPCAxLjVlMTUpIHtcclxuXHJcbiAgICAgIC8vIEFyZ3VtZW50IHJlZHVjdGlvbi5cclxuICAgICAgLy8gVGhlIHNlcmllcyBjb252ZXJnZXMgZmFzdGVyIHRoZSBjbG9zZXIgdGhlIGFyZ3VtZW50IGlzIHRvIDEsIHNvIHVzaW5nXHJcbiAgICAgIC8vIGxuKGFeYikgPSBiICogbG4oYSksICAgbG4oYSkgPSBsbihhXmIpIC8gYlxyXG4gICAgICAvLyBtdWx0aXBseSB0aGUgYXJndW1lbnQgYnkgaXRzZWxmIHVudGlsIHRoZSBsZWFkaW5nIGRpZ2l0cyBvZiB0aGUgc2lnbmlmaWNhbmQgYXJlIDcsIDgsIDksXHJcbiAgICAgIC8vIDEwLCAxMSwgMTIgb3IgMTMsIHJlY29yZGluZyB0aGUgbnVtYmVyIG9mIG11bHRpcGxpY2F0aW9ucyBzbyB0aGUgc3VtIG9mIHRoZSBzZXJpZXMgY2FuXHJcbiAgICAgIC8vIGxhdGVyIGJlIGRpdmlkZWQgYnkgdGhpcyBudW1iZXIsIHRoZW4gc2VwYXJhdGUgb3V0IHRoZSBwb3dlciBvZiAxMCB1c2luZ1xyXG4gICAgICAvLyBsbihhKjEwXmIpID0gbG4oYSkgKyBiKmxuKDEwKS5cclxuXHJcbiAgICAgIC8vIG1heCBuIGlzIDIxIChnaXZlcyAwLjksIDEuMCBvciAxLjEpICg5ZTE1IC8gMjEgPSA0LjJlMTQpLlxyXG4gICAgICAvL3doaWxlIChjMCA8IDkgJiYgYzAgIT0gMSB8fCBjMCA9PSAxICYmIGMuY2hhckF0KDEpID4gMSkge1xyXG4gICAgICAvLyBtYXggbiBpcyA2IChnaXZlcyAwLjcgLSAxLjMpXHJcbiAgICAgIHdoaWxlIChjMCA8IDcgJiYgYzAgIT0gMSB8fCBjMCA9PSAxICYmIGMuY2hhckF0KDEpID4gMykge1xyXG4gICAgICAgIHggPSB4LnRpbWVzKHkpO1xyXG4gICAgICAgIGMgPSBkaWdpdHNUb1N0cmluZyh4LmQpO1xyXG4gICAgICAgIGMwID0gYy5jaGFyQXQoMCk7XHJcbiAgICAgICAgbisrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlID0geC5lO1xyXG5cclxuICAgICAgaWYgKGMwID4gMSkge1xyXG4gICAgICAgIHggPSBuZXcgQ3RvcignMC4nICsgYyk7XHJcbiAgICAgICAgZSsrO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHggPSBuZXcgQ3RvcihjMCArICcuJyArIGMuc2xpY2UoMSkpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gVGhlIGFyZ3VtZW50IHJlZHVjdGlvbiBtZXRob2QgYWJvdmUgbWF5IHJlc3VsdCBpbiBvdmVyZmxvdyBpZiB0aGUgYXJndW1lbnQgeSBpcyBhIG1hc3NpdmVcclxuICAgICAgLy8gbnVtYmVyIHdpdGggZXhwb25lbnQgPj0gMTUwMDAwMDAwMDAwMDAwMCAoOWUxNSAvIDYgPSAxLjVlMTUpLCBzbyBpbnN0ZWFkIHJlY2FsbCB0aGlzXHJcbiAgICAgIC8vIGZ1bmN0aW9uIHVzaW5nIGxuKHgqMTBeZSkgPSBsbih4KSArIGUqbG4oMTApLlxyXG4gICAgICB0ID0gZ2V0TG4xMChDdG9yLCB3cHIgKyAyLCBwcikudGltZXMoZSArICcnKTtcclxuICAgICAgeCA9IG5hdHVyYWxMb2dhcml0aG0obmV3IEN0b3IoYzAgKyAnLicgKyBjLnNsaWNlKDEpKSwgd3ByIC0gZ3VhcmQpLnBsdXModCk7XHJcbiAgICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcblxyXG4gICAgICByZXR1cm4gc2QgPT0gbnVsbCA/IGZpbmFsaXNlKHgsIHByLCBybSwgZXh0ZXJuYWwgPSB0cnVlKSA6IHg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8geDEgaXMgeCByZWR1Y2VkIHRvIGEgdmFsdWUgbmVhciAxLlxyXG4gICAgeDEgPSB4O1xyXG5cclxuICAgIC8vIFRheWxvciBzZXJpZXMuXHJcbiAgICAvLyBsbih5KSA9IGxuKCgxICsgeCkvKDEgLSB4KSkgPSAyKHggKyB4XjMvMyArIHheNS81ICsgeF43LzcgKyAuLi4pXHJcbiAgICAvLyB3aGVyZSB4ID0gKHkgLSAxKS8oeSArIDEpICAgICh8eHwgPCAxKVxyXG4gICAgc3VtID0gbnVtZXJhdG9yID0geCA9IGRpdmlkZSh4Lm1pbnVzKDEpLCB4LnBsdXMoMSksIHdwciwgMSk7XHJcbiAgICB4MiA9IGZpbmFsaXNlKHgudGltZXMoeCksIHdwciwgMSk7XHJcbiAgICBkZW5vbWluYXRvciA9IDM7XHJcblxyXG4gICAgZm9yICg7Oykge1xyXG4gICAgICBudW1lcmF0b3IgPSBmaW5hbGlzZShudW1lcmF0b3IudGltZXMoeDIpLCB3cHIsIDEpO1xyXG4gICAgICB0ID0gc3VtLnBsdXMoZGl2aWRlKG51bWVyYXRvciwgbmV3IEN0b3IoZGVub21pbmF0b3IpLCB3cHIsIDEpKTtcclxuXHJcbiAgICAgIGlmIChkaWdpdHNUb1N0cmluZyh0LmQpLnNsaWNlKDAsIHdwcikgPT09IGRpZ2l0c1RvU3RyaW5nKHN1bS5kKS5zbGljZSgwLCB3cHIpKSB7XHJcbiAgICAgICAgc3VtID0gc3VtLnRpbWVzKDIpO1xyXG5cclxuICAgICAgICAvLyBSZXZlcnNlIHRoZSBhcmd1bWVudCByZWR1Y3Rpb24uIENoZWNrIHRoYXQgZSBpcyBub3QgMCBiZWNhdXNlLCBiZXNpZGVzIHByZXZlbnRpbmcgYW5cclxuICAgICAgICAvLyB1bm5lY2Vzc2FyeSBjYWxjdWxhdGlvbiwgLTAgKyAwID0gKzAgYW5kIHRvIGVuc3VyZSBjb3JyZWN0IHJvdW5kaW5nIC0wIG5lZWRzIHRvIHN0YXkgLTAuXHJcbiAgICAgICAgaWYgKGUgIT09IDApIHN1bSA9IHN1bS5wbHVzKGdldExuMTAoQ3Rvciwgd3ByICsgMiwgcHIpLnRpbWVzKGUgKyAnJykpO1xyXG4gICAgICAgIHN1bSA9IGRpdmlkZShzdW0sIG5ldyBDdG9yKG4pLCB3cHIsIDEpO1xyXG5cclxuICAgICAgICAvLyBJcyBybSA+IDMgYW5kIHRoZSBmaXJzdCA0IHJvdW5kaW5nIGRpZ2l0cyA0OTk5LCBvciBybSA8IDQgKG9yIHRoZSBzdW1tYXRpb24gaGFzXHJcbiAgICAgICAgLy8gYmVlbiByZXBlYXRlZCBwcmV2aW91c2x5KSBhbmQgdGhlIGZpcnN0IDQgcm91bmRpbmcgZGlnaXRzIDk5OTk/XHJcbiAgICAgICAgLy8gSWYgc28sIHJlc3RhcnQgdGhlIHN1bW1hdGlvbiB3aXRoIGEgaGlnaGVyIHByZWNpc2lvbiwgb3RoZXJ3aXNlXHJcbiAgICAgICAgLy8gZS5nLiB3aXRoIHByZWNpc2lvbjogMTIsIHJvdW5kaW5nOiAxXHJcbiAgICAgICAgLy8gbG4oMTM1NTIwMDI4LjYxMjYwOTE3MTQyNjUzODE1MzMpID0gMTguNzI0NjI5OTk5OSB3aGVuIGl0IHNob3VsZCBiZSAxOC43MjQ2My5cclxuICAgICAgICAvLyBgd3ByIC0gZ3VhcmRgIGlzIHRoZSBpbmRleCBvZiBmaXJzdCByb3VuZGluZyBkaWdpdC5cclxuICAgICAgICBpZiAoc2QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgaWYgKGNoZWNrUm91bmRpbmdEaWdpdHMoc3VtLmQsIHdwciAtIGd1YXJkLCBybSwgcmVwKSkge1xyXG4gICAgICAgICAgICBDdG9yLnByZWNpc2lvbiA9IHdwciArPSBndWFyZDtcclxuICAgICAgICAgICAgdCA9IG51bWVyYXRvciA9IHggPSBkaXZpZGUoeDEubWludXMoMSksIHgxLnBsdXMoMSksIHdwciwgMSk7XHJcbiAgICAgICAgICAgIHgyID0gZmluYWxpc2UoeC50aW1lcyh4KSwgd3ByLCAxKTtcclxuICAgICAgICAgICAgZGVub21pbmF0b3IgPSByZXAgPSAxO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbmFsaXNlKHN1bSwgQ3Rvci5wcmVjaXNpb24gPSBwciwgcm0sIGV4dGVybmFsID0gdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XHJcbiAgICAgICAgICByZXR1cm4gc3VtO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc3VtID0gdDtcclxuICAgICAgZGVub21pbmF0b3IgKz0gMjtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvLyDCsUluZmluaXR5LCBOYU4uXHJcbiAgZnVuY3Rpb24gbm9uRmluaXRlVG9TdHJpbmcoeCkge1xyXG4gICAgLy8gVW5zaWduZWQuXHJcbiAgICByZXR1cm4gU3RyaW5nKHgucyAqIHgucyAvIDApO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUGFyc2UgdGhlIHZhbHVlIG9mIGEgbmV3IERlY2ltYWwgYHhgIGZyb20gc3RyaW5nIGBzdHJgLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHBhcnNlRGVjaW1hbCh4LCBzdHIpIHtcclxuICAgIHZhciBlLCBpLCBsZW47XHJcblxyXG4gICAgLy8gRGVjaW1hbCBwb2ludD9cclxuICAgIGlmICgoZSA9IHN0ci5pbmRleE9mKCcuJykpID4gLTEpIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG5cclxuICAgIC8vIEV4cG9uZW50aWFsIGZvcm0/XHJcbiAgICBpZiAoKGkgPSBzdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSBleHBvbmVudC5cclxuICAgICAgaWYgKGUgPCAwKSBlID0gaTtcclxuICAgICAgZSArPSArc3RyLnNsaWNlKGkgKyAxKTtcclxuICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBpKTtcclxuICAgIH0gZWxzZSBpZiAoZSA8IDApIHtcclxuXHJcbiAgICAgIC8vIEludGVnZXIuXHJcbiAgICAgIGUgPSBzdHIubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGVybWluZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgZm9yIChpID0gMDsgc3RyLmNoYXJDb2RlQXQoaSkgPT09IDQ4OyBpKyspO1xyXG5cclxuICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAobGVuID0gc3RyLmxlbmd0aDsgc3RyLmNoYXJDb2RlQXQobGVuIC0gMSkgPT09IDQ4OyAtLWxlbik7XHJcbiAgICBzdHIgPSBzdHIuc2xpY2UoaSwgbGVuKTtcclxuXHJcbiAgICBpZiAoc3RyKSB7XHJcbiAgICAgIGxlbiAtPSBpO1xyXG4gICAgICB4LmUgPSBlID0gZSAtIGkgLSAxO1xyXG4gICAgICB4LmQgPSBbXTtcclxuXHJcbiAgICAgIC8vIFRyYW5zZm9ybSBiYXNlXHJcblxyXG4gICAgICAvLyBlIGlzIHRoZSBiYXNlIDEwIGV4cG9uZW50LlxyXG4gICAgICAvLyBpIGlzIHdoZXJlIHRvIHNsaWNlIHN0ciB0byBnZXQgdGhlIGZpcnN0IHdvcmQgb2YgdGhlIGRpZ2l0cyBhcnJheS5cclxuICAgICAgaSA9IChlICsgMSkgJSBMT0dfQkFTRTtcclxuICAgICAgaWYgKGUgPCAwKSBpICs9IExPR19CQVNFO1xyXG5cclxuICAgICAgaWYgKGkgPCBsZW4pIHtcclxuICAgICAgICBpZiAoaSkgeC5kLnB1c2goK3N0ci5zbGljZSgwLCBpKSk7XHJcbiAgICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47KSB4LmQucHVzaCgrc3RyLnNsaWNlKGksIGkgKz0gTE9HX0JBU0UpKTtcclxuICAgICAgICBzdHIgPSBzdHIuc2xpY2UoaSk7XHJcbiAgICAgICAgaSA9IExPR19CQVNFIC0gc3RyLmxlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpIC09IGxlbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yICg7IGktLTspIHN0ciArPSAnMCc7XHJcbiAgICAgIHguZC5wdXNoKCtzdHIpO1xyXG5cclxuICAgICAgaWYgKGV4dGVybmFsKSB7XHJcblxyXG4gICAgICAgIC8vIE92ZXJmbG93P1xyXG4gICAgICAgIGlmICh4LmUgPiB4LmNvbnN0cnVjdG9yLm1heEUpIHtcclxuXHJcbiAgICAgICAgICAvLyBJbmZpbml0eS5cclxuICAgICAgICAgIHguZCA9IG51bGw7XHJcbiAgICAgICAgICB4LmUgPSBOYU47XHJcblxyXG4gICAgICAgIC8vIFVuZGVyZmxvdz9cclxuICAgICAgICB9IGVsc2UgaWYgKHguZSA8IHguY29uc3RydWN0b3IubWluRSkge1xyXG5cclxuICAgICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgICB4LmUgPSAwO1xyXG4gICAgICAgICAgeC5kID0gWzBdO1xyXG4gICAgICAgICAgLy8geC5jb25zdHJ1Y3Rvci51bmRlcmZsb3cgPSB0cnVlO1xyXG4gICAgICAgIH0gLy8gZWxzZSB4LmNvbnN0cnVjdG9yLnVuZGVyZmxvdyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gWmVyby5cclxuICAgICAgeC5lID0gMDtcclxuICAgICAgeC5kID0gWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB4O1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUGFyc2UgdGhlIHZhbHVlIG9mIGEgbmV3IERlY2ltYWwgYHhgIGZyb20gYSBzdHJpbmcgYHN0cmAsIHdoaWNoIGlzIG5vdCBhIGRlY2ltYWwgdmFsdWUuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcGFyc2VPdGhlcih4LCBzdHIpIHtcclxuICAgIHZhciBiYXNlLCBDdG9yLCBkaXZpc29yLCBpLCBpc0Zsb2F0LCBsZW4sIHAsIHhkLCB4ZTtcclxuXHJcbiAgICBpZiAoc3RyLmluZGV4T2YoJ18nKSA+IC0xKSB7XHJcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8oXFxkKV8oPz1cXGQpL2csICckMScpO1xyXG4gICAgICBpZiAoaXNEZWNpbWFsLnRlc3Qoc3RyKSkgcmV0dXJuIHBhcnNlRGVjaW1hbCh4LCBzdHIpO1xyXG4gICAgfSBlbHNlIGlmIChzdHIgPT09ICdJbmZpbml0eScgfHwgc3RyID09PSAnTmFOJykge1xyXG4gICAgICBpZiAoIStzdHIpIHgucyA9IE5hTjtcclxuICAgICAgeC5lID0gTmFOO1xyXG4gICAgICB4LmQgPSBudWxsO1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNIZXgudGVzdChzdHIpKSAge1xyXG4gICAgICBiYXNlID0gMTY7XHJcbiAgICAgIHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfSBlbHNlIGlmIChpc0JpbmFyeS50ZXN0KHN0cikpICB7XHJcbiAgICAgIGJhc2UgPSAyO1xyXG4gICAgfSBlbHNlIGlmIChpc09jdGFsLnRlc3Qoc3RyKSkgIHtcclxuICAgICAgYmFzZSA9IDg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBzdHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElzIHRoZXJlIGEgYmluYXJ5IGV4cG9uZW50IHBhcnQ/XHJcbiAgICBpID0gc3RyLnNlYXJjaCgvcC9pKTtcclxuXHJcbiAgICBpZiAoaSA+IDApIHtcclxuICAgICAgcCA9ICtzdHIuc2xpY2UoaSArIDEpO1xyXG4gICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDIsIGkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RyID0gc3RyLnNsaWNlKDIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbnZlcnQgYHN0cmAgYXMgYW4gaW50ZWdlciB0aGVuIGRpdmlkZSB0aGUgcmVzdWx0IGJ5IGBiYXNlYCByYWlzZWQgdG8gYSBwb3dlciBzdWNoIHRoYXQgdGhlXHJcbiAgICAvLyBmcmFjdGlvbiBwYXJ0IHdpbGwgYmUgcmVzdG9yZWQuXHJcbiAgICBpID0gc3RyLmluZGV4T2YoJy4nKTtcclxuICAgIGlzRmxvYXQgPSBpID49IDA7XHJcbiAgICBDdG9yID0geC5jb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBpZiAoaXNGbG9hdCkge1xyXG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgnLicsICcnKTtcclxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcclxuICAgICAgaSA9IGxlbiAtIGk7XHJcblxyXG4gICAgICAvLyBsb2dbMTBdKDE2KSA9IDEuMjA0MS4uLiAsIGxvZ1sxMF0oODgpID0gMS45NDQ0Li4uLlxyXG4gICAgICBkaXZpc29yID0gaW50UG93KEN0b3IsIG5ldyBDdG9yKGJhc2UpLCBpLCBpICogMik7XHJcbiAgICB9XHJcblxyXG4gICAgeGQgPSBjb252ZXJ0QmFzZShzdHIsIGJhc2UsIEJBU0UpO1xyXG4gICAgeGUgPSB4ZC5sZW5ndGggLSAxO1xyXG5cclxuICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoaSA9IHhlOyB4ZFtpXSA9PT0gMDsgLS1pKSB4ZC5wb3AoKTtcclxuICAgIGlmIChpIDwgMCkgcmV0dXJuIG5ldyBDdG9yKHgucyAqIDApO1xyXG4gICAgeC5lID0gZ2V0QmFzZTEwRXhwb25lbnQoeGQsIHhlKTtcclxuICAgIHguZCA9IHhkO1xyXG4gICAgZXh0ZXJuYWwgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBBdCB3aGF0IHByZWNpc2lvbiB0byBwZXJmb3JtIHRoZSBkaXZpc2lvbiB0byBlbnN1cmUgZXhhY3QgY29udmVyc2lvbj9cclxuICAgIC8vIG1heERlY2ltYWxJbnRlZ2VyUGFydERpZ2l0Q291bnQgPSBjZWlsKGxvZ1sxMF0oYikgKiBvdGhlckJhc2VJbnRlZ2VyUGFydERpZ2l0Q291bnQpXHJcbiAgICAvLyBsb2dbMTBdKDIpID0gMC4zMDEwMywgbG9nWzEwXSg4KSA9IDAuOTAzMDksIGxvZ1sxMF0oMTYpID0gMS4yMDQxMlxyXG4gICAgLy8gRS5nLiBjZWlsKDEuMiAqIDMpID0gNCwgc28gdXAgdG8gNCBkZWNpbWFsIGRpZ2l0cyBhcmUgbmVlZGVkIHRvIHJlcHJlc2VudCAzIGhleCBpbnQgZGlnaXRzLlxyXG4gICAgLy8gbWF4RGVjaW1hbEZyYWN0aW9uUGFydERpZ2l0Q291bnQgPSB7SGV4OjR8T2N0OjN8QmluOjF9ICogb3RoZXJCYXNlRnJhY3Rpb25QYXJ0RGlnaXRDb3VudFxyXG4gICAgLy8gVGhlcmVmb3JlIHVzaW5nIDQgKiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiBzdHIgd2lsbCBhbHdheXMgYmUgZW5vdWdoLlxyXG4gICAgaWYgKGlzRmxvYXQpIHggPSBkaXZpZGUoeCwgZGl2aXNvciwgbGVuICogNCk7XHJcblxyXG4gICAgLy8gTXVsdGlwbHkgYnkgdGhlIGJpbmFyeSBleHBvbmVudCBwYXJ0IGlmIHByZXNlbnQuXHJcbiAgICBpZiAocCkgeCA9IHgudGltZXMoTWF0aC5hYnMocCkgPCA1NCA/IG1hdGhwb3coMiwgcCkgOiBEZWNpbWFsLnBvdygyLCBwKSk7XHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIHg7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBzaW4oeCkgPSB4IC0geF4zLzMhICsgeF41LzUhIC0gLi4uXHJcbiAgICogfHh8IDwgcGkvMlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gc2luZShDdG9yLCB4KSB7XHJcbiAgICB2YXIgayxcclxuICAgICAgbGVuID0geC5kLmxlbmd0aDtcclxuXHJcbiAgICBpZiAobGVuIDwgMykge1xyXG4gICAgICByZXR1cm4geC5pc1plcm8oKSA/IHggOiB0YXlsb3JTZXJpZXMoQ3RvciwgMiwgeCwgeCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXJndW1lbnQgcmVkdWN0aW9uOiBzaW4oNXgpID0gMTYqc2luXjUoeCkgLSAyMCpzaW5eMyh4KSArIDUqc2luKHgpXHJcbiAgICAvLyBpLmUuIHNpbih4KSA9IDE2KnNpbl41KHgvNSkgLSAyMCpzaW5eMyh4LzUpICsgNSpzaW4oeC81KVxyXG4gICAgLy8gYW5kICBzaW4oeCkgPSBzaW4oeC81KSg1ICsgc2luXjIoeC81KSgxNnNpbl4yKHgvNSkgLSAyMCkpXHJcblxyXG4gICAgLy8gRXN0aW1hdGUgdGhlIG9wdGltdW0gbnVtYmVyIG9mIHRpbWVzIHRvIHVzZSB0aGUgYXJndW1lbnQgcmVkdWN0aW9uLlxyXG4gICAgayA9IDEuNCAqIE1hdGguc3FydChsZW4pO1xyXG4gICAgayA9IGsgPiAxNiA/IDE2IDogayB8IDA7XHJcblxyXG4gICAgeCA9IHgudGltZXMoMSAvIHRpbnlQb3coNSwgaykpO1xyXG4gICAgeCA9IHRheWxvclNlcmllcyhDdG9yLCAyLCB4LCB4KTtcclxuXHJcbiAgICAvLyBSZXZlcnNlIGFyZ3VtZW50IHJlZHVjdGlvblxyXG4gICAgdmFyIHNpbjJfeCxcclxuICAgICAgZDUgPSBuZXcgQ3Rvcig1KSxcclxuICAgICAgZDE2ID0gbmV3IEN0b3IoMTYpLFxyXG4gICAgICBkMjAgPSBuZXcgQ3RvcigyMCk7XHJcbiAgICBmb3IgKDsgay0tOykge1xyXG4gICAgICBzaW4yX3ggPSB4LnRpbWVzKHgpO1xyXG4gICAgICB4ID0geC50aW1lcyhkNS5wbHVzKHNpbjJfeC50aW1lcyhkMTYudGltZXMoc2luMl94KS5taW51cyhkMjApKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB4O1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIENhbGN1bGF0ZSBUYXlsb3Igc2VyaWVzIGZvciBgY29zYCwgYGNvc2hgLCBgc2luYCBhbmQgYHNpbmhgLlxyXG4gIGZ1bmN0aW9uIHRheWxvclNlcmllcyhDdG9yLCBuLCB4LCB5LCBpc0h5cGVyYm9saWMpIHtcclxuICAgIHZhciBqLCB0LCB1LCB4MixcclxuICAgICAgaSA9IDEsXHJcbiAgICAgIHByID0gQ3Rvci5wcmVjaXNpb24sXHJcbiAgICAgIGsgPSBNYXRoLmNlaWwocHIgLyBMT0dfQkFTRSk7XHJcblxyXG4gICAgZXh0ZXJuYWwgPSBmYWxzZTtcclxuICAgIHgyID0geC50aW1lcyh4KTtcclxuICAgIHUgPSBuZXcgQ3Rvcih5KTtcclxuXHJcbiAgICBmb3IgKDs7KSB7XHJcbiAgICAgIHQgPSBkaXZpZGUodS50aW1lcyh4MiksIG5ldyBDdG9yKG4rKyAqIG4rKyksIHByLCAxKTtcclxuICAgICAgdSA9IGlzSHlwZXJib2xpYyA/IHkucGx1cyh0KSA6IHkubWludXModCk7XHJcbiAgICAgIHkgPSBkaXZpZGUodC50aW1lcyh4MiksIG5ldyBDdG9yKG4rKyAqIG4rKyksIHByLCAxKTtcclxuICAgICAgdCA9IHUucGx1cyh5KTtcclxuXHJcbiAgICAgIGlmICh0LmRba10gIT09IHZvaWQgMCkge1xyXG4gICAgICAgIGZvciAoaiA9IGs7IHQuZFtqXSA9PT0gdS5kW2pdICYmIGotLTspO1xyXG4gICAgICAgIGlmIChqID09IC0xKSBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgaiA9IHU7XHJcbiAgICAgIHUgPSB5O1xyXG4gICAgICB5ID0gdDtcclxuICAgICAgdCA9IGo7XHJcbiAgICAgIGkrKztcclxuICAgIH1cclxuXHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcbiAgICB0LmQubGVuZ3RoID0gayArIDE7XHJcblxyXG4gICAgcmV0dXJuIHQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gRXhwb25lbnQgZSBtdXN0IGJlIHBvc2l0aXZlIGFuZCBub24temVyby5cclxuICBmdW5jdGlvbiB0aW55UG93KGIsIGUpIHtcclxuICAgIHZhciBuID0gYjtcclxuICAgIHdoaWxlICgtLWUpIG4gKj0gYjtcclxuICAgIHJldHVybiBuO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIFJldHVybiB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgYHhgIHJlZHVjZWQgdG8gbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGhhbGYgcGkuXHJcbiAgZnVuY3Rpb24gdG9MZXNzVGhhbkhhbGZQaShDdG9yLCB4KSB7XHJcbiAgICB2YXIgdCxcclxuICAgICAgaXNOZWcgPSB4LnMgPCAwLFxyXG4gICAgICBwaSA9IGdldFBpKEN0b3IsIEN0b3IucHJlY2lzaW9uLCAxKSxcclxuICAgICAgaGFsZlBpID0gcGkudGltZXMoMC41KTtcclxuXHJcbiAgICB4ID0geC5hYnMoKTtcclxuXHJcbiAgICBpZiAoeC5sdGUoaGFsZlBpKSkge1xyXG4gICAgICBxdWFkcmFudCA9IGlzTmVnID8gNCA6IDE7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfVxyXG5cclxuICAgIHQgPSB4LmRpdlRvSW50KHBpKTtcclxuXHJcbiAgICBpZiAodC5pc1plcm8oKSkge1xyXG4gICAgICBxdWFkcmFudCA9IGlzTmVnID8gMyA6IDI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB4ID0geC5taW51cyh0LnRpbWVzKHBpKSk7XHJcblxyXG4gICAgICAvLyAwIDw9IHggPCBwaVxyXG4gICAgICBpZiAoeC5sdGUoaGFsZlBpKSkge1xyXG4gICAgICAgIHF1YWRyYW50ID0gaXNPZGQodCkgPyAoaXNOZWcgPyAyIDogMykgOiAoaXNOZWcgPyA0IDogMSk7XHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHF1YWRyYW50ID0gaXNPZGQodCkgPyAoaXNOZWcgPyAxIDogNCkgOiAoaXNOZWcgPyAzIDogMik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHgubWludXMocGkpLmFicygpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRoZSB2YWx1ZSBvZiBEZWNpbWFsIGB4YCBhcyBhIHN0cmluZyBpbiBiYXNlIGBiYXNlT3V0YC5cclxuICAgKlxyXG4gICAqIElmIHRoZSBvcHRpb25hbCBgc2RgIGFyZ3VtZW50IGlzIHByZXNlbnQgaW5jbHVkZSBhIGJpbmFyeSBleHBvbmVudCBzdWZmaXguXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gdG9TdHJpbmdCaW5hcnkoeCwgYmFzZU91dCwgc2QsIHJtKSB7XHJcbiAgICB2YXIgYmFzZSwgZSwgaSwgaywgbGVuLCByb3VuZFVwLCBzdHIsIHhkLCB5LFxyXG4gICAgICBDdG9yID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgaXNFeHAgPSBzZCAhPT0gdm9pZCAwO1xyXG5cclxuICAgIGlmIChpc0V4cCkge1xyXG4gICAgICBjaGVja0ludDMyKHNkLCAxLCBNQVhfRElHSVRTKTtcclxuICAgICAgaWYgKHJtID09PSB2b2lkIDApIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgICAgZWxzZSBjaGVja0ludDMyKHJtLCAwLCA4KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNkID0gQ3Rvci5wcmVjaXNpb247XHJcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXguaXNGaW5pdGUoKSkge1xyXG4gICAgICBzdHIgPSBub25GaW5pdGVUb1N0cmluZyh4KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgpO1xyXG4gICAgICBpID0gc3RyLmluZGV4T2YoJy4nKTtcclxuXHJcbiAgICAgIC8vIFVzZSBleHBvbmVudGlhbCBub3RhdGlvbiBhY2NvcmRpbmcgdG8gYHRvRXhwUG9zYCBhbmQgYHRvRXhwTmVnYD8gTm8sIGJ1dCBpZiByZXF1aXJlZDpcclxuICAgICAgLy8gbWF4QmluYXJ5RXhwb25lbnQgPSBmbG9vcigoZGVjaW1hbEV4cG9uZW50ICsgMSkgKiBsb2dbMl0oMTApKVxyXG4gICAgICAvLyBtaW5CaW5hcnlFeHBvbmVudCA9IGZsb29yKGRlY2ltYWxFeHBvbmVudCAqIGxvZ1syXSgxMCkpXHJcbiAgICAgIC8vIGxvZ1syXSgxMCkgPSAzLjMyMTkyODA5NDg4NzM2MjM0Nzg3MDMxOTQyOTQ4OTM5MDE3NTg2NFxyXG5cclxuICAgICAgaWYgKGlzRXhwKSB7XHJcbiAgICAgICAgYmFzZSA9IDI7XHJcbiAgICAgICAgaWYgKGJhc2VPdXQgPT0gMTYpIHtcclxuICAgICAgICAgIHNkID0gc2QgKiA0IC0gMztcclxuICAgICAgICB9IGVsc2UgaWYgKGJhc2VPdXQgPT0gOCkge1xyXG4gICAgICAgICAgc2QgPSBzZCAqIDMgLSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBiYXNlID0gYmFzZU91dDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29udmVydCB0aGUgbnVtYmVyIGFzIGFuIGludGVnZXIgdGhlbiBkaXZpZGUgdGhlIHJlc3VsdCBieSBpdHMgYmFzZSByYWlzZWQgdG8gYSBwb3dlciBzdWNoXHJcbiAgICAgIC8vIHRoYXQgdGhlIGZyYWN0aW9uIHBhcnQgd2lsbCBiZSByZXN0b3JlZC5cclxuXHJcbiAgICAgIC8vIE5vbi1pbnRlZ2VyLlxyXG4gICAgICBpZiAoaSA+PSAwKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoJy4nLCAnJyk7XHJcbiAgICAgICAgeSA9IG5ldyBDdG9yKDEpO1xyXG4gICAgICAgIHkuZSA9IHN0ci5sZW5ndGggLSBpO1xyXG4gICAgICAgIHkuZCA9IGNvbnZlcnRCYXNlKGZpbml0ZVRvU3RyaW5nKHkpLCAxMCwgYmFzZSk7XHJcbiAgICAgICAgeS5lID0geS5kLmxlbmd0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgeGQgPSBjb252ZXJ0QmFzZShzdHIsIDEwLCBiYXNlKTtcclxuICAgICAgZSA9IGxlbiA9IHhkLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgZm9yICg7IHhkWy0tbGVuXSA9PSAwOykgeGQucG9wKCk7XHJcblxyXG4gICAgICBpZiAoIXhkWzBdKSB7XHJcbiAgICAgICAgc3RyID0gaXNFeHAgPyAnMHArMCcgOiAnMCc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGkgPCAwKSB7XHJcbiAgICAgICAgICBlLS07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHggPSBuZXcgQ3Rvcih4KTtcclxuICAgICAgICAgIHguZCA9IHhkO1xyXG4gICAgICAgICAgeC5lID0gZTtcclxuICAgICAgICAgIHggPSBkaXZpZGUoeCwgeSwgc2QsIHJtLCAwLCBiYXNlKTtcclxuICAgICAgICAgIHhkID0geC5kO1xyXG4gICAgICAgICAgZSA9IHguZTtcclxuICAgICAgICAgIHJvdW5kVXAgPSBpbmV4YWN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhlIHJvdW5kaW5nIGRpZ2l0LCBpLmUuIHRoZSBkaWdpdCBhZnRlciB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cC5cclxuICAgICAgICBpID0geGRbc2RdO1xyXG4gICAgICAgIGsgPSBiYXNlIC8gMjtcclxuICAgICAgICByb3VuZFVwID0gcm91bmRVcCB8fCB4ZFtzZCArIDFdICE9PSB2b2lkIDA7XHJcblxyXG4gICAgICAgIHJvdW5kVXAgPSBybSA8IDRcclxuICAgICAgICAgID8gKGkgIT09IHZvaWQgMCB8fCByb3VuZFVwKSAmJiAocm0gPT09IDAgfHwgcm0gPT09ICh4LnMgPCAwID8gMyA6IDIpKVxyXG4gICAgICAgICAgOiBpID4gayB8fCBpID09PSBrICYmIChybSA9PT0gNCB8fCByb3VuZFVwIHx8IHJtID09PSA2ICYmIHhkW3NkIC0gMV0gJiAxIHx8XHJcbiAgICAgICAgICAgIHJtID09PSAoeC5zIDwgMCA/IDggOiA3KSk7XHJcblxyXG4gICAgICAgIHhkLmxlbmd0aCA9IHNkO1xyXG5cclxuICAgICAgICBpZiAocm91bmRVcCkge1xyXG5cclxuICAgICAgICAgIC8vIFJvdW5kaW5nIHVwIG1heSBtZWFuIHRoZSBwcmV2aW91cyBkaWdpdCBoYXMgdG8gYmUgcm91bmRlZCB1cCBhbmQgc28gb24uXHJcbiAgICAgICAgICBmb3IgKDsgKyt4ZFstLXNkXSA+IGJhc2UgLSAxOykge1xyXG4gICAgICAgICAgICB4ZFtzZF0gPSAwO1xyXG4gICAgICAgICAgICBpZiAoIXNkKSB7XHJcbiAgICAgICAgICAgICAgKytlO1xyXG4gICAgICAgICAgICAgIHhkLnVuc2hpZnQoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKGxlbiA9IHhkLmxlbmd0aDsgIXhkW2xlbiAtIDFdOyAtLWxlbik7XHJcblxyXG4gICAgICAgIC8vIEUuZy4gWzQsIDExLCAxNV0gYmVjb21lcyA0YmYuXHJcbiAgICAgICAgZm9yIChpID0gMCwgc3RyID0gJyc7IGkgPCBsZW47IGkrKykgc3RyICs9IE5VTUVSQUxTLmNoYXJBdCh4ZFtpXSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBiaW5hcnkgZXhwb25lbnQgc3VmZml4P1xyXG4gICAgICAgIGlmIChpc0V4cCkge1xyXG4gICAgICAgICAgaWYgKGxlbiA+IDEpIHtcclxuICAgICAgICAgICAgaWYgKGJhc2VPdXQgPT0gMTYgfHwgYmFzZU91dCA9PSA4KSB7XHJcbiAgICAgICAgICAgICAgaSA9IGJhc2VPdXQgPT0gMTYgPyA0IDogMztcclxuICAgICAgICAgICAgICBmb3IgKC0tbGVuOyBsZW4gJSBpOyBsZW4rKykgc3RyICs9ICcwJztcclxuICAgICAgICAgICAgICB4ZCA9IGNvbnZlcnRCYXNlKHN0ciwgYmFzZSwgYmFzZU91dCk7XHJcbiAgICAgICAgICAgICAgZm9yIChsZW4gPSB4ZC5sZW5ndGg7ICF4ZFtsZW4gLSAxXTsgLS1sZW4pO1xyXG5cclxuICAgICAgICAgICAgICAvLyB4ZFswXSB3aWxsIGFsd2F5cyBiZSBiZSAxXHJcbiAgICAgICAgICAgICAgZm9yIChpID0gMSwgc3RyID0gJzEuJzsgaSA8IGxlbjsgaSsrKSBzdHIgKz0gTlVNRVJBTFMuY2hhckF0KHhkW2ldKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzdHIgPSBzdHIuY2hhckF0KDApICsgJy4nICsgc3RyLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc3RyID0gIHN0ciArIChlIDwgMCA/ICdwJyA6ICdwKycpICsgZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGUgPCAwKSB7XHJcbiAgICAgICAgICBmb3IgKDsgKytlOykgc3RyID0gJzAnICsgc3RyO1xyXG4gICAgICAgICAgc3RyID0gJzAuJyArIHN0cjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKCsrZSA+IGxlbikgZm9yIChlIC09IGxlbjsgZS0tIDspIHN0ciArPSAnMCc7XHJcbiAgICAgICAgICBlbHNlIGlmIChlIDwgbGVuKSBzdHIgPSBzdHIuc2xpY2UoMCwgZSkgKyAnLicgKyBzdHIuc2xpY2UoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzdHIgPSAoYmFzZU91dCA9PSAxNiA/ICcweCcgOiBiYXNlT3V0ID09IDIgPyAnMGInIDogYmFzZU91dCA9PSA4ID8gJzBvJyA6ICcnKSArIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geC5zIDwgMCA/ICctJyArIHN0ciA6IHN0cjtcclxuICB9XHJcblxyXG5cclxuICAvLyBEb2VzIG5vdCBzdHJpcCB0cmFpbGluZyB6ZXJvcy5cclxuICBmdW5jdGlvbiB0cnVuY2F0ZShhcnIsIGxlbikge1xyXG4gICAgaWYgKGFyci5sZW5ndGggPiBsZW4pIHtcclxuICAgICAgYXJyLmxlbmd0aCA9IGxlbjtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gRGVjaW1hbCBtZXRob2RzXHJcblxyXG5cclxuICAvKlxyXG4gICAqICBhYnNcclxuICAgKiAgYWNvc1xyXG4gICAqICBhY29zaFxyXG4gICAqICBhZGRcclxuICAgKiAgYXNpblxyXG4gICAqICBhc2luaFxyXG4gICAqICBhdGFuXHJcbiAgICogIGF0YW5oXHJcbiAgICogIGF0YW4yXHJcbiAgICogIGNicnRcclxuICAgKiAgY2VpbFxyXG4gICAqICBjbGFtcFxyXG4gICAqICBjbG9uZVxyXG4gICAqICBjb25maWdcclxuICAgKiAgY29zXHJcbiAgICogIGNvc2hcclxuICAgKiAgZGl2XHJcbiAgICogIGV4cFxyXG4gICAqICBmbG9vclxyXG4gICAqICBoeXBvdFxyXG4gICAqICBsblxyXG4gICAqICBsb2dcclxuICAgKiAgbG9nMlxyXG4gICAqICBsb2cxMFxyXG4gICAqICBtYXhcclxuICAgKiAgbWluXHJcbiAgICogIG1vZFxyXG4gICAqICBtdWxcclxuICAgKiAgcG93XHJcbiAgICogIHJhbmRvbVxyXG4gICAqICByb3VuZFxyXG4gICAqICBzZXRcclxuICAgKiAgc2lnblxyXG4gICAqICBzaW5cclxuICAgKiAgc2luaFxyXG4gICAqICBzcXJ0XHJcbiAgICogIHN1YlxyXG4gICAqICBzdW1cclxuICAgKiAgdGFuXHJcbiAgICogIHRhbmhcclxuICAgKiAgdHJ1bmNcclxuICAgKi9cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGFic29sdXRlIHZhbHVlIG9mIGB4YC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGFicyh4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkuYWJzKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgYXJjY29zaW5lIGluIHJhZGlhbnMgb2YgYHhgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYWNvcyh4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkuYWNvcygpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGludmVyc2Ugb2YgdGhlIGh5cGVyYm9saWMgY29zaW5lIG9mIGB4YCwgcm91bmRlZCB0b1xyXG4gICAqIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IEEgdmFsdWUgaW4gcmFkaWFucy5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGFjb3NoKHgpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5hY29zaCgpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHN1bSBvZiBgeGAgYW5kIGB5YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudFxyXG4gICAqIGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICogeSB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYWRkKHgsIHkpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5wbHVzKHkpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGFyY3NpbmUgaW4gcmFkaWFucyBvZiBgeGAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmBcclxuICAgKiBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYXNpbih4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkuYXNpbigpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGludmVyc2Ugb2YgdGhlIGh5cGVyYm9saWMgc2luZSBvZiBgeGAsIHJvdW5kZWQgdG9cclxuICAgKiBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBBIHZhbHVlIGluIHJhZGlhbnMuXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBhc2luaCh4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkuYXNpbmgoKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBhcmN0YW5nZW50IGluIHJhZGlhbnMgb2YgYHhgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gXHJcbiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGF0YW4oeCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLmF0YW4oKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBpbnZlcnNlIG9mIHRoZSBoeXBlcmJvbGljIHRhbmdlbnQgb2YgYHhgLCByb3VuZGVkIHRvXHJcbiAgICogYHByZWNpc2lvbmAgc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH0gQSB2YWx1ZSBpbiByYWRpYW5zLlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gYXRhbmgoeCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLmF0YW5oKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgYXJjdGFuZ2VudCBpbiByYWRpYW5zIG9mIGB5L3hgIGluIHRoZSByYW5nZSAtcGkgdG8gcGlcclxuICAgKiAoaW5jbHVzaXZlKSwgcm91bmRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogRG9tYWluOiBbLUluZmluaXR5LCBJbmZpbml0eV1cclxuICAgKiBSYW5nZTogWy1waSwgcGldXHJcbiAgICpcclxuICAgKiB5IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IFRoZSB5LWNvb3JkaW5hdGUuXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBUaGUgeC1jb29yZGluYXRlLlxyXG4gICAqXHJcbiAgICogYXRhbjIowrEwLCAtMCkgICAgICAgICAgICAgICA9IMKxcGlcclxuICAgKiBhdGFuMijCsTAsICswKSAgICAgICAgICAgICAgID0gwrEwXHJcbiAgICogYXRhbjIowrEwLCAteCkgICAgICAgICAgICAgICA9IMKxcGkgZm9yIHggPiAwXHJcbiAgICogYXRhbjIowrEwLCB4KSAgICAgICAgICAgICAgICA9IMKxMCBmb3IgeCA+IDBcclxuICAgKiBhdGFuMigteSwgwrEwKSAgICAgICAgICAgICAgID0gLXBpLzIgZm9yIHkgPiAwXHJcbiAgICogYXRhbjIoeSwgwrEwKSAgICAgICAgICAgICAgICA9IHBpLzIgZm9yIHkgPiAwXHJcbiAgICogYXRhbjIowrF5LCAtSW5maW5pdHkpICAgICAgICA9IMKxcGkgZm9yIGZpbml0ZSB5ID4gMFxyXG4gICAqIGF0YW4yKMKxeSwgK0luZmluaXR5KSAgICAgICAgPSDCsTAgZm9yIGZpbml0ZSB5ID4gMFxyXG4gICAqIGF0YW4yKMKxSW5maW5pdHksIHgpICAgICAgICAgPSDCsXBpLzIgZm9yIGZpbml0ZSB4XHJcbiAgICogYXRhbjIowrFJbmZpbml0eSwgLUluZmluaXR5KSA9IMKxMypwaS80XHJcbiAgICogYXRhbjIowrFJbmZpbml0eSwgK0luZmluaXR5KSA9IMKxcGkvNFxyXG4gICAqIGF0YW4yKE5hTiwgeCkgPSBOYU5cclxuICAgKiBhdGFuMih5LCBOYU4pID0gTmFOXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBhdGFuMih5LCB4KSB7XHJcbiAgICB5ID0gbmV3IHRoaXMoeSk7XHJcbiAgICB4ID0gbmV3IHRoaXMoeCk7XHJcbiAgICB2YXIgcixcclxuICAgICAgcHIgPSB0aGlzLnByZWNpc2lvbixcclxuICAgICAgcm0gPSB0aGlzLnJvdW5kaW5nLFxyXG4gICAgICB3cHIgPSBwciArIDQ7XHJcblxyXG4gICAgLy8gRWl0aGVyIE5hTlxyXG4gICAgaWYgKCF5LnMgfHwgIXgucykge1xyXG4gICAgICByID0gbmV3IHRoaXMoTmFOKTtcclxuXHJcbiAgICAvLyBCb3RoIMKxSW5maW5pdHlcclxuICAgIH0gZWxzZSBpZiAoIXkuZCAmJiAheC5kKSB7XHJcbiAgICAgIHIgPSBnZXRQaSh0aGlzLCB3cHIsIDEpLnRpbWVzKHgucyA+IDAgPyAwLjI1IDogMC43NSk7XHJcbiAgICAgIHIucyA9IHkucztcclxuXHJcbiAgICAvLyB4IGlzIMKxSW5maW5pdHkgb3IgeSBpcyDCsTBcclxuICAgIH0gZWxzZSBpZiAoIXguZCB8fCB5LmlzWmVybygpKSB7XHJcbiAgICAgIHIgPSB4LnMgPCAwID8gZ2V0UGkodGhpcywgcHIsIHJtKSA6IG5ldyB0aGlzKDApO1xyXG4gICAgICByLnMgPSB5LnM7XHJcblxyXG4gICAgLy8geSBpcyDCsUluZmluaXR5IG9yIHggaXMgwrEwXHJcbiAgICB9IGVsc2UgaWYgKCF5LmQgfHwgeC5pc1plcm8oKSkge1xyXG4gICAgICByID0gZ2V0UGkodGhpcywgd3ByLCAxKS50aW1lcygwLjUpO1xyXG4gICAgICByLnMgPSB5LnM7XHJcblxyXG4gICAgLy8gQm90aCBub24temVybyBhbmQgZmluaXRlXHJcbiAgICB9IGVsc2UgaWYgKHgucyA8IDApIHtcclxuICAgICAgdGhpcy5wcmVjaXNpb24gPSB3cHI7XHJcbiAgICAgIHRoaXMucm91bmRpbmcgPSAxO1xyXG4gICAgICByID0gdGhpcy5hdGFuKGRpdmlkZSh5LCB4LCB3cHIsIDEpKTtcclxuICAgICAgeCA9IGdldFBpKHRoaXMsIHdwciwgMSk7XHJcbiAgICAgIHRoaXMucHJlY2lzaW9uID0gcHI7XHJcbiAgICAgIHRoaXMucm91bmRpbmcgPSBybTtcclxuICAgICAgciA9IHkucyA8IDAgPyByLm1pbnVzKHgpIDogci5wbHVzKHgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgciA9IHRoaXMuYXRhbihkaXZpZGUoeSwgeCwgd3ByLCAxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgY3ViZSByb290IG9mIGB4YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudFxyXG4gICAqIGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBjYnJ0KHgpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5jYnJ0KCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyBgeGAgcm91bmRlZCB0byBhbiBpbnRlZ2VyIHVzaW5nIGBST1VORF9DRUlMYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNlaWwoeCkge1xyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHggPSBuZXcgdGhpcyh4KSwgeC5lICsgMSwgMik7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyBgeGAgY2xhbXBlZCB0byB0aGUgcmFuZ2UgZGVsaW5lYXRlZCBieSBgbWluYCBhbmQgYG1heGAuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICogbWluIHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICogbWF4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBjbGFtcCh4LCBtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLmNsYW1wKG1pbiwgbWF4KTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIENvbmZpZ3VyZSBnbG9iYWwgc2V0dGluZ3MgZm9yIGEgRGVjaW1hbCBjb25zdHJ1Y3Rvci5cclxuICAgKlxyXG4gICAqIGBvYmpgIGlzIGFuIG9iamVjdCB3aXRoIG9uZSBvciBtb3JlIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyxcclxuICAgKlxyXG4gICAqICAgcHJlY2lzaW9uICB7bnVtYmVyfVxyXG4gICAqICAgcm91bmRpbmcgICB7bnVtYmVyfVxyXG4gICAqICAgdG9FeHBOZWcgICB7bnVtYmVyfVxyXG4gICAqICAgdG9FeHBQb3MgICB7bnVtYmVyfVxyXG4gICAqICAgbWF4RSAgICAgICB7bnVtYmVyfVxyXG4gICAqICAgbWluRSAgICAgICB7bnVtYmVyfVxyXG4gICAqICAgbW9kdWxvICAgICB7bnVtYmVyfVxyXG4gICAqICAgY3J5cHRvICAgICB7Ym9vbGVhbnxudW1iZXJ9XHJcbiAgICogICBkZWZhdWx0cyAgIHt0cnVlfVxyXG4gICAqXHJcbiAgICogRS5nLiBEZWNpbWFsLmNvbmZpZyh7IHByZWNpc2lvbjogMjAsIHJvdW5kaW5nOiA0IH0pXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBjb25maWcob2JqKSB7XHJcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JykgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgJ09iamVjdCBleHBlY3RlZCcpO1xyXG4gICAgdmFyIGksIHAsIHYsXHJcbiAgICAgIHVzZURlZmF1bHRzID0gb2JqLmRlZmF1bHRzID09PSB0cnVlLFxyXG4gICAgICBwcyA9IFtcclxuICAgICAgICAncHJlY2lzaW9uJywgMSwgTUFYX0RJR0lUUyxcclxuICAgICAgICAncm91bmRpbmcnLCAwLCA4LFxyXG4gICAgICAgICd0b0V4cE5lZycsIC1FWFBfTElNSVQsIDAsXHJcbiAgICAgICAgJ3RvRXhwUG9zJywgMCwgRVhQX0xJTUlULFxyXG4gICAgICAgICdtYXhFJywgMCwgRVhQX0xJTUlULFxyXG4gICAgICAgICdtaW5FJywgLUVYUF9MSU1JVCwgMCxcclxuICAgICAgICAnbW9kdWxvJywgMCwgOVxyXG4gICAgICBdO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBwcy5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgICBpZiAocCA9IHBzW2ldLCB1c2VEZWZhdWx0cykgdGhpc1twXSA9IERFRkFVTFRTW3BdO1xyXG4gICAgICBpZiAoKHYgPSBvYmpbcF0pICE9PSB2b2lkIDApIHtcclxuICAgICAgICBpZiAobWF0aGZsb29yKHYpID09PSB2ICYmIHYgPj0gcHNbaSArIDFdICYmIHYgPD0gcHNbaSArIDJdKSB0aGlzW3BdID0gdjtcclxuICAgICAgICBlbHNlIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIHAgKyAnOiAnICsgdik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAocCA9ICdjcnlwdG8nLCB1c2VEZWZhdWx0cykgdGhpc1twXSA9IERFRkFVTFRTW3BdO1xyXG4gICAgaWYgKCh2ID0gb2JqW3BdKSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgIGlmICh2ID09PSB0cnVlIHx8IHYgPT09IGZhbHNlIHx8IHYgPT09IDAgfHwgdiA9PT0gMSkge1xyXG4gICAgICAgIGlmICh2KSB7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0byAhPSAndW5kZWZpbmVkJyAmJiBjcnlwdG8gJiZcclxuICAgICAgICAgICAgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgfHwgY3J5cHRvLnJhbmRvbUJ5dGVzKSkge1xyXG4gICAgICAgICAgICB0aGlzW3BdID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGNyeXB0b1VuYXZhaWxhYmxlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpc1twXSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBwICsgJzogJyArIHYpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgY29zaW5lIG9mIGB4YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudFxyXG4gICAqIGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IEEgdmFsdWUgaW4gcmFkaWFucy5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNvcyh4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkuY29zKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgaHlwZXJib2xpYyBjb3NpbmUgb2YgYHhgLCByb3VuZGVkIHRvIHByZWNpc2lvblxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IEEgdmFsdWUgaW4gcmFkaWFucy5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNvc2goeCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLmNvc2goKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgRGVjaW1hbCBjb25zdHJ1Y3RvciB3aXRoIHRoZSBzYW1lIGNvbmZpZ3VyYXRpb24gcHJvcGVydGllcyBhcyB0aGlzIERlY2ltYWxcclxuICAgKiBjb25zdHJ1Y3Rvci5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNsb25lKG9iaikge1xyXG4gICAgdmFyIGksIHAsIHBzO1xyXG5cclxuICAgIC8qXHJcbiAgICAgKiBUaGUgRGVjaW1hbCBjb25zdHJ1Y3RvciBhbmQgZXhwb3J0ZWQgZnVuY3Rpb24uXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCBpbnN0YW5jZS5cclxuICAgICAqXHJcbiAgICAgKiB2IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIERlY2ltYWwodikge1xyXG4gICAgICB2YXIgZSwgaSwgdCxcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIC8vIERlY2ltYWwgY2FsbGVkIHdpdGhvdXQgbmV3LlxyXG4gICAgICBpZiAoISh4IGluc3RhbmNlb2YgRGVjaW1hbCkpIHJldHVybiBuZXcgRGVjaW1hbCh2KTtcclxuXHJcbiAgICAgIC8vIFJldGFpbiBhIHJlZmVyZW5jZSB0byB0aGlzIERlY2ltYWwgY29uc3RydWN0b3IsIGFuZCBzaGFkb3cgRGVjaW1hbC5wcm90b3R5cGUuY29uc3RydWN0b3JcclxuICAgICAgLy8gd2hpY2ggcG9pbnRzIHRvIE9iamVjdC5cclxuICAgICAgeC5jb25zdHJ1Y3RvciA9IERlY2ltYWw7XHJcblxyXG4gICAgICAvLyBEdXBsaWNhdGUuXHJcbiAgICAgIGlmIChpc0RlY2ltYWxJbnN0YW5jZSh2KSkge1xyXG4gICAgICAgIHgucyA9IHYucztcclxuXHJcbiAgICAgICAgaWYgKGV4dGVybmFsKSB7XHJcbiAgICAgICAgICBpZiAoIXYuZCB8fCB2LmUgPiBEZWNpbWFsLm1heEUpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEluZmluaXR5LlxyXG4gICAgICAgICAgICB4LmUgPSBOYU47XHJcbiAgICAgICAgICAgIHguZCA9IG51bGw7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHYuZSA8IERlY2ltYWwubWluRSkge1xyXG5cclxuICAgICAgICAgICAgLy8gWmVyby5cclxuICAgICAgICAgICAgeC5lID0gMDtcclxuICAgICAgICAgICAgeC5kID0gWzBdO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeC5lID0gdi5lO1xyXG4gICAgICAgICAgICB4LmQgPSB2LmQuc2xpY2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5lID0gdi5lO1xyXG4gICAgICAgICAgeC5kID0gdi5kID8gdi5kLnNsaWNlKCkgOiB2LmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHQgPSB0eXBlb2YgdjtcclxuXHJcbiAgICAgIGlmICh0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmICh2ID09PSAwKSB7XHJcbiAgICAgICAgICB4LnMgPSAxIC8gdiA8IDAgPyAtMSA6IDE7XHJcbiAgICAgICAgICB4LmUgPSAwO1xyXG4gICAgICAgICAgeC5kID0gWzBdO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHYgPCAwKSB7XHJcbiAgICAgICAgICB2ID0gLXY7XHJcbiAgICAgICAgICB4LnMgPSAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5zID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZhc3QgcGF0aCBmb3Igc21hbGwgaW50ZWdlcnMuXHJcbiAgICAgICAgaWYgKHYgPT09IH5+diAmJiB2IDwgMWU3KSB7XHJcbiAgICAgICAgICBmb3IgKGUgPSAwLCBpID0gdjsgaSA+PSAxMDsgaSAvPSAxMCkgZSsrO1xyXG5cclxuICAgICAgICAgIGlmIChleHRlcm5hbCkge1xyXG4gICAgICAgICAgICBpZiAoZSA+IERlY2ltYWwubWF4RSkge1xyXG4gICAgICAgICAgICAgIHguZSA9IE5hTjtcclxuICAgICAgICAgICAgICB4LmQgPSBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUgPCBEZWNpbWFsLm1pbkUpIHtcclxuICAgICAgICAgICAgICB4LmUgPSAwO1xyXG4gICAgICAgICAgICAgIHguZCA9IFswXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB4LmUgPSBlO1xyXG4gICAgICAgICAgICAgIHguZCA9IFt2XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeC5lID0gZTtcclxuICAgICAgICAgICAgeC5kID0gW3ZdO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gSW5maW5pdHksIE5hTi5cclxuICAgICAgICB9IGVsc2UgaWYgKHYgKiAwICE9PSAwKSB7XHJcbiAgICAgICAgICBpZiAoIXYpIHgucyA9IE5hTjtcclxuICAgICAgICAgIHguZSA9IE5hTjtcclxuICAgICAgICAgIHguZCA9IG51bGw7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGFyc2VEZWNpbWFsKHgsIHYudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICB9IGVsc2UgaWYgKHQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgdik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE1pbnVzIHNpZ24/XHJcbiAgICAgIGlmICgoaSA9IHYuY2hhckNvZGVBdCgwKSkgPT09IDQ1KSB7XHJcbiAgICAgICAgdiA9IHYuc2xpY2UoMSk7XHJcbiAgICAgICAgeC5zID0gLTE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gUGx1cyBzaWduP1xyXG4gICAgICAgIGlmIChpID09PSA0MykgdiA9IHYuc2xpY2UoMSk7XHJcbiAgICAgICAgeC5zID0gMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGlzRGVjaW1hbC50ZXN0KHYpID8gcGFyc2VEZWNpbWFsKHgsIHYpIDogcGFyc2VPdGhlcih4LCB2KTtcclxuICAgIH1cclxuXHJcbiAgICBEZWNpbWFsLnByb3RvdHlwZSA9IFA7XHJcblxyXG4gICAgRGVjaW1hbC5ST1VORF9VUCA9IDA7XHJcbiAgICBEZWNpbWFsLlJPVU5EX0RPV04gPSAxO1xyXG4gICAgRGVjaW1hbC5ST1VORF9DRUlMID0gMjtcclxuICAgIERlY2ltYWwuUk9VTkRfRkxPT1IgPSAzO1xyXG4gICAgRGVjaW1hbC5ST1VORF9IQUxGX1VQID0gNDtcclxuICAgIERlY2ltYWwuUk9VTkRfSEFMRl9ET1dOID0gNTtcclxuICAgIERlY2ltYWwuUk9VTkRfSEFMRl9FVkVOID0gNjtcclxuICAgIERlY2ltYWwuUk9VTkRfSEFMRl9DRUlMID0gNztcclxuICAgIERlY2ltYWwuUk9VTkRfSEFMRl9GTE9PUiA9IDg7XHJcbiAgICBEZWNpbWFsLkVVQ0xJRCA9IDk7XHJcblxyXG4gICAgRGVjaW1hbC5jb25maWcgPSBEZWNpbWFsLnNldCA9IGNvbmZpZztcclxuICAgIERlY2ltYWwuY2xvbmUgPSBjbG9uZTtcclxuICAgIERlY2ltYWwuaXNEZWNpbWFsID0gaXNEZWNpbWFsSW5zdGFuY2U7XHJcblxyXG4gICAgRGVjaW1hbC5hYnMgPSBhYnM7XHJcbiAgICBEZWNpbWFsLmFjb3MgPSBhY29zO1xyXG4gICAgRGVjaW1hbC5hY29zaCA9IGFjb3NoOyAgICAgICAgLy8gRVM2XHJcbiAgICBEZWNpbWFsLmFkZCA9IGFkZDtcclxuICAgIERlY2ltYWwuYXNpbiA9IGFzaW47XHJcbiAgICBEZWNpbWFsLmFzaW5oID0gYXNpbmg7ICAgICAgICAvLyBFUzZcclxuICAgIERlY2ltYWwuYXRhbiA9IGF0YW47XHJcbiAgICBEZWNpbWFsLmF0YW5oID0gYXRhbmg7ICAgICAgICAvLyBFUzZcclxuICAgIERlY2ltYWwuYXRhbjIgPSBhdGFuMjtcclxuICAgIERlY2ltYWwuY2JydCA9IGNicnQ7ICAgICAgICAgIC8vIEVTNlxyXG4gICAgRGVjaW1hbC5jZWlsID0gY2VpbDtcclxuICAgIERlY2ltYWwuY2xhbXAgPSBjbGFtcDtcclxuICAgIERlY2ltYWwuY29zID0gY29zO1xyXG4gICAgRGVjaW1hbC5jb3NoID0gY29zaDsgICAgICAgICAgLy8gRVM2XHJcbiAgICBEZWNpbWFsLmRpdiA9IGRpdjtcclxuICAgIERlY2ltYWwuZXhwID0gZXhwO1xyXG4gICAgRGVjaW1hbC5mbG9vciA9IGZsb29yO1xyXG4gICAgRGVjaW1hbC5oeXBvdCA9IGh5cG90OyAgICAgICAgLy8gRVM2XHJcbiAgICBEZWNpbWFsLmxuID0gbG47XHJcbiAgICBEZWNpbWFsLmxvZyA9IGxvZztcclxuICAgIERlY2ltYWwubG9nMTAgPSBsb2cxMDsgICAgICAgIC8vIEVTNlxyXG4gICAgRGVjaW1hbC5sb2cyID0gbG9nMjsgICAgICAgICAgLy8gRVM2XHJcbiAgICBEZWNpbWFsLm1heCA9IG1heDtcclxuICAgIERlY2ltYWwubWluID0gbWluO1xyXG4gICAgRGVjaW1hbC5tb2QgPSBtb2Q7XHJcbiAgICBEZWNpbWFsLm11bCA9IG11bDtcclxuICAgIERlY2ltYWwucG93ID0gcG93O1xyXG4gICAgRGVjaW1hbC5yYW5kb20gPSByYW5kb207XHJcbiAgICBEZWNpbWFsLnJvdW5kID0gcm91bmQ7XHJcbiAgICBEZWNpbWFsLnNpZ24gPSBzaWduOyAgICAgICAgICAvLyBFUzZcclxuICAgIERlY2ltYWwuc2luID0gc2luO1xyXG4gICAgRGVjaW1hbC5zaW5oID0gc2luaDsgICAgICAgICAgLy8gRVM2XHJcbiAgICBEZWNpbWFsLnNxcnQgPSBzcXJ0O1xyXG4gICAgRGVjaW1hbC5zdWIgPSBzdWI7XHJcbiAgICBEZWNpbWFsLnN1bSA9IHN1bTtcclxuICAgIERlY2ltYWwudGFuID0gdGFuO1xyXG4gICAgRGVjaW1hbC50YW5oID0gdGFuaDsgICAgICAgICAgLy8gRVM2XHJcbiAgICBEZWNpbWFsLnRydW5jID0gdHJ1bmM7ICAgICAgICAvLyBFUzZcclxuXHJcbiAgICBpZiAob2JqID09PSB2b2lkIDApIG9iaiA9IHt9O1xyXG4gICAgaWYgKG9iaikge1xyXG4gICAgICBpZiAob2JqLmRlZmF1bHRzICE9PSB0cnVlKSB7XHJcbiAgICAgICAgcHMgPSBbJ3ByZWNpc2lvbicsICdyb3VuZGluZycsICd0b0V4cE5lZycsICd0b0V4cFBvcycsICdtYXhFJywgJ21pbkUnLCAnbW9kdWxvJywgJ2NyeXB0byddO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcy5sZW5ndGg7KSBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShwID0gcHNbaSsrXSkpIG9ialtwXSA9IHRoaXNbcF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBEZWNpbWFsLmNvbmZpZyhvYmopO1xyXG5cclxuICAgIHJldHVybiBEZWNpbWFsO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgYHhgIGRpdmlkZWQgYnkgYHlgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50XHJcbiAgICogZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKiB5IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBkaXYoeCwgeSkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLmRpdih5KTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBuYXR1cmFsIGV4cG9uZW50aWFsIG9mIGB4YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IFRoZSBwb3dlciB0byB3aGljaCB0byByYWlzZSB0aGUgYmFzZSBvZiB0aGUgbmF0dXJhbCBsb2cuXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBleHAoeCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLmV4cCgpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgYHhgIHJvdW5kIHRvIGFuIGludGVnZXIgdXNpbmcgYFJPVU5EX0ZMT09SYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGZsb29yKHgpIHtcclxuICAgIHJldHVybiBmaW5hbGlzZSh4ID0gbmV3IHRoaXMoeCksIHguZSArIDEsIDMpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHNxdWFyZSByb290IG9mIHRoZSBzdW0gb2YgdGhlIHNxdWFyZXMgb2YgdGhlIGFyZ3VtZW50cyxcclxuICAgKiByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiBoeXBvdChhLCBiLCAuLi4pID0gc3FydChhXjIgKyBiXjIgKyAuLi4pXHJcbiAgICpcclxuICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGh5cG90KCkge1xyXG4gICAgdmFyIGksIG4sXHJcbiAgICAgIHQgPSBuZXcgdGhpcygwKTtcclxuXHJcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOykge1xyXG4gICAgICBuID0gbmV3IHRoaXMoYXJndW1lbnRzW2krK10pO1xyXG4gICAgICBpZiAoIW4uZCkge1xyXG4gICAgICAgIGlmIChuLnMpIHtcclxuICAgICAgICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuICAgICAgICAgIHJldHVybiBuZXcgdGhpcygxIC8gMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHQgPSBuO1xyXG4gICAgICB9IGVsc2UgaWYgKHQuZCkge1xyXG4gICAgICAgIHQgPSB0LnBsdXMobi50aW1lcyhuKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHRlcm5hbCA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIHQuc3FydCgpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgb2JqZWN0IGlzIGEgRGVjaW1hbCBpbnN0YW5jZSAod2hlcmUgRGVjaW1hbCBpcyBhbnkgRGVjaW1hbCBjb25zdHJ1Y3RvciksXHJcbiAgICogb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGlzRGVjaW1hbEluc3RhbmNlKG9iaikge1xyXG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIERlY2ltYWwgfHwgb2JqICYmIG9iai50b1N0cmluZ1RhZyA9PT0gdGFnIHx8IGZhbHNlO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIG5hdHVyYWwgbG9nYXJpdGhtIG9mIGB4YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBsbih4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkubG4oKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBsb2cgb2YgYHhgIHRvIHRoZSBiYXNlIGB5YCwgb3IgdG8gYmFzZSAxMCBpZiBubyBiYXNlXHJcbiAgICogaXMgc3BlY2lmaWVkLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiBsb2dbeV0oeClcclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH0gVGhlIGFyZ3VtZW50IG9mIHRoZSBsb2dhcml0aG0uXHJcbiAgICogeSB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBUaGUgYmFzZSBvZiB0aGUgbG9nYXJpdGhtLlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gbG9nKHgsIHkpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5sb2coeSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgYmFzZSAyIGxvZ2FyaXRobSBvZiBgeGAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmBcclxuICAgKiBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gbG9nMih4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkubG9nKDIpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGJhc2UgMTAgbG9nYXJpdGhtIG9mIGB4YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYFxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBsb2cxMCh4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkubG9nKDEwKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBtYXhpbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICpcclxuICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIG1heCgpIHtcclxuICAgIHJldHVybiBtYXhPck1pbih0aGlzLCBhcmd1bWVudHMsICdsdCcpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIG1pbmltdW0gb2YgdGhlIGFyZ3VtZW50cy5cclxuICAgKlxyXG4gICAqIGFyZ3VtZW50cyB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gbWluKCkge1xyXG4gICAgcmV0dXJuIG1heE9yTWluKHRoaXMsIGFyZ3VtZW50cywgJ2d0Jyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyBgeGAgbW9kdWxvIGB5YCwgcm91bmRlZCB0byBgcHJlY2lzaW9uYCBzaWduaWZpY2FudCBkaWdpdHNcclxuICAgKiB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9XHJcbiAgICogeSB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gbW9kKHgsIHkpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5tb2QoeSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyBgeGAgbXVsdGlwbGllZCBieSBgeWAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAgc2lnbmlmaWNhbnRcclxuICAgKiBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqIHkge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIG11bCh4LCB5KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkubXVsKHkpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgYHhgIHJhaXNlZCB0byB0aGUgcG93ZXIgYHlgLCByb3VuZGVkIHRvIHByZWNpc2lvblxyXG4gICAqIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIGByb3VuZGluZ2AuXHJcbiAgICpcclxuICAgKiB4IHtudW1iZXJ8c3RyaW5nfERlY2ltYWx9IFRoZSBiYXNlLlxyXG4gICAqIHkge251bWJlcnxzdHJpbmd8RGVjaW1hbH0gVGhlIGV4cG9uZW50LlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcG93KHgsIHkpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5wb3coeSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm5zIGEgbmV3IERlY2ltYWwgd2l0aCBhIHJhbmRvbSB2YWx1ZSBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gMCBhbmQgbGVzcyB0aGFuIDEsIGFuZCB3aXRoXHJcbiAgICogYHNkYCwgb3IgYERlY2ltYWwucHJlY2lzaW9uYCBpZiBgc2RgIGlzIG9taXR0ZWQsIHNpZ25pZmljYW50IGRpZ2l0cyAob3IgbGVzcyBpZiB0cmFpbGluZyB6ZXJvc1xyXG4gICAqIGFyZSBwcm9kdWNlZCkuXHJcbiAgICpcclxuICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMCB0byBNQVhfRElHSVRTIGluY2x1c2l2ZS5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHJhbmRvbShzZCkge1xyXG4gICAgdmFyIGQsIGUsIGssIG4sXHJcbiAgICAgIGkgPSAwLFxyXG4gICAgICByID0gbmV3IHRoaXMoMSksXHJcbiAgICAgIHJkID0gW107XHJcblxyXG4gICAgaWYgKHNkID09PSB2b2lkIDApIHNkID0gdGhpcy5wcmVjaXNpb247XHJcbiAgICBlbHNlIGNoZWNrSW50MzIoc2QsIDEsIE1BWF9ESUdJVFMpO1xyXG5cclxuICAgIGsgPSBNYXRoLmNlaWwoc2QgLyBMT0dfQkFTRSk7XHJcblxyXG4gICAgaWYgKCF0aGlzLmNyeXB0bykge1xyXG4gICAgICBmb3IgKDsgaSA8IGs7KSByZFtpKytdID0gTWF0aC5yYW5kb20oKSAqIDFlNyB8IDA7XHJcblxyXG4gICAgLy8gQnJvd3NlcnMgc3VwcG9ydGluZyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLlxyXG4gICAgfSBlbHNlIGlmIChjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcbiAgICAgIGQgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheShrKSk7XHJcblxyXG4gICAgICBmb3IgKDsgaSA8IGs7KSB7XHJcbiAgICAgICAgbiA9IGRbaV07XHJcblxyXG4gICAgICAgIC8vIDAgPD0gbiA8IDQyOTQ5NjcyOTZcclxuICAgICAgICAvLyBQcm9iYWJpbGl0eSBuID49IDQuMjllOSwgaXMgNDk2NzI5NiAvIDQyOTQ5NjcyOTYgPSAwLjAwMTE2ICgxIGluIDg2NSkuXHJcbiAgICAgICAgaWYgKG4gPj0gNC4yOWU5KSB7XHJcbiAgICAgICAgICBkW2ldID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gMCA8PSBuIDw9IDQyODk5OTk5OTlcclxuICAgICAgICAgIC8vIDAgPD0gKG4gJSAxZTcpIDw9IDk5OTk5OTlcclxuICAgICAgICAgIHJkW2krK10gPSBuICUgMWU3O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIC8vIE5vZGUuanMgc3VwcG9ydGluZyBjcnlwdG8ucmFuZG9tQnl0ZXMuXHJcbiAgICB9IGVsc2UgaWYgKGNyeXB0by5yYW5kb21CeXRlcykge1xyXG5cclxuICAgICAgLy8gYnVmZmVyXHJcbiAgICAgIGQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoayAqPSA0KTtcclxuXHJcbiAgICAgIGZvciAoOyBpIDwgazspIHtcclxuXHJcbiAgICAgICAgLy8gMCA8PSBuIDwgMjE0NzQ4MzY0OFxyXG4gICAgICAgIG4gPSBkW2ldICsgKGRbaSArIDFdIDw8IDgpICsgKGRbaSArIDJdIDw8IDE2KSArICgoZFtpICsgM10gJiAweDdmKSA8PCAyNCk7XHJcblxyXG4gICAgICAgIC8vIFByb2JhYmlsaXR5IG4gPj0gMi4xNGU5LCBpcyA3NDgzNjQ4IC8gMjE0NzQ4MzY0OCA9IDAuMDAzNSAoMSBpbiAyODYpLlxyXG4gICAgICAgIGlmIChuID49IDIuMTRlOSkge1xyXG4gICAgICAgICAgY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLmNvcHkoZCwgaSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyAwIDw9IG4gPD0gMjEzOTk5OTk5OVxyXG4gICAgICAgICAgLy8gMCA8PSAobiAlIDFlNykgPD0gOTk5OTk5OVxyXG4gICAgICAgICAgcmQucHVzaChuICUgMWU3KTtcclxuICAgICAgICAgIGkgKz0gNDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGkgPSBrIC8gNDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IEVycm9yKGNyeXB0b1VuYXZhaWxhYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICBrID0gcmRbLS1pXTtcclxuICAgIHNkICU9IExPR19CQVNFO1xyXG5cclxuICAgIC8vIENvbnZlcnQgdHJhaWxpbmcgZGlnaXRzIHRvIHplcm9zIGFjY29yZGluZyB0byBzZC5cclxuICAgIGlmIChrICYmIHNkKSB7XHJcbiAgICAgIG4gPSBtYXRocG93KDEwLCBMT0dfQkFTRSAtIHNkKTtcclxuICAgICAgcmRbaV0gPSAoayAvIG4gfCAwKSAqIG47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHdvcmRzIHdoaWNoIGFyZSB6ZXJvLlxyXG4gICAgZm9yICg7IHJkW2ldID09PSAwOyBpLS0pIHJkLnBvcCgpO1xyXG5cclxuICAgIC8vIFplcm8/XHJcbiAgICBpZiAoaSA8IDApIHtcclxuICAgICAgZSA9IDA7XHJcbiAgICAgIHJkID0gWzBdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZSA9IC0xO1xyXG5cclxuICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgd29yZHMgd2hpY2ggYXJlIHplcm8gYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgICAgZm9yICg7IHJkWzBdID09PSAwOyBlIC09IExPR19CQVNFKSByZC5zaGlmdCgpO1xyXG5cclxuICAgICAgLy8gQ291bnQgdGhlIGRpZ2l0cyBvZiB0aGUgZmlyc3Qgd29yZCBvZiByZCB0byBkZXRlcm1pbmUgbGVhZGluZyB6ZXJvcy5cclxuICAgICAgZm9yIChrID0gMSwgbiA9IHJkWzBdOyBuID49IDEwOyBuIC89IDEwKSBrKys7XHJcblxyXG4gICAgICAvLyBBZGp1c3QgdGhlIGV4cG9uZW50IGZvciBsZWFkaW5nIHplcm9zIG9mIHRoZSBmaXJzdCB3b3JkIG9mIHJkLlxyXG4gICAgICBpZiAoayA8IExPR19CQVNFKSBlIC09IExPR19CQVNFIC0gaztcclxuICAgIH1cclxuXHJcbiAgICByLmUgPSBlO1xyXG4gICAgci5kID0gcmQ7XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyBgeGAgcm91bmRlZCB0byBhbiBpbnRlZ2VyIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIFRvIGVtdWxhdGUgYE1hdGgucm91bmRgLCBzZXQgcm91bmRpbmcgdG8gNyAoUk9VTkRfSEFMRl9DRUlMKS5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHJvdW5kKHgpIHtcclxuICAgIHJldHVybiBmaW5hbGlzZSh4ID0gbmV3IHRoaXMoeCksIHguZSArIDEsIHRoaXMucm91bmRpbmcpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuXHJcbiAgICogICAxICAgIGlmIHggPiAwLFxyXG4gICAqICAtMSAgICBpZiB4IDwgMCxcclxuICAgKiAgIDAgICAgaWYgeCBpcyAwLFxyXG4gICAqICAtMCAgICBpZiB4IGlzIC0wLFxyXG4gICAqICAgTmFOICBvdGhlcndpc2VcclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHNpZ24oeCkge1xyXG4gICAgeCA9IG5ldyB0aGlzKHgpO1xyXG4gICAgcmV0dXJuIHguZCA/ICh4LmRbMF0gPyB4LnMgOiAwICogeC5zKSA6IHgucyB8fCBOYU47XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgc2luZSBvZiBgeGAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAgc2lnbmlmaWNhbnQgZGlnaXRzXHJcbiAgICogdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBBIHZhbHVlIGluIHJhZGlhbnMuXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBzaW4oeCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLnNpbigpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIGh5cGVyYm9saWMgc2luZSBvZiBgeGAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmBcclxuICAgKiBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfSBBIHZhbHVlIGluIHJhZGlhbnMuXHJcbiAgICpcclxuICAgKi9cclxuICBmdW5jdGlvbiBzaW5oKHgpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS5zaW5oKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgRGVjaW1hbCB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgYHhgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50XHJcbiAgICogZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHNxcnQoeCkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKHgpLnNxcnQoKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIGB4YCBtaW51cyBgeWAsIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAgc2lnbmlmaWNhbnQgZGlnaXRzXHJcbiAgICogdXNpbmcgcm91bmRpbmcgbW9kZSBgcm91bmRpbmdgLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqIHkge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHN1Yih4LCB5KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkuc3ViKHkpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHN1bSBvZiB0aGUgYXJndW1lbnRzLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gXHJcbiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIE9ubHkgdGhlIHJlc3VsdCBpcyByb3VuZGVkLCBub3QgdGhlIGludGVybWVkaWF0ZSBjYWxjdWxhdGlvbnMuXHJcbiAgICpcclxuICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8RGVjaW1hbH1cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHN1bSgpIHtcclxuICAgIHZhciBpID0gMCxcclxuICAgICAgYXJncyA9IGFyZ3VtZW50cyxcclxuICAgICAgeCA9IG5ldyB0aGlzKGFyZ3NbaV0pO1xyXG5cclxuICAgIGV4dGVybmFsID0gZmFsc2U7XHJcbiAgICBmb3IgKDsgeC5zICYmICsraSA8IGFyZ3MubGVuZ3RoOykgeCA9IHgucGx1cyhhcmdzW2ldKTtcclxuICAgIGV4dGVybmFsID0gdHJ1ZTtcclxuXHJcbiAgICByZXR1cm4gZmluYWxpc2UoeCwgdGhpcy5wcmVjaXNpb24sIHRoaXMucm91bmRpbmcpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgdGhlIHRhbmdlbnQgb2YgYHhgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gIHNpZ25pZmljYW50XHJcbiAgICogZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH0gQSB2YWx1ZSBpbiByYWRpYW5zLlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gdGFuKHgpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyh4KS50YW4oKTtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBEZWNpbWFsIHdob3NlIHZhbHVlIGlzIHRoZSBoeXBlcmJvbGljIHRhbmdlbnQgb2YgYHhgLCByb3VuZGVkIHRvIGBwcmVjaXNpb25gXHJcbiAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgYHJvdW5kaW5nYC5cclxuICAgKlxyXG4gICAqIHgge251bWJlcnxzdHJpbmd8RGVjaW1hbH0gQSB2YWx1ZSBpbiByYWRpYW5zLlxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gdGFuaCh4KSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoeCkudGFuaCgpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IERlY2ltYWwgd2hvc2UgdmFsdWUgaXMgYHhgIHRydW5jYXRlZCB0byBhbiBpbnRlZ2VyLlxyXG4gICAqXHJcbiAgICogeCB7bnVtYmVyfHN0cmluZ3xEZWNpbWFsfVxyXG4gICAqXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gdHJ1bmMoeCkge1xyXG4gICAgcmV0dXJuIGZpbmFsaXNlKHggPSBuZXcgdGhpcyh4KSwgeC5lICsgMSwgMSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQ3JlYXRlIGFuZCBjb25maWd1cmUgaW5pdGlhbCBEZWNpbWFsIGNvbnN0cnVjdG9yLlxyXG4gIERlY2ltYWwgPSBjbG9uZShERUZBVUxUUyk7XHJcbiAgRGVjaW1hbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEZWNpbWFsO1xyXG4gIERlY2ltYWxbJ2RlZmF1bHQnXSA9IERlY2ltYWwuRGVjaW1hbCA9IERlY2ltYWw7XHJcblxyXG4gIC8vIENyZWF0ZSB0aGUgaW50ZXJuYWwgY29uc3RhbnRzIGZyb20gdGhlaXIgc3RyaW5nIHZhbHVlcy5cclxuICBMTjEwID0gbmV3IERlY2ltYWwoTE4xMCk7XHJcbiAgUEkgPSBuZXcgRGVjaW1hbChQSSk7XHJcblxyXG5cclxuICAvLyBFeHBvcnQuXHJcblxyXG5cclxuICAvLyBBTUQuXHJcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gRGVjaW1hbDtcclxuICAgIH0pO1xyXG5cclxuICAvLyBOb2RlIGFuZCBvdGhlciBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLlxyXG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnKSB7XHJcbiAgICAgIFBbU3ltYm9sWydmb3InXSgnbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBQLnRvU3RyaW5nO1xyXG4gICAgICBQW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnRGVjaW1hbCc7XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBEZWNpbWFsO1xyXG5cclxuICAvLyBCcm93c2VyLlxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoIWdsb2JhbFNjb3BlKSB7XHJcbiAgICAgIGdsb2JhbFNjb3BlID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiAmJiBzZWxmLnNlbGYgPT0gc2VsZiA/IHNlbGYgOiB3aW5kb3c7XHJcbiAgICB9XHJcblxyXG4gICAgbm9Db25mbGljdCA9IGdsb2JhbFNjb3BlLkRlY2ltYWw7XHJcbiAgICBEZWNpbWFsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGdsb2JhbFNjb3BlLkRlY2ltYWwgPSBub0NvbmZsaWN0O1xyXG4gICAgICByZXR1cm4gRGVjaW1hbDtcclxuICAgIH07XHJcblxyXG4gICAgZ2xvYmFsU2NvcGUuRGVjaW1hbCA9IERlY2ltYWw7XHJcbiAgfVxyXG59KSh0aGlzKTtcclxuIl0sIm5hbWVzIjpbImdsb2JhbFNjb3BlIiwiRVhQX0xJTUlUIiwiTUFYX0RJR0lUUyIsIk5VTUVSQUxTIiwiTE4xMCIsIlBJIiwiREVGQVVMVFMiLCJwcmVjaXNpb24iLCJyb3VuZGluZyIsIm1vZHVsbyIsInRvRXhwTmVnIiwidG9FeHBQb3MiLCJtaW5FIiwibWF4RSIsImNyeXB0byIsIkRlY2ltYWwiLCJpbmV4YWN0Iiwibm9Db25mbGljdCIsInF1YWRyYW50IiwiZXh0ZXJuYWwiLCJkZWNpbWFsRXJyb3IiLCJpbnZhbGlkQXJndW1lbnQiLCJwcmVjaXNpb25MaW1pdEV4Y2VlZGVkIiwiY3J5cHRvVW5hdmFpbGFibGUiLCJ0YWciLCJtYXRoZmxvb3IiLCJNYXRoIiwiZmxvb3IiLCJtYXRocG93IiwicG93IiwiaXNCaW5hcnkiLCJpc0hleCIsImlzT2N0YWwiLCJpc0RlY2ltYWwiLCJCQVNFIiwiTE9HX0JBU0UiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTE4xMF9QUkVDSVNJT04iLCJsZW5ndGgiLCJQSV9QUkVDSVNJT04iLCJQIiwidG9TdHJpbmdUYWciLCJhYnNvbHV0ZVZhbHVlIiwiYWJzIiwieCIsImNvbnN0cnVjdG9yIiwicyIsImZpbmFsaXNlIiwiY2VpbCIsImUiLCJjbGFtcGVkVG8iLCJjbGFtcCIsIm1pbiIsIm1heCIsImsiLCJDdG9yIiwiTmFOIiwiZ3QiLCJFcnJvciIsImNtcCIsImNvbXBhcmVkVG8iLCJ5IiwiaSIsImoiLCJ4ZEwiLCJ5ZEwiLCJ4ZCIsImQiLCJ5ZCIsInhzIiwieXMiLCJjb3NpbmUiLCJjb3MiLCJwciIsInJtIiwic2QiLCJ0b0xlc3NUaGFuSGFsZlBpIiwibmVnIiwiY3ViZVJvb3QiLCJjYnJ0IiwibSIsIm4iLCJyIiwicmVwIiwidCIsInQzIiwidDNwbHVzeCIsImlzRmluaXRlIiwiaXNaZXJvIiwiZGlnaXRzVG9TdHJpbmciLCJ0b0V4cG9uZW50aWFsIiwic2xpY2UiLCJpbmRleE9mIiwidG9TdHJpbmciLCJ0aW1lcyIsInBsdXMiLCJkaXZpZGUiLCJlcSIsImNoYXJBdCIsImRlY2ltYWxQbGFjZXMiLCJkcCIsInciLCJkaXZpZGVkQnkiLCJkaXYiLCJkaXZpZGVkVG9JbnRlZ2VyQnkiLCJkaXZUb0ludCIsImVxdWFscyIsImdyZWF0ZXJUaGFuIiwiZ3JlYXRlclRoYW5PckVxdWFsVG8iLCJndGUiLCJoeXBlcmJvbGljQ29zaW5lIiwiY29zaCIsImxlbiIsIm9uZSIsInRpbnlQb3ciLCJ0YXlsb3JTZXJpZXMiLCJjb3NoMl94IiwiZDgiLCJtaW51cyIsImh5cGVyYm9saWNTaW5lIiwic2luaCIsInNxcnQiLCJzaW5oMl94IiwiZDUiLCJkMTYiLCJkMjAiLCJoeXBlcmJvbGljVGFuZ2VudCIsInRhbmgiLCJpbnZlcnNlQ29zaW5lIiwiYWNvcyIsImhhbGZQaSIsImlzTmVnIiwiZ2V0UGkiLCJhc2luIiwiaW52ZXJzZUh5cGVyYm9saWNDb3NpbmUiLCJhY29zaCIsImx0ZSIsImxuIiwiaW52ZXJzZUh5cGVyYm9saWNTaW5lIiwiYXNpbmgiLCJpbnZlcnNlSHlwZXJib2xpY1RhbmdlbnQiLCJhdGFuaCIsIndwciIsInhzZCIsImludmVyc2VTaW5lIiwiYXRhbiIsImludmVyc2VUYW5nZW50IiwicHgiLCJ4MiIsImlzSW50ZWdlciIsImlzSW50IiwiaXNOYU4iLCJpc05lZ2F0aXZlIiwiaXNQb3NpdGl2ZSIsImlzUG9zIiwibGVzc1RoYW4iLCJsdCIsImxlc3NUaGFuT3JFcXVhbFRvIiwibG9nYXJpdGhtIiwibG9nIiwiYmFzZSIsImlzQmFzZTEwIiwiZGVub21pbmF0b3IiLCJpbmYiLCJudW0iLCJhcmciLCJndWFyZCIsIm5hdHVyYWxMb2dhcml0aG0iLCJnZXRMbjEwIiwiY2hlY2tSb3VuZGluZ0RpZ2l0cyIsInN1YiIsInhlIiwieExUeSIsInJldmVyc2UiLCJwdXNoIiwicG9wIiwic2hpZnQiLCJnZXRCYXNlMTBFeHBvbmVudCIsIm1vZCIsInEiLCJuYXR1cmFsRXhwb25lbnRpYWwiLCJleHAiLCJuZWdhdGVkIiwiYWRkIiwiY2FycnkiLCJ1bnNoaWZ0IiwieiIsImdldFByZWNpc2lvbiIsInJvdW5kIiwic2luZSIsInNpbiIsInNxdWFyZVJvb3QiLCJ0YW5nZW50IiwidGFuIiwibXVsIiwickwiLCJ0b0JpbmFyeSIsInRvU3RyaW5nQmluYXJ5IiwidG9EZWNpbWFsUGxhY2VzIiwidG9EUCIsImNoZWNrSW50MzIiLCJzdHIiLCJmaW5pdGVUb1N0cmluZyIsInRvRml4ZWQiLCJ0b0ZyYWN0aW9uIiwibWF4RCIsImQwIiwiZDEiLCJkMiIsIm4wIiwibjEiLCJ0b0hleGFkZWNpbWFsIiwidG9IZXgiLCJ0b05lYXJlc3QiLCJ0b051bWJlciIsInRvT2N0YWwiLCJ0b1Bvd2VyIiwieW4iLCJpbnRQb3ciLCJ0b1ByZWNpc2lvbiIsInRvU2lnbmlmaWNhbnREaWdpdHMiLCJ0b1NEIiwidHJ1bmNhdGVkIiwidHJ1bmMiLCJ2YWx1ZU9mIiwidG9KU09OIiwid3MiLCJpbmRleE9mTGFzdFdvcmQiLCJnZXRaZXJvU3RyaW5nIiwicmVwZWF0aW5nIiwiZGkiLCJyZCIsImNvbnZlcnRCYXNlIiwiYmFzZUluIiwiYmFzZU91dCIsImFyciIsImFyckwiLCJzdHJMIiwiY29zMngiLCJtdWx0aXBseUludGVnZXIiLCJ0ZW1wIiwiY29tcGFyZSIsImEiLCJiIiwiYUwiLCJiTCIsInN1YnRyYWN0IiwibG9nQmFzZSIsIm1vcmUiLCJwcm9kIiwicHJvZEwiLCJxZCIsInJlbSIsInJlbUwiLCJyZW0wIiwieGkiLCJ4TCIsInlkMCIsInlMIiwieXoiLCJzaWduIiwiaXNUcnVuY2F0ZWQiLCJkaWdpdHMiLCJyb3VuZFVwIiwieGRpIiwib3V0IiwiaXNFeHAiLCJub25GaW5pdGVUb1N0cmluZyIsInpzIiwidHJ1bmNhdGUiLCJpc09kZCIsIm1heE9yTWluIiwiYXJncyIsImx0Z3QiLCJzdW0iLCJjIiwiYzAiLCJudW1lcmF0b3IiLCJ4MSIsIlN0cmluZyIsInBhcnNlRGVjaW1hbCIsInJlcGxhY2UiLCJzZWFyY2giLCJzdWJzdHJpbmciLCJjaGFyQ29kZUF0IiwicGFyc2VPdGhlciIsImRpdmlzb3IiLCJpc0Zsb2F0IiwicCIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsInNpbjJfeCIsImlzSHlwZXJib2xpYyIsInUiLCJwaSIsImF0YW4yIiwiY29uZmlnIiwib2JqIiwidiIsInVzZURlZmF1bHRzIiwiZGVmYXVsdHMiLCJwcyIsImdldFJhbmRvbVZhbHVlcyIsInJhbmRvbUJ5dGVzIiwiY2xvbmUiLCJpc0RlY2ltYWxJbnN0YW5jZSIsInByb3RvdHlwZSIsIlJPVU5EX1VQIiwiUk9VTkRfRE9XTiIsIlJPVU5EX0NFSUwiLCJST1VORF9GTE9PUiIsIlJPVU5EX0hBTEZfVVAiLCJST1VORF9IQUxGX0RPV04iLCJST1VORF9IQUxGX0VWRU4iLCJST1VORF9IQUxGX0NFSUwiLCJST1VORF9IQUxGX0ZMT09SIiwiRVVDTElEIiwic2V0IiwiaHlwb3QiLCJsb2cxMCIsImxvZzIiLCJyYW5kb20iLCJoYXNPd25Qcm9wZXJ0eSIsImFyZ3VtZW50cyIsIlVpbnQzMkFycmF5IiwiY29weSIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNlbGYiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/decimal.js/decimal.js\n");

/***/ })

};
;