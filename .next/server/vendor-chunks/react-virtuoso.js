"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-virtuoso";
exports.ids = ["vendor-chunks/react-virtuoso"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-virtuoso/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/react-virtuoso/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroupedVirtuoso: () => (/* binding */ GroupedVirtuoso),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   TableVirtuoso: () => (/* binding */ TableVirtuoso),\n/* harmony export */   Virtuoso: () => (/* binding */ Virtuoso),\n/* harmony export */   VirtuosoGrid: () => (/* binding */ VirtuosoGrid),\n/* harmony export */   VirtuosoGridMockContext: () => (/* binding */ VirtuosoGridMockContext),\n/* harmony export */   VirtuosoMockContext: () => (/* binding */ VirtuosoMockContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\n\nconst PUBLISH = 0;\nconst SUBSCRIBE = 1;\nconst RESET = 2;\nconst VALUE = 4;\nfunction compose(a, b) {\n    return (arg)=>a(b(arg));\n}\nfunction thrush(arg, proc) {\n    return proc(arg);\n}\nfunction curry2to1(proc, arg1) {\n    return (arg2)=>proc(arg1, arg2);\n}\nfunction curry1to0(proc, arg) {\n    return ()=>proc(arg);\n}\nfunction tap(arg, proc) {\n    proc(arg);\n    return arg;\n}\nfunction tup(...args) {\n    return args;\n}\nfunction call(proc) {\n    proc();\n}\nfunction always(value) {\n    return ()=>value;\n}\nfunction joinProc(...procs) {\n    return ()=>{\n        procs.map(call);\n    };\n}\nfunction isDefined(arg) {\n    return arg !== void 0;\n}\nfunction noop() {}\nfunction subscribe(emitter, subscription) {\n    return emitter(SUBSCRIBE, subscription);\n}\nfunction publish(publisher, value) {\n    publisher(PUBLISH, value);\n}\nfunction reset(emitter) {\n    emitter(RESET);\n}\nfunction getValue(depot) {\n    return depot(VALUE);\n}\nfunction connect(emitter, publisher) {\n    return subscribe(emitter, curry2to1(publisher, PUBLISH));\n}\nfunction handleNext(emitter, subscription) {\n    const unsub = emitter(SUBSCRIBE, (value)=>{\n        unsub();\n        subscription(value);\n    });\n    return unsub;\n}\nfunction stream() {\n    const subscriptions = [];\n    return (action, arg)=>{\n        switch(action){\n            case RESET:\n                subscriptions.splice(0, subscriptions.length);\n                return;\n            case SUBSCRIBE:\n                subscriptions.push(arg);\n                return ()=>{\n                    const indexOf = subscriptions.indexOf(arg);\n                    if (indexOf > -1) {\n                        subscriptions.splice(indexOf, 1);\n                    }\n                };\n            case PUBLISH:\n                subscriptions.slice().forEach((subscription)=>{\n                    subscription(arg);\n                });\n                return;\n            default:\n                throw new Error(`unrecognized action ${action}`);\n        }\n    };\n}\nfunction statefulStream(initial) {\n    let value = initial;\n    const innerSubject = stream();\n    return (action, arg)=>{\n        switch(action){\n            case SUBSCRIBE:\n                const subscription = arg;\n                subscription(value);\n                break;\n            case PUBLISH:\n                value = arg;\n                break;\n            case VALUE:\n                return value;\n        }\n        return innerSubject(action, arg);\n    };\n}\nfunction eventHandler(emitter) {\n    let unsub;\n    let currentSubscription;\n    const cleanup = ()=>unsub && unsub();\n    return function(action, subscription) {\n        switch(action){\n            case SUBSCRIBE:\n                if (subscription) {\n                    if (currentSubscription === subscription) {\n                        return;\n                    }\n                    cleanup();\n                    currentSubscription = subscription;\n                    unsub = subscribe(emitter, subscription);\n                    return unsub;\n                } else {\n                    cleanup();\n                    return noop;\n                }\n            case RESET:\n                cleanup();\n                currentSubscription = null;\n                return;\n            default:\n                throw new Error(`unrecognized action ${action}`);\n        }\n    };\n}\nfunction streamFromEmitter(emitter) {\n    return tap(stream(), (stream2)=>connect(emitter, stream2));\n}\nfunction statefulStreamFromEmitter(emitter, initial) {\n    return tap(statefulStream(initial), (stream2)=>connect(emitter, stream2));\n}\nfunction combineOperators(...operators) {\n    return (subscriber)=>{\n        return operators.reduceRight(thrush, subscriber);\n    };\n}\nfunction pipe(source, ...operators) {\n    const project = combineOperators(...operators);\n    return (action, subscription)=>{\n        switch(action){\n            case SUBSCRIBE:\n                return subscribe(source, project(subscription));\n            case RESET:\n                reset(source);\n                return;\n        }\n    };\n}\nfunction defaultComparator(previous, next) {\n    return previous === next;\n}\nfunction distinctUntilChanged(comparator = defaultComparator) {\n    let current;\n    return (done)=>(next)=>{\n            if (!comparator(current, next)) {\n                current = next;\n                done(next);\n            }\n        };\n}\nfunction filter(predicate) {\n    return (done)=>(value)=>{\n            predicate(value) && done(value);\n        };\n}\nfunction map(project) {\n    return (done)=>compose(done, project);\n}\nfunction mapTo(value) {\n    return (done)=>()=>done(value);\n}\nfunction scan(scanner, initial) {\n    return (done)=>(value)=>done(initial = scanner(initial, value));\n}\nfunction skip(times) {\n    return (done)=>(value)=>{\n            times > 0 ? times-- : done(value);\n        };\n}\nfunction throttleTime(interval) {\n    let currentValue = null;\n    let timeout;\n    return (done)=>(value)=>{\n            currentValue = value;\n            if (timeout) {\n                return;\n            }\n            timeout = setTimeout(()=>{\n                timeout = void 0;\n                done(currentValue);\n            }, interval);\n        };\n}\nfunction debounceTime(interval) {\n    let currentValue;\n    let timeout;\n    return (done)=>(value)=>{\n            currentValue = value;\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(()=>{\n                done(currentValue);\n            }, interval);\n        };\n}\nfunction withLatestFrom(...sources) {\n    const values = new Array(sources.length);\n    let called = 0;\n    let pendingCall = null;\n    const allCalled = Math.pow(2, sources.length) - 1;\n    sources.forEach((source, index)=>{\n        const bit = Math.pow(2, index);\n        subscribe(source, (value)=>{\n            const prevCalled = called;\n            called = called | bit;\n            values[index] = value;\n            if (prevCalled !== allCalled && called === allCalled && pendingCall) {\n                pendingCall();\n                pendingCall = null;\n            }\n        });\n    });\n    return (done)=>(value)=>{\n            const call2 = ()=>done([\n                    value\n                ].concat(values));\n            if (called === allCalled) {\n                call2();\n            } else {\n                pendingCall = call2;\n            }\n        };\n}\nfunction merge(...sources) {\n    return function(action, subscription) {\n        switch(action){\n            case SUBSCRIBE:\n                return joinProc(...sources.map((source)=>subscribe(source, subscription)));\n            case RESET:\n                return;\n            default:\n                throw new Error(`unrecognized action ${action}`);\n        }\n    };\n}\nfunction duc(source, comparator = defaultComparator) {\n    return pipe(source, distinctUntilChanged(comparator));\n}\nfunction combineLatest(...emitters) {\n    const innerSubject = stream();\n    const values = new Array(emitters.length);\n    let called = 0;\n    const allCalled = Math.pow(2, emitters.length) - 1;\n    emitters.forEach((source, index)=>{\n        const bit = Math.pow(2, index);\n        subscribe(source, (value)=>{\n            values[index] = value;\n            called = called | bit;\n            if (called === allCalled) {\n                publish(innerSubject, values);\n            }\n        });\n    });\n    return function(action, subscription) {\n        switch(action){\n            case SUBSCRIBE:\n                if (called === allCalled) {\n                    subscription(values);\n                }\n                return subscribe(innerSubject, subscription);\n            case RESET:\n                return reset(innerSubject);\n            default:\n                throw new Error(`unrecognized action ${action}`);\n        }\n    };\n}\nfunction system(constructor, dependencies = [], { singleton } = {\n    singleton: true\n}) {\n    return {\n        id: id(),\n        constructor,\n        dependencies,\n        singleton\n    };\n}\nconst id = ()=>Symbol();\nfunction init(systemSpec) {\n    const singletons = /* @__PURE__ */ new Map();\n    const _init = ({ id: id2, constructor, dependencies, singleton })=>{\n        if (singleton && singletons.has(id2)) {\n            return singletons.get(id2);\n        }\n        const system2 = constructor(dependencies.map((e)=>_init(e)));\n        if (singleton) {\n            singletons.set(id2, system2);\n        }\n        return system2;\n    };\n    return _init(systemSpec);\n}\nfunction omit(keys, obj) {\n    const result = {};\n    const index = {};\n    let idx = 0;\n    const len = keys.length;\n    while(idx < len){\n        index[keys[idx]] = 1;\n        idx += 1;\n    }\n    for(const prop in obj){\n        if (!index.hasOwnProperty(prop)) {\n            result[prop] = obj[prop];\n        }\n    }\n    return result;\n}\nconst useIsomorphicLayoutEffect$2 = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction systemToComponent(systemSpec, map2, Root) {\n    const requiredPropNames = Object.keys(map2.required || {});\n    const optionalPropNames = Object.keys(map2.optional || {});\n    const methodNames = Object.keys(map2.methods || {});\n    const eventNames = Object.keys(map2.events || {});\n    const Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\n    function applyPropsToSystem(system2, props) {\n        if (system2[\"propsReady\"]) {\n            publish(system2[\"propsReady\"], false);\n        }\n        for (const requiredPropName of requiredPropNames){\n            const stream2 = system2[map2.required[requiredPropName]];\n            publish(stream2, props[requiredPropName]);\n        }\n        for (const optionalPropName of optionalPropNames){\n            if (optionalPropName in props) {\n                const stream2 = system2[map2.optional[optionalPropName]];\n                publish(stream2, props[optionalPropName]);\n            }\n        }\n        if (system2[\"propsReady\"]) {\n            publish(system2[\"propsReady\"], true);\n        }\n    }\n    function buildMethods(system2) {\n        return methodNames.reduce((acc, methodName)=>{\n            acc[methodName] = (value)=>{\n                const stream2 = system2[map2.methods[methodName]];\n                publish(stream2, value);\n            };\n            return acc;\n        }, {});\n    }\n    function buildEventHandlers(system2) {\n        return eventNames.reduce((handlers, eventName)=>{\n            handlers[eventName] = eventHandler(system2[map2.events[eventName]]);\n            return handlers;\n        }, {});\n    }\n    const Component = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((propsWithChildren, ref)=>{\n        const { children, ...props } = propsWithChildren;\n        const [system2] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n            return tap(init(systemSpec), (system22)=>applyPropsToSystem(system22, props));\n        });\n        const [handlers] = react__WEBPACK_IMPORTED_MODULE_0__.useState(curry1to0(buildEventHandlers, system2));\n        useIsomorphicLayoutEffect$2(()=>{\n            for (const eventName of eventNames){\n                if (eventName in props) {\n                    subscribe(handlers[eventName], props[eventName]);\n                }\n            }\n            return ()=>{\n                Object.values(handlers).map(reset);\n            };\n        }, [\n            props,\n            handlers,\n            system2\n        ]);\n        useIsomorphicLayoutEffect$2(()=>{\n            applyPropsToSystem(system2, props);\n        });\n        react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(ref, always(buildMethods(system2)));\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {\n            value: system2\n        }, Root ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root, omit([\n            ...requiredPropNames,\n            ...optionalPropNames,\n            ...eventNames\n        ], props), children) : children);\n    });\n    const usePublisher2 = (key)=>{\n        return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(curry2to1(publish, react__WEBPACK_IMPORTED_MODULE_0__.useContext(Context)[key]), [\n            key\n        ]);\n    };\n    const useEmitterValue2 = (key)=>{\n        const system2 = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Context);\n        const source = system2[key];\n        const [value, setValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(curry1to0(getValue, source));\n        useIsomorphicLayoutEffect$2(()=>subscribe(source, (next)=>{\n                if (next !== value) {\n                    setValue(always(next));\n                }\n            }), [\n            source,\n            value\n        ]);\n        return value;\n    };\n    const useEmitter2 = (key, callback)=>{\n        const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Context);\n        const source = context[key];\n        useIsomorphicLayoutEffect$2(()=>subscribe(source, callback), [\n            callback,\n            source\n        ]);\n    };\n    return {\n        Component,\n        usePublisher: usePublisher2,\n        useEmitterValue: useEmitterValue2,\n        useEmitter: useEmitter2\n    };\n}\nconst useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nconst useIsomorphicLayoutEffect$1 = useIsomorphicLayoutEffect;\nvar LogLevel = /* @__PURE__ */ ((LogLevel2)=>{\n    LogLevel2[LogLevel2[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel2[LogLevel2[\"INFO\"] = 1] = \"INFO\";\n    LogLevel2[LogLevel2[\"WARN\"] = 2] = \"WARN\";\n    LogLevel2[LogLevel2[\"ERROR\"] = 3] = \"ERROR\";\n    return LogLevel2;\n})(LogLevel || {});\nconst CONSOLE_METHOD_MAP = {\n    [0]: \"debug\",\n    [1]: \"log\",\n    [2]: \"warn\",\n    [3]: \"error\"\n};\nconst getGlobalThis = ()=>typeof globalThis === \"undefined\" ? window : globalThis;\nconst loggerSystem = system(()=>{\n    const logLevel = statefulStream(3);\n    const log = statefulStream((label, message, level = 1)=>{\n        var _a;\n        const currentLevel = (_a = getGlobalThis()[\"VIRTUOSO_LOG_LEVEL\"]) != null ? _a : getValue(logLevel);\n        if (level >= currentLevel) {\n            console[CONSOLE_METHOD_MAP[level]](\"%creact-virtuoso: %c%s %o\", \"color: #0253b3; font-weight: bold\", \"color: initial\", label, message);\n        }\n    });\n    return {\n        log,\n        logLevel\n    };\n}, [], {\n    singleton: true\n});\nfunction useSizeWithElRef(callback, enabled = true) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    let callbackRef = (_el)=>{};\n    if (typeof ResizeObserver !== \"undefined\") {\n        const observer = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n            return new ResizeObserver((entries)=>{\n                const element = entries[0].target;\n                if (element.offsetParent !== null) {\n                    callback(element);\n                }\n            });\n        }, [\n            callback\n        ]);\n        callbackRef = (elRef)=>{\n            if (elRef && enabled) {\n                observer.observe(elRef);\n                ref.current = elRef;\n            } else {\n                if (ref.current) {\n                    observer.unobserve(ref.current);\n                }\n                ref.current = null;\n            }\n        };\n    }\n    return {\n        ref,\n        callbackRef\n    };\n}\nfunction useSize(callback, enabled = true) {\n    return useSizeWithElRef(callback, enabled).callbackRef;\n}\nfunction useChangedListContentsSizes(callback, itemSize, enabled, scrollContainerStateCallback, log, gap, customScrollParent) {\n    const memoedCallback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((el)=>{\n        const ranges = getChangedChildSizes(el.children, itemSize, \"offsetHeight\", log);\n        let scrollableElement = el.parentElement;\n        while(!scrollableElement.dataset[\"virtuosoScroller\"]){\n            scrollableElement = scrollableElement.parentElement;\n        }\n        const windowScrolling = scrollableElement.lastElementChild.dataset[\"viewportType\"] === \"window\";\n        const scrollTop = customScrollParent ? customScrollParent.scrollTop : windowScrolling ? window.pageYOffset || document.documentElement.scrollTop : scrollableElement.scrollTop;\n        const scrollHeight = customScrollParent ? customScrollParent.scrollHeight : windowScrolling ? document.documentElement.scrollHeight : scrollableElement.scrollHeight;\n        const viewportHeight = customScrollParent ? customScrollParent.offsetHeight : windowScrolling ? window.innerHeight : scrollableElement.offsetHeight;\n        scrollContainerStateCallback({\n            scrollTop: Math.max(scrollTop, 0),\n            scrollHeight,\n            viewportHeight\n        });\n        gap == null ? void 0 : gap(resolveGapValue$1(\"row-gap\", getComputedStyle(el).rowGap, log));\n        if (ranges !== null) {\n            callback(ranges);\n        }\n    }, [\n        callback,\n        itemSize,\n        log,\n        gap,\n        customScrollParent,\n        scrollContainerStateCallback\n    ]);\n    return useSizeWithElRef(memoedCallback, enabled);\n}\nfunction getChangedChildSizes(children, itemSize, field, log) {\n    const length = children.length;\n    if (length === 0) {\n        return null;\n    }\n    const results = [];\n    for(let i = 0; i < length; i++){\n        const child = children.item(i);\n        if (!child || child.dataset.index === void 0) {\n            continue;\n        }\n        const index = parseInt(child.dataset.index);\n        const knownSize = parseFloat(child.dataset.knownSize);\n        const size = itemSize(child, field);\n        if (size === 0) {\n            log(\"Zero-sized element, this should not happen\", {\n                child\n            }, LogLevel.ERROR);\n        }\n        if (size === knownSize) {\n            continue;\n        }\n        const lastResult = results[results.length - 1];\n        if (results.length === 0 || lastResult.size !== size || lastResult.endIndex !== index - 1) {\n            results.push({\n                startIndex: index,\n                endIndex: index,\n                size\n            });\n        } else {\n            results[results.length - 1].endIndex++;\n        }\n    }\n    return results;\n}\nfunction resolveGapValue$1(property, value, log) {\n    if (value !== \"normal\" && !(value == null ? void 0 : value.endsWith(\"px\"))) {\n        log(`${property} was not resolved to pixel value correctly`, value, LogLevel.WARN);\n    }\n    if (value === \"normal\") {\n        return 0;\n    }\n    return parseInt(value != null ? value : \"0\", 10);\n}\nfunction correctItemSize(el, dimension) {\n    return Math.round(el.getBoundingClientRect()[dimension]);\n}\nfunction approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1.01;\n}\nfunction useScrollTop(scrollContainerStateCallback, smoothScrollTargetReached, scrollerElement, scrollerRefCallback = noop, customScrollParent) {\n    const scrollerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const scrollTopTarget = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const handler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((ev)=>{\n        const el = ev.target;\n        const windowScroll = el === window || el === document;\n        const scrollTop = windowScroll ? window.pageYOffset || document.documentElement.scrollTop : el.scrollTop;\n        const scrollHeight = windowScroll ? document.documentElement.scrollHeight : el.scrollHeight;\n        const viewportHeight = windowScroll ? window.innerHeight : el.offsetHeight;\n        const call2 = ()=>{\n            scrollContainerStateCallback({\n                scrollTop: Math.max(scrollTop, 0),\n                scrollHeight,\n                viewportHeight\n            });\n        };\n        if (ev.suppressFlushSync) {\n            call2();\n        } else {\n            react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(call2);\n        }\n        if (scrollTopTarget.current !== null) {\n            if (scrollTop === scrollTopTarget.current || scrollTop <= 0 || scrollTop === scrollHeight - viewportHeight) {\n                scrollTopTarget.current = null;\n                smoothScrollTargetReached(true);\n                if (timeoutRef.current) {\n                    clearTimeout(timeoutRef.current);\n                    timeoutRef.current = null;\n                }\n            }\n        }\n    }, [\n        scrollContainerStateCallback,\n        smoothScrollTargetReached\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const localRef = customScrollParent ? customScrollParent : scrollerRef.current;\n        scrollerRefCallback(customScrollParent ? customScrollParent : scrollerRef.current);\n        handler({\n            target: localRef,\n            suppressFlushSync: true\n        });\n        localRef.addEventListener(\"scroll\", handler, {\n            passive: true\n        });\n        return ()=>{\n            scrollerRefCallback(null);\n            localRef.removeEventListener(\"scroll\", handler);\n        };\n    }, [\n        scrollerRef,\n        handler,\n        scrollerElement,\n        scrollerRefCallback,\n        customScrollParent\n    ]);\n    function scrollToCallback(location) {\n        const scrollerElement2 = scrollerRef.current;\n        if (!scrollerElement2 || \"offsetHeight\" in scrollerElement2 && scrollerElement2.offsetHeight === 0) {\n            return;\n        }\n        const isSmooth = location.behavior === \"smooth\";\n        let offsetHeight;\n        let scrollHeight;\n        let scrollTop;\n        if (scrollerElement2 === window) {\n            scrollHeight = Math.max(correctItemSize(document.documentElement, \"height\"), document.documentElement.scrollHeight);\n            offsetHeight = window.innerHeight;\n            scrollTop = document.documentElement.scrollTop;\n        } else {\n            scrollHeight = scrollerElement2.scrollHeight;\n            offsetHeight = correctItemSize(scrollerElement2, \"height\");\n            scrollTop = scrollerElement2.scrollTop;\n        }\n        const maxScrollTop = scrollHeight - offsetHeight;\n        location.top = Math.ceil(Math.max(Math.min(maxScrollTop, location.top), 0));\n        if (approximatelyEqual(offsetHeight, scrollHeight) || location.top === scrollTop) {\n            scrollContainerStateCallback({\n                scrollTop,\n                scrollHeight,\n                viewportHeight: offsetHeight\n            });\n            if (isSmooth) {\n                smoothScrollTargetReached(true);\n            }\n            return;\n        }\n        if (isSmooth) {\n            scrollTopTarget.current = location.top;\n            if (timeoutRef.current) {\n                clearTimeout(timeoutRef.current);\n            }\n            timeoutRef.current = setTimeout(()=>{\n                timeoutRef.current = null;\n                scrollTopTarget.current = null;\n                smoothScrollTargetReached(true);\n            }, 1e3);\n        } else {\n            scrollTopTarget.current = null;\n        }\n        scrollerElement2.scrollTo(location);\n    }\n    function scrollByCallback(location) {\n        scrollerRef.current.scrollBy(location);\n    }\n    return {\n        scrollerRef,\n        scrollByCallback,\n        scrollToCallback\n    };\n}\nconst domIOSystem = system(()=>{\n    const scrollContainerState = stream();\n    const scrollTop = stream();\n    const deviation = statefulStream(0);\n    const smoothScrollTargetReached = stream();\n    const statefulScrollTop = statefulStream(0);\n    const viewportHeight = stream();\n    const scrollHeight = stream();\n    const headerHeight = statefulStream(0);\n    const fixedHeaderHeight = statefulStream(0);\n    const fixedFooterHeight = statefulStream(0);\n    const footerHeight = statefulStream(0);\n    const scrollTo = stream();\n    const scrollBy = stream();\n    const scrollingInProgress = statefulStream(false);\n    connect(pipe(scrollContainerState, map(({ scrollTop: scrollTop2 })=>scrollTop2)), scrollTop);\n    connect(pipe(scrollContainerState, map(({ scrollHeight: scrollHeight2 })=>scrollHeight2)), scrollHeight);\n    connect(scrollTop, statefulScrollTop);\n    return {\n        // input\n        scrollContainerState,\n        scrollTop,\n        viewportHeight,\n        headerHeight,\n        fixedHeaderHeight,\n        fixedFooterHeight,\n        footerHeight,\n        scrollHeight,\n        smoothScrollTargetReached,\n        // signals\n        scrollTo,\n        scrollBy,\n        // state\n        statefulScrollTop,\n        deviation,\n        scrollingInProgress\n    };\n}, [], {\n    singleton: true\n});\nconst NIL_NODE = {\n    lvl: 0\n};\nfunction newAANode(k, v, lvl, l = NIL_NODE, r = NIL_NODE) {\n    return {\n        k,\n        v,\n        lvl,\n        l,\n        r\n    };\n}\nfunction empty(node) {\n    return node === NIL_NODE;\n}\nfunction newTree() {\n    return NIL_NODE;\n}\nfunction remove(node, key) {\n    if (empty(node)) return NIL_NODE;\n    const { k, l, r } = node;\n    if (key === k) {\n        if (empty(l)) {\n            return r;\n        } else if (empty(r)) {\n            return l;\n        } else {\n            const [lastKey, lastValue] = last(l);\n            return adjust(clone(node, {\n                k: lastKey,\n                v: lastValue,\n                l: deleteLast(l)\n            }));\n        }\n    } else if (key < k) {\n        return adjust(clone(node, {\n            l: remove(l, key)\n        }));\n    } else {\n        return adjust(clone(node, {\n            r: remove(r, key)\n        }));\n    }\n}\nfunction find(node, key) {\n    if (empty(node)) {\n        return;\n    }\n    if (key === node.k) {\n        return node.v;\n    } else if (key < node.k) {\n        return find(node.l, key);\n    } else {\n        return find(node.r, key);\n    }\n}\nfunction findMaxKeyValue(node, value, field = \"k\") {\n    if (empty(node)) {\n        return [\n            -Infinity,\n            void 0\n        ];\n    }\n    if (Number(node[field]) === value) {\n        return [\n            node.k,\n            node.v\n        ];\n    }\n    if (Number(node[field]) < value) {\n        const r = findMaxKeyValue(node.r, value, field);\n        if (r[0] === -Infinity) {\n            return [\n                node.k,\n                node.v\n            ];\n        } else {\n            return r;\n        }\n    }\n    return findMaxKeyValue(node.l, value, field);\n}\nfunction insert(node, k, v) {\n    if (empty(node)) {\n        return newAANode(k, v, 1);\n    }\n    if (k === node.k) {\n        return clone(node, {\n            k,\n            v\n        });\n    } else if (k < node.k) {\n        return rebalance(clone(node, {\n            l: insert(node.l, k, v)\n        }));\n    } else {\n        return rebalance(clone(node, {\n            r: insert(node.r, k, v)\n        }));\n    }\n}\nfunction walkWithin(node, start, end) {\n    if (empty(node)) {\n        return [];\n    }\n    const { k, v, l, r } = node;\n    let result = [];\n    if (k > start) {\n        result = result.concat(walkWithin(l, start, end));\n    }\n    if (k >= start && k <= end) {\n        result.push({\n            k,\n            v\n        });\n    }\n    if (k <= end) {\n        result = result.concat(walkWithin(r, start, end));\n    }\n    return result;\n}\nfunction walk(node) {\n    if (empty(node)) {\n        return [];\n    }\n    return [\n        ...walk(node.l),\n        {\n            k: node.k,\n            v: node.v\n        },\n        ...walk(node.r)\n    ];\n}\nfunction last(node) {\n    return empty(node.r) ? [\n        node.k,\n        node.v\n    ] : last(node.r);\n}\nfunction deleteLast(node) {\n    return empty(node.r) ? node.l : adjust(clone(node, {\n        r: deleteLast(node.r)\n    }));\n}\nfunction clone(node, args) {\n    return newAANode(args.k !== void 0 ? args.k : node.k, args.v !== void 0 ? args.v : node.v, args.lvl !== void 0 ? args.lvl : node.lvl, args.l !== void 0 ? args.l : node.l, args.r !== void 0 ? args.r : node.r);\n}\nfunction isSingle(node) {\n    return empty(node) || node.lvl > node.r.lvl;\n}\nfunction rebalance(node) {\n    return split(skew(node));\n}\nfunction adjust(node) {\n    const { l, r, lvl } = node;\n    if (r.lvl >= lvl - 1 && l.lvl >= lvl - 1) {\n        return node;\n    } else if (lvl > r.lvl + 1) {\n        if (isSingle(l)) {\n            return skew(clone(node, {\n                lvl: lvl - 1\n            }));\n        } else {\n            if (!empty(l) && !empty(l.r)) {\n                return clone(l.r, {\n                    l: clone(l, {\n                        r: l.r.l\n                    }),\n                    r: clone(node, {\n                        l: l.r.r,\n                        lvl: lvl - 1\n                    }),\n                    lvl\n                });\n            } else {\n                throw new Error(\"Unexpected empty nodes\");\n            }\n        }\n    } else {\n        if (isSingle(node)) {\n            return split(clone(node, {\n                lvl: lvl - 1\n            }));\n        } else {\n            if (!empty(r) && !empty(r.l)) {\n                const rl = r.l;\n                const rlvl = isSingle(rl) ? r.lvl - 1 : r.lvl;\n                return clone(rl, {\n                    l: clone(node, {\n                        r: rl.l,\n                        lvl: lvl - 1\n                    }),\n                    r: split(clone(r, {\n                        l: rl.r,\n                        lvl: rlvl\n                    })),\n                    lvl: rl.lvl + 1\n                });\n            } else {\n                throw new Error(\"Unexpected empty nodes\");\n            }\n        }\n    }\n}\nfunction rangesWithin(node, startIndex, endIndex) {\n    if (empty(node)) {\n        return [];\n    }\n    const adjustedStart = findMaxKeyValue(node, startIndex)[0];\n    return toRanges(walkWithin(node, adjustedStart, endIndex));\n}\nfunction arrayToRanges(items, parser) {\n    const length = items.length;\n    if (length === 0) {\n        return [];\n    }\n    let { index: start, value } = parser(items[0]);\n    const result = [];\n    for(let i = 1; i < length; i++){\n        const { index: nextIndex, value: nextValue } = parser(items[i]);\n        result.push({\n            start,\n            end: nextIndex - 1,\n            value\n        });\n        start = nextIndex;\n        value = nextValue;\n    }\n    result.push({\n        start,\n        end: Infinity,\n        value\n    });\n    return result;\n}\nfunction toRanges(nodes) {\n    return arrayToRanges(nodes, ({ k: index, v: value })=>({\n            index,\n            value\n        }));\n}\nfunction split(node) {\n    const { r, lvl } = node;\n    return !empty(r) && !empty(r.r) && r.lvl === lvl && r.r.lvl === lvl ? clone(r, {\n        l: clone(node, {\n            r: r.l\n        }),\n        lvl: lvl + 1\n    }) : node;\n}\nfunction skew(node) {\n    const { l } = node;\n    return !empty(l) && l.lvl === node.lvl ? clone(l, {\n        r: clone(node, {\n            l: l.r\n        })\n    }) : node;\n}\nfunction findIndexOfClosestSmallerOrEqual(items, value, comparator, start = 0) {\n    let end = items.length - 1;\n    while(start <= end){\n        const index = Math.floor((start + end) / 2);\n        const item = items[index];\n        const match = comparator(item, value);\n        if (match === 0) {\n            return index;\n        }\n        if (match === -1) {\n            if (end - start < 2) {\n                return index - 1;\n            }\n            end = index - 1;\n        } else {\n            if (end === start) {\n                return index;\n            }\n            start = index + 1;\n        }\n    }\n    throw new Error(`Failed binary finding record in array - ${items.join(\",\")}, searched for ${value}`);\n}\nfunction findClosestSmallerOrEqual(items, value, comparator) {\n    return items[findIndexOfClosestSmallerOrEqual(items, value, comparator)];\n}\nfunction findRange(items, startValue, endValue, comparator) {\n    const startIndex = findIndexOfClosestSmallerOrEqual(items, startValue, comparator);\n    const endIndex = findIndexOfClosestSmallerOrEqual(items, endValue, comparator, startIndex);\n    return items.slice(startIndex, endIndex + 1);\n}\nconst recalcSystem = system(()=>{\n    const recalcInProgress = statefulStream(false);\n    return {\n        recalcInProgress\n    };\n}, [], {\n    singleton: true\n});\nfunction rangeIncludes(refRange) {\n    const { size, startIndex, endIndex } = refRange;\n    return (range)=>{\n        return range.start === startIndex && (range.end === endIndex || range.end === Infinity) && range.value === size;\n    };\n}\nfunction affectedGroupCount(offset, groupIndices) {\n    let recognizedOffsetItems = 0;\n    let groupIndex = 0;\n    while(recognizedOffsetItems < offset){\n        recognizedOffsetItems += groupIndices[groupIndex + 1] - groupIndices[groupIndex] - 1;\n        groupIndex++;\n    }\n    const offsetIsExact = recognizedOffsetItems === offset;\n    return groupIndex - (offsetIsExact ? 0 : 1);\n}\nfunction insertRanges(sizeTree, ranges) {\n    let syncStart = empty(sizeTree) ? 0 : Infinity;\n    for (const range of ranges){\n        const { size, startIndex, endIndex } = range;\n        syncStart = Math.min(syncStart, startIndex);\n        if (empty(sizeTree)) {\n            sizeTree = insert(sizeTree, 0, size);\n            continue;\n        }\n        const overlappingRanges = rangesWithin(sizeTree, startIndex - 1, endIndex + 1);\n        if (overlappingRanges.some(rangeIncludes(range))) {\n            continue;\n        }\n        let firstPassDone = false;\n        let shouldInsert = false;\n        for (const { start: rangeStart, end: rangeEnd, value: rangeValue } of overlappingRanges){\n            if (!firstPassDone) {\n                shouldInsert = rangeValue !== size;\n                firstPassDone = true;\n            } else {\n                if (endIndex >= rangeStart || size === rangeValue) {\n                    sizeTree = remove(sizeTree, rangeStart);\n                }\n            }\n            if (rangeEnd > endIndex && endIndex >= rangeStart) {\n                if (rangeValue !== size) {\n                    sizeTree = insert(sizeTree, endIndex + 1, rangeValue);\n                }\n            }\n        }\n        if (shouldInsert) {\n            sizeTree = insert(sizeTree, startIndex, size);\n        }\n    }\n    return [\n        sizeTree,\n        syncStart\n    ];\n}\nfunction initialSizeState() {\n    return {\n        offsetTree: [],\n        sizeTree: newTree(),\n        groupOffsetTree: newTree(),\n        lastIndex: 0,\n        lastOffset: 0,\n        lastSize: 0,\n        groupIndices: []\n    };\n}\nfunction indexComparator({ index: itemIndex }, index) {\n    return index === itemIndex ? 0 : index < itemIndex ? -1 : 1;\n}\nfunction offsetComparator({ offset: itemOffset }, offset) {\n    return offset === itemOffset ? 0 : offset < itemOffset ? -1 : 1;\n}\nfunction offsetPointParser(point) {\n    return {\n        index: point.index,\n        value: point\n    };\n}\nfunction rangesWithinOffsets(tree, startOffset, endOffset, minStartIndex = 0) {\n    if (minStartIndex > 0) {\n        startOffset = Math.max(startOffset, findClosestSmallerOrEqual(tree, minStartIndex, indexComparator).offset);\n    }\n    return arrayToRanges(findRange(tree, startOffset, endOffset, offsetComparator), offsetPointParser);\n}\nfunction createOffsetTree(prevOffsetTree, syncStart, sizeTree, gap) {\n    let offsetTree = prevOffsetTree;\n    let prevIndex = 0;\n    let prevSize = 0;\n    let prevOffset = 0;\n    let startIndex = 0;\n    if (syncStart !== 0) {\n        startIndex = findIndexOfClosestSmallerOrEqual(offsetTree, syncStart - 1, indexComparator);\n        const offsetInfo = offsetTree[startIndex];\n        prevOffset = offsetInfo.offset;\n        const kv = findMaxKeyValue(sizeTree, syncStart - 1);\n        prevIndex = kv[0];\n        prevSize = kv[1];\n        if (offsetTree.length && offsetTree[startIndex].size === findMaxKeyValue(sizeTree, syncStart)[1]) {\n            startIndex -= 1;\n        }\n        offsetTree = offsetTree.slice(0, startIndex + 1);\n    } else {\n        offsetTree = [];\n    }\n    for (const { start: startIndex2, value } of rangesWithin(sizeTree, syncStart, Infinity)){\n        const indexOffset = startIndex2 - prevIndex;\n        const aOffset = indexOffset * prevSize + prevOffset + indexOffset * gap;\n        offsetTree.push({\n            offset: aOffset,\n            size: value,\n            index: startIndex2\n        });\n        prevIndex = startIndex2;\n        prevOffset = aOffset;\n        prevSize = value;\n    }\n    return {\n        offsetTree,\n        lastIndex: prevIndex,\n        lastOffset: prevOffset,\n        lastSize: prevSize\n    };\n}\nfunction sizeStateReducer(state, [ranges, groupIndices, log, gap]) {\n    if (ranges.length > 0) {\n        log(\"received item sizes\", ranges, LogLevel.DEBUG);\n    }\n    const sizeTree = state.sizeTree;\n    let newSizeTree = sizeTree;\n    let syncStart = 0;\n    if (groupIndices.length > 0 && empty(sizeTree) && ranges.length === 2) {\n        const groupSize = ranges[0].size;\n        const itemSize = ranges[1].size;\n        newSizeTree = groupIndices.reduce((tree, groupIndex)=>{\n            return insert(insert(tree, groupIndex, groupSize), groupIndex + 1, itemSize);\n        }, newSizeTree);\n    } else {\n        [newSizeTree, syncStart] = insertRanges(newSizeTree, ranges);\n    }\n    if (newSizeTree === sizeTree) {\n        return state;\n    }\n    const { offsetTree: newOffsetTree, lastIndex, lastSize, lastOffset } = createOffsetTree(state.offsetTree, syncStart, newSizeTree, gap);\n    return {\n        sizeTree: newSizeTree,\n        offsetTree: newOffsetTree,\n        lastIndex,\n        lastOffset,\n        lastSize,\n        groupOffsetTree: groupIndices.reduce((tree, index)=>{\n            return insert(tree, index, offsetOf(index, newOffsetTree, gap));\n        }, newTree()),\n        groupIndices\n    };\n}\nfunction offsetOf(index, tree, gap) {\n    if (tree.length === 0) {\n        return 0;\n    }\n    const { offset, index: startIndex, size } = findClosestSmallerOrEqual(tree, index, indexComparator);\n    const itemCount = index - startIndex;\n    const top = size * itemCount + (itemCount - 1) * gap + offset;\n    return top > 0 ? top + gap : top;\n}\nfunction isGroupLocation(location) {\n    return typeof location.groupIndex !== \"undefined\";\n}\nfunction originalIndexFromLocation(location, sizes, lastIndex) {\n    if (isGroupLocation(location)) {\n        return sizes.groupIndices[location.groupIndex] + 1;\n    } else {\n        const numericIndex = location.index === \"LAST\" ? lastIndex : location.index;\n        let result = originalIndexFromItemIndex(numericIndex, sizes);\n        result = Math.max(0, result, Math.min(lastIndex, result));\n        return result;\n    }\n}\nfunction originalIndexFromItemIndex(itemIndex, sizes) {\n    if (!hasGroups(sizes)) {\n        return itemIndex;\n    }\n    let groupOffset = 0;\n    while(sizes.groupIndices[groupOffset] <= itemIndex + groupOffset){\n        groupOffset++;\n    }\n    return itemIndex + groupOffset;\n}\nfunction hasGroups(sizes) {\n    return !empty(sizes.groupOffsetTree);\n}\nfunction sizeTreeToRanges(sizeTree) {\n    return walk(sizeTree).map(({ k: startIndex, v: size }, index, sizeArray)=>{\n        const nextSize = sizeArray[index + 1];\n        const endIndex = nextSize ? nextSize.k - 1 : Infinity;\n        return {\n            startIndex,\n            endIndex,\n            size\n        };\n    });\n}\nconst SIZE_MAP = {\n    offsetHeight: \"height\",\n    offsetWidth: \"width\"\n};\nconst sizeSystem = system(([{ log }, { recalcInProgress }])=>{\n    const sizeRanges = stream();\n    const totalCount = stream();\n    const statefulTotalCount = statefulStreamFromEmitter(totalCount, 0);\n    const unshiftWith = stream();\n    const shiftWith = stream();\n    const firstItemIndex = statefulStream(0);\n    const groupIndices = statefulStream([]);\n    const fixedItemSize = statefulStream(void 0);\n    const defaultItemSize = statefulStream(void 0);\n    const itemSize = statefulStream((el, field)=>correctItemSize(el, SIZE_MAP[field]));\n    const data = statefulStream(void 0);\n    const gap = statefulStream(0);\n    const initial = initialSizeState();\n    const sizes = statefulStreamFromEmitter(pipe(sizeRanges, withLatestFrom(groupIndices, log, gap), scan(sizeStateReducer, initial), distinctUntilChanged()), initial);\n    const prevGroupIndices = statefulStreamFromEmitter(pipe(groupIndices, distinctUntilChanged(), scan((prev, curr)=>({\n            prev: prev.current,\n            current: curr\n        }), {\n        prev: [],\n        current: []\n    }), map(({ prev })=>prev)), []);\n    connect(pipe(groupIndices, filter((indexes)=>indexes.length > 0), withLatestFrom(sizes, gap), map(([groupIndices2, sizes2, gap2])=>{\n        const groupOffsetTree = groupIndices2.reduce((tree, index, idx)=>{\n            return insert(tree, index, offsetOf(index, sizes2.offsetTree, gap2) || idx);\n        }, newTree());\n        return {\n            ...sizes2,\n            groupIndices: groupIndices2,\n            groupOffsetTree\n        };\n    })), sizes);\n    connect(pipe(totalCount, withLatestFrom(sizes), filter(([totalCount2, { lastIndex }])=>{\n        return totalCount2 < lastIndex;\n    }), map(([totalCount2, { lastIndex, lastSize }])=>{\n        return [\n            {\n                startIndex: totalCount2,\n                endIndex: lastIndex,\n                size: lastSize\n            }\n        ];\n    })), sizeRanges);\n    connect(fixedItemSize, defaultItemSize);\n    const trackItemSizes = statefulStreamFromEmitter(pipe(fixedItemSize, map((size)=>size === void 0)), true);\n    connect(pipe(defaultItemSize, filter((value)=>{\n        return value !== void 0 && empty(getValue(sizes).sizeTree);\n    }), map((size)=>[\n            {\n                startIndex: 0,\n                endIndex: 0,\n                size\n            }\n        ])), sizeRanges);\n    const listRefresh = streamFromEmitter(pipe(sizeRanges, withLatestFrom(sizes), scan(({ sizes: oldSizes }, [_, newSizes])=>{\n        return {\n            changed: newSizes !== oldSizes,\n            sizes: newSizes\n        };\n    }, {\n        changed: false,\n        sizes: initial\n    }), map((value)=>value.changed)));\n    subscribe(pipe(firstItemIndex, scan((prev, next)=>{\n        return {\n            diff: prev.prev - next,\n            prev: next\n        };\n    }, {\n        diff: 0,\n        prev: 0\n    }), map((val)=>val.diff)), (offset)=>{\n        const { groupIndices: groupIndices2 } = getValue(sizes);\n        if (offset > 0) {\n            publish(recalcInProgress, true);\n            publish(unshiftWith, offset + affectedGroupCount(offset, groupIndices2));\n        } else if (offset < 0) {\n            const prevGroupIndicesValue = getValue(prevGroupIndices);\n            if (prevGroupIndicesValue.length > 0) {\n                offset -= affectedGroupCount(-offset, prevGroupIndicesValue);\n            }\n            publish(shiftWith, offset);\n        }\n    });\n    subscribe(pipe(firstItemIndex, withLatestFrom(log)), ([index, log2])=>{\n        if (index < 0) {\n            log2(\"`firstItemIndex` prop should not be set to less than zero. If you don't know the total count, just use a very high value\", {\n                firstItemIndex\n            }, LogLevel.ERROR);\n        }\n    });\n    const beforeUnshiftWith = streamFromEmitter(unshiftWith);\n    connect(pipe(unshiftWith, withLatestFrom(sizes), map(([unshiftWith2, sizes2])=>{\n        const groupedMode = sizes2.groupIndices.length > 0;\n        const initialRanges = [];\n        const defaultSize = sizes2.lastSize;\n        if (groupedMode) {\n            const firstGroupSize = find(sizes2.sizeTree, 0);\n            let prependedGroupItemsCount = 0;\n            let groupIndex = 0;\n            while(prependedGroupItemsCount < unshiftWith2){\n                const theGroupIndex = sizes2.groupIndices[groupIndex];\n                const groupItemCount = sizes2.groupIndices.length === groupIndex + 1 ? Infinity : sizes2.groupIndices[groupIndex + 1] - theGroupIndex - 1;\n                initialRanges.push({\n                    startIndex: theGroupIndex,\n                    endIndex: theGroupIndex,\n                    size: firstGroupSize\n                });\n                initialRanges.push({\n                    startIndex: theGroupIndex + 1,\n                    endIndex: theGroupIndex + 1 + groupItemCount - 1,\n                    size: defaultSize\n                });\n                groupIndex++;\n                prependedGroupItemsCount += groupItemCount + 1;\n            }\n            const sizeTreeKV = walk(sizes2.sizeTree);\n            const firstGroupIsExpanded = prependedGroupItemsCount !== unshiftWith2;\n            if (firstGroupIsExpanded) {\n                sizeTreeKV.shift();\n            }\n            return sizeTreeKV.reduce((acc, { k: index, v: size })=>{\n                let ranges = acc.ranges;\n                if (acc.prevSize !== 0) {\n                    ranges = [\n                        ...acc.ranges,\n                        {\n                            startIndex: acc.prevIndex,\n                            endIndex: index + unshiftWith2 - 1,\n                            size: acc.prevSize\n                        }\n                    ];\n                }\n                return {\n                    ranges,\n                    prevIndex: index + unshiftWith2,\n                    prevSize: size\n                };\n            }, {\n                ranges: initialRanges,\n                prevIndex: unshiftWith2,\n                prevSize: 0\n            }).ranges;\n        }\n        return walk(sizes2.sizeTree).reduce((acc, { k: index, v: size })=>{\n            return {\n                ranges: [\n                    ...acc.ranges,\n                    {\n                        startIndex: acc.prevIndex,\n                        endIndex: index + unshiftWith2 - 1,\n                        size: acc.prevSize\n                    }\n                ],\n                prevIndex: index + unshiftWith2,\n                prevSize: size\n            };\n        }, {\n            ranges: [],\n            prevIndex: 0,\n            prevSize: defaultSize\n        }).ranges;\n    })), sizeRanges);\n    const shiftWithOffset = streamFromEmitter(pipe(shiftWith, withLatestFrom(sizes, gap), map(([shiftWith2, { offsetTree }, gap2])=>{\n        const newFirstItemIndex = -shiftWith2;\n        return offsetOf(newFirstItemIndex, offsetTree, gap2);\n    })));\n    connect(pipe(shiftWith, withLatestFrom(sizes, gap), map(([shiftWith2, sizes2, gap2])=>{\n        const groupedMode = sizes2.groupIndices.length > 0;\n        if (groupedMode) {\n            if (empty(sizes2.sizeTree)) {\n                return sizes2;\n            }\n            let newSizeTree = newTree();\n            const prevGroupIndicesValue = getValue(prevGroupIndices);\n            let removedItemsCount = 0;\n            let groupIndex = 0;\n            let groupOffset = 0;\n            while(removedItemsCount < -shiftWith2){\n                groupOffset = prevGroupIndicesValue[groupIndex];\n                const groupItemCount = prevGroupIndicesValue[groupIndex + 1] - groupOffset - 1;\n                groupIndex++;\n                removedItemsCount += groupItemCount + 1;\n            }\n            newSizeTree = walk(sizes2.sizeTree).reduce((acc, { k, v })=>{\n                return insert(acc, Math.max(0, k + shiftWith2), v);\n            }, newSizeTree);\n            const aGroupIsShrunk = removedItemsCount !== -shiftWith2;\n            if (aGroupIsShrunk) {\n                const firstGroupSize = find(sizes2.sizeTree, groupOffset);\n                newSizeTree = insert(newSizeTree, 0, firstGroupSize);\n                const nextItemSize = findMaxKeyValue(sizes2.sizeTree, -shiftWith2 + 1)[1];\n                newSizeTree = insert(newSizeTree, 1, nextItemSize);\n            }\n            return {\n                ...sizes2,\n                sizeTree: newSizeTree,\n                ...createOffsetTree(sizes2.offsetTree, 0, newSizeTree, gap2)\n            };\n        } else {\n            const newSizeTree = walk(sizes2.sizeTree).reduce((acc, { k, v })=>{\n                return insert(acc, Math.max(0, k + shiftWith2), v);\n            }, newTree());\n            return {\n                ...sizes2,\n                sizeTree: newSizeTree,\n                ...createOffsetTree(sizes2.offsetTree, 0, newSizeTree, gap2)\n            };\n        }\n    })), sizes);\n    return {\n        // input\n        data,\n        totalCount,\n        sizeRanges,\n        groupIndices,\n        defaultItemSize,\n        fixedItemSize,\n        unshiftWith,\n        shiftWith,\n        shiftWithOffset,\n        beforeUnshiftWith,\n        firstItemIndex,\n        gap,\n        // output\n        sizes,\n        listRefresh,\n        statefulTotalCount,\n        trackItemSizes,\n        itemSize\n    };\n}, tup(loggerSystem, recalcSystem), {\n    singleton: true\n});\nconst SUPPORTS_SCROLL_TO_OPTIONS = typeof document !== \"undefined\" && \"scrollBehavior\" in document.documentElement.style;\nfunction normalizeIndexLocation(location) {\n    const result = typeof location === \"number\" ? {\n        index: location\n    } : location;\n    if (!result.align) {\n        result.align = \"start\";\n    }\n    if (!result.behavior || !SUPPORTS_SCROLL_TO_OPTIONS) {\n        result.behavior = \"auto\";\n    }\n    if (!result.offset) {\n        result.offset = 0;\n    }\n    return result;\n}\nconst scrollToIndexSystem = system(([{ sizes, totalCount, listRefresh, gap }, { scrollingInProgress, viewportHeight, scrollTo, smoothScrollTargetReached, headerHeight, footerHeight, fixedHeaderHeight, fixedFooterHeight }, { log }])=>{\n    const scrollToIndex = stream();\n    const topListHeight = statefulStream(0);\n    let unsubscribeNextListRefresh = null;\n    let cleartTimeoutRef = null;\n    let unsubscribeListRefresh = null;\n    function cleanup() {\n        if (unsubscribeNextListRefresh) {\n            unsubscribeNextListRefresh();\n            unsubscribeNextListRefresh = null;\n        }\n        if (unsubscribeListRefresh) {\n            unsubscribeListRefresh();\n            unsubscribeListRefresh = null;\n        }\n        if (cleartTimeoutRef) {\n            clearTimeout(cleartTimeoutRef);\n            cleartTimeoutRef = null;\n        }\n        publish(scrollingInProgress, false);\n    }\n    connect(pipe(scrollToIndex, withLatestFrom(sizes, viewportHeight, totalCount, topListHeight, headerHeight, footerHeight, log), withLatestFrom(gap, fixedHeaderHeight, fixedFooterHeight), map(([[location, sizes2, viewportHeight2, totalCount2, topListHeight2, headerHeight2, footerHeight2, log2], gap2, fixedHeaderHeight2, fixedFooterHeight2])=>{\n        const normalLocation = normalizeIndexLocation(location);\n        const { align, behavior, offset } = normalLocation;\n        const lastIndex = totalCount2 - 1;\n        const index = originalIndexFromLocation(normalLocation, sizes2, lastIndex);\n        let top = offsetOf(index, sizes2.offsetTree, gap2) + headerHeight2;\n        if (align === \"end\") {\n            top += fixedHeaderHeight2 + findMaxKeyValue(sizes2.sizeTree, index)[1] - viewportHeight2 + fixedFooterHeight2;\n            if (index === lastIndex) {\n                top += footerHeight2;\n            }\n        } else if (align === \"center\") {\n            top += (fixedHeaderHeight2 + findMaxKeyValue(sizes2.sizeTree, index)[1] - viewportHeight2 + fixedFooterHeight2) / 2;\n        } else {\n            top -= topListHeight2;\n        }\n        if (offset) {\n            top += offset;\n        }\n        const retry = (listChanged)=>{\n            cleanup();\n            if (listChanged) {\n                log2(\"retrying to scroll to\", {\n                    location\n                }, LogLevel.DEBUG);\n                publish(scrollToIndex, location);\n            } else {\n                log2(\"list did not change, scroll successful\", {}, LogLevel.DEBUG);\n            }\n        };\n        cleanup();\n        if (behavior === \"smooth\") {\n            let listChanged = false;\n            unsubscribeListRefresh = subscribe(listRefresh, (changed)=>{\n                listChanged = listChanged || changed;\n            });\n            unsubscribeNextListRefresh = handleNext(smoothScrollTargetReached, ()=>{\n                retry(listChanged);\n            });\n        } else {\n            unsubscribeNextListRefresh = handleNext(pipe(listRefresh, watchChangesFor(150)), retry);\n        }\n        cleartTimeoutRef = setTimeout(()=>{\n            cleanup();\n        }, 1200);\n        publish(scrollingInProgress, true);\n        log2(\"scrolling from index to\", {\n            index,\n            top,\n            behavior\n        }, LogLevel.DEBUG);\n        return {\n            top,\n            behavior\n        };\n    })), scrollTo);\n    return {\n        scrollToIndex,\n        topListHeight\n    };\n}, tup(sizeSystem, domIOSystem, loggerSystem), {\n    singleton: true\n});\nfunction watchChangesFor(limit) {\n    return (done)=>{\n        const timeoutRef = setTimeout(()=>{\n            done(false);\n        }, limit);\n        return (value)=>{\n            if (value) {\n                done(true);\n                clearTimeout(timeoutRef);\n            }\n        };\n    };\n}\nconst UP = \"up\";\nconst DOWN = \"down\";\nconst NONE$1 = \"none\";\nconst INITIAL_BOTTOM_STATE = {\n    atBottom: false,\n    notAtBottomBecause: \"NOT_SHOWING_LAST_ITEM\",\n    state: {\n        offsetBottom: 0,\n        scrollTop: 0,\n        viewportHeight: 0,\n        scrollHeight: 0\n    }\n};\nconst DEFAULT_AT_TOP_THRESHOLD = 0;\nconst stateFlagsSystem = system(([{ scrollContainerState, scrollTop, viewportHeight, headerHeight, footerHeight, scrollBy }])=>{\n    const isAtBottom = statefulStream(false);\n    const isAtTop = statefulStream(true);\n    const atBottomStateChange = stream();\n    const atTopStateChange = stream();\n    const atBottomThreshold = statefulStream(4);\n    const atTopThreshold = statefulStream(DEFAULT_AT_TOP_THRESHOLD);\n    const isScrolling = statefulStreamFromEmitter(pipe(merge(pipe(duc(scrollTop), skip(1), mapTo(true)), pipe(duc(scrollTop), skip(1), mapTo(false), debounceTime(100))), distinctUntilChanged()), false);\n    const isScrollingBy = statefulStreamFromEmitter(pipe(merge(pipe(scrollBy, mapTo(true)), pipe(scrollBy, mapTo(false), debounceTime(200))), distinctUntilChanged()), false);\n    connect(pipe(combineLatest(duc(scrollTop), duc(atTopThreshold)), map(([top, atTopThreshold2])=>top <= atTopThreshold2), distinctUntilChanged()), isAtTop);\n    connect(pipe(isAtTop, throttleTime(50)), atTopStateChange);\n    const atBottomState = streamFromEmitter(pipe(combineLatest(scrollContainerState, duc(viewportHeight), duc(headerHeight), duc(footerHeight), duc(atBottomThreshold)), scan((current, [{ scrollTop: scrollTop2, scrollHeight }, viewportHeight2, _headerHeight, _footerHeight, atBottomThreshold2])=>{\n        const isAtBottom2 = scrollTop2 + viewportHeight2 - scrollHeight > -atBottomThreshold2;\n        const state = {\n            viewportHeight: viewportHeight2,\n            scrollTop: scrollTop2,\n            scrollHeight\n        };\n        if (isAtBottom2) {\n            let atBottomBecause;\n            let scrollTopDelta;\n            if (scrollTop2 > current.state.scrollTop) {\n                atBottomBecause = \"SCROLLED_DOWN\";\n                scrollTopDelta = current.state.scrollTop - scrollTop2;\n            } else {\n                atBottomBecause = \"SIZE_DECREASED\";\n                scrollTopDelta = current.state.scrollTop - scrollTop2 || current.scrollTopDelta;\n            }\n            return {\n                atBottom: true,\n                state,\n                atBottomBecause,\n                scrollTopDelta\n            };\n        }\n        let notAtBottomBecause;\n        if (state.scrollHeight > current.state.scrollHeight) {\n            notAtBottomBecause = \"SIZE_INCREASED\";\n        } else if (viewportHeight2 < current.state.viewportHeight) {\n            notAtBottomBecause = \"VIEWPORT_HEIGHT_DECREASING\";\n        } else if (scrollTop2 < current.state.scrollTop) {\n            notAtBottomBecause = \"SCROLLING_UPWARDS\";\n        } else {\n            notAtBottomBecause = \"NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM\";\n        }\n        return {\n            atBottom: false,\n            notAtBottomBecause,\n            state\n        };\n    }, INITIAL_BOTTOM_STATE), distinctUntilChanged((prev, next)=>{\n        return prev && prev.atBottom === next.atBottom;\n    })));\n    const lastJumpDueToItemResize = statefulStreamFromEmitter(pipe(scrollContainerState, scan((current, { scrollTop: scrollTop2, scrollHeight, viewportHeight: viewportHeight2 })=>{\n        if (!approximatelyEqual(current.scrollHeight, scrollHeight)) {\n            const atBottom = scrollHeight - (scrollTop2 + viewportHeight2) < 1;\n            if (current.scrollTop !== scrollTop2 && atBottom) {\n                return {\n                    scrollHeight,\n                    scrollTop: scrollTop2,\n                    jump: current.scrollTop - scrollTop2,\n                    changed: true\n                };\n            } else {\n                return {\n                    scrollHeight,\n                    scrollTop: scrollTop2,\n                    jump: 0,\n                    changed: true\n                };\n            }\n        } else {\n            return {\n                scrollTop: scrollTop2,\n                scrollHeight,\n                jump: 0,\n                changed: false\n            };\n        }\n    }, {\n        scrollHeight: 0,\n        jump: 0,\n        scrollTop: 0,\n        changed: false\n    }), filter((value)=>value.changed), map((value)=>value.jump)), 0);\n    connect(pipe(atBottomState, map((state)=>state.atBottom)), isAtBottom);\n    connect(pipe(isAtBottom, throttleTime(50)), atBottomStateChange);\n    const scrollDirection = statefulStream(DOWN);\n    connect(pipe(scrollContainerState, map(({ scrollTop: scrollTop2 })=>scrollTop2), distinctUntilChanged(), scan((acc, scrollTop2)=>{\n        if (getValue(isScrollingBy)) {\n            return {\n                direction: acc.direction,\n                prevScrollTop: scrollTop2\n            };\n        }\n        return {\n            direction: scrollTop2 < acc.prevScrollTop ? UP : DOWN,\n            prevScrollTop: scrollTop2\n        };\n    }, {\n        direction: DOWN,\n        prevScrollTop: 0\n    }), map((value)=>value.direction)), scrollDirection);\n    connect(pipe(scrollContainerState, throttleTime(50), mapTo(NONE$1)), scrollDirection);\n    const scrollVelocity = statefulStream(0);\n    connect(pipe(isScrolling, filter((value)=>!value), // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    mapTo(0)), scrollVelocity);\n    connect(pipe(scrollTop, throttleTime(100), withLatestFrom(isScrolling), filter(([_, isScrolling2])=>!!isScrolling2), scan(([_, prev], [next])=>[\n            prev,\n            next\n        ], [\n        0,\n        0\n    ]), map(([prev, next])=>next - prev)), scrollVelocity);\n    return {\n        isScrolling,\n        isAtTop,\n        isAtBottom,\n        atBottomState,\n        atTopStateChange,\n        atBottomStateChange,\n        scrollDirection,\n        atBottomThreshold,\n        atTopThreshold,\n        scrollVelocity,\n        lastJumpDueToItemResize\n    };\n}, tup(domIOSystem));\nconst propsReadySystem = system(([{ log }])=>{\n    const propsReady = statefulStream(false);\n    const didMount = streamFromEmitter(pipe(propsReady, filter((ready)=>ready), distinctUntilChanged()));\n    subscribe(propsReady, (value)=>{\n        value && getValue(log)(\"props updated\", {}, LogLevel.DEBUG);\n    });\n    return {\n        propsReady,\n        didMount\n    };\n}, tup(loggerSystem), {\n    singleton: true\n});\nfunction skipFrames(frameCount, callback) {\n    if (frameCount == 0) {\n        callback();\n    } else {\n        requestAnimationFrame(()=>skipFrames(frameCount - 1, callback));\n    }\n}\nfunction getInitialTopMostItemIndexNumber(location, totalCount) {\n    const lastIndex = totalCount - 1;\n    const index = typeof location === \"number\" ? location : location.index === \"LAST\" ? lastIndex : location.index;\n    return index;\n}\nconst initialTopMostItemIndexSystem = system(([{ sizes, listRefresh, defaultItemSize }, { scrollTop }, { scrollToIndex }, { didMount }])=>{\n    const scrolledToInitialItem = statefulStream(true);\n    const initialTopMostItemIndex = statefulStream(0);\n    const scrollScheduled = statefulStream(false);\n    connect(pipe(didMount, withLatestFrom(initialTopMostItemIndex), filter(([_, location])=>!!location), mapTo(false)), scrolledToInitialItem);\n    subscribe(pipe(combineLatest(listRefresh, didMount), withLatestFrom(scrolledToInitialItem, sizes, defaultItemSize, scrollScheduled), filter(([[, didMount2], scrolledToInitialItem2, { sizeTree }, defaultItemSize2, scrollScheduled2])=>{\n        return didMount2 && (!empty(sizeTree) || isDefined(defaultItemSize2)) && !scrolledToInitialItem2 && !scrollScheduled2;\n    }), withLatestFrom(initialTopMostItemIndex)), ([, initialTopMostItemIndex2])=>{\n        publish(scrollScheduled, true);\n        skipFrames(3, ()=>{\n            handleNext(scrollTop, ()=>publish(scrolledToInitialItem, true));\n            publish(scrollToIndex, initialTopMostItemIndex2);\n        });\n    });\n    return {\n        scrolledToInitialItem,\n        initialTopMostItemIndex\n    };\n}, tup(sizeSystem, domIOSystem, scrollToIndexSystem, propsReadySystem), {\n    singleton: true\n});\nfunction normalizeFollowOutput(follow) {\n    if (!follow) {\n        return false;\n    }\n    return follow === \"smooth\" ? \"smooth\" : \"auto\";\n}\nconst behaviorFromFollowOutput = (follow, isAtBottom)=>{\n    if (typeof follow === \"function\") {\n        return normalizeFollowOutput(follow(isAtBottom));\n    }\n    return isAtBottom && normalizeFollowOutput(follow);\n};\nconst followOutputSystem = system(([{ totalCount, listRefresh }, { isAtBottom, atBottomState }, { scrollToIndex }, { scrolledToInitialItem }, { propsReady, didMount }, { log }, { scrollingInProgress }])=>{\n    const followOutput = statefulStream(false);\n    const autoscrollToBottom = stream();\n    let pendingScrollHandle = null;\n    function scrollToBottom(followOutputBehavior) {\n        publish(scrollToIndex, {\n            index: \"LAST\",\n            align: \"end\",\n            behavior: followOutputBehavior\n        });\n    }\n    subscribe(pipe(combineLatest(pipe(duc(totalCount), skip(1)), didMount), withLatestFrom(duc(followOutput), isAtBottom, scrolledToInitialItem, scrollingInProgress), map(([[totalCount2, didMount2], followOutput2, isAtBottom2, scrolledToInitialItem2, scrollingInProgress2])=>{\n        let shouldFollow = didMount2 && scrolledToInitialItem2;\n        let followOutputBehavior = \"auto\";\n        if (shouldFollow) {\n            followOutputBehavior = behaviorFromFollowOutput(followOutput2, isAtBottom2 || scrollingInProgress2);\n            shouldFollow = shouldFollow && !!followOutputBehavior;\n        }\n        return {\n            totalCount: totalCount2,\n            shouldFollow,\n            followOutputBehavior\n        };\n    }), filter(({ shouldFollow })=>shouldFollow)), ({ totalCount: totalCount2, followOutputBehavior })=>{\n        if (pendingScrollHandle) {\n            pendingScrollHandle();\n            pendingScrollHandle = null;\n        }\n        pendingScrollHandle = handleNext(listRefresh, ()=>{\n            getValue(log)(\"following output to \", {\n                totalCount: totalCount2\n            }, LogLevel.DEBUG);\n            scrollToBottom(followOutputBehavior);\n            pendingScrollHandle = null;\n        });\n    });\n    function trapNextSizeIncrease(followOutput2) {\n        const cancel = handleNext(atBottomState, (state)=>{\n            if (followOutput2 && !state.atBottom && state.notAtBottomBecause === \"SIZE_INCREASED\" && !pendingScrollHandle) {\n                getValue(log)(\"scrolling to bottom due to increased size\", {}, LogLevel.DEBUG);\n                scrollToBottom(\"auto\");\n            }\n        });\n        setTimeout(cancel, 100);\n    }\n    subscribe(pipe(combineLatest(duc(followOutput), totalCount, propsReady), filter(([follow, , ready])=>follow && ready), scan(({ value }, [, next])=>{\n        return {\n            refreshed: value === next,\n            value: next\n        };\n    }, {\n        refreshed: false,\n        value: 0\n    }), filter(({ refreshed })=>refreshed), withLatestFrom(followOutput, totalCount)), ([, followOutput2])=>{\n        trapNextSizeIncrease(followOutput2 !== false);\n    });\n    subscribe(autoscrollToBottom, ()=>{\n        trapNextSizeIncrease(getValue(followOutput) !== false);\n    });\n    subscribe(combineLatest(duc(followOutput), atBottomState), ([followOutput2, state])=>{\n        if (followOutput2 && !state.atBottom && state.notAtBottomBecause === \"VIEWPORT_HEIGHT_DECREASING\") {\n            scrollToBottom(\"auto\");\n        }\n    });\n    return {\n        followOutput,\n        autoscrollToBottom\n    };\n}, tup(sizeSystem, stateFlagsSystem, scrollToIndexSystem, initialTopMostItemIndexSystem, propsReadySystem, loggerSystem, domIOSystem));\nfunction groupCountsToIndicesAndCount(counts) {\n    return counts.reduce((acc, groupCount)=>{\n        acc.groupIndices.push(acc.totalCount);\n        acc.totalCount += groupCount + 1;\n        return acc;\n    }, {\n        totalCount: 0,\n        groupIndices: []\n    });\n}\nconst groupedListSystem = system(([{ totalCount, groupIndices, sizes }, { scrollTop, headerHeight }])=>{\n    const groupCounts = stream();\n    const topItemsIndexes = stream();\n    const groupIndicesAndCount = streamFromEmitter(pipe(groupCounts, map(groupCountsToIndicesAndCount)));\n    connect(pipe(groupIndicesAndCount, map((value)=>value.totalCount)), totalCount);\n    connect(pipe(groupIndicesAndCount, map((value)=>value.groupIndices)), groupIndices);\n    connect(pipe(combineLatest(scrollTop, sizes, headerHeight), filter(([_, sizes2])=>hasGroups(sizes2)), map(([scrollTop2, state, headerHeight2])=>findMaxKeyValue(state.groupOffsetTree, Math.max(scrollTop2 - headerHeight2, 0), \"v\")[0]), distinctUntilChanged(), map((index)=>[\n            index\n        ])), topItemsIndexes);\n    return {\n        groupCounts,\n        topItemsIndexes\n    };\n}, tup(sizeSystem, domIOSystem));\nfunction tupleComparator(prev, current) {\n    return !!(prev && prev[0] === current[0] && prev[1] === current[1]);\n}\nfunction rangeComparator(prev, next) {\n    return !!(prev && prev.startIndex === next.startIndex && prev.endIndex === next.endIndex);\n}\nconst TOP = \"top\";\nconst BOTTOM = \"bottom\";\nconst NONE = \"none\";\nfunction getOverscan(overscan, end, direction) {\n    if (typeof overscan === \"number\") {\n        return direction === UP && end === TOP || direction === DOWN && end === BOTTOM ? overscan : 0;\n    } else {\n        if (direction === UP) {\n            return end === TOP ? overscan.main : overscan.reverse;\n        } else {\n            return end === BOTTOM ? overscan.main : overscan.reverse;\n        }\n    }\n}\nfunction getViewportIncrease(value, end) {\n    return typeof value === \"number\" ? value : value[end] || 0;\n}\nconst sizeRangeSystem = system(([{ scrollTop, viewportHeight, deviation, headerHeight, fixedHeaderHeight }])=>{\n    const listBoundary = stream();\n    const topListHeight = statefulStream(0);\n    const increaseViewportBy = statefulStream(0);\n    const overscan = statefulStream(0);\n    const visibleRange = statefulStreamFromEmitter(pipe(combineLatest(duc(scrollTop), duc(viewportHeight), duc(headerHeight), duc(listBoundary, tupleComparator), duc(overscan), duc(topListHeight), duc(fixedHeaderHeight), duc(deviation), duc(increaseViewportBy)), map(([scrollTop2, viewportHeight2, headerHeight2, [listTop, listBottom], overscan2, topListHeight2, fixedHeaderHeight2, deviation2, increaseViewportBy2])=>{\n        const top = scrollTop2 - deviation2;\n        const stickyHeaderHeight = topListHeight2 + fixedHeaderHeight2;\n        const headerVisible = Math.max(headerHeight2 - top, 0);\n        let direction = NONE;\n        const topViewportAddition = getViewportIncrease(increaseViewportBy2, TOP);\n        const bottomViewportAddition = getViewportIncrease(increaseViewportBy2, BOTTOM);\n        listTop -= deviation2;\n        listTop += headerHeight2 + fixedHeaderHeight2;\n        listBottom += headerHeight2 + fixedHeaderHeight2;\n        listBottom -= deviation2;\n        if (listTop > scrollTop2 + stickyHeaderHeight - topViewportAddition) {\n            direction = UP;\n        }\n        if (listBottom < scrollTop2 - headerVisible + viewportHeight2 + bottomViewportAddition) {\n            direction = DOWN;\n        }\n        if (direction !== NONE) {\n            return [\n                Math.max(top - headerHeight2 - getOverscan(overscan2, TOP, direction) - topViewportAddition, 0),\n                top - headerVisible - fixedHeaderHeight2 + viewportHeight2 + getOverscan(overscan2, BOTTOM, direction) + bottomViewportAddition\n            ];\n        }\n        return null;\n    }), filter((value)=>value != null), distinctUntilChanged(tupleComparator)), [\n        0,\n        0\n    ]);\n    return {\n        // input\n        listBoundary,\n        overscan,\n        topListHeight,\n        increaseViewportBy,\n        // output\n        visibleRange\n    };\n}, tup(domIOSystem), {\n    singleton: true\n});\nfunction probeItemSet(index, sizes, data) {\n    if (hasGroups(sizes)) {\n        const itemIndex = originalIndexFromItemIndex(index, sizes);\n        const groupIndex = findMaxKeyValue(sizes.groupOffsetTree, itemIndex)[0];\n        return [\n            {\n                index: groupIndex,\n                size: 0,\n                offset: 0\n            },\n            {\n                index: itemIndex,\n                size: 0,\n                offset: 0,\n                data: data && data[0]\n            }\n        ];\n    }\n    return [\n        {\n            index,\n            size: 0,\n            offset: 0,\n            data: data && data[0]\n        }\n    ];\n}\nconst EMPTY_LIST_STATE = {\n    items: [],\n    topItems: [],\n    offsetTop: 0,\n    offsetBottom: 0,\n    top: 0,\n    bottom: 0,\n    topListHeight: 0,\n    totalCount: 0,\n    firstItemIndex: 0\n};\nfunction transposeItems(items, sizes, firstItemIndex) {\n    if (items.length === 0) {\n        return [];\n    }\n    if (!hasGroups(sizes)) {\n        return items.map((item)=>({\n                ...item,\n                index: item.index + firstItemIndex,\n                originalIndex: item.index\n            }));\n    }\n    const startIndex = items[0].index;\n    const endIndex = items[items.length - 1].index;\n    const transposedItems = [];\n    const groupRanges = rangesWithin(sizes.groupOffsetTree, startIndex, endIndex);\n    let currentRange = void 0;\n    let currentGroupIndex = 0;\n    for (const item of items){\n        if (!currentRange || currentRange.end < item.index) {\n            currentRange = groupRanges.shift();\n            currentGroupIndex = sizes.groupIndices.indexOf(currentRange.start);\n        }\n        let transposedItem;\n        if (item.index === currentRange.start) {\n            transposedItem = {\n                type: \"group\",\n                index: currentGroupIndex\n            };\n        } else {\n            transposedItem = {\n                index: item.index - (currentGroupIndex + 1) + firstItemIndex,\n                groupIndex: currentGroupIndex\n            };\n        }\n        transposedItems.push({\n            ...transposedItem,\n            size: item.size,\n            offset: item.offset,\n            originalIndex: item.index,\n            data: item.data\n        });\n    }\n    return transposedItems;\n}\nfunction buildListState(items, topItems, totalCount, gap, sizes, firstItemIndex) {\n    const { lastSize, lastOffset, lastIndex } = sizes;\n    let offsetTop = 0;\n    let bottom = 0;\n    if (items.length > 0) {\n        offsetTop = items[0].offset;\n        const lastItem = items[items.length - 1];\n        bottom = lastItem.offset + lastItem.size;\n    }\n    const itemCount = totalCount - lastIndex;\n    const total = lastOffset + itemCount * lastSize + (itemCount - 1) * gap;\n    const top = offsetTop;\n    const offsetBottom = total - bottom;\n    return {\n        items: transposeItems(items, sizes, firstItemIndex),\n        topItems: transposeItems(topItems, sizes, firstItemIndex),\n        topListHeight: topItems.reduce((height, item)=>item.size + height, 0),\n        offsetTop,\n        offsetBottom,\n        top,\n        bottom,\n        totalCount,\n        firstItemIndex\n    };\n}\nfunction buildListStateFromItemCount(itemCount, initialTopMostItemIndex, sizes, firstItemIndex, gap, data) {\n    let includedGroupsCount = 0;\n    if (sizes.groupIndices.length > 0) {\n        for (const index of sizes.groupIndices){\n            if (index - includedGroupsCount >= itemCount) {\n                break;\n            }\n            includedGroupsCount++;\n        }\n    }\n    const adjustedCount = itemCount + includedGroupsCount;\n    const initialTopMostItemIndexNumber = getInitialTopMostItemIndexNumber(initialTopMostItemIndex, adjustedCount);\n    const items = Array.from({\n        length: adjustedCount\n    }).map((_, index)=>({\n            index: index + initialTopMostItemIndexNumber,\n            size: 0,\n            offset: 0,\n            data: data[index + initialTopMostItemIndexNumber]\n        }));\n    return buildListState(items, [], adjustedCount, gap, sizes, firstItemIndex);\n}\nconst listStateSystem = system(([{ sizes, totalCount, data, firstItemIndex, gap }, groupedListSystem2, { visibleRange, listBoundary, topListHeight: rangeTopListHeight }, { scrolledToInitialItem, initialTopMostItemIndex }, { topListHeight }, stateFlags, { didMount }, { recalcInProgress }])=>{\n    const topItemsIndexes = statefulStream([]);\n    const initialItemCount = statefulStream(0);\n    const itemsRendered = stream();\n    connect(groupedListSystem2.topItemsIndexes, topItemsIndexes);\n    const listState = statefulStreamFromEmitter(pipe(combineLatest(didMount, recalcInProgress, duc(visibleRange, tupleComparator), duc(totalCount), duc(sizes), duc(initialTopMostItemIndex), scrolledToInitialItem, duc(topItemsIndexes), duc(firstItemIndex), duc(gap), data), filter(([mount, recalcInProgress2, , totalCount2, , , , , , , data2])=>{\n        const dataChangeInProgress = data2 && data2.length !== totalCount2;\n        return mount && !recalcInProgress2 && !dataChangeInProgress;\n    }), map(([, , [startOffset, endOffset], totalCount2, sizes2, initialTopMostItemIndex2, scrolledToInitialItem2, topItemsIndexes2, firstItemIndex2, gap2, data2])=>{\n        const sizesValue = sizes2;\n        const { sizeTree, offsetTree } = sizesValue;\n        const initialItemCountValue = getValue(initialItemCount);\n        if (totalCount2 === 0) {\n            return {\n                ...EMPTY_LIST_STATE,\n                totalCount: totalCount2\n            };\n        }\n        if (startOffset === 0 && endOffset === 0) {\n            if (initialItemCountValue === 0) {\n                return {\n                    ...EMPTY_LIST_STATE,\n                    totalCount: totalCount2\n                };\n            } else {\n                return buildListStateFromItemCount(initialItemCountValue, initialTopMostItemIndex2, sizes2, firstItemIndex2, gap2, data2 || []);\n            }\n        }\n        if (empty(sizeTree)) {\n            if (initialItemCountValue > 0) {\n                return null;\n            }\n            const state = buildListState(probeItemSet(getInitialTopMostItemIndexNumber(initialTopMostItemIndex2, totalCount2), sizesValue, data2), [], totalCount2, gap2, sizesValue, firstItemIndex2);\n            return state;\n        }\n        const topItems = [];\n        if (topItemsIndexes2.length > 0) {\n            const startIndex = topItemsIndexes2[0];\n            const endIndex = topItemsIndexes2[topItemsIndexes2.length - 1];\n            let offset = 0;\n            for (const range of rangesWithin(sizeTree, startIndex, endIndex)){\n                const size = range.value;\n                const rangeStartIndex = Math.max(range.start, startIndex);\n                const rangeEndIndex = Math.min(range.end, endIndex);\n                for(let i = rangeStartIndex; i <= rangeEndIndex; i++){\n                    topItems.push({\n                        index: i,\n                        size,\n                        offset,\n                        data: data2 && data2[i]\n                    });\n                    offset += size;\n                }\n            }\n        }\n        if (!scrolledToInitialItem2) {\n            return buildListState([], topItems, totalCount2, gap2, sizesValue, firstItemIndex2);\n        }\n        const minStartIndex = topItemsIndexes2.length > 0 ? topItemsIndexes2[topItemsIndexes2.length - 1] + 1 : 0;\n        const offsetPointRanges = rangesWithinOffsets(offsetTree, startOffset, endOffset, minStartIndex);\n        if (offsetPointRanges.length === 0) {\n            return null;\n        }\n        const maxIndex = totalCount2 - 1;\n        const items = tap([], (result)=>{\n            for (const range of offsetPointRanges){\n                const point = range.value;\n                let offset = point.offset;\n                let rangeStartIndex = range.start;\n                const size = point.size;\n                if (point.offset < startOffset) {\n                    rangeStartIndex += Math.floor((startOffset - point.offset + gap2) / (size + gap2));\n                    const itemCount = rangeStartIndex - range.start;\n                    offset += itemCount * size + itemCount * gap2;\n                }\n                if (rangeStartIndex < minStartIndex) {\n                    offset += (minStartIndex - rangeStartIndex) * size;\n                    rangeStartIndex = minStartIndex;\n                }\n                const endIndex = Math.min(range.end, maxIndex);\n                for(let i = rangeStartIndex; i <= endIndex; i++){\n                    if (offset >= endOffset) {\n                        break;\n                    }\n                    result.push({\n                        index: i,\n                        size,\n                        offset,\n                        data: data2 && data2[i]\n                    });\n                    offset += size + gap2;\n                }\n            }\n        });\n        return buildListState(items, topItems, totalCount2, gap2, sizesValue, firstItemIndex2);\n    }), //@ts-expect-error filter needs to be fixed\n    filter((value)=>value !== null), distinctUntilChanged()), EMPTY_LIST_STATE);\n    connect(pipe(data, filter(isDefined), map((data2)=>data2 == null ? void 0 : data2.length)), totalCount);\n    connect(pipe(listState, map((value)=>value.topListHeight)), topListHeight);\n    connect(topListHeight, rangeTopListHeight);\n    connect(pipe(listState, map((state)=>[\n            state.top,\n            state.bottom\n        ])), listBoundary);\n    connect(pipe(listState, map((state)=>state.items)), itemsRendered);\n    const endReached = streamFromEmitter(pipe(listState, filter(({ items })=>items.length > 0), withLatestFrom(totalCount, data), filter(([{ items }, totalCount2])=>items[items.length - 1].originalIndex === totalCount2 - 1), map(([, totalCount2, data2])=>[\n            totalCount2 - 1,\n            data2\n        ]), distinctUntilChanged(tupleComparator), map(([count])=>count)));\n    const startReached = streamFromEmitter(pipe(listState, throttleTime(200), filter(({ items, topItems })=>{\n        return items.length > 0 && items[0].originalIndex === topItems.length;\n    }), map(({ items })=>items[0].index), distinctUntilChanged()));\n    const rangeChanged = streamFromEmitter(pipe(listState, filter(({ items })=>items.length > 0), map(({ items })=>{\n        let startIndex = 0;\n        let endIndex = items.length - 1;\n        while(items[startIndex].type === \"group\" && startIndex < endIndex){\n            startIndex++;\n        }\n        while(items[endIndex].type === \"group\" && endIndex > startIndex){\n            endIndex--;\n        }\n        return {\n            startIndex: items[startIndex].index,\n            endIndex: items[endIndex].index\n        };\n    }), distinctUntilChanged(rangeComparator)));\n    return {\n        listState,\n        topItemsIndexes,\n        endReached,\n        startReached,\n        rangeChanged,\n        itemsRendered,\n        initialItemCount,\n        ...stateFlags\n    };\n}, tup(sizeSystem, groupedListSystem, sizeRangeSystem, initialTopMostItemIndexSystem, scrollToIndexSystem, stateFlagsSystem, propsReadySystem, recalcSystem), {\n    singleton: true\n});\nconst initialItemCountSystem = system(([{ sizes, firstItemIndex, data, gap }, { initialTopMostItemIndex }, { initialItemCount, listState }, { didMount }])=>{\n    connect(pipe(didMount, withLatestFrom(initialItemCount), filter(([, count])=>count !== 0), withLatestFrom(initialTopMostItemIndex, sizes, firstItemIndex, gap, data), map(([[, count], initialTopMostItemIndexValue, sizes2, firstItemIndex2, gap2, data2 = []])=>{\n        return buildListStateFromItemCount(count, initialTopMostItemIndexValue, sizes2, firstItemIndex2, gap2, data2);\n    })), listState);\n    return {};\n}, tup(sizeSystem, initialTopMostItemIndexSystem, listStateSystem, propsReadySystem), {\n    singleton: true\n});\nconst scrollSeekSystem = system(([{ scrollVelocity }])=>{\n    const isSeeking = statefulStream(false);\n    const rangeChanged = stream();\n    const scrollSeekConfiguration = statefulStream(false);\n    connect(pipe(scrollVelocity, withLatestFrom(scrollSeekConfiguration, isSeeking, rangeChanged), filter(([_, config])=>!!config), map(([speed, config, isSeeking2, range])=>{\n        const { exit, enter } = config;\n        if (isSeeking2) {\n            if (exit(speed, range)) {\n                return false;\n            }\n        } else {\n            if (enter(speed, range)) {\n                return true;\n            }\n        }\n        return isSeeking2;\n    }), distinctUntilChanged()), isSeeking);\n    subscribe(pipe(combineLatest(isSeeking, scrollVelocity, rangeChanged), withLatestFrom(scrollSeekConfiguration)), ([[isSeeking2, velocity, range], config])=>isSeeking2 && config && config.change && config.change(velocity, range));\n    return {\n        isSeeking,\n        scrollSeekConfiguration,\n        scrollVelocity,\n        scrollSeekRangeChanged: rangeChanged\n    };\n}, tup(stateFlagsSystem), {\n    singleton: true\n});\nconst topItemCountSystem = system(([{ topItemsIndexes }])=>{\n    const topItemCount = statefulStream(0);\n    connect(pipe(topItemCount, filter((length)=>length > 0), map((length)=>Array.from({\n            length\n        }).map((_, index)=>index))), topItemsIndexes);\n    return {\n        topItemCount\n    };\n}, tup(listStateSystem));\nconst totalListHeightSystem = system(([{ footerHeight, headerHeight, fixedHeaderHeight, fixedFooterHeight }, { listState }])=>{\n    const totalListHeightChanged = stream();\n    const totalListHeight = statefulStreamFromEmitter(pipe(combineLatest(footerHeight, fixedFooterHeight, headerHeight, fixedHeaderHeight, listState), map(([footerHeight2, fixedFooterHeight2, headerHeight2, fixedHeaderHeight2, listState2])=>{\n        return footerHeight2 + fixedFooterHeight2 + headerHeight2 + fixedHeaderHeight2 + listState2.offsetBottom + listState2.bottom;\n    })), 0);\n    connect(duc(totalListHeight), totalListHeightChanged);\n    return {\n        totalListHeight,\n        totalListHeightChanged\n    };\n}, tup(domIOSystem, listStateSystem), {\n    singleton: true\n});\nfunction simpleMemoize(func) {\n    let called = false;\n    let result;\n    return ()=>{\n        if (!called) {\n            called = true;\n            result = func();\n        }\n        return result;\n    };\n}\nconst isMobileSafari = simpleMemoize(()=>{\n    return /iP(ad|od|hone)/i.test(navigator.userAgent) && /WebKit/i.test(navigator.userAgent);\n});\nconst upwardScrollFixSystem = system(([{ scrollBy, scrollTop, deviation, scrollingInProgress }, { isScrolling, isAtBottom, scrollDirection, lastJumpDueToItemResize }, { listState }, { beforeUnshiftWith, shiftWithOffset, sizes, gap }, { log }, { recalcInProgress }])=>{\n    const deviationOffset = streamFromEmitter(pipe(listState, withLatestFrom(lastJumpDueToItemResize), scan(([, prevItems, prevTotalCount, prevTotalHeight], [{ items, totalCount, bottom, offsetBottom }, lastJumpDueToItemResize2])=>{\n        const totalHeight = bottom + offsetBottom;\n        let newDev = 0;\n        if (prevTotalCount === totalCount) {\n            if (prevItems.length > 0 && items.length > 0) {\n                const atStart = items[0].originalIndex === 0 && prevItems[0].originalIndex === 0;\n                if (!atStart) {\n                    newDev = totalHeight - prevTotalHeight;\n                    if (newDev !== 0) {\n                        newDev += lastJumpDueToItemResize2;\n                    }\n                }\n            }\n        }\n        return [\n            newDev,\n            items,\n            totalCount,\n            totalHeight\n        ];\n    }, [\n        0,\n        [],\n        0,\n        0\n    ]), filter(([amount])=>amount !== 0), withLatestFrom(scrollTop, scrollDirection, scrollingInProgress, isAtBottom, log, recalcInProgress), filter(([, scrollTop2, scrollDirection2, scrollingInProgress2, , , recalcInProgress2])=>{\n        return !recalcInProgress2 && !scrollingInProgress2 && scrollTop2 !== 0 && scrollDirection2 === UP;\n    }), map(([[amount], , , , , log2])=>{\n        log2(\"Upward scrolling compensation\", {\n            amount\n        }, LogLevel.DEBUG);\n        return amount;\n    })));\n    function scrollByWith(offset) {\n        if (offset > 0) {\n            publish(scrollBy, {\n                top: -offset,\n                behavior: \"auto\"\n            });\n            publish(deviation, 0);\n        } else {\n            publish(deviation, 0);\n            publish(scrollBy, {\n                top: -offset,\n                behavior: \"auto\"\n            });\n        }\n    }\n    subscribe(pipe(deviationOffset, withLatestFrom(deviation, isScrolling)), ([offset, deviationAmount, isScrolling2])=>{\n        if (isScrolling2 && isMobileSafari()) {\n            publish(deviation, deviationAmount - offset);\n        } else {\n            scrollByWith(-offset);\n        }\n    });\n    subscribe(pipe(combineLatest(statefulStreamFromEmitter(isScrolling, false), deviation, recalcInProgress), filter(([is, deviation2, recalc])=>!is && !recalc && deviation2 !== 0), map(([_, deviation2])=>deviation2), throttleTime(1)), scrollByWith);\n    connect(pipe(shiftWithOffset, map((offset)=>{\n        return {\n            top: -offset\n        };\n    })), scrollBy);\n    subscribe(pipe(beforeUnshiftWith, withLatestFrom(sizes, gap), map(([offset, { lastSize: defaultItemSize, groupIndices, sizeTree }, gap2])=>{\n        function getItemOffset(itemCount) {\n            return itemCount * (defaultItemSize + gap2);\n        }\n        if (groupIndices.length === 0) {\n            return getItemOffset(offset);\n        } else {\n            let amount = 0;\n            const defaultGroupSize = find(sizeTree, 0);\n            let recognizedOffsetItems = 0;\n            let groupIndex = 0;\n            while(recognizedOffsetItems < offset){\n                recognizedOffsetItems++;\n                amount += defaultGroupSize;\n                let groupItemCount = groupIndices.length === groupIndex + 1 ? Infinity : groupIndices[groupIndex + 1] - groupIndices[groupIndex] - 1;\n                if (recognizedOffsetItems + groupItemCount > offset) {\n                    amount -= defaultGroupSize;\n                    groupItemCount = offset - recognizedOffsetItems + 1;\n                }\n                recognizedOffsetItems += groupItemCount;\n                amount += getItemOffset(groupItemCount);\n                groupIndex++;\n            }\n            return amount;\n        }\n    })), (offset)=>{\n        publish(deviation, offset);\n        requestAnimationFrame(()=>{\n            publish(scrollBy, {\n                top: offset\n            });\n            requestAnimationFrame(()=>{\n                publish(deviation, 0);\n                publish(recalcInProgress, false);\n            });\n        });\n    });\n    return {\n        deviation\n    };\n}, tup(domIOSystem, stateFlagsSystem, listStateSystem, sizeSystem, loggerSystem, recalcSystem));\nconst initialScrollTopSystem = system(([{ didMount }, { scrollTo }, { listState }])=>{\n    const initialScrollTop = statefulStream(0);\n    subscribe(pipe(didMount, withLatestFrom(initialScrollTop), filter(([, offset])=>offset !== 0), map(([, offset])=>({\n            top: offset\n        }))), (location)=>{\n        handleNext(pipe(listState, skip(1), filter((state)=>state.items.length > 1)), ()=>{\n            requestAnimationFrame(()=>{\n                publish(scrollTo, location);\n            });\n        });\n    });\n    return {\n        initialScrollTop\n    };\n}, tup(propsReadySystem, domIOSystem, listStateSystem), {\n    singleton: true\n});\nconst alignToBottomSystem = system(([{ viewportHeight }, { totalListHeight }])=>{\n    const alignToBottom = statefulStream(false);\n    const paddingTopAddition = statefulStreamFromEmitter(pipe(combineLatest(alignToBottom, viewportHeight, totalListHeight), filter(([enabled])=>enabled), map(([, viewportHeight2, totalListHeight2])=>{\n        return Math.max(0, viewportHeight2 - totalListHeight2);\n    }), throttleTime(0), distinctUntilChanged()), 0);\n    return {\n        alignToBottom,\n        paddingTopAddition\n    };\n}, tup(domIOSystem, totalListHeightSystem), {\n    singleton: true\n});\nconst windowScrollerSystem = system(([{ scrollTo, scrollContainerState }])=>{\n    const windowScrollContainerState = stream();\n    const windowViewportRect = stream();\n    const windowScrollTo = stream();\n    const useWindowScroll = statefulStream(false);\n    const customScrollParent = statefulStream(void 0);\n    connect(pipe(combineLatest(windowScrollContainerState, windowViewportRect), map(([{ viewportHeight, scrollTop: windowScrollTop, scrollHeight }, { offsetTop }])=>{\n        return {\n            scrollTop: Math.max(0, windowScrollTop - offsetTop),\n            scrollHeight,\n            viewportHeight\n        };\n    })), scrollContainerState);\n    connect(pipe(scrollTo, withLatestFrom(windowViewportRect), map(([scrollTo2, { offsetTop }])=>{\n        return {\n            ...scrollTo2,\n            top: scrollTo2.top + offsetTop\n        };\n    })), windowScrollTo);\n    return {\n        // config\n        useWindowScroll,\n        customScrollParent,\n        // input\n        windowScrollContainerState,\n        windowViewportRect,\n        // signals\n        windowScrollTo\n    };\n}, tup(domIOSystem));\nconst defaultCalculateViewLocation = ({ itemTop: itemTop2, itemBottom, viewportTop, viewportBottom, locationParams: { behavior, align, ...rest } })=>{\n    if (itemTop2 < viewportTop) {\n        return {\n            ...rest,\n            behavior,\n            align: align != null ? align : \"start\"\n        };\n    }\n    if (itemBottom > viewportBottom) {\n        return {\n            ...rest,\n            behavior,\n            align: align != null ? align : \"end\"\n        };\n    }\n    return null;\n};\nconst scrollIntoViewSystem = system(([{ sizes, totalCount, gap }, { scrollTop, viewportHeight, headerHeight, fixedHeaderHeight, fixedFooterHeight, scrollingInProgress }, { scrollToIndex }])=>{\n    const scrollIntoView = stream();\n    connect(pipe(scrollIntoView, withLatestFrom(sizes, viewportHeight, totalCount, headerHeight, fixedHeaderHeight, fixedFooterHeight, scrollTop), withLatestFrom(gap), map(([[viewLocation, sizes2, viewportHeight2, totalCount2, headerHeight2, fixedHeaderHeight2, fixedFooterHeight2, scrollTop2], gap2])=>{\n        const { done, behavior, align, calculateViewLocation = defaultCalculateViewLocation, ...rest } = viewLocation;\n        const actualIndex = originalIndexFromLocation(viewLocation, sizes2, totalCount2 - 1);\n        const itemTop2 = offsetOf(actualIndex, sizes2.offsetTree, gap2) + headerHeight2 + fixedHeaderHeight2;\n        const itemBottom = itemTop2 + findMaxKeyValue(sizes2.sizeTree, actualIndex)[1];\n        const viewportTop = scrollTop2 + fixedHeaderHeight2;\n        const viewportBottom = scrollTop2 + viewportHeight2 - fixedFooterHeight2;\n        const location = calculateViewLocation({\n            itemTop: itemTop2,\n            itemBottom,\n            viewportTop,\n            viewportBottom,\n            locationParams: {\n                behavior,\n                align,\n                ...rest\n            }\n        });\n        if (location) {\n            done && handleNext(pipe(scrollingInProgress, filter((value)=>value === false), // skips the initial publish of false, and the cleanup call.\n            // but if scrollingInProgress is true, we skip the initial publish.\n            skip(getValue(scrollingInProgress) ? 1 : 2)), done);\n        } else {\n            done && done();\n        }\n        return location;\n    }), filter((value)=>value !== null)), scrollToIndex);\n    return {\n        scrollIntoView\n    };\n}, tup(sizeSystem, domIOSystem, scrollToIndexSystem, listStateSystem, loggerSystem), {\n    singleton: true\n});\nconst stateLoadSystem = system(([{ sizes, sizeRanges }, { scrollTop }, { initialTopMostItemIndex }, { didMount }, { useWindowScroll, windowScrollContainerState, windowViewportRect }])=>{\n    const getState = stream();\n    const restoreStateFrom = statefulStream(void 0);\n    const statefulWindowScrollContainerState = statefulStream(null);\n    const statefulWindowViewportRect = statefulStream(null);\n    connect(windowScrollContainerState, statefulWindowScrollContainerState);\n    connect(windowViewportRect, statefulWindowViewportRect);\n    subscribe(pipe(getState, withLatestFrom(sizes, scrollTop, useWindowScroll, statefulWindowScrollContainerState, statefulWindowViewportRect)), ([callback, sizes2, scrollTop2, useWindowScroll2, windowScrollContainerState2, windowViewportRect2])=>{\n        const ranges = sizeTreeToRanges(sizes2.sizeTree);\n        if (useWindowScroll2 && windowScrollContainerState2 !== null && windowViewportRect2 !== null) {\n            scrollTop2 = windowScrollContainerState2.scrollTop - windowViewportRect2.offsetTop;\n        }\n        callback({\n            ranges,\n            scrollTop: scrollTop2\n        });\n    });\n    connect(pipe(restoreStateFrom, filter(isDefined), map(locationFromSnapshot)), initialTopMostItemIndex);\n    connect(pipe(didMount, withLatestFrom(restoreStateFrom), filter(([, state])=>state !== void 0), distinctUntilChanged(), map(([, snapshot])=>{\n        return snapshot.ranges;\n    })), sizeRanges);\n    return {\n        getState,\n        restoreStateFrom\n    };\n}, tup(sizeSystem, domIOSystem, initialTopMostItemIndexSystem, propsReadySystem, windowScrollerSystem));\nfunction locationFromSnapshot(snapshot) {\n    return {\n        offset: snapshot.scrollTop,\n        index: 0,\n        align: \"start\"\n    };\n}\nconst featureGroup1System = system(([sizeRange, initialItemCount, propsReady, scrollSeek, totalListHeight, initialScrollTopSystem2, alignToBottom, windowScroller, scrollIntoView, logger])=>{\n    return {\n        ...sizeRange,\n        ...initialItemCount,\n        ...propsReady,\n        ...scrollSeek,\n        ...totalListHeight,\n        ...initialScrollTopSystem2,\n        ...alignToBottom,\n        ...windowScroller,\n        ...scrollIntoView,\n        ...logger\n    };\n}, tup(sizeRangeSystem, initialItemCountSystem, propsReadySystem, scrollSeekSystem, totalListHeightSystem, initialScrollTopSystem, alignToBottomSystem, windowScrollerSystem, scrollIntoViewSystem, loggerSystem));\nconst listSystem = system(([{ totalCount, sizeRanges, fixedItemSize, defaultItemSize, trackItemSizes, itemSize, data, firstItemIndex, groupIndices, statefulTotalCount, gap, sizes }, { initialTopMostItemIndex, scrolledToInitialItem }, domIO, stateLoad, followOutput, { listState, topItemsIndexes, ...flags }, { scrollToIndex }, _, { topItemCount }, { groupCounts }, featureGroup1])=>{\n    connect(flags.rangeChanged, featureGroup1.scrollSeekRangeChanged);\n    connect(pipe(featureGroup1.windowViewportRect, map((value)=>value.visibleHeight)), domIO.viewportHeight);\n    return {\n        // input\n        totalCount,\n        data,\n        firstItemIndex,\n        sizeRanges,\n        initialTopMostItemIndex,\n        scrolledToInitialItem,\n        topItemsIndexes,\n        topItemCount,\n        groupCounts,\n        fixedItemHeight: fixedItemSize,\n        defaultItemHeight: defaultItemSize,\n        gap,\n        ...followOutput,\n        // output\n        statefulTotalCount,\n        listState,\n        scrollToIndex,\n        trackItemSizes,\n        itemSize,\n        groupIndices,\n        // exported from stateFlagsSystem\n        ...flags,\n        // the bag of IO from featureGroup1System\n        ...featureGroup1,\n        ...domIO,\n        sizes,\n        ...stateLoad\n    };\n}, tup(sizeSystem, initialTopMostItemIndexSystem, domIOSystem, stateLoadSystem, followOutputSystem, listStateSystem, scrollToIndexSystem, upwardScrollFixSystem, topItemCountSystem, groupedListSystem, featureGroup1System));\nconst WEBKIT_STICKY = \"-webkit-sticky\";\nconst STICKY = \"sticky\";\nconst positionStickyCssValue = simpleMemoize(()=>{\n    if (typeof document === \"undefined\") {\n        return STICKY;\n    }\n    const node = document.createElement(\"div\");\n    node.style.position = WEBKIT_STICKY;\n    return node.style.position === WEBKIT_STICKY ? WEBKIT_STICKY : STICKY;\n});\nfunction useWindowViewportRectRef(callback, customScrollParent) {\n    const viewportInfo = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const calculateInfo = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((element)=>{\n        if (element === null || !element.offsetParent) {\n            return;\n        }\n        const rect = element.getBoundingClientRect();\n        const visibleWidth = rect.width;\n        let visibleHeight, offsetTop;\n        if (customScrollParent) {\n            const customScrollParentRect = customScrollParent.getBoundingClientRect();\n            const deltaTop = rect.top - customScrollParentRect.top;\n            visibleHeight = customScrollParentRect.height - Math.max(0, deltaTop);\n            offsetTop = deltaTop + customScrollParent.scrollTop;\n        } else {\n            visibleHeight = window.innerHeight - Math.max(0, rect.top);\n            offsetTop = rect.top + window.pageYOffset;\n        }\n        viewportInfo.current = {\n            offsetTop,\n            visibleHeight,\n            visibleWidth\n        };\n        callback(viewportInfo.current);\n    }, [\n        callback,\n        customScrollParent\n    ]);\n    const { callbackRef, ref } = useSizeWithElRef(calculateInfo);\n    const scrollAndResizeEventHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        calculateInfo(ref.current);\n    }, [\n        calculateInfo,\n        ref\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (customScrollParent) {\n            customScrollParent.addEventListener(\"scroll\", scrollAndResizeEventHandler);\n            const observer = new ResizeObserver(scrollAndResizeEventHandler);\n            observer.observe(customScrollParent);\n            return ()=>{\n                customScrollParent.removeEventListener(\"scroll\", scrollAndResizeEventHandler);\n                observer.unobserve(customScrollParent);\n            };\n        } else {\n            window.addEventListener(\"scroll\", scrollAndResizeEventHandler);\n            window.addEventListener(\"resize\", scrollAndResizeEventHandler);\n            return ()=>{\n                window.removeEventListener(\"scroll\", scrollAndResizeEventHandler);\n                window.removeEventListener(\"resize\", scrollAndResizeEventHandler);\n            };\n        }\n    }, [\n        scrollAndResizeEventHandler,\n        customScrollParent\n    ]);\n    return callbackRef;\n}\nconst VirtuosoMockContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nconst VirtuosoGridMockContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction identity(value) {\n    return value;\n}\nconst listComponentPropsSystem = /* @__PURE__ */ system(()=>{\n    const itemContent = statefulStream((index)=>`Item ${index}`);\n    const context = statefulStream(null);\n    const groupContent = statefulStream((index)=>`Group ${index}`);\n    const components = statefulStream({});\n    const computeItemKey = statefulStream(identity);\n    const headerFooterTag = statefulStream(\"div\");\n    const scrollerRef = statefulStream(noop);\n    const distinctProp = (propName, defaultValue = null)=>{\n        return statefulStreamFromEmitter(pipe(components, map((components2)=>components2[propName]), distinctUntilChanged()), defaultValue);\n    };\n    return {\n        context,\n        itemContent,\n        groupContent,\n        components,\n        computeItemKey,\n        headerFooterTag,\n        scrollerRef,\n        FooterComponent: distinctProp(\"Footer\"),\n        HeaderComponent: distinctProp(\"Header\"),\n        TopItemListComponent: distinctProp(\"TopItemList\"),\n        ListComponent: distinctProp(\"List\", \"div\"),\n        ItemComponent: distinctProp(\"Item\", \"div\"),\n        GroupComponent: distinctProp(\"Group\", \"div\"),\n        ScrollerComponent: distinctProp(\"Scroller\", \"div\"),\n        EmptyPlaceholder: distinctProp(\"EmptyPlaceholder\"),\n        ScrollSeekPlaceholder: distinctProp(\"ScrollSeekPlaceholder\")\n    };\n});\nconst combinedSystem$2 = /* @__PURE__ */ system(([listSystem2, propsSystem])=>{\n    return {\n        ...listSystem2,\n        ...propsSystem\n    };\n}, tup(listSystem, listComponentPropsSystem));\nconst DefaultScrollSeekPlaceholder$1 = ({ height })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height\n        }\n    });\nconst GROUP_STYLE = {\n    position: positionStickyCssValue(),\n    zIndex: 1,\n    overflowAnchor: \"none\"\n};\nconst ITEM_STYLE$1 = {\n    overflowAnchor: \"none\"\n};\nconst Items$1 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoItems({ showTopList = false }) {\n    const listState = useEmitterValue$2(\"listState\");\n    const sizeRanges = usePublisher$2(\"sizeRanges\");\n    const useWindowScroll = useEmitterValue$2(\"useWindowScroll\");\n    const customScrollParent = useEmitterValue$2(\"customScrollParent\");\n    const windowScrollContainerStateCallback = usePublisher$2(\"windowScrollContainerState\");\n    const _scrollContainerStateCallback = usePublisher$2(\"scrollContainerState\");\n    const scrollContainerStateCallback = customScrollParent || useWindowScroll ? windowScrollContainerStateCallback : _scrollContainerStateCallback;\n    const itemContent = useEmitterValue$2(\"itemContent\");\n    const context = useEmitterValue$2(\"context\");\n    const groupContent = useEmitterValue$2(\"groupContent\");\n    const trackItemSizes = useEmitterValue$2(\"trackItemSizes\");\n    const itemSize = useEmitterValue$2(\"itemSize\");\n    const log = useEmitterValue$2(\"log\");\n    const listGap = usePublisher$2(\"gap\");\n    const { callbackRef } = useChangedListContentsSizes(sizeRanges, itemSize, trackItemSizes, showTopList ? noop : scrollContainerStateCallback, log, listGap, customScrollParent);\n    const [deviation, setDeviation] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    useEmitter$2(\"deviation\", (value)=>{\n        if (deviation !== value) {\n            setDeviation(value);\n        }\n    });\n    const EmptyPlaceholder = useEmitterValue$2(\"EmptyPlaceholder\");\n    const ScrollSeekPlaceholder = useEmitterValue$2(\"ScrollSeekPlaceholder\") || DefaultScrollSeekPlaceholder$1;\n    const ListComponent = useEmitterValue$2(\"ListComponent\");\n    const ItemComponent = useEmitterValue$2(\"ItemComponent\");\n    const GroupComponent = useEmitterValue$2(\"GroupComponent\");\n    const computeItemKey = useEmitterValue$2(\"computeItemKey\");\n    const isSeeking = useEmitterValue$2(\"isSeeking\");\n    const hasGroups2 = useEmitterValue$2(\"groupIndices\").length > 0;\n    const paddingTopAddition = useEmitterValue$2(\"paddingTopAddition\");\n    const scrolledToInitialItem = useEmitterValue$2(\"scrolledToInitialItem\");\n    const containerStyle = showTopList ? {} : {\n        boxSizing: \"border-box\",\n        paddingTop: listState.offsetTop + paddingTopAddition,\n        paddingBottom: listState.offsetBottom,\n        marginTop: deviation,\n        ...scrolledToInitialItem ? {} : {\n            visibility: \"hidden\"\n        }\n    };\n    if (!showTopList && listState.totalCount === 0 && EmptyPlaceholder) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EmptyPlaceholder, contextPropIfNotDomElement(EmptyPlaceholder, context));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ListComponent, {\n        ...contextPropIfNotDomElement(ListComponent, context),\n        ref: callbackRef,\n        style: containerStyle,\n        \"data-test-id\": showTopList ? \"virtuoso-top-item-list\" : \"virtuoso-item-list\"\n    }, (showTopList ? listState.topItems : listState.items).map((item)=>{\n        const index = item.originalIndex;\n        const key = computeItemKey(index + listState.firstItemIndex, item.data, context);\n        if (isSeeking) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScrollSeekPlaceholder, {\n                ...contextPropIfNotDomElement(ScrollSeekPlaceholder, context),\n                key,\n                index: item.index,\n                height: item.size,\n                type: item.type || \"item\",\n                ...item.type === \"group\" ? {} : {\n                    groupIndex: item.groupIndex\n                }\n            });\n        }\n        if (item.type === \"group\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GroupComponent, {\n                ...contextPropIfNotDomElement(GroupComponent, context),\n                key,\n                \"data-index\": index,\n                \"data-known-size\": item.size,\n                \"data-item-index\": item.index,\n                style: GROUP_STYLE\n            }, groupContent(item.index, context));\n        } else {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemComponent, {\n                ...contextPropIfNotDomElement(ItemComponent, context),\n                ...itemPropIfNotDomElement(ItemComponent, item.data),\n                key,\n                \"data-index\": index,\n                \"data-known-size\": item.size,\n                \"data-item-index\": item.index,\n                \"data-item-group-index\": item.groupIndex,\n                style: ITEM_STYLE$1\n            }, hasGroups2 ? itemContent(item.index, item.groupIndex, item.data, context) : itemContent(item.index, item.data, context));\n        }\n    }));\n});\nconst scrollerStyle = {\n    height: \"100%\",\n    outline: \"none\",\n    overflowY: \"auto\",\n    position: \"relative\",\n    WebkitOverflowScrolling: \"touch\"\n};\nconst viewportStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    top: 0\n};\nconst topItemListStyle = {\n    width: \"100%\",\n    position: positionStickyCssValue(),\n    top: 0,\n    zIndex: 1\n};\nfunction contextPropIfNotDomElement(element, context) {\n    if (typeof element === \"string\") {\n        return void 0;\n    }\n    return {\n        context\n    };\n}\nfunction itemPropIfNotDomElement(element, item) {\n    return {\n        item: typeof element === \"string\" ? void 0 : item\n    };\n}\nconst Header$1 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoHeader() {\n    const Header2 = useEmitterValue$2(\"HeaderComponent\");\n    const headerHeight = usePublisher$2(\"headerHeight\");\n    const headerFooterTag = useEmitterValue$2(\"headerFooterTag\");\n    const ref = useSize((el)=>headerHeight(correctItemSize(el, \"height\")));\n    const context = useEmitterValue$2(\"context\");\n    return Header2 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(headerFooterTag, {\n        ref\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Header2, contextPropIfNotDomElement(Header2, context))) : null;\n});\nconst Footer$1 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoFooter() {\n    const Footer2 = useEmitterValue$2(\"FooterComponent\");\n    const footerHeight = usePublisher$2(\"footerHeight\");\n    const headerFooterTag = useEmitterValue$2(\"headerFooterTag\");\n    const ref = useSize((el)=>footerHeight(correctItemSize(el, \"height\")));\n    const context = useEmitterValue$2(\"context\");\n    return Footer2 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(headerFooterTag, {\n        ref\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Footer2, contextPropIfNotDomElement(Footer2, context))) : null;\n});\nfunction buildScroller({ usePublisher: usePublisher2, useEmitter: useEmitter2, useEmitterValue: useEmitterValue2 }) {\n    const Scroller2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoScroller({ style, children, ...props }) {\n        const scrollContainerStateCallback = usePublisher2(\"scrollContainerState\");\n        const ScrollerComponent = useEmitterValue2(\"ScrollerComponent\");\n        const smoothScrollTargetReached = usePublisher2(\"smoothScrollTargetReached\");\n        const scrollerRefCallback = useEmitterValue2(\"scrollerRef\");\n        const context = useEmitterValue2(\"context\");\n        const { scrollerRef, scrollByCallback, scrollToCallback } = useScrollTop(scrollContainerStateCallback, smoothScrollTargetReached, ScrollerComponent, scrollerRefCallback);\n        useEmitter2(\"scrollTo\", scrollToCallback);\n        useEmitter2(\"scrollBy\", scrollByCallback);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScrollerComponent, {\n            ref: scrollerRef,\n            style: {\n                ...scrollerStyle,\n                ...style\n            },\n            \"data-test-id\": \"virtuoso-scroller\",\n            \"data-virtuoso-scroller\": true,\n            tabIndex: 0,\n            ...props,\n            ...contextPropIfNotDomElement(ScrollerComponent, context)\n        }, children);\n    });\n    return Scroller2;\n}\nfunction buildWindowScroller({ usePublisher: usePublisher2, useEmitter: useEmitter2, useEmitterValue: useEmitterValue2 }) {\n    const Scroller2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoWindowScroller({ style, children, ...props }) {\n        const scrollContainerStateCallback = usePublisher2(\"windowScrollContainerState\");\n        const ScrollerComponent = useEmitterValue2(\"ScrollerComponent\");\n        const smoothScrollTargetReached = usePublisher2(\"smoothScrollTargetReached\");\n        const totalListHeight = useEmitterValue2(\"totalListHeight\");\n        const deviation = useEmitterValue2(\"deviation\");\n        const customScrollParent = useEmitterValue2(\"customScrollParent\");\n        const context = useEmitterValue2(\"context\");\n        const { scrollerRef, scrollByCallback, scrollToCallback } = useScrollTop(scrollContainerStateCallback, smoothScrollTargetReached, ScrollerComponent, noop, customScrollParent);\n        useIsomorphicLayoutEffect$1(()=>{\n            scrollerRef.current = customScrollParent ? customScrollParent : window;\n            return ()=>{\n                scrollerRef.current = null;\n            };\n        }, [\n            scrollerRef,\n            customScrollParent\n        ]);\n        useEmitter2(\"windowScrollTo\", scrollToCallback);\n        useEmitter2(\"scrollBy\", scrollByCallback);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScrollerComponent, {\n            style: {\n                position: \"relative\",\n                ...style,\n                ...totalListHeight !== 0 ? {\n                    height: totalListHeight + deviation\n                } : {}\n            },\n            \"data-virtuoso-scroller\": true,\n            ...props,\n            ...contextPropIfNotDomElement(ScrollerComponent, context)\n        }, children);\n    });\n    return Scroller2;\n}\nconst Viewport$2 = ({ children })=>{\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(VirtuosoMockContext);\n    const viewportHeight = usePublisher$2(\"viewportHeight\");\n    const fixedItemHeight = usePublisher$2(\"fixedItemHeight\");\n    const viewportRef = useSize(compose(viewportHeight, (el)=>correctItemSize(el, \"height\")));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ctx) {\n            viewportHeight(ctx.viewportHeight);\n            fixedItemHeight(ctx.itemHeight);\n        }\n    }, [\n        ctx,\n        viewportHeight,\n        fixedItemHeight\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: viewportStyle,\n        ref: viewportRef,\n        \"data-viewport-type\": \"element\"\n    }, children);\n};\nconst WindowViewport$2 = ({ children })=>{\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(VirtuosoMockContext);\n    const windowViewportRect = usePublisher$2(\"windowViewportRect\");\n    const fixedItemHeight = usePublisher$2(\"fixedItemHeight\");\n    const customScrollParent = useEmitterValue$2(\"customScrollParent\");\n    const viewportRef = useWindowViewportRectRef(windowViewportRect, customScrollParent);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ctx) {\n            fixedItemHeight(ctx.itemHeight);\n            windowViewportRect({\n                offsetTop: 0,\n                visibleHeight: ctx.viewportHeight,\n                visibleWidth: 100\n            });\n        }\n    }, [\n        ctx,\n        windowViewportRect,\n        fixedItemHeight\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: viewportRef,\n        style: viewportStyle,\n        \"data-viewport-type\": \"window\"\n    }, children);\n};\nconst TopItemListContainer = ({ children })=>{\n    const TopItemList = useEmitterValue$2(\"TopItemListComponent\");\n    const headerHeight = useEmitterValue$2(\"headerHeight\");\n    const style = {\n        ...topItemListStyle,\n        marginTop: `${headerHeight}px`\n    };\n    const context = useEmitterValue$2(\"context\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TopItemList || \"div\", {\n        style,\n        context\n    }, children);\n};\nconst ListRoot = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoRoot(props) {\n    const useWindowScroll = useEmitterValue$2(\"useWindowScroll\");\n    const showTopList = useEmitterValue$2(\"topItemsIndexes\").length > 0;\n    const customScrollParent = useEmitterValue$2(\"customScrollParent\");\n    const TheScroller = customScrollParent || useWindowScroll ? WindowScroller$2 : Scroller$2;\n    const TheViewport = customScrollParent || useWindowScroll ? WindowViewport$2 : Viewport$2;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheScroller, {\n        ...props\n    }, showTopList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TopItemListContainer, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Items$1, {\n        showTopList: true\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheViewport, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Header$1, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Items$1, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Footer$1, null)));\n});\nconst { Component: List, usePublisher: usePublisher$2, useEmitterValue: useEmitterValue$2, useEmitter: useEmitter$2 } = /* @__PURE__ */ systemToComponent(combinedSystem$2, {\n    required: {},\n    optional: {\n        restoreStateFrom: \"restoreStateFrom\",\n        context: \"context\",\n        followOutput: \"followOutput\",\n        itemContent: \"itemContent\",\n        groupContent: \"groupContent\",\n        overscan: \"overscan\",\n        increaseViewportBy: \"increaseViewportBy\",\n        totalCount: \"totalCount\",\n        groupCounts: \"groupCounts\",\n        topItemCount: \"topItemCount\",\n        firstItemIndex: \"firstItemIndex\",\n        initialTopMostItemIndex: \"initialTopMostItemIndex\",\n        components: \"components\",\n        atBottomThreshold: \"atBottomThreshold\",\n        atTopThreshold: \"atTopThreshold\",\n        computeItemKey: \"computeItemKey\",\n        defaultItemHeight: \"defaultItemHeight\",\n        fixedItemHeight: \"fixedItemHeight\",\n        itemSize: \"itemSize\",\n        scrollSeekConfiguration: \"scrollSeekConfiguration\",\n        headerFooterTag: \"headerFooterTag\",\n        data: \"data\",\n        initialItemCount: \"initialItemCount\",\n        initialScrollTop: \"initialScrollTop\",\n        alignToBottom: \"alignToBottom\",\n        useWindowScroll: \"useWindowScroll\",\n        customScrollParent: \"customScrollParent\",\n        scrollerRef: \"scrollerRef\",\n        logLevel: \"logLevel\"\n    },\n    methods: {\n        scrollToIndex: \"scrollToIndex\",\n        scrollIntoView: \"scrollIntoView\",\n        scrollTo: \"scrollTo\",\n        scrollBy: \"scrollBy\",\n        autoscrollToBottom: \"autoscrollToBottom\",\n        getState: \"getState\"\n    },\n    events: {\n        isScrolling: \"isScrolling\",\n        endReached: \"endReached\",\n        startReached: \"startReached\",\n        rangeChanged: \"rangeChanged\",\n        atBottomStateChange: \"atBottomStateChange\",\n        atTopStateChange: \"atTopStateChange\",\n        totalListHeightChanged: \"totalListHeightChanged\",\n        itemsRendered: \"itemsRendered\",\n        groupIndices: \"groupIndices\"\n    }\n}, ListRoot);\nconst Scroller$2 = /* @__PURE__ */ buildScroller({\n    usePublisher: usePublisher$2,\n    useEmitterValue: useEmitterValue$2,\n    useEmitter: useEmitter$2\n});\nconst WindowScroller$2 = /* @__PURE__ */ buildWindowScroller({\n    usePublisher: usePublisher$2,\n    useEmitterValue: useEmitterValue$2,\n    useEmitter: useEmitter$2\n});\nconst Virtuoso = List;\nconst GroupedVirtuoso = List;\nconst INITIAL_GRID_STATE = {\n    items: [],\n    offsetBottom: 0,\n    offsetTop: 0,\n    top: 0,\n    bottom: 0,\n    itemHeight: 0,\n    itemWidth: 0\n};\nconst PROBE_GRID_STATE = {\n    items: [\n        {\n            index: 0\n        }\n    ],\n    offsetBottom: 0,\n    offsetTop: 0,\n    top: 0,\n    bottom: 0,\n    itemHeight: 0,\n    itemWidth: 0\n};\nconst { round, ceil, floor, min, max } = Math;\nfunction buildProbeGridState(items) {\n    return {\n        ...PROBE_GRID_STATE,\n        items\n    };\n}\nfunction buildItems(startIndex, endIndex, data) {\n    return Array.from({\n        length: endIndex - startIndex + 1\n    }).map((_, i)=>{\n        const dataItem = data === null ? null : data[i + startIndex];\n        return {\n            index: i + startIndex,\n            data: dataItem\n        };\n    });\n}\nfunction gapComparator(prev, next) {\n    return prev && prev.column === next.column && prev.row === next.row;\n}\nfunction dimensionComparator(prev, next) {\n    return prev && prev.width === next.width && prev.height === next.height;\n}\nconst gridSystem = /* @__PURE__ */ system(([{ overscan, visibleRange, listBoundary }, { scrollTop, viewportHeight, scrollBy, scrollTo, smoothScrollTargetReached, scrollContainerState, footerHeight, headerHeight }, stateFlags, scrollSeek, { propsReady, didMount }, { windowViewportRect, useWindowScroll, customScrollParent, windowScrollContainerState, windowScrollTo }, log])=>{\n    const totalCount = statefulStream(0);\n    const initialItemCount = statefulStream(0);\n    const gridState = statefulStream(INITIAL_GRID_STATE);\n    const viewportDimensions = statefulStream({\n        height: 0,\n        width: 0\n    });\n    const itemDimensions = statefulStream({\n        height: 0,\n        width: 0\n    });\n    const scrollToIndex = stream();\n    const scrollHeight = stream();\n    const deviation = statefulStream(0);\n    const data = statefulStream(null);\n    const gap = statefulStream({\n        row: 0,\n        column: 0\n    });\n    const stateChanged = stream();\n    const restoreStateFrom = stream();\n    const stateRestoreInProgress = statefulStream(false);\n    const initialTopMostItemIndex = statefulStream(0);\n    const scrolledToInitialItem = statefulStream(true);\n    const scrollScheduled = statefulStream(false);\n    subscribe(pipe(didMount, withLatestFrom(initialTopMostItemIndex), filter(([_, location])=>!!location)), ()=>{\n        publish(scrolledToInitialItem, false);\n        publish(initialItemCount, 0);\n    });\n    subscribe(pipe(combineLatest(didMount, scrolledToInitialItem, itemDimensions, viewportDimensions, initialTopMostItemIndex, scrollScheduled), filter(([didMount2, scrolledToInitialItem2, itemDimensions2, viewportDimensions2, , scrollScheduled2])=>{\n        return didMount2 && !scrolledToInitialItem2 && itemDimensions2.height !== 0 && viewportDimensions2.height !== 0 && !scrollScheduled2;\n    })), ([, , , , initialTopMostItemIndex2])=>{\n        publish(scrollScheduled, true);\n        skipFrames(1, ()=>{\n            publish(scrollToIndex, initialTopMostItemIndex2);\n        });\n        handleNext(pipe(scrollTop), ()=>{\n            publish(listBoundary, [\n                0,\n                0\n            ]);\n            publish(scrolledToInitialItem, true);\n        });\n    });\n    connect(pipe(restoreStateFrom, filter((value)=>value !== void 0 && value !== null && value.scrollTop > 0), mapTo(0)), initialItemCount);\n    subscribe(pipe(didMount, withLatestFrom(restoreStateFrom), filter(([, snapshot])=>snapshot !== void 0 && snapshot !== null)), ([, snapshot])=>{\n        if (!snapshot) {\n            return;\n        }\n        publish(viewportDimensions, snapshot.viewport), publish(itemDimensions, snapshot == null ? void 0 : snapshot.item);\n        publish(gap, snapshot.gap);\n        if (snapshot.scrollTop > 0) {\n            publish(stateRestoreInProgress, true);\n            handleNext(pipe(scrollTop, skip(1)), (_value)=>{\n                publish(stateRestoreInProgress, false);\n            });\n            publish(scrollTo, {\n                top: snapshot.scrollTop\n            });\n        }\n    });\n    connect(pipe(viewportDimensions, map(({ height })=>height)), viewportHeight);\n    connect(pipe(combineLatest(duc(viewportDimensions, dimensionComparator), duc(itemDimensions, dimensionComparator), duc(gap, (prev, next)=>prev && prev.column === next.column && prev.row === next.row), duc(scrollTop)), map(([viewport, item, gap2, scrollTop2])=>({\n            viewport,\n            item,\n            gap: gap2,\n            scrollTop: scrollTop2\n        }))), stateChanged);\n    connect(pipe(combineLatest(duc(totalCount), visibleRange, duc(gap, gapComparator), duc(itemDimensions, dimensionComparator), duc(viewportDimensions, dimensionComparator), duc(data), duc(initialItemCount), duc(stateRestoreInProgress), duc(scrolledToInitialItem), duc(initialTopMostItemIndex)), filter(([, , , , , , , stateRestoreInProgress2])=>{\n        return !stateRestoreInProgress2;\n    }), map(([totalCount2, [startOffset, endOffset], gap2, item, viewport, data2, initialItemCount2, , scrolledToInitialItem2, initialTopMostItemIndex2])=>{\n        const { row: rowGap, column: columnGap } = gap2;\n        const { height: itemHeight, width: itemWidth } = item;\n        const { width: viewportWidth } = viewport;\n        if (initialItemCount2 === 0 && (totalCount2 === 0 || viewportWidth === 0)) {\n            return INITIAL_GRID_STATE;\n        }\n        if (itemWidth === 0) {\n            const startIndex2 = getInitialTopMostItemIndexNumber(initialTopMostItemIndex2, totalCount2);\n            const endIndex2 = startIndex2 === 0 ? Math.max(initialItemCount2 - 1, 0) : startIndex2;\n            return buildProbeGridState(buildItems(startIndex2, endIndex2, data2));\n        }\n        const perRow = itemsPerRow(viewportWidth, itemWidth, columnGap);\n        let startIndex;\n        let endIndex;\n        if (!scrolledToInitialItem2) {\n            startIndex = 0;\n            endIndex = -1;\n        } else if (startOffset === 0 && endOffset === 0 && initialItemCount2 > 0) {\n            startIndex = 0;\n            endIndex = initialItemCount2 - 1;\n        } else {\n            startIndex = perRow * floor((startOffset + rowGap) / (itemHeight + rowGap));\n            endIndex = perRow * ceil((endOffset + rowGap) / (itemHeight + rowGap)) - 1;\n            endIndex = min(totalCount2 - 1, max(endIndex, perRow - 1));\n            startIndex = min(endIndex, max(0, startIndex));\n        }\n        const items = buildItems(startIndex, endIndex, data2);\n        const { top, bottom } = gridLayout(viewport, gap2, item, items);\n        const rowCount = ceil(totalCount2 / perRow);\n        const totalHeight = rowCount * itemHeight + (rowCount - 1) * rowGap;\n        const offsetBottom = totalHeight - bottom;\n        return {\n            items,\n            offsetTop: top,\n            offsetBottom,\n            top,\n            bottom,\n            itemHeight,\n            itemWidth\n        };\n    })), gridState);\n    connect(pipe(data, filter((data2)=>data2 !== null), map((data2)=>data2.length)), totalCount);\n    connect(pipe(combineLatest(viewportDimensions, itemDimensions, gridState, gap), filter(([viewportDimensions2, itemDimensions2, { items }])=>{\n        return items.length > 0 && itemDimensions2.height !== 0 && viewportDimensions2.height !== 0;\n    }), map(([viewportDimensions2, itemDimensions2, { items }, gap2])=>{\n        const { top, bottom } = gridLayout(viewportDimensions2, gap2, itemDimensions2, items);\n        return [\n            top,\n            bottom\n        ];\n    }), distinctUntilChanged(tupleComparator)), listBoundary);\n    const hasScrolled = statefulStream(false);\n    connect(pipe(scrollTop, withLatestFrom(hasScrolled), map(([scrollTop2, hasScrolled2])=>{\n        return hasScrolled2 || scrollTop2 !== 0;\n    })), hasScrolled);\n    const endReached = streamFromEmitter(pipe(duc(gridState), filter(({ items })=>items.length > 0), withLatestFrom(totalCount, hasScrolled), filter(([{ items }, totalCount2, hasScrolled2])=>hasScrolled2 && items[items.length - 1].index === totalCount2 - 1), map(([, totalCount2])=>totalCount2 - 1), distinctUntilChanged()));\n    const startReached = streamFromEmitter(pipe(duc(gridState), filter(({ items })=>{\n        return items.length > 0 && items[0].index === 0;\n    }), // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    mapTo(0), distinctUntilChanged()));\n    const rangeChanged = streamFromEmitter(pipe(duc(gridState), withLatestFrom(stateRestoreInProgress), filter(([{ items }, stateRestoreInProgress2])=>items.length > 0 && !stateRestoreInProgress2), map(([{ items }])=>{\n        return {\n            startIndex: items[0].index,\n            endIndex: items[items.length - 1].index\n        };\n    }), distinctUntilChanged(rangeComparator), throttleTime(0)));\n    connect(rangeChanged, scrollSeek.scrollSeekRangeChanged);\n    connect(pipe(scrollToIndex, withLatestFrom(viewportDimensions, itemDimensions, totalCount, gap), map(([location, viewportDimensions2, itemDimensions2, totalCount2, gap2])=>{\n        const normalLocation = normalizeIndexLocation(location);\n        const { align, behavior, offset } = normalLocation;\n        let index = normalLocation.index;\n        if (index === \"LAST\") {\n            index = totalCount2 - 1;\n        }\n        index = max(0, index, min(totalCount2 - 1, index));\n        let top = itemTop(viewportDimensions2, gap2, itemDimensions2, index);\n        if (align === \"end\") {\n            top = round(top - viewportDimensions2.height + itemDimensions2.height);\n        } else if (align === \"center\") {\n            top = round(top - viewportDimensions2.height / 2 + itemDimensions2.height / 2);\n        }\n        if (offset) {\n            top += offset;\n        }\n        return {\n            top,\n            behavior\n        };\n    })), scrollTo);\n    const totalListHeight = statefulStreamFromEmitter(pipe(gridState, map((gridState2)=>{\n        return gridState2.offsetBottom + gridState2.bottom;\n    })), 0);\n    connect(pipe(windowViewportRect, map((viewportInfo)=>({\n            width: viewportInfo.visibleWidth,\n            height: viewportInfo.visibleHeight\n        }))), viewportDimensions);\n    return {\n        // input\n        data,\n        totalCount,\n        viewportDimensions,\n        itemDimensions,\n        scrollTop,\n        scrollHeight,\n        overscan,\n        scrollBy,\n        scrollTo,\n        scrollToIndex,\n        smoothScrollTargetReached,\n        windowViewportRect,\n        windowScrollTo,\n        useWindowScroll,\n        customScrollParent,\n        windowScrollContainerState,\n        deviation,\n        scrollContainerState,\n        footerHeight,\n        headerHeight,\n        initialItemCount,\n        gap,\n        restoreStateFrom,\n        ...scrollSeek,\n        initialTopMostItemIndex,\n        // output\n        gridState,\n        totalListHeight,\n        ...stateFlags,\n        startReached,\n        endReached,\n        rangeChanged,\n        stateChanged,\n        propsReady,\n        stateRestoreInProgress,\n        ...log\n    };\n}, tup(sizeRangeSystem, domIOSystem, stateFlagsSystem, scrollSeekSystem, propsReadySystem, windowScrollerSystem, loggerSystem));\nfunction gridLayout(viewport, gap, item, items) {\n    const { height: itemHeight } = item;\n    if (itemHeight === void 0 || items.length === 0) {\n        return {\n            top: 0,\n            bottom: 0\n        };\n    }\n    const top = itemTop(viewport, gap, item, items[0].index);\n    const bottom = itemTop(viewport, gap, item, items[items.length - 1].index) + itemHeight;\n    return {\n        top,\n        bottom\n    };\n}\nfunction itemTop(viewport, gap, item, index) {\n    const perRow = itemsPerRow(viewport.width, item.width, gap.column);\n    const rowCount = floor(index / perRow);\n    const top = rowCount * item.height + max(0, rowCount - 1) * gap.row;\n    return top > 0 ? top + gap.row : top;\n}\nfunction itemsPerRow(viewportWidth, itemWidth, gap) {\n    return max(1, floor((viewportWidth + gap) / (floor(itemWidth) + gap)));\n}\nconst gridComponentPropsSystem = /* @__PURE__ */ system(()=>{\n    const itemContent = statefulStream((index)=>`Item ${index}`);\n    const components = statefulStream({});\n    const context = statefulStream(null);\n    const itemClassName = statefulStream(\"virtuoso-grid-item\");\n    const listClassName = statefulStream(\"virtuoso-grid-list\");\n    const computeItemKey = statefulStream(identity);\n    const headerFooterTag = statefulStream(\"div\");\n    const scrollerRef = statefulStream(noop);\n    const distinctProp = (propName, defaultValue = null)=>{\n        return statefulStreamFromEmitter(pipe(components, map((components2)=>components2[propName]), distinctUntilChanged()), defaultValue);\n    };\n    return {\n        context,\n        itemContent,\n        components,\n        computeItemKey,\n        itemClassName,\n        listClassName,\n        headerFooterTag,\n        scrollerRef,\n        FooterComponent: distinctProp(\"Footer\"),\n        HeaderComponent: distinctProp(\"Header\"),\n        ListComponent: distinctProp(\"List\", \"div\"),\n        ItemComponent: distinctProp(\"Item\", \"div\"),\n        ScrollerComponent: distinctProp(\"Scroller\", \"div\"),\n        ScrollSeekPlaceholder: distinctProp(\"ScrollSeekPlaceholder\", \"div\")\n    };\n});\nconst combinedSystem$1 = /* @__PURE__ */ system(([gridSystem2, gridComponentPropsSystem2])=>{\n    return {\n        ...gridSystem2,\n        ...gridComponentPropsSystem2\n    };\n}, tup(gridSystem, gridComponentPropsSystem));\nconst GridItems = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function GridItems2() {\n    const gridState = useEmitterValue$1(\"gridState\");\n    const listClassName = useEmitterValue$1(\"listClassName\");\n    const itemClassName = useEmitterValue$1(\"itemClassName\");\n    const itemContent = useEmitterValue$1(\"itemContent\");\n    const computeItemKey = useEmitterValue$1(\"computeItemKey\");\n    const isSeeking = useEmitterValue$1(\"isSeeking\");\n    const scrollHeightCallback = usePublisher$1(\"scrollHeight\");\n    const ItemComponent = useEmitterValue$1(\"ItemComponent\");\n    const ListComponent = useEmitterValue$1(\"ListComponent\");\n    const ScrollSeekPlaceholder = useEmitterValue$1(\"ScrollSeekPlaceholder\");\n    const context = useEmitterValue$1(\"context\");\n    const itemDimensions = usePublisher$1(\"itemDimensions\");\n    const gridGap = usePublisher$1(\"gap\");\n    const log = useEmitterValue$1(\"log\");\n    const stateRestoreInProgress = useEmitterValue$1(\"stateRestoreInProgress\");\n    const listRef = useSize((el)=>{\n        const scrollHeight = el.parentElement.parentElement.scrollHeight;\n        scrollHeightCallback(scrollHeight);\n        const firstItem = el.firstChild;\n        if (firstItem) {\n            const { width, height } = firstItem.getBoundingClientRect();\n            itemDimensions({\n                width,\n                height\n            });\n        }\n        gridGap({\n            row: resolveGapValue(\"row-gap\", getComputedStyle(el).rowGap, log),\n            column: resolveGapValue(\"column-gap\", getComputedStyle(el).columnGap, log)\n        });\n    });\n    if (stateRestoreInProgress) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ListComponent, {\n        ref: listRef,\n        className: listClassName,\n        ...contextPropIfNotDomElement(ListComponent, context),\n        style: {\n            paddingTop: gridState.offsetTop,\n            paddingBottom: gridState.offsetBottom\n        },\n        \"data-test-id\": \"virtuoso-item-list\"\n    }, gridState.items.map((item)=>{\n        const key = computeItemKey(item.index, item.data, context);\n        return isSeeking ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScrollSeekPlaceholder, {\n            key,\n            ...contextPropIfNotDomElement(ScrollSeekPlaceholder, context),\n            index: item.index,\n            height: gridState.itemHeight,\n            width: gridState.itemWidth\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ItemComponent, {\n            ...contextPropIfNotDomElement(ItemComponent, context),\n            className: itemClassName,\n            \"data-index\": item.index,\n            key\n        }, itemContent(item.index, item.data, context));\n    }));\n});\nconst Header = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoHeader2() {\n    const Header2 = useEmitterValue$1(\"HeaderComponent\");\n    const headerHeight = usePublisher$1(\"headerHeight\");\n    const headerFooterTag = useEmitterValue$1(\"headerFooterTag\");\n    const ref = useSize((el)=>headerHeight(correctItemSize(el, \"height\")));\n    const context = useEmitterValue$1(\"context\");\n    return Header2 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(headerFooterTag, {\n        ref\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Header2, contextPropIfNotDomElement(Header2, context))) : null;\n});\nconst Footer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoGridFooter() {\n    const Footer2 = useEmitterValue$1(\"FooterComponent\");\n    const footerHeight = usePublisher$1(\"footerHeight\");\n    const headerFooterTag = useEmitterValue$1(\"headerFooterTag\");\n    const ref = useSize((el)=>footerHeight(correctItemSize(el, \"height\")));\n    const context = useEmitterValue$1(\"context\");\n    return Footer2 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(headerFooterTag, {\n        ref\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Footer2, contextPropIfNotDomElement(Footer2, context))) : null;\n});\nconst Viewport$1 = ({ children })=>{\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(VirtuosoGridMockContext);\n    const itemDimensions = usePublisher$1(\"itemDimensions\");\n    const viewportDimensions = usePublisher$1(\"viewportDimensions\");\n    const viewportRef = useSize((el)=>{\n        viewportDimensions(el.getBoundingClientRect());\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ctx) {\n            viewportDimensions({\n                height: ctx.viewportHeight,\n                width: ctx.viewportWidth\n            });\n            itemDimensions({\n                height: ctx.itemHeight,\n                width: ctx.itemWidth\n            });\n        }\n    }, [\n        ctx,\n        viewportDimensions,\n        itemDimensions\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: viewportStyle,\n        ref: viewportRef\n    }, children);\n};\nconst WindowViewport$1 = ({ children })=>{\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(VirtuosoGridMockContext);\n    const windowViewportRect = usePublisher$1(\"windowViewportRect\");\n    const itemDimensions = usePublisher$1(\"itemDimensions\");\n    const customScrollParent = useEmitterValue$1(\"customScrollParent\");\n    const viewportRef = useWindowViewportRectRef(windowViewportRect, customScrollParent);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ctx) {\n            itemDimensions({\n                height: ctx.itemHeight,\n                width: ctx.itemWidth\n            });\n            windowViewportRect({\n                offsetTop: 0,\n                visibleHeight: ctx.viewportHeight,\n                visibleWidth: ctx.viewportWidth\n            });\n        }\n    }, [\n        ctx,\n        windowViewportRect,\n        itemDimensions\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: viewportRef,\n        style: viewportStyle\n    }, children);\n};\nconst GridRoot = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function GridRoot2({ ...props }) {\n    const useWindowScroll = useEmitterValue$1(\"useWindowScroll\");\n    const customScrollParent = useEmitterValue$1(\"customScrollParent\");\n    const TheScroller = customScrollParent || useWindowScroll ? WindowScroller$1 : Scroller$1;\n    const TheViewport = customScrollParent || useWindowScroll ? WindowViewport$1 : Viewport$1;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheScroller, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheViewport, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Header, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GridItems, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Footer, null)));\n});\nconst { Component: Grid, usePublisher: usePublisher$1, useEmitterValue: useEmitterValue$1, useEmitter: useEmitter$1 } = /* @__PURE__ */ systemToComponent(combinedSystem$1, {\n    optional: {\n        context: \"context\",\n        totalCount: \"totalCount\",\n        overscan: \"overscan\",\n        itemContent: \"itemContent\",\n        components: \"components\",\n        computeItemKey: \"computeItemKey\",\n        data: \"data\",\n        initialItemCount: \"initialItemCount\",\n        scrollSeekConfiguration: \"scrollSeekConfiguration\",\n        headerFooterTag: \"headerFooterTag\",\n        listClassName: \"listClassName\",\n        itemClassName: \"itemClassName\",\n        useWindowScroll: \"useWindowScroll\",\n        customScrollParent: \"customScrollParent\",\n        scrollerRef: \"scrollerRef\",\n        logLevel: \"logLevel\",\n        restoreStateFrom: \"restoreStateFrom\",\n        initialTopMostItemIndex: \"initialTopMostItemIndex\"\n    },\n    methods: {\n        scrollTo: \"scrollTo\",\n        scrollBy: \"scrollBy\",\n        scrollToIndex: \"scrollToIndex\"\n    },\n    events: {\n        isScrolling: \"isScrolling\",\n        endReached: \"endReached\",\n        startReached: \"startReached\",\n        rangeChanged: \"rangeChanged\",\n        atBottomStateChange: \"atBottomStateChange\",\n        atTopStateChange: \"atTopStateChange\",\n        stateChanged: \"stateChanged\"\n    }\n}, GridRoot);\nconst Scroller$1 = /* @__PURE__ */ buildScroller({\n    usePublisher: usePublisher$1,\n    useEmitterValue: useEmitterValue$1,\n    useEmitter: useEmitter$1\n});\nconst WindowScroller$1 = /* @__PURE__ */ buildWindowScroller({\n    usePublisher: usePublisher$1,\n    useEmitterValue: useEmitterValue$1,\n    useEmitter: useEmitter$1\n});\nfunction resolveGapValue(property, value, log) {\n    if (value !== \"normal\" && !(value == null ? void 0 : value.endsWith(\"px\"))) {\n        log(`${property} was not resolved to pixel value correctly`, value, LogLevel.WARN);\n    }\n    if (value === \"normal\") {\n        return 0;\n    }\n    return parseInt(value != null ? value : \"0\", 10);\n}\nconst VirtuosoGrid = Grid;\nconst tableComponentPropsSystem = /* @__PURE__ */ system(()=>{\n    const itemContent = statefulStream((index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, \"Item $\", index));\n    const context = statefulStream(null);\n    const fixedHeaderContent = statefulStream(null);\n    const fixedFooterContent = statefulStream(null);\n    const components = statefulStream({});\n    const computeItemKey = statefulStream(identity);\n    const scrollerRef = statefulStream(noop);\n    const distinctProp = (propName, defaultValue = null)=>{\n        return statefulStreamFromEmitter(pipe(components, map((components2)=>components2[propName]), distinctUntilChanged()), defaultValue);\n    };\n    return {\n        context,\n        itemContent,\n        fixedHeaderContent,\n        fixedFooterContent,\n        components,\n        computeItemKey,\n        scrollerRef,\n        TableComponent: distinctProp(\"Table\", \"table\"),\n        TableHeadComponent: distinctProp(\"TableHead\", \"thead\"),\n        TableFooterComponent: distinctProp(\"TableFoot\", \"tfoot\"),\n        TableBodyComponent: distinctProp(\"TableBody\", \"tbody\"),\n        TableRowComponent: distinctProp(\"TableRow\", \"tr\"),\n        ScrollerComponent: distinctProp(\"Scroller\", \"div\"),\n        EmptyPlaceholder: distinctProp(\"EmptyPlaceholder\"),\n        ScrollSeekPlaceholder: distinctProp(\"ScrollSeekPlaceholder\"),\n        FillerRow: distinctProp(\"FillerRow\")\n    };\n});\nconst combinedSystem = /* @__PURE__ */ system(([listSystem2, propsSystem])=>{\n    return {\n        ...listSystem2,\n        ...propsSystem\n    };\n}, tup(listSystem, tableComponentPropsSystem));\nconst DefaultScrollSeekPlaceholder = ({ height })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n        style: {\n            height\n        }\n    }));\nconst DefaultFillerRow = ({ height })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n        style: {\n            height,\n            padding: 0,\n            border: 0\n        }\n    }));\nconst ITEM_STYLE = {\n    overflowAnchor: \"none\"\n};\nconst Items = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function VirtuosoItems2() {\n    const listState = useEmitterValue(\"listState\");\n    const sizeRanges = usePublisher(\"sizeRanges\");\n    const useWindowScroll = useEmitterValue(\"useWindowScroll\");\n    const customScrollParent = useEmitterValue(\"customScrollParent\");\n    const windowScrollContainerStateCallback = usePublisher(\"windowScrollContainerState\");\n    const _scrollContainerStateCallback = usePublisher(\"scrollContainerState\");\n    const scrollContainerStateCallback = customScrollParent || useWindowScroll ? windowScrollContainerStateCallback : _scrollContainerStateCallback;\n    const itemContent = useEmitterValue(\"itemContent\");\n    const trackItemSizes = useEmitterValue(\"trackItemSizes\");\n    const itemSize = useEmitterValue(\"itemSize\");\n    const log = useEmitterValue(\"log\");\n    const { callbackRef, ref } = useChangedListContentsSizes(sizeRanges, itemSize, trackItemSizes, scrollContainerStateCallback, log, void 0, customScrollParent);\n    const [deviation, setDeviation] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    useEmitter(\"deviation\", (value)=>{\n        if (deviation !== value) {\n            ref.current.style.marginTop = `${value}px`;\n            setDeviation(value);\n        }\n    });\n    const EmptyPlaceholder = useEmitterValue(\"EmptyPlaceholder\");\n    const ScrollSeekPlaceholder = useEmitterValue(\"ScrollSeekPlaceholder\") || DefaultScrollSeekPlaceholder;\n    const FillerRow = useEmitterValue(\"FillerRow\") || DefaultFillerRow;\n    const TableBodyComponent = useEmitterValue(\"TableBodyComponent\");\n    const TableRowComponent = useEmitterValue(\"TableRowComponent\");\n    const computeItemKey = useEmitterValue(\"computeItemKey\");\n    const isSeeking = useEmitterValue(\"isSeeking\");\n    const paddingTopAddition = useEmitterValue(\"paddingTopAddition\");\n    const firstItemIndex = useEmitterValue(\"firstItemIndex\");\n    const statefulTotalCount = useEmitterValue(\"statefulTotalCount\");\n    const context = useEmitterValue(\"context\");\n    if (statefulTotalCount === 0 && EmptyPlaceholder) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EmptyPlaceholder, contextPropIfNotDomElement(EmptyPlaceholder, context));\n    }\n    const paddingTop = listState.offsetTop + paddingTopAddition + deviation;\n    const paddingBottom = listState.offsetBottom;\n    const paddingTopEl = paddingTop > 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FillerRow, {\n        height: paddingTop,\n        key: \"padding-top\",\n        context\n    }) : null;\n    const paddingBottomEl = paddingBottom > 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FillerRow, {\n        height: paddingBottom,\n        key: \"padding-bottom\",\n        context\n    }) : null;\n    const items = listState.items.map((item)=>{\n        const index = item.originalIndex;\n        const key = computeItemKey(index + firstItemIndex, item.data, context);\n        if (isSeeking) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScrollSeekPlaceholder, {\n                ...contextPropIfNotDomElement(ScrollSeekPlaceholder, context),\n                key,\n                index: item.index,\n                height: item.size,\n                type: item.type || \"item\"\n            });\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TableRowComponent, {\n            ...contextPropIfNotDomElement(TableRowComponent, context),\n            ...itemPropIfNotDomElement(TableRowComponent, item.data),\n            key,\n            \"data-index\": index,\n            \"data-known-size\": item.size,\n            \"data-item-index\": item.index,\n            style: ITEM_STYLE\n        }, itemContent(item.index, item.data, context));\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TableBodyComponent, {\n        ref: callbackRef,\n        \"data-test-id\": \"virtuoso-item-list\",\n        ...contextPropIfNotDomElement(TableBodyComponent, context)\n    }, [\n        paddingTopEl,\n        ...items,\n        paddingBottomEl\n    ]);\n});\nconst Viewport = ({ children })=>{\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(VirtuosoMockContext);\n    const viewportHeight = usePublisher(\"viewportHeight\");\n    const fixedItemHeight = usePublisher(\"fixedItemHeight\");\n    const viewportRef = useSize(compose(viewportHeight, (el)=>correctItemSize(el, \"height\")));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ctx) {\n            viewportHeight(ctx.viewportHeight);\n            fixedItemHeight(ctx.itemHeight);\n        }\n    }, [\n        ctx,\n        viewportHeight,\n        fixedItemHeight\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: viewportStyle,\n        ref: viewportRef,\n        \"data-viewport-type\": \"element\"\n    }, children);\n};\nconst WindowViewport = ({ children })=>{\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(VirtuosoMockContext);\n    const windowViewportRect = usePublisher(\"windowViewportRect\");\n    const fixedItemHeight = usePublisher(\"fixedItemHeight\");\n    const customScrollParent = useEmitterValue(\"customScrollParent\");\n    const viewportRef = useWindowViewportRectRef(windowViewportRect, customScrollParent);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ctx) {\n            fixedItemHeight(ctx.itemHeight);\n            windowViewportRect({\n                offsetTop: 0,\n                visibleHeight: ctx.viewportHeight,\n                visibleWidth: 100\n            });\n        }\n    }, [\n        ctx,\n        windowViewportRect,\n        fixedItemHeight\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: viewportRef,\n        style: viewportStyle,\n        \"data-viewport-type\": \"window\"\n    }, children);\n};\nconst TableRoot = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(function TableVirtuosoRoot(props) {\n    const useWindowScroll = useEmitterValue(\"useWindowScroll\");\n    const customScrollParent = useEmitterValue(\"customScrollParent\");\n    const fixedHeaderHeight = usePublisher(\"fixedHeaderHeight\");\n    const fixedFooterHeight = usePublisher(\"fixedFooterHeight\");\n    const fixedHeaderContent = useEmitterValue(\"fixedHeaderContent\");\n    const fixedFooterContent = useEmitterValue(\"fixedFooterContent\");\n    const context = useEmitterValue(\"context\");\n    const theadRef = useSize(compose(fixedHeaderHeight, (el)=>correctItemSize(el, \"height\")));\n    const tfootRef = useSize(compose(fixedFooterHeight, (el)=>correctItemSize(el, \"height\")));\n    const TheScroller = customScrollParent || useWindowScroll ? WindowScroller : Scroller;\n    const TheViewport = customScrollParent || useWindowScroll ? WindowViewport : Viewport;\n    const TheTable = useEmitterValue(\"TableComponent\");\n    const TheTHead = useEmitterValue(\"TableHeadComponent\");\n    const TheTFoot = useEmitterValue(\"TableFooterComponent\");\n    const theHead = fixedHeaderContent ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheTHead, {\n        key: \"TableHead\",\n        style: {\n            zIndex: 2,\n            position: \"sticky\",\n            top: 0\n        },\n        ref: theadRef,\n        ...contextPropIfNotDomElement(TheTHead, context)\n    }, fixedHeaderContent()) : null;\n    const theFoot = fixedFooterContent ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheTFoot, {\n        key: \"TableFoot\",\n        style: {\n            zIndex: 1,\n            position: \"sticky\",\n            bottom: 0\n        },\n        ref: tfootRef,\n        ...contextPropIfNotDomElement(TheTFoot, context)\n    }, fixedFooterContent()) : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheScroller, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheViewport, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TheTable, {\n        style: {\n            borderSpacing: 0,\n            overflowAnchor: \"none\"\n        },\n        ...contextPropIfNotDomElement(TheTable, context)\n    }, [\n        theHead,\n        /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Items, {\n            key: \"TableBody\"\n        }),\n        theFoot\n    ])));\n});\nconst { Component: Table, usePublisher, useEmitterValue, useEmitter } = /* @__PURE__ */ systemToComponent(combinedSystem, {\n    required: {},\n    optional: {\n        restoreStateFrom: \"restoreStateFrom\",\n        context: \"context\",\n        followOutput: \"followOutput\",\n        firstItemIndex: \"firstItemIndex\",\n        itemContent: \"itemContent\",\n        fixedHeaderContent: \"fixedHeaderContent\",\n        fixedFooterContent: \"fixedFooterContent\",\n        overscan: \"overscan\",\n        increaseViewportBy: \"increaseViewportBy\",\n        totalCount: \"totalCount\",\n        topItemCount: \"topItemCount\",\n        initialTopMostItemIndex: \"initialTopMostItemIndex\",\n        components: \"components\",\n        groupCounts: \"groupCounts\",\n        atBottomThreshold: \"atBottomThreshold\",\n        atTopThreshold: \"atTopThreshold\",\n        computeItemKey: \"computeItemKey\",\n        defaultItemHeight: \"defaultItemHeight\",\n        fixedItemHeight: \"fixedItemHeight\",\n        itemSize: \"itemSize\",\n        scrollSeekConfiguration: \"scrollSeekConfiguration\",\n        data: \"data\",\n        initialItemCount: \"initialItemCount\",\n        initialScrollTop: \"initialScrollTop\",\n        alignToBottom: \"alignToBottom\",\n        useWindowScroll: \"useWindowScroll\",\n        customScrollParent: \"customScrollParent\",\n        scrollerRef: \"scrollerRef\",\n        logLevel: \"logLevel\"\n    },\n    methods: {\n        scrollToIndex: \"scrollToIndex\",\n        scrollIntoView: \"scrollIntoView\",\n        scrollTo: \"scrollTo\",\n        scrollBy: \"scrollBy\",\n        getState: \"getState\"\n    },\n    events: {\n        isScrolling: \"isScrolling\",\n        endReached: \"endReached\",\n        startReached: \"startReached\",\n        rangeChanged: \"rangeChanged\",\n        atBottomStateChange: \"atBottomStateChange\",\n        atTopStateChange: \"atTopStateChange\",\n        totalListHeightChanged: \"totalListHeightChanged\",\n        itemsRendered: \"itemsRendered\",\n        groupIndices: \"groupIndices\"\n    }\n}, TableRoot);\nconst Scroller = /* @__PURE__ */ buildScroller({\n    usePublisher,\n    useEmitterValue,\n    useEmitter\n});\nconst WindowScroller = /* @__PURE__ */ buildWindowScroller({\n    usePublisher,\n    useEmitterValue,\n    useEmitter\n});\nconst TableVirtuoso = Table;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-virtuoso/dist/index.mjs\n");

/***/ })

};
;