"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@liveblocks";
exports.ids = ["vendor-chunks/@liveblocks"];
exports.modules = {

/***/ "(ssr)/./node_modules/@liveblocks/core/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/core/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientMsgCode: () => (/* binding */ ClientMsgCode),\n/* harmony export */   CommentsApiError: () => (/* binding */ CommentsApiError),\n/* harmony export */   CrdtType: () => (/* binding */ CrdtType),\n/* harmony export */   LiveList: () => (/* binding */ LiveList),\n/* harmony export */   LiveMap: () => (/* binding */ LiveMap),\n/* harmony export */   LiveObject: () => (/* binding */ LiveObject),\n/* harmony export */   OpCode: () => (/* binding */ OpCode),\n/* harmony export */   ServerMsgCode: () => (/* binding */ ServerMsgCode),\n/* harmony export */   WebsocketCloseCodes: () => (/* binding */ WebsocketCloseCodes),\n/* harmony export */   ackOp: () => (/* binding */ ackOp),\n/* harmony export */   asPos: () => (/* binding */ asPos),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   b64decode: () => (/* binding */ b64decode),\n/* harmony export */   cloneLson: () => (/* binding */ cloneLson),\n/* harmony export */   console: () => (/* binding */ fancy_console_exports),\n/* harmony export */   convertToCommentData: () => (/* binding */ convertToCommentData),\n/* harmony export */   convertToCommentUserReaction: () => (/* binding */ convertToCommentUserReaction),\n/* harmony export */   convertToThreadData: () => (/* binding */ convertToThreadData),\n/* harmony export */   createAsyncCache: () => (/* binding */ createAsyncCache),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createCommentsApi: () => (/* binding */ createCommentsApi),\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   deprecateIf: () => (/* binding */ deprecateIf),\n/* harmony export */   detectDupes: () => (/* binding */ detectDupes),\n/* harmony export */   errorIf: () => (/* binding */ errorIf),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* binding */ getMentionedIdsFromCommentBody),\n/* harmony export */   isChildCrdt: () => (/* binding */ isChildCrdt),\n/* harmony export */   isJsonArray: () => (/* binding */ isJsonArray),\n/* harmony export */   isJsonObject: () => (/* binding */ isJsonObject),\n/* harmony export */   isJsonScalar: () => (/* binding */ isJsonScalar),\n/* harmony export */   isLiveNode: () => (/* binding */ isLiveNode),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRootCrdt: () => (/* binding */ isRootCrdt),\n/* harmony export */   legacy_patchImmutableObject: () => (/* binding */ legacy_patchImmutableObject),\n/* harmony export */   lsonToJson: () => (/* binding */ lsonToJson),\n/* harmony export */   makeEventSource: () => (/* binding */ makeEventSource),\n/* harmony export */   makePoller: () => (/* binding */ makePoller),\n/* harmony export */   makePosition: () => (/* binding */ makePosition),\n/* harmony export */   nn: () => (/* binding */ nn),\n/* harmony export */   patchLiveObjectKey: () => (/* binding */ patchLiveObjectKey),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   shallow: () => (/* binding */ shallow),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   stringifyCommentBody: () => (/* binding */ stringifyCommentBody),\n/* harmony export */   throwUsageError: () => (/* binding */ throwUsageError),\n/* harmony export */   toPlainLson: () => (/* binding */ toPlainLson),\n/* harmony export */   tryParseJson: () => (/* binding */ tryParseJson),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/core\";\nvar PKG_VERSION = \"1.9.7\";\nvar PKG_FORMAT = \"esm\";\n// src/dupe-detection.ts\nvar g = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : {};\nvar crossLinkedDocs = \"https://liveblocks.io/docs/errors/cross-linked\";\nvar dupesDocs = \"https://liveblocks.io/docs/errors/dupes\";\nvar SPACE = \" \";\nfunction error(msg) {\n    if (false) {} else {\n        throw new Error(msg);\n    }\n}\nfunction detectDupes(pkgName, pkgVersion, pkgFormat) {\n    const pkgId = Symbol.for(pkgName);\n    const pkgBuildInfo = pkgFormat ? `${pkgVersion || \"dev\"} (${pkgFormat})` : pkgVersion || \"dev\";\n    if (!g[pkgId]) {\n        g[pkgId] = pkgBuildInfo;\n    } else if (g[pkgId] === pkgBuildInfo) {} else {\n        const msg = [\n            `Multiple copies of Liveblocks are being loaded in your project. This will cause issues! See ${dupesDocs + SPACE}`,\n            \"\",\n            \"Conflicts:\",\n            `- ${pkgName} ${g[pkgId]} (already loaded)`,\n            `- ${pkgName} ${pkgBuildInfo} (trying to load this now)`\n        ].join(\"\\n\");\n        error(msg);\n    }\n    if (pkgVersion && PKG_VERSION && pkgVersion !== PKG_VERSION) {\n        error([\n            `Cross-linked versions of Liveblocks found, which will cause issues! See ${crossLinkedDocs + SPACE}`,\n            \"\",\n            \"Conflicts:\",\n            `- ${PKG_NAME} is at ${PKG_VERSION}`,\n            `- ${pkgName} is at ${pkgVersion}`,\n            \"\",\n            \"Always upgrade all Liveblocks packages to the same version number.\"\n        ].join(\"\\n\"));\n    }\n}\n// src/lib/assert.ts\nfunction assertNever(_value, errmsg) {\n    throw new Error(errmsg);\n}\nfunction assert(condition, errmsg) {\n    if (true) {\n        if (!condition) {\n            const err = new Error(errmsg);\n            err.name = \"Assertion failure\";\n            throw err;\n        }\n    }\n}\nfunction nn(value, errmsg = \"Expected value to be non-nullable\") {\n    assert(value !== null && value !== void 0, errmsg);\n    return value;\n}\n// src/lib/controlledPromise.ts\nfunction controlledPromise() {\n    let flagger;\n    const promise = new Promise((res)=>{\n        flagger = res;\n    });\n    if (!flagger) {\n        throw new Error(\"Should never happen\");\n    }\n    return [\n        promise,\n        flagger\n    ];\n}\n// src/lib/EventSource.ts\nfunction makeEventSource() {\n    const _onetimeObservers = /* @__PURE__ */ new Set();\n    const _observers = /* @__PURE__ */ new Set();\n    let _buffer = null;\n    function pause() {\n        _buffer = [];\n    }\n    function unpause() {\n        if (_buffer === null) {\n            return;\n        }\n        for (const event of _buffer){\n            notify(event);\n        }\n        _buffer = null;\n    }\n    function subscribe(callback) {\n        _observers.add(callback);\n        return ()=>_observers.delete(callback);\n    }\n    function subscribeOnce(callback) {\n        _onetimeObservers.add(callback);\n        return ()=>_onetimeObservers.delete(callback);\n    }\n    async function waitUntil(predicate) {\n        let unsub;\n        return new Promise((res)=>{\n            unsub = subscribe((event)=>{\n                if (predicate === void 0 || predicate(event)) {\n                    res(event);\n                }\n            });\n        }).finally(()=>unsub?.());\n    }\n    function notifyOrBuffer(event) {\n        if (_buffer !== null) {\n            _buffer.push(event);\n        } else {\n            notify(event);\n        }\n    }\n    function notify(event) {\n        _onetimeObservers.forEach((callback)=>callback(event));\n        _onetimeObservers.clear();\n        _observers.forEach((callback)=>callback(event));\n    }\n    function clear() {\n        _onetimeObservers.clear();\n        _observers.clear();\n    }\n    function count() {\n        return _onetimeObservers.size + _observers.size;\n    }\n    return {\n        // Private/internal control over event emission\n        notify: notifyOrBuffer,\n        subscribe,\n        subscribeOnce,\n        clear,\n        count,\n        waitUntil,\n        pause,\n        unpause,\n        // Publicly exposable subscription API\n        observable: {\n            subscribe,\n            subscribeOnce,\n            waitUntil\n        }\n    };\n}\n// src/lib/fancy-console.ts\nvar fancy_console_exports = {};\n__export(fancy_console_exports, {\n    error: ()=>error2,\n    errorWithTitle: ()=>errorWithTitle,\n    warn: ()=>warn,\n    warnWithTitle: ()=>warnWithTitle\n});\nvar badge = \"background:#0e0d12;border-radius:9999px;color:#fff;padding:3px 7px;font-family:sans-serif;font-weight:600;\";\nvar bold = \"font-weight:600\";\nfunction wrap(method) {\n    return  true ? console[method] : /* istanbul ignore next */ 0;\n}\nvar warn = wrap(\"warn\");\nvar error2 = wrap(\"error\");\nfunction wrapWithTitle(method) {\n    return  true ? console[method] : /* istanbul ignore next */ 0;\n}\nvar warnWithTitle = wrapWithTitle(\"warn\");\nvar errorWithTitle = wrapWithTitle(\"error\");\n// src/lib/fsm.ts\nfunction distance(state1, state2) {\n    if (state1 === state2) {\n        return [\n            0,\n            0\n        ];\n    }\n    const chunks1 = state1.split(\".\");\n    const chunks2 = state2.split(\".\");\n    const minLen = Math.min(chunks1.length, chunks2.length);\n    let shared = 0;\n    for(; shared < minLen; shared++){\n        if (chunks1[shared] !== chunks2[shared]) {\n            break;\n        }\n    }\n    const up = chunks1.length - shared;\n    const down = chunks2.length - shared;\n    return [\n        up,\n        down\n    ];\n}\nfunction patterns(targetState, levels) {\n    const parts = targetState.split(\".\");\n    if (levels < 1 || levels > parts.length + 1) {\n        throw new Error(\"Invalid number of levels\");\n    }\n    const result = [];\n    if (levels > parts.length) {\n        result.push(\"*\");\n    }\n    for(let i = parts.length - levels + 1; i < parts.length; i++){\n        const slice = parts.slice(0, i);\n        if (slice.length > 0) {\n            result.push(slice.join(\".\") + \".*\");\n        }\n    }\n    result.push(targetState);\n    return result;\n}\nvar SafeContext = class {\n    constructor(initialContext){\n        this.curr = initialContext;\n    }\n    get current() {\n        return this.curr;\n    }\n    /**\n   * Call a callback function that allows patching of the context, by\n   * calling `context.patch()`. Patching is only allowed for the duration\n   * of this window.\n   */ allowPatching(callback) {\n        const self = this;\n        let allowed = true;\n        const patchableContext = {\n            ...this.curr,\n            patch (patch) {\n                if (allowed) {\n                    self.curr = Object.assign({}, self.curr, patch);\n                    for (const pair of Object.entries(patch)){\n                        const [key, value] = pair;\n                        if (key !== \"patch\") {\n                            this[key] = value;\n                        }\n                    }\n                } else {\n                    throw new Error(\"Can no longer patch stale context\");\n                }\n            }\n        };\n        callback(patchableContext);\n        allowed = false;\n        return;\n    }\n};\nvar nextId = 1;\nvar FSM = class {\n    /**\n   * Returns the initial state, which is defined by the first call made to\n   * .addState().\n   */ get initialState() {\n        const result = this.states.values()[Symbol.iterator]().next();\n        if (result.done) {\n            throw new Error(\"No states defined yet\");\n        } else {\n            return result.value;\n        }\n    }\n    get currentState() {\n        if (this.currentStateOrNull === null) {\n            if (this.runningState === 0 /* NOT_STARTED_YET */ ) {\n                throw new Error(\"Not started yet\");\n            } else {\n                throw new Error(\"Already stopped\");\n            }\n        }\n        return this.currentStateOrNull;\n    }\n    /**\n   * Starts the machine by entering the initial state.\n   */ start() {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"State machine has already started\");\n        }\n        this.runningState = 1 /* STARTED */ ;\n        this.currentStateOrNull = this.initialState;\n        this.enter(null);\n        return this;\n    }\n    /**\n   * Stops the state machine. Stopping the state machine will call exit\n   * handlers for the current state, but not enter a new state.\n   */ stop() {\n        if (this.runningState !== 1 /* STARTED */ ) {\n            throw new Error(\"Cannot stop a state machine that hasn't started yet\");\n        }\n        this.exit(null);\n        this.runningState = 2 /* STOPPED */ ;\n        this.currentStateOrNull = null;\n    }\n    constructor(initialContext){\n        this.id = nextId++;\n        this.runningState = 0 /* NOT_STARTED_YET */ ;\n        this.currentStateOrNull = null;\n        this.states = /* @__PURE__ */ new Set();\n        this.enterFns = /* @__PURE__ */ new Map();\n        this.cleanupStack = [];\n        this.knownEventTypes = /* @__PURE__ */ new Set();\n        this.allowedTransitions = /* @__PURE__ */ new Map();\n        this.currentContext = new SafeContext(initialContext);\n        this.eventHub = {\n            didReceiveEvent: makeEventSource(),\n            willTransition: makeEventSource(),\n            didIgnoreEvent: makeEventSource(),\n            willExitState: makeEventSource(),\n            didEnterState: makeEventSource()\n        };\n        this.events = {\n            didReceiveEvent: this.eventHub.didReceiveEvent.observable,\n            willTransition: this.eventHub.willTransition.observable,\n            didIgnoreEvent: this.eventHub.didIgnoreEvent.observable,\n            willExitState: this.eventHub.willExitState.observable,\n            didEnterState: this.eventHub.didEnterState.observable\n        };\n    }\n    get context() {\n        return this.currentContext.current;\n    }\n    /**\n   * Define an explicit finite state in the state machine.\n   */ addState(state) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        }\n        this.states.add(state);\n        return this;\n    }\n    onEnter(nameOrPattern, enterFn) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        } else if (this.enterFns.has(nameOrPattern)) {\n            throw new Error(// TODO We _currently_ don't support multiple .onEnters() for the same\n            // state, but this is not a fundamental limitation. Just not\n            // implemented yet. If we wanted to, we could make this an array.\n            `enter/exit function for ${nameOrPattern} already exists`);\n        }\n        this.enterFns.set(nameOrPattern, enterFn);\n        return this;\n    }\n    onEnterAsync(nameOrPattern, promiseFn, onOK, onError) {\n        return this.onEnter(nameOrPattern, ()=>{\n            let cancelled = false;\n            void promiseFn(this.currentContext.current).then(// On OK\n            (data)=>{\n                if (!cancelled) {\n                    this.transition({\n                        type: \"ASYNC_OK\",\n                        data\n                    }, onOK);\n                }\n            }, // On Error\n            (reason)=>{\n                if (!cancelled) {\n                    this.transition({\n                        type: \"ASYNC_ERROR\",\n                        reason\n                    }, onError);\n                }\n            });\n            return ()=>{\n                cancelled = true;\n            };\n        });\n    }\n    getStatesMatching(nameOrPattern) {\n        const matches = [];\n        if (nameOrPattern === \"*\") {\n            for (const state of this.states){\n                matches.push(state);\n            }\n        } else if (nameOrPattern.endsWith(\".*\")) {\n            const prefix = nameOrPattern.slice(0, -1);\n            for (const state of this.states){\n                if (state.startsWith(prefix)) {\n                    matches.push(state);\n                }\n            }\n        } else {\n            const name = nameOrPattern;\n            if (this.states.has(name)) {\n                matches.push(name);\n            }\n        }\n        if (matches.length === 0) {\n            throw new Error(`No states match ${JSON.stringify(nameOrPattern)}`);\n        }\n        return matches;\n    }\n    /**\n   * Define all allowed outgoing transitions for a state.\n   *\n   * The targets for each event can be defined as a function which returns the\n   * next state to transition to. These functions can look at the `event` or\n   * `context` params to conditionally decide which next state to transition\n   * to.\n   *\n   * If you set it to `null`, then the transition will be explicitly forbidden\n   * and throw an error. If you don't define a target for a transition, then\n   * such events will get ignored.\n   */ addTransitions(nameOrPattern, mapping) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        }\n        for (const srcState of this.getStatesMatching(nameOrPattern)){\n            let map = this.allowedTransitions.get(srcState);\n            if (map === void 0) {\n                map = /* @__PURE__ */ new Map();\n                this.allowedTransitions.set(srcState, map);\n            }\n            for (const [type, target_] of Object.entries(mapping)){\n                if (map.has(type)) {\n                    throw new Error(`Trying to set transition \"${type}\" on \"${srcState}\" (via \"${nameOrPattern}\"), but a transition already exists there.`);\n                }\n                const target = target_;\n                this.knownEventTypes.add(type);\n                if (target !== void 0) {\n                    const targetFn = typeof target === \"function\" ? target : ()=>target;\n                    map.set(type, targetFn);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n   * Like `.addTransition()`, but takes an (anonymous) transition whenever the\n   * timer fires.\n   *\n   * @param stateOrPattern The state name, or state group pattern name.\n   * @param after          Number of milliseconds after which to take the\n   *                       transition. If in the mean time, another transition\n   *                       is taken, the timer will get cancelled.\n   * @param target     The target state to go to.\n   */ addTimedTransition(stateOrPattern, after2, target) {\n        return this.onEnter(stateOrPattern, ()=>{\n            const ms = typeof after2 === \"function\" ? after2(this.currentContext.current) : after2;\n            const timeoutID = setTimeout(()=>{\n                this.transition({\n                    type: \"TIMER\"\n                }, target);\n            }, ms);\n            return ()=>{\n                clearTimeout(timeoutID);\n            };\n        });\n    }\n    getTargetFn(eventName) {\n        return this.allowedTransitions.get(this.currentState)?.get(eventName);\n    }\n    /**\n   * Exits the current state, and executes any necessary cleanup functions.\n   * Call this before changing the current state to the next state.\n   *\n   * @param levels Defines how many \"levels\" of nesting will be\n   * exited. For example, if you transition from `foo.bar.qux` to\n   * `foo.bar.baz`, then the level is 1. But if you transition from\n   * `foo.bar.qux` to `bla.bla`, then the level is 3.\n   * If `null`, it will exit all levels.\n   */ exit(levels) {\n        this.eventHub.willExitState.notify(this.currentState);\n        this.currentContext.allowPatching((patchableContext)=>{\n            levels = levels ?? this.cleanupStack.length;\n            for(let i = 0; i < levels; i++){\n                this.cleanupStack.pop()?.(patchableContext);\n            }\n        });\n    }\n    /**\n   * Enters the current state, and executes any necessary onEnter handlers.\n   * Call this directly _after_ setting the current state to the next state.\n   */ enter(levels) {\n        const enterPatterns = patterns(this.currentState, levels ?? this.currentState.split(\".\").length + 1);\n        this.currentContext.allowPatching((patchableContext)=>{\n            for (const pattern of enterPatterns){\n                const enterFn = this.enterFns.get(pattern);\n                const cleanupFn = enterFn?.(patchableContext);\n                if (typeof cleanupFn === \"function\") {\n                    this.cleanupStack.push(cleanupFn);\n                } else {\n                    this.cleanupStack.push(null);\n                }\n            }\n        });\n        this.eventHub.didEnterState.notify(this.currentState);\n    }\n    /**\n   * Sends an event to the machine, which may cause an internal state\n   * transition to happen. When that happens, will trigger side effects.\n   */ send(event) {\n        if (!this.knownEventTypes.has(event.type)) {\n            throw new Error(`Invalid event ${JSON.stringify(event.type)}`);\n        }\n        if (this.runningState === 2 /* STOPPED */ ) {\n            return;\n        }\n        const targetFn = this.getTargetFn(event.type);\n        if (targetFn !== void 0) {\n            return this.transition(event, targetFn);\n        } else {\n            this.eventHub.didIgnoreEvent.notify(event);\n        }\n    }\n    transition(event, target) {\n        this.eventHub.didReceiveEvent.notify(event);\n        const oldState = this.currentState;\n        const targetFn = typeof target === \"function\" ? target : ()=>target;\n        const nextTarget = targetFn(event, this.currentContext.current);\n        let nextState;\n        let effects = void 0;\n        if (nextTarget === null) {\n            this.eventHub.didIgnoreEvent.notify(event);\n            return;\n        }\n        if (typeof nextTarget === \"string\") {\n            nextState = nextTarget;\n        } else {\n            nextState = nextTarget.target;\n            effects = Array.isArray(nextTarget.effect) ? nextTarget.effect : [\n                nextTarget.effect\n            ];\n        }\n        if (!this.states.has(nextState)) {\n            throw new Error(`Invalid next state name: ${JSON.stringify(nextState)}`);\n        }\n        this.eventHub.willTransition.notify({\n            from: oldState,\n            to: nextState\n        });\n        const [up, down] = distance(this.currentState, nextState);\n        if (up > 0) {\n            this.exit(up);\n        }\n        this.currentStateOrNull = nextState;\n        if (effects !== void 0) {\n            const effectsToRun = effects;\n            this.currentContext.allowPatching((patchableContext)=>{\n                for (const effect of effectsToRun){\n                    if (typeof effect === \"function\") {\n                        effect(patchableContext, event);\n                    } else {\n                        patchableContext.patch(effect);\n                    }\n                }\n            });\n        }\n        if (down > 0) {\n            this.enter(down);\n        }\n    }\n};\n// src/lib/utils.ts\nfunction raise(msg) {\n    throw new Error(msg);\n}\nfunction isPlainObject(blob) {\n    return blob !== null && typeof blob === \"object\" && Object.prototype.toString.call(blob) === \"[object Object]\";\n}\nfunction entries(obj) {\n    return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n    try {\n        return JSON.parse(rawMessage);\n    } catch (e) {\n        return void 0;\n    }\n}\nfunction deepClone(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction b64decode(b64value) {\n    try {\n        const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        const decodedValue = decodeURIComponent(atob(formattedValue).split(\"\").map(function(c) {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return decodedValue;\n    } catch (err) {\n        return atob(b64value);\n    }\n}\nfunction compact(items) {\n    return items.filter((item)=>item !== null && item !== void 0);\n}\nfunction compactObject(obj) {\n    const newObj = {\n        ...obj\n    };\n    Object.keys(obj).forEach((k)=>{\n        const key = k;\n        if (newObj[key] === void 0) {\n            delete newObj[key];\n        }\n    });\n    return newObj;\n}\nasync function withTimeout(promise, millis, errmsg) {\n    let timerID;\n    const timer$ = new Promise((_, reject)=>{\n        timerID = setTimeout(()=>{\n            reject(new Error(errmsg));\n        }, millis);\n    });\n    return Promise.race([\n        promise,\n        timer$\n    ]).finally(()=>clearTimeout(timerID));\n}\n// src/protocol/ServerMsg.ts\nvar ServerMsgCode = /* @__PURE__ */ ((ServerMsgCode2)=>{\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n    ServerMsgCode2[ServerMsgCode2[\"USER_JOINED\"] = 101] = \"USER_JOINED\";\n    ServerMsgCode2[ServerMsgCode2[\"USER_LEFT\"] = 102] = \"USER_LEFT\";\n    ServerMsgCode2[ServerMsgCode2[\"BROADCASTED_EVENT\"] = 103] = \"BROADCASTED_EVENT\";\n    ServerMsgCode2[ServerMsgCode2[\"ROOM_STATE\"] = 104] = \"ROOM_STATE\";\n    ServerMsgCode2[ServerMsgCode2[\"INITIAL_STORAGE_STATE\"] = 200] = \"INITIAL_STORAGE_STATE\";\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n    ServerMsgCode2[ServerMsgCode2[\"REJECT_STORAGE_OP\"] = 299] = \"REJECT_STORAGE_OP\";\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_YDOC\"] = 300] = \"UPDATE_YDOC\";\n    ServerMsgCode2[ServerMsgCode2[\"THREAD_CREATED\"] = 400] = \"THREAD_CREATED\";\n    ServerMsgCode2[ServerMsgCode2[\"THREAD_METADATA_UPDATED\"] = 401] = \"THREAD_METADATA_UPDATED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_CREATED\"] = 402] = \"COMMENT_CREATED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_EDITED\"] = 403] = \"COMMENT_EDITED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_DELETED\"] = 404] = \"COMMENT_DELETED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_ADDED\"] = 405] = \"COMMENT_REACTION_ADDED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_REMOVED\"] = 406] = \"COMMENT_REACTION_REMOVED\";\n    return ServerMsgCode2;\n})(ServerMsgCode || {});\n// src/types/IWebSocket.ts\nvar WebsocketCloseCodes = /* @__PURE__ */ ((WebsocketCloseCodes2)=>{\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_ABNORMAL\"] = 1006] = \"CLOSE_ABNORMAL\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"UNEXPECTED_CONDITION\"] = 1011] = \"UNEXPECTED_CONDITION\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"TRY_AGAIN_LATER\"] = 1013] = \"TRY_AGAIN_LATER\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"INVALID_MESSAGE_FORMAT\"] = 4e3] = \"INVALID_MESSAGE_FORMAT\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"NOT_ALLOWED\"] = 4001] = \"NOT_ALLOWED\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"] = 4002] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"] = 4003] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"] = 4004] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"] = 4005] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"TOKEN_EXPIRED\"] = 4109] = \"TOKEN_EXPIRED\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_WITHOUT_RETRY\"] = 4999] = \"CLOSE_WITHOUT_RETRY\";\n    return WebsocketCloseCodes2;\n})(WebsocketCloseCodes || {});\nfunction shouldDisconnect(code) {\n    return code === 4999 /* CLOSE_WITHOUT_RETRY */  || code >= 4e3 && code < 4100;\n}\nfunction shouldReauth(code) {\n    return code >= 4100 && code < 4200;\n}\nfunction shouldRetryWithoutReauth(code) {\n    return code === 1013 /* TRY_AGAIN_LATER */  || code >= 4200 && code < 4300;\n}\n// src/connection.ts\nfunction isIdle(status) {\n    return status === \"initial\" || status === \"disconnected\";\n}\nfunction newToLegacyStatus(status) {\n    switch(status){\n        case \"connecting\":\n            return \"connecting\";\n        case \"connected\":\n            return \"open\";\n        case \"reconnecting\":\n            return \"unavailable\";\n        case \"disconnected\":\n            return \"failed\";\n        case \"initial\":\n            return \"closed\";\n        default:\n            return \"closed\";\n    }\n}\nfunction toNewConnectionStatus(machine) {\n    const state = machine.currentState;\n    switch(state){\n        case \"@ok.connected\":\n        case \"@ok.awaiting-pong\":\n            return \"connected\";\n        case \"@idle.initial\":\n            return \"initial\";\n        case \"@auth.busy\":\n        case \"@auth.backoff\":\n        case \"@connecting.busy\":\n        case \"@connecting.backoff\":\n        case \"@idle.zombie\":\n            return machine.context.successCount > 0 ? \"reconnecting\" : \"connecting\";\n        case \"@idle.failed\":\n            return \"disconnected\";\n        default:\n            return assertNever(state, \"Unknown state\");\n    }\n}\nvar BACKOFF_DELAYS = [\n    250,\n    500,\n    1e3,\n    2e3,\n    4e3,\n    8e3,\n    1e4\n];\nvar RESET_DELAY = BACKOFF_DELAYS[0] - 1;\nvar BACKOFF_DELAYS_SLOW = [\n    2e3,\n    3e4,\n    6e4,\n    3e5\n];\nvar HEARTBEAT_INTERVAL = 3e4;\nvar PONG_TIMEOUT = 2e3;\nvar AUTH_TIMEOUT = 1e4;\nvar SOCKET_CONNECT_TIMEOUT = 1e4;\nvar StopRetrying = class extends Error {\n    constructor(reason){\n        super(reason);\n    }\n};\nvar LiveblocksError = class extends Error {\n    constructor(message, code){\n        super(message);\n        this.code = code;\n    }\n};\nfunction nextBackoffDelay(currentDelay, delays = BACKOFF_DELAYS) {\n    return delays.find((delay)=>delay > currentDelay) ?? delays[delays.length - 1];\n}\nfunction increaseBackoffDelay(context) {\n    context.patch({\n        backoffDelay: nextBackoffDelay(context.backoffDelay)\n    });\n}\nfunction increaseBackoffDelayAggressively(context) {\n    context.patch({\n        backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS_SLOW)\n    });\n}\nfunction resetSuccessCount(context) {\n    context.patch({\n        successCount: 0\n    });\n}\nfunction log(level, message) {\n    const logger = level === 2 /* ERROR */  ? error2 : level === 1 /* WARN */  ? warn : /* black hole */ ()=>{};\n    return ()=>{\n        logger(message);\n    };\n}\nfunction logPrematureErrorOrCloseEvent(e) {\n    const conn = \"Connection to Liveblocks websocket server\";\n    return (ctx)=>{\n        if (e instanceof Error) {\n            warn(`${conn} could not be established. ${String(e)}`);\n        } else {\n            warn(isCloseEvent(e) ? `${conn} closed prematurely (code: ${e.code}). Retrying in ${ctx.backoffDelay}ms.` : `${conn} could not be established.`);\n        }\n    };\n}\nfunction logCloseEvent(event) {\n    return (ctx)=>{\n        warn(`Connection to Liveblocks websocket server closed (code: ${event.code}). Retrying in ${ctx.backoffDelay}ms.`);\n    };\n}\nvar logPermanentClose = log(1 /* WARN */ , \"Connection to WebSocket closed permanently. Won't retry.\");\nfunction isCloseEvent(error3) {\n    return !(error3 instanceof Error) && error3.type === \"close\";\n}\nfunction enableTracing(machine) {\n    const start = /* @__PURE__ */ new Date().getTime();\n    function log2(...args) {\n        warn(`${((/* @__PURE__ */ new Date().getTime() - start) / 1e3).toFixed(2)} [FSM #${machine.id}]`, ...args);\n    }\n    const unsubs = [\n        machine.events.didReceiveEvent.subscribe((e)=>log2(`Event ${e.type}`)),\n        machine.events.willTransition.subscribe(({ from, to })=>log2(\"Transitioning\", from, \"→\", to)),\n        machine.events.didIgnoreEvent.subscribe((e)=>log2(\"Ignored event\", e.type, e, \"(current state won't handle it)\"))\n    ];\n    return ()=>{\n        for (const unsub of unsubs){\n            unsub();\n        }\n    };\n}\nfunction defineConnectivityEvents(machine) {\n    const statusDidChange = makeEventSource();\n    const didConnect = makeEventSource();\n    const didDisconnect = makeEventSource();\n    let lastStatus = null;\n    const unsubscribe = machine.events.didEnterState.subscribe(()=>{\n        const currStatus = toNewConnectionStatus(machine);\n        if (currStatus !== lastStatus) {\n            statusDidChange.notify(currStatus);\n        }\n        if (lastStatus === \"connected\" && currStatus !== \"connected\") {\n            didDisconnect.notify();\n        } else if (lastStatus !== \"connected\" && currStatus === \"connected\") {\n            didConnect.notify();\n        }\n        lastStatus = currStatus;\n    });\n    return {\n        statusDidChange: statusDidChange.observable,\n        didConnect: didConnect.observable,\n        didDisconnect: didDisconnect.observable,\n        unsubscribe\n    };\n}\nvar assign = (patch)=>(ctx)=>ctx.patch(patch);\nfunction createConnectionStateMachine(delegates, options) {\n    const onMessage = makeEventSource();\n    onMessage.pause();\n    const onLiveblocksError = makeEventSource();\n    function fireErrorEvent(errmsg, errcode) {\n        return ()=>{\n            const err = new LiveblocksError(errmsg, errcode);\n            onLiveblocksError.notify(err);\n        };\n    }\n    const initialContext = {\n        successCount: 0,\n        authValue: null,\n        socket: null,\n        backoffDelay: RESET_DELAY\n    };\n    const machine = new FSM(initialContext).addState(\"@idle.initial\").addState(\"@idle.failed\").addState(\"@idle.zombie\").addState(\"@auth.busy\").addState(\"@auth.backoff\").addState(\"@connecting.busy\").addState(\"@connecting.backoff\").addState(\"@ok.connected\").addState(\"@ok.awaiting-pong\");\n    machine.addTransitions(\"*\", {\n        RECONNECT: {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                resetSuccessCount\n            ]\n        },\n        DISCONNECT: \"@idle.initial\"\n    });\n    machine.onEnter(\"@idle.*\", resetSuccessCount).addTransitions(\"@idle.*\", {\n        CONNECT: (_, ctx)=>// If we still have a known authValue, try to reconnect to the socket directly,\n            // otherwise, try to obtain a new authValue\n            ctx.authValue !== null ? \"@connecting.busy\" : \"@auth.busy\"\n    });\n    machine.addTransitions(\"@auth.backoff\", {\n        NAVIGATOR_ONLINE: {\n            target: \"@auth.busy\",\n            effect: assign({\n                backoffDelay: RESET_DELAY\n            })\n        }\n    }).addTimedTransition(\"@auth.backoff\", (ctx)=>ctx.backoffDelay, \"@auth.busy\").onEnterAsync(\"@auth.busy\", ()=>withTimeout(delegates.authenticate(), AUTH_TIMEOUT, \"Timed out during auth\"), // On successful authentication\n    (okEvent)=>({\n            target: \"@connecting.busy\",\n            effect: assign({\n                authValue: okEvent.data,\n                backoffDelay: RESET_DELAY\n            })\n        }), // Auth failed\n    (failedEvent)=>{\n        if (failedEvent.reason instanceof StopRetrying) {\n            return {\n                target: \"@idle.failed\",\n                effect: [\n                    log(2 /* ERROR */ , failedEvent.reason.message),\n                    fireErrorEvent(failedEvent.reason.message, -1)\n                ]\n            };\n        }\n        return {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                log(2 /* ERROR */ , `Authentication failed: ${failedEvent.reason instanceof Error ? failedEvent.reason.message : String(failedEvent.reason)}`)\n            ]\n        };\n    });\n    const onSocketError = (event)=>machine.send({\n            type: \"EXPLICIT_SOCKET_ERROR\",\n            event\n        });\n    const onSocketClose = (event)=>machine.send({\n            type: \"EXPLICIT_SOCKET_CLOSE\",\n            event\n        });\n    const onSocketMessage = (event)=>event.data === \"pong\" ? machine.send({\n            type: \"PONG\"\n        }) : onMessage.notify(event);\n    function teardownSocket(socket) {\n        if (socket) {\n            socket.removeEventListener(\"error\", onSocketError);\n            socket.removeEventListener(\"close\", onSocketClose);\n            socket.removeEventListener(\"message\", onSocketMessage);\n            socket.close();\n        }\n    }\n    machine.addTransitions(\"@connecting.backoff\", {\n        NAVIGATOR_ONLINE: {\n            target: \"@connecting.busy\",\n            effect: assign({\n                backoffDelay: RESET_DELAY\n            })\n        }\n    }).addTimedTransition(\"@connecting.backoff\", (ctx)=>ctx.backoffDelay, \"@connecting.busy\").onEnterAsync(\"@connecting.busy\", //\n    // Use the \"createSocket\" delegate function (provided to the\n    // ManagedSocket) to create the actual WebSocket connection instance.\n    // Then, set up all the necessary event listeners, and wait for the\n    // \"open\" event to occur.\n    //\n    // When the \"open\" event happens, we're ready to transition to the\n    // OK state. This is done by resolving the Promise.\n    //\n    async (ctx)=>{\n        let capturedPrematureEvent = null;\n        const connect$ = new Promise((resolve, rej)=>{\n            if (ctx.authValue === null) {\n                throw new Error(\"No auth authValue\");\n            }\n            const socket = delegates.createSocket(ctx.authValue);\n            function reject(event) {\n                capturedPrematureEvent = event;\n                socket.removeEventListener(\"message\", onSocketMessage);\n                rej(event);\n            }\n            const [actor$, didReceiveActor] = controlledPromise();\n            if (!options.waitForActorId) {\n                didReceiveActor();\n            }\n            function waitForActorId(event) {\n                const serverMsg = tryParseJson(event.data);\n                if (serverMsg?.type === 104 /* ROOM_STATE */ ) {\n                    didReceiveActor();\n                }\n            }\n            socket.addEventListener(\"message\", onSocketMessage);\n            if (options.waitForActorId) {\n                socket.addEventListener(\"message\", waitForActorId);\n            }\n            socket.addEventListener(\"error\", reject);\n            socket.addEventListener(\"close\", reject);\n            socket.addEventListener(\"open\", ()=>{\n                socket.addEventListener(\"error\", onSocketError);\n                socket.addEventListener(\"close\", onSocketClose);\n                const unsub = ()=>{\n                    socket.removeEventListener(\"error\", reject);\n                    socket.removeEventListener(\"close\", reject);\n                    socket.removeEventListener(\"message\", waitForActorId);\n                };\n                void actor$.then(()=>{\n                    resolve([\n                        socket,\n                        unsub\n                    ]);\n                });\n            });\n        });\n        return withTimeout(connect$, SOCKET_CONNECT_TIMEOUT, \"Timed out during websocket connection\").then(//\n        // Part 3:\n        // By now, our \"open\" event has fired, and the promise has been\n        // resolved. Two possible scenarios:\n        //\n        // 1. The happy path. Most likely.\n        // 2. Uh-oh. A premature close/error event has been observed. Let's\n        //    reject the promise after all.\n        //\n        // Any close/error event that will get scheduled after this point\n        // onwards, will be caught in the OK state, and dealt with\n        // accordingly.\n        //\n        ([socket, unsub])=>{\n            unsub();\n            if (capturedPrematureEvent) {\n                throw capturedPrematureEvent;\n            }\n            return socket;\n        });\n    }, // Only transition to OK state after a successfully opened WebSocket connection\n    (okEvent)=>({\n            target: \"@ok.connected\",\n            effect: assign({\n                socket: okEvent.data,\n                backoffDelay: RESET_DELAY\n            })\n        }), // If the WebSocket connection cannot be established\n    (failure)=>{\n        const err = failure.reason;\n        if (err instanceof StopRetrying) {\n            return {\n                target: \"@idle.failed\",\n                effect: [\n                    log(2 /* ERROR */ , err.message),\n                    fireErrorEvent(err.message, -1)\n                ]\n            };\n        }\n        if (isCloseEvent(err)) {\n            if (err.code === 4109 /* TOKEN_EXPIRED */ ) {\n                return \"@auth.busy\";\n            }\n            if (shouldRetryWithoutReauth(err.code)) {\n                return {\n                    target: \"@connecting.backoff\",\n                    effect: [\n                        increaseBackoffDelayAggressively,\n                        logPrematureErrorOrCloseEvent(err)\n                    ]\n                };\n            }\n            if (shouldDisconnect(err.code)) {\n                return {\n                    target: \"@idle.failed\",\n                    effect: [\n                        log(2 /* ERROR */ , err.reason),\n                        fireErrorEvent(err.reason, err.code)\n                    ]\n                };\n            }\n        }\n        return {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                logPrematureErrorOrCloseEvent(err)\n            ]\n        };\n    });\n    const sendHeartbeat = {\n        target: \"@ok.awaiting-pong\",\n        effect: (ctx)=>{\n            ctx.socket?.send(\"ping\");\n        }\n    };\n    const maybeHeartbeat = ()=>{\n        const doc = typeof document !== \"undefined\" ? document : void 0;\n        const canZombie = doc?.visibilityState === \"hidden\" && delegates.canZombie();\n        return canZombie ? \"@idle.zombie\" : sendHeartbeat;\n    };\n    machine.addTimedTransition(\"@ok.connected\", HEARTBEAT_INTERVAL, maybeHeartbeat).addTransitions(\"@ok.connected\", {\n        NAVIGATOR_OFFLINE: maybeHeartbeat,\n        // Don't take the browser's word for it when it says it's offline. Do a ping/pong to make sure.\n        WINDOW_GOT_FOCUS: sendHeartbeat\n    });\n    machine.addTransitions(\"@idle.zombie\", {\n        WINDOW_GOT_FOCUS: \"@connecting.backoff\"\n    });\n    machine.onEnter(\"@ok.*\", (ctx)=>{\n        ctx.patch({\n            successCount: ctx.successCount + 1\n        });\n        const timerID = setTimeout(// On the next tick, start delivering all messages that have already\n        // been received, and continue synchronous delivery of all future\n        // incoming messages.\n        onMessage.unpause, 0);\n        return (ctx2)=>{\n            teardownSocket(ctx2.socket);\n            ctx2.patch({\n                socket: null\n            });\n            clearTimeout(timerID);\n            onMessage.pause();\n        };\n    }).addTransitions(\"@ok.awaiting-pong\", {\n        PONG: \"@ok.connected\"\n    }).addTimedTransition(\"@ok.awaiting-pong\", PONG_TIMEOUT, {\n        target: \"@connecting.busy\",\n        // Log implicit connection loss and drop the current open socket\n        effect: log(1 /* WARN */ , \"Received no pong from server, assume implicit connection loss.\")\n    }).addTransitions(\"@ok.*\", {\n        // When a socket receives an error, this can cause the closing of the\n        // socket, or not. So always check to see if the socket is still OPEN or\n        // not. When still OPEN, don't transition.\n        EXPLICIT_SOCKET_ERROR: (_, context)=>{\n            if (context.socket?.readyState === 1) {\n                return null;\n            }\n            return {\n                target: \"@connecting.backoff\",\n                effect: increaseBackoffDelay\n            };\n        },\n        EXPLICIT_SOCKET_CLOSE: (e)=>{\n            if (shouldDisconnect(e.event.code)) {\n                return {\n                    target: \"@idle.failed\",\n                    effect: [\n                        logPermanentClose,\n                        fireErrorEvent(e.event.reason, e.event.code)\n                    ]\n                };\n            }\n            if (shouldReauth(e.event.code)) {\n                if (e.event.code === 4109 /* TOKEN_EXPIRED */ ) {\n                    return \"@auth.busy\";\n                } else {\n                    return {\n                        target: \"@auth.backoff\",\n                        effect: [\n                            increaseBackoffDelay,\n                            logCloseEvent(e.event)\n                        ]\n                    };\n                }\n            }\n            if (shouldRetryWithoutReauth(e.event.code)) {\n                return {\n                    target: \"@connecting.backoff\",\n                    effect: [\n                        increaseBackoffDelayAggressively,\n                        logCloseEvent(e.event)\n                    ]\n                };\n            }\n            return {\n                target: \"@connecting.backoff\",\n                effect: [\n                    increaseBackoffDelay,\n                    logCloseEvent(e.event)\n                ]\n            };\n        }\n    });\n    if (typeof document !== \"undefined\") {\n        const doc = typeof document !== \"undefined\" ? document : void 0;\n        const win =  false ? 0 : void 0;\n        const root = win ?? doc;\n        machine.onEnter(\"*\", (ctx)=>{\n            function onNetworkOffline() {\n                machine.send({\n                    type: \"NAVIGATOR_OFFLINE\"\n                });\n            }\n            function onNetworkBackOnline() {\n                machine.send({\n                    type: \"NAVIGATOR_ONLINE\"\n                });\n            }\n            function onVisibilityChange() {\n                if (doc?.visibilityState === \"visible\") {\n                    machine.send({\n                        type: \"WINDOW_GOT_FOCUS\"\n                    });\n                }\n            }\n            win?.addEventListener(\"online\", onNetworkBackOnline);\n            win?.addEventListener(\"offline\", onNetworkOffline);\n            root?.addEventListener(\"visibilitychange\", onVisibilityChange);\n            return ()=>{\n                root?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n                win?.removeEventListener(\"online\", onNetworkBackOnline);\n                win?.removeEventListener(\"offline\", onNetworkOffline);\n                teardownSocket(ctx.socket);\n            };\n        });\n    }\n    const cleanups = [];\n    const { statusDidChange, didConnect, didDisconnect, unsubscribe } = defineConnectivityEvents(machine);\n    cleanups.push(unsubscribe);\n    if (options.enableDebugLogging) {\n        cleanups.push(enableTracing(machine));\n    }\n    machine.start();\n    return {\n        machine,\n        cleanups,\n        // Observable events that will be emitted by this machine\n        events: {\n            statusDidChange,\n            didConnect,\n            didDisconnect,\n            onMessage: onMessage.observable,\n            onLiveblocksError: onLiveblocksError.observable\n        }\n    };\n}\nvar ManagedSocket = class {\n    constructor(delegates, enableDebugLogging = false, waitForActorId = true){\n        const { machine, events, cleanups } = createConnectionStateMachine(delegates, {\n            waitForActorId,\n            enableDebugLogging\n        });\n        this.machine = machine;\n        this.events = events;\n        this.cleanups = cleanups;\n    }\n    getLegacyStatus() {\n        return newToLegacyStatus(this.getStatus());\n    }\n    getStatus() {\n        try {\n            return toNewConnectionStatus(this.machine);\n        } catch  {\n            return \"initial\";\n        }\n    }\n    /**\n   * Returns the current auth authValue.\n   */ get authValue() {\n        return this.machine.context.authValue;\n    }\n    /**\n   * Call this method to try to connect to a WebSocket. This only has an effect\n   * if the machine is idle at the moment, otherwise this is a no-op.\n   */ connect() {\n        this.machine.send({\n            type: \"CONNECT\"\n        });\n    }\n    /**\n   * If idle, will try to connect. Otherwise, it will attempt to reconnect to\n   * the socket, potentially obtaining a new authValue first, if needed.\n   */ reconnect() {\n        this.machine.send({\n            type: \"RECONNECT\"\n        });\n    }\n    /**\n   * Call this method to disconnect from the current WebSocket. Is going to be\n   * a no-op if there is no active connection.\n   */ disconnect() {\n        this.machine.send({\n            type: \"DISCONNECT\"\n        });\n    }\n    /**\n   * Call this to stop the machine and run necessary cleanup functions. After\n   * calling destroy(), you can no longer use this instance. Call this before\n   * letting the instance get garbage collected.\n   */ destroy() {\n        this.machine.stop();\n        let cleanup;\n        while(cleanup = this.cleanups.pop()){\n            cleanup();\n        }\n    }\n    /**\n   * Safely send a message to the current WebSocket connection. Will emit a log\n   * message if this is somehow impossible.\n   */ send(data) {\n        const socket = this.machine.context?.socket;\n        if (socket === null) {\n            warn(\"Cannot send: not connected yet\", data);\n        } else if (socket.readyState !== 1) {\n            warn(\"Cannot send: WebSocket no longer open\", data);\n        } else {\n            socket.send(data);\n        }\n    }\n    /**\n   * NOTE: Used by the E2E app only, to simulate explicit events.\n   * Not ideal to keep exposed :(\n   */ _privateSendMachineEvent(event) {\n        this.machine.send(event);\n    }\n};\n// src/protocol/AuthToken.ts\nfunction canWriteStorage(scopes) {\n    return scopes.includes(\"room:write\" /* Write */ );\n}\nfunction canComment(scopes) {\n    return scopes.includes(\"comments:write\" /* CommentsWrite */ ) || scopes.includes(\"room:write\" /* Write */ );\n}\nfunction isValidAuthTokenPayload(data) {\n    return isPlainObject(data) && (data.k === \"acc\" /* ACCESS_TOKEN */  || data.k === \"id\" /* ID_TOKEN */  || data.k === \"sec-legacy\" /* SECRET_LEGACY */ );\n}\nfunction parseAuthToken(rawTokenString) {\n    const tokenParts = rawTokenString.split(\".\");\n    if (tokenParts.length !== 3) {\n        throw new Error(\"Authentication error: invalid JWT token\");\n    }\n    const payload = tryParseJson(b64decode(tokenParts[1]));\n    if (!(payload && isValidAuthTokenPayload(payload))) {\n        throw new Error(\"Authentication error: expected a valid token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\");\n    }\n    return {\n        raw: rawTokenString,\n        parsed: payload\n    };\n}\n// src/auth-manager.ts\nfunction createAuthManager(authOptions) {\n    const authentication = prepareAuthentication(authOptions);\n    const seenTokens = /* @__PURE__ */ new Set();\n    const tokens = [];\n    const expiryTimes = [];\n    const requestPromises = /* @__PURE__ */ new Map();\n    function reset() {\n        seenTokens.clear();\n        tokens.length = 0;\n        expiryTimes.length = 0;\n        requestPromises.clear();\n    }\n    function hasCorrespondingScopes(requestedScope, scopes) {\n        if (requestedScope === \"comments:read\") {\n            return scopes.includes(\"comments:read\" /* CommentsRead */ ) || scopes.includes(\"comments:write\" /* CommentsWrite */ ) || scopes.includes(\"room:read\" /* Read */ ) || scopes.includes(\"room:write\" /* Write */ );\n        } else if (requestedScope === \"room:read\") {\n            return scopes.includes(\"room:read\" /* Read */ ) || scopes.includes(\"room:write\" /* Write */ );\n        }\n        return false;\n    }\n    function getCachedToken(requestedScope, roomId) {\n        const now = Math.ceil(Date.now() / 1e3);\n        for(let i = tokens.length - 1; i >= 0; i--){\n            const token = tokens[i];\n            const expiresAt = expiryTimes[i];\n            if (expiresAt <= now) {\n                tokens.splice(i, 1);\n                expiryTimes.splice(i, 1);\n                continue;\n            }\n            if (token.parsed.k === \"id\" /* ID_TOKEN */ ) {\n                return token;\n            } else if (token.parsed.k === \"acc\" /* ACCESS_TOKEN */ ) {\n                for (const [resource, scopes] of Object.entries(token.parsed.perms)){\n                    if (resource.includes(\"*\") && roomId.startsWith(resource.replace(\"*\", \"\")) || roomId === resource && hasCorrespondingScopes(requestedScope, scopes)) {\n                        return token;\n                    }\n                }\n            }\n        }\n        return void 0;\n    }\n    async function makeAuthRequest(roomId) {\n        const fetcher = authOptions.polyfills?.fetch ?? ( true ? void 0 : 0);\n        if (authentication.type === \"private\") {\n            if (fetcher === void 0) {\n                throw new StopRetrying(\"To use Liveblocks client in a non-DOM environment with a url as auth endpoint, you need to provide a fetch polyfill.\");\n            }\n            const response = await fetchAuthEndpoint(fetcher, authentication.url, {\n                room: roomId\n            });\n            const parsed = parseAuthToken(response.token);\n            if (seenTokens.has(parsed.raw)) {\n                throw new StopRetrying(\"The same Liveblocks auth token was issued from the backend before. Caching Liveblocks tokens is not supported.\");\n            }\n            return parsed;\n        }\n        if (authentication.type === \"custom\") {\n            const response = await authentication.callback(roomId);\n            if (response && typeof response === \"object\") {\n                if (typeof response.token === \"string\") {\n                    return parseAuthToken(response.token);\n                } else if (typeof response.error === \"string\") {\n                    const reason = `Authentication failed: ${\"reason\" in response && typeof response.reason === \"string\" ? response.reason : \"Forbidden\"}`;\n                    if (response.error === \"forbidden\") {\n                        throw new StopRetrying(reason);\n                    } else {\n                        throw new Error(reason);\n                    }\n                }\n            }\n            throw new Error('Your authentication callback function should return a token, but it did not. Hint: the return value should look like: { token: \"...\" }');\n        }\n        throw new Error(\"Unexpected authentication type. Must be private or custom.\");\n    }\n    async function getAuthValue(requestedScope, roomId) {\n        if (authentication.type === \"public\") {\n            return {\n                type: \"public\",\n                publicApiKey: authentication.publicApiKey\n            };\n        }\n        const cachedToken = getCachedToken(requestedScope, roomId);\n        if (cachedToken !== void 0) {\n            return {\n                type: \"secret\",\n                token: cachedToken\n            };\n        }\n        let currentPromise = requestPromises.get(roomId);\n        if (currentPromise === void 0) {\n            currentPromise = makeAuthRequest(roomId);\n            requestPromises.set(roomId, currentPromise);\n        }\n        try {\n            const token = await currentPromise;\n            const BUFFER = 30;\n            const expiresAt = Math.floor(Date.now() / 1e3) + (token.parsed.exp - token.parsed.iat) - BUFFER;\n            seenTokens.add(token.raw);\n            if (token.parsed.k !== \"sec-legacy\" /* SECRET_LEGACY */ ) {\n                tokens.push(token);\n                expiryTimes.push(expiresAt);\n            }\n            return {\n                type: \"secret\",\n                token\n            };\n        } finally{\n            requestPromises.delete(roomId);\n        }\n    }\n    return {\n        reset,\n        getAuthValue\n    };\n}\nfunction prepareAuthentication(authOptions) {\n    const { publicApiKey, authEndpoint } = authOptions;\n    if (authEndpoint !== void 0 && publicApiKey !== void 0) {\n        throw new Error(\"You cannot simultaneously use `publicApiKey` and `authEndpoint` options. Please pick one and leave the other option unspecified. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\");\n    }\n    if (typeof publicApiKey === \"string\") {\n        if (publicApiKey.startsWith(\"sk_\")) {\n            throw new Error(\"Invalid `publicApiKey` option. The value you passed is a secret key, which should not be used from the client. Please only ever pass a public key here. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\");\n        } else if (!publicApiKey.startsWith(\"pk_\")) {\n            throw new Error(\"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\");\n        }\n        return {\n            type: \"public\",\n            publicApiKey\n        };\n    }\n    if (typeof authEndpoint === \"string\") {\n        return {\n            type: \"private\",\n            url: authEndpoint\n        };\n    } else if (typeof authEndpoint === \"function\") {\n        return {\n            type: \"custom\",\n            callback: authEndpoint\n        };\n    } else if (authEndpoint !== void 0) {\n        throw new Error(\"The `authEndpoint` option must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\");\n    }\n    throw new Error(\"Invalid Liveblocks client options. Please provide either a `publicApiKey` or `authEndpoint` option. They cannot both be empty. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\");\n}\nasync function fetchAuthEndpoint(fetch2, endpoint, body) {\n    const res = await fetch2(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n    if (!res.ok) {\n        const reason = `${(await res.text()).trim() || \"reason not provided in auth response\"} (${res.status} returned by POST ${endpoint})`;\n        if (res.status === 401 || res.status === 403) {\n            throw new StopRetrying(`Unauthorized: ${reason}`);\n        } else {\n            throw new Error(`Failed to authenticate: ${reason}`);\n        }\n    }\n    let data;\n    try {\n        data = await res.json();\n    } catch (er) {\n        throw new Error(`Expected a JSON response when doing a POST request on \"${endpoint}\". ${String(er)}`);\n    }\n    if (!isPlainObject(data) || typeof data.token !== \"string\") {\n        throw new Error(`Expected a JSON response of the form \\`{ token: \"...\" }\\` when doing a POST request on \"${endpoint}\", but got ${JSON.stringify(data)}`);\n    }\n    const { token } = data;\n    return {\n        token\n    };\n}\n// src/constants.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\n// src/devtools/bridge.ts\nvar _bridgeActive = false;\nfunction activateBridge(allowed) {\n    _bridgeActive = allowed;\n}\nfunction sendToPanel(message, options) {\n    if (true) {\n        return;\n    }\n    const fullMsg = {\n        ...message,\n        source: \"liveblocks-devtools-client\"\n    };\n    if (!(options?.force || _bridgeActive)) {\n        return;\n    }\n    window.postMessage(fullMsg, \"*\");\n}\nvar eventSource = makeEventSource();\nif (false) {}\nvar onMessageFromPanel = eventSource.observable;\n// src/devtools/index.ts\nvar VERSION = PKG_VERSION || \"dev\";\nvar _devtoolsSetupHasRun = false;\nfunction setupDevTools(getAllRooms) {\n    if (true) {\n        return;\n    }\n    if (_devtoolsSetupHasRun) {\n        return;\n    }\n    _devtoolsSetupHasRun = true;\n    onMessageFromPanel.subscribe((msg)=>{\n        switch(msg.msg){\n            case \"connect\":\n                {\n                    activateBridge(true);\n                    for (const roomId of getAllRooms()){\n                        sendToPanel({\n                            msg: \"room::available\",\n                            roomId,\n                            clientVersion: VERSION\n                        });\n                    }\n                    break;\n                }\n        }\n    });\n    sendToPanel({\n        msg: \"wake-up-devtools\"\n    }, {\n        force: true\n    });\n}\nvar unsubsByRoomId = /* @__PURE__ */ new Map();\nfunction stopSyncStream(roomId) {\n    const unsubs = unsubsByRoomId.get(roomId) ?? [];\n    unsubsByRoomId.delete(roomId);\n    for (const unsub of unsubs){\n        unsub();\n    }\n}\nfunction startSyncStream(room) {\n    stopSyncStream(room.id);\n    fullSync(room);\n    unsubsByRoomId.set(room.id, [\n        // When the connection status changes\n        room.events.status.subscribe(()=>partialSyncConnection(room)),\n        // When storage initializes, send the update\n        room.events.storageDidLoad.subscribeOnce(()=>partialSyncStorage(room)),\n        // Any time storage updates, send the new storage root\n        room.events.storage.subscribe(()=>partialSyncStorage(room)),\n        // Any time \"me\" or \"others\" updates, send the new values accordingly\n        room.events.self.subscribe(()=>partialSyncMe(room)),\n        room.events.others.subscribe(()=>partialSyncOthers(room)),\n        // Any time ydoc is updated, forward the update\n        room.events.ydoc.subscribe((update)=>syncYdocUpdate(room, update)),\n        // Any time a custom room event is received, forward it\n        room.events.customEvent.subscribe((eventData)=>forwardEvent(room, eventData))\n    ]);\n}\nfunction syncYdocUpdate(room, update) {\n    sendToPanel({\n        msg: \"room::sync::ydoc\",\n        roomId: room.id,\n        update\n    });\n}\nvar loadedAt = Date.now();\nvar eventCounter = 0;\nfunction nextEventId() {\n    return `event-${loadedAt}-${eventCounter++}`;\n}\nfunction forwardEvent(room, eventData) {\n    sendToPanel({\n        msg: \"room::events::custom-event\",\n        roomId: room.id,\n        event: {\n            type: \"CustomEvent\",\n            id: nextEventId(),\n            key: \"Event\",\n            connectionId: eventData.connectionId,\n            payload: eventData.event\n        }\n    });\n}\nfunction partialSyncConnection(room) {\n    sendToPanel({\n        msg: \"room::sync::partial\",\n        roomId: room.id,\n        status: room.getStatus()\n    });\n}\nfunction partialSyncStorage(room) {\n    const root = room.getStorageSnapshot();\n    if (root) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            storage: root.toTreeNode(\"root\").payload\n        });\n    }\n}\nfunction partialSyncMe(room) {\n    const me = room.__internal.getSelf_forDevTools();\n    if (me) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            me\n        });\n    }\n}\nfunction partialSyncOthers(room) {\n    const others = room.__internal.getOthers_forDevTools();\n    if (others) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            others\n        });\n    }\n}\nfunction fullSync(room) {\n    const root = room.getStorageSnapshot();\n    const me = room.__internal.getSelf_forDevTools();\n    const others = room.__internal.getOthers_forDevTools();\n    room.fetchYDoc(\"\");\n    sendToPanel({\n        msg: \"room::sync::full\",\n        roomId: room.id,\n        status: room.getStatus(),\n        storage: root?.toTreeNode(\"root\").payload ?? null,\n        me,\n        others\n    });\n}\nvar roomChannelListeners = /* @__PURE__ */ new Map();\nfunction stopRoomChannelListener(roomId) {\n    const listener = roomChannelListeners.get(roomId);\n    roomChannelListeners.delete(roomId);\n    if (listener) {\n        listener();\n    }\n}\nfunction linkDevTools(roomId, room) {\n    if (true) {\n        return;\n    }\n    sendToPanel({\n        msg: \"room::available\",\n        roomId,\n        clientVersion: VERSION\n    });\n    stopRoomChannelListener(roomId);\n    roomChannelListeners.set(roomId, // Returns the unsubscribe callback, that we store in the\n    // roomChannelListeners registry\n    onMessageFromPanel.subscribe((msg)=>{\n        switch(msg.msg){\n            case \"room::subscribe\":\n                {\n                    if (msg.roomId === roomId) {\n                        startSyncStream(room);\n                    }\n                    break;\n                }\n            case \"room::unsubscribe\":\n                {\n                    if (msg.roomId === roomId) {\n                        stopSyncStream(roomId);\n                    }\n                    break;\n                }\n        }\n    }));\n}\nfunction unlinkDevTools(roomId) {\n    if (true) {\n        return;\n    }\n    stopSyncStream(roomId);\n    stopRoomChannelListener(roomId);\n    sendToPanel({\n        msg: \"room::unavailable\",\n        roomId\n    });\n}\n// src/lib/deprecation.ts\nvar _emittedDeprecationWarnings = /* @__PURE__ */ new Set();\nfunction deprecate(message, key = message) {\n    if (true) {\n        if (!_emittedDeprecationWarnings.has(key)) {\n            _emittedDeprecationWarnings.add(key);\n            errorWithTitle(\"Deprecation warning\", message);\n        }\n    }\n}\nfunction deprecateIf(condition, message, key = message) {\n    if (true) {\n        if (condition) {\n            deprecate(message, key);\n        }\n    }\n}\nfunction throwUsageError(message) {\n    if (true) {\n        const usageError = new Error(message);\n        usageError.name = \"Usage error\";\n        errorWithTitle(\"Usage error\", message);\n        throw usageError;\n    }\n}\nfunction errorIf(condition, message) {\n    if (true) {\n        if (condition) {\n            throwUsageError(message);\n        }\n    }\n}\n// src/comments/comment-body.ts\nfunction isCommentBodyParagraph(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyText(element) {\n    return \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n    return \"type\" in element && element.type === \"link\";\n}\nvar commentBodyElementsGuards = {\n    paragraph: isCommentBodyParagraph,\n    text: isCommentBodyText,\n    link: isCommentBodyLink,\n    mention: isCommentBodyMention\n};\nvar commentBodyElementsTypes = {\n    paragraph: \"block\",\n    text: \"inline\",\n    link: \"inline\",\n    mention: \"inline\"\n};\nfunction traverseCommentBody(body, elementOrVisitor, possiblyVisitor) {\n    if (!body || !body?.content) {\n        return;\n    }\n    const element = typeof elementOrVisitor === \"string\" ? elementOrVisitor : void 0;\n    const type = element ? commentBodyElementsTypes[element] : \"all\";\n    const guard = element ? commentBodyElementsGuards[element] : ()=>true;\n    const visitor = typeof elementOrVisitor === \"function\" ? elementOrVisitor : possiblyVisitor;\n    for (const block of body.content){\n        if (type === \"all\" || type === \"block\") {\n            if (guard(block)) {\n                visitor?.(block);\n            }\n        }\n        if (type === \"all\" || type === \"inline\") {\n            for (const inline of block.children){\n                if (guard(inline)) {\n                    visitor?.(inline);\n                }\n            }\n        }\n    }\n}\nfunction getMentionedIdsFromCommentBody(body) {\n    const mentionedIds = /* @__PURE__ */ new Set();\n    traverseCommentBody(body, \"mention\", (mention)=>mentionedIds.add(mention.id));\n    return Array.from(mentionedIds);\n}\nasync function resolveUsersInCommentBody(body, resolveUsers) {\n    const resolvedUsers = /* @__PURE__ */ new Map();\n    if (!resolveUsers) {\n        return resolvedUsers;\n    }\n    const userIds = getMentionedIdsFromCommentBody(body);\n    const users = await resolveUsers({\n        userIds\n    });\n    for (const [index, userId] of userIds.entries()){\n        const user = users?.[index];\n        if (user) {\n            resolvedUsers.set(userId, user);\n        }\n    }\n    return resolvedUsers;\n}\nvar htmlEscapables = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n};\nvar htmlEscapablesRegex = new RegExp(Object.keys(htmlEscapables).map((entity)=>`\\\\${entity}`).join(\"|\"), \"g\");\nfunction htmlSafe(value) {\n    return new HtmlSafeString([\n        String(value)\n    ], []);\n}\nfunction joinHtml(strings) {\n    if (strings.length <= 0) {\n        return new HtmlSafeString([\n            \"\"\n        ], []);\n    }\n    return new HtmlSafeString([\n        \"\",\n        ...Array(strings.length - 1).fill(\"\"),\n        \"\"\n    ], strings);\n}\nfunction escapeHtml(value) {\n    if (value instanceof HtmlSafeString) {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return joinHtml(value).toString();\n    }\n    return String(value).replace(htmlEscapablesRegex, (character)=>htmlEscapables[character]);\n}\nvar HtmlSafeString = class {\n    constructor(strings, values){\n        this._strings = strings;\n        this._values = values;\n    }\n    toString() {\n        return this._strings.reduce((result, str, i)=>{\n            return result + escapeHtml(nn(this._values[i - 1])) + str;\n        });\n    }\n};\nfunction html(strings, ...values) {\n    return new HtmlSafeString(strings, values);\n}\nvar markdownEscapables = {\n    _: \"\\\\_\",\n    \"*\": \"\\\\*\",\n    \"#\": \"\\\\#\",\n    \"`\": \"\\\\`\",\n    \"~\": \"\\\\~\",\n    \"!\": \"\\\\!\",\n    \"|\": \"\\\\|\",\n    \"(\": \"\\\\(\",\n    \")\": \"\\\\)\",\n    \"{\": \"\\\\{\",\n    \"}\": \"\\\\}\",\n    \"[\": \"\\\\[\",\n    \"]\": \"\\\\]\"\n};\nvar markdownEscapablesRegex = new RegExp(Object.keys(markdownEscapables).map((entity)=>`\\\\${entity}`).join(\"|\"), \"g\");\nfunction joinMarkdown(strings) {\n    if (strings.length <= 0) {\n        return new MarkdownSafeString([\n            \"\"\n        ], []);\n    }\n    return new MarkdownSafeString([\n        \"\",\n        ...Array(strings.length - 1).fill(\"\"),\n        \"\"\n    ], strings);\n}\nfunction escapeMarkdown(value) {\n    if (value instanceof MarkdownSafeString) {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return joinMarkdown(value).toString();\n    }\n    return String(value).replace(markdownEscapablesRegex, (character)=>markdownEscapables[character]);\n}\nvar MarkdownSafeString = class {\n    constructor(strings, values){\n        this._strings = strings;\n        this._values = values;\n    }\n    toString() {\n        return this._strings.reduce((result, str, i)=>{\n            return result + escapeMarkdown(nn(this._values[i - 1])) + str;\n        });\n    }\n};\nfunction markdown(strings, ...values) {\n    return new MarkdownSafeString(strings, values);\n}\nfunction toAbsoluteUrl(url) {\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n        return url;\n    } else if (url.startsWith(\"www.\")) {\n        return \"https://\" + url;\n    }\n    return;\n}\nvar stringifyCommentBodyPlainElements = {\n    paragraph: ({ children })=>children,\n    text: ({ element })=>element.text,\n    link: ({ element })=>element.url,\n    mention: ({ element, user })=>{\n        return `@${user?.name ?? element.id}`;\n    }\n};\nvar stringifyCommentBodyHtmlElements = {\n    paragraph: ({ children })=>{\n        return children ? html`<p>${htmlSafe(children)}</p>` : children;\n    },\n    text: ({ element })=>{\n        let children = element.text;\n        if (!children) {\n            return children;\n        }\n        if (element.bold) {\n            children = html`<strong>${children}</strong>`;\n        }\n        if (element.italic) {\n            children = html`<em>${children}</em>`;\n        }\n        if (element.strikethrough) {\n            children = html`<s>${children}</s>`;\n        }\n        if (element.code) {\n            children = html`<code>${children}</code>`;\n        }\n        return children;\n    },\n    link: ({ element, href })=>{\n        return html`<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">${element.url}</a>`;\n    },\n    mention: ({ element, user })=>{\n        return html`<span data-mention>@${user?.name ?? element.id}</span>`;\n    }\n};\nvar stringifyCommentBodyMarkdownElements = {\n    paragraph: ({ children })=>{\n        return children;\n    },\n    text: ({ element })=>{\n        let children = element.text;\n        if (!children) {\n            return children;\n        }\n        if (element.bold) {\n            children = markdown`**${children}**`;\n        }\n        if (element.italic) {\n            children = markdown`_${children}_`;\n        }\n        if (element.strikethrough) {\n            children = markdown`~~${children}~~`;\n        }\n        if (element.code) {\n            children = markdown`\\`${children}\\``;\n        }\n        return children;\n    },\n    link: ({ element, href })=>{\n        return markdown`[${element.url}](${href})`;\n    },\n    mention: ({ element, user })=>{\n        return markdown`@${user?.name ?? element.id}`;\n    }\n};\nasync function stringifyCommentBody(body, options) {\n    const format = options?.format ?? \"plain\";\n    const separator = options?.separator ?? (format === \"markdown\" ? \"\\n\\n\" : \"\\n\");\n    const elements = {\n        ...format === \"html\" ? stringifyCommentBodyHtmlElements : format === \"markdown\" ? stringifyCommentBodyMarkdownElements : stringifyCommentBodyPlainElements,\n        ...options?.elements\n    };\n    const resolvedUsers = await resolveUsersInCommentBody(body, options?.resolveUsers);\n    const blocks = body.content.flatMap((block, blockIndex)=>{\n        switch(block.type){\n            case \"paragraph\":\n                {\n                    const inlines = block.children.flatMap((inline, inlineIndex)=>{\n                        if (isCommentBodyMention(inline)) {\n                            return inline.id ? [\n                                elements.mention({\n                                    element: inline,\n                                    user: resolvedUsers.get(inline.id)\n                                }, inlineIndex)\n                            ] : [];\n                        }\n                        if (isCommentBodyLink(inline)) {\n                            return [\n                                elements.link({\n                                    element: inline,\n                                    href: toAbsoluteUrl(inline.url) ?? inline.url\n                                }, inlineIndex)\n                            ];\n                        }\n                        if (isCommentBodyText(inline)) {\n                            return [\n                                elements.text({\n                                    element: inline\n                                }, inlineIndex)\n                            ];\n                        }\n                        return [];\n                    });\n                    return [\n                        elements.paragraph({\n                            element: block,\n                            children: inlines.join(\"\")\n                        }, blockIndex)\n                    ];\n                }\n            default:\n                return [];\n        }\n    });\n    return blocks.join(separator);\n}\nfunction convertToCommentData(data) {\n    const editedAt = data.editedAt ? new Date(data.editedAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    const reactions = data.reactions.map((reaction)=>({\n            ...reaction,\n            createdAt: new Date(reaction.createdAt)\n        }));\n    if (data.body) {\n        return {\n            ...data,\n            reactions,\n            createdAt,\n            editedAt\n        };\n    } else {\n        const deletedAt = new Date(data.deletedAt);\n        return {\n            ...data,\n            reactions,\n            createdAt,\n            editedAt,\n            deletedAt\n        };\n    }\n}\nfunction convertToThreadData(data) {\n    const updatedAt = data.updatedAt ? new Date(data.updatedAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    const comments = data.comments.map((comment)=>convertToCommentData(comment));\n    return {\n        ...data,\n        createdAt,\n        updatedAt,\n        comments\n    };\n}\nfunction convertToCommentUserReaction(data) {\n    return {\n        ...data,\n        createdAt: new Date(data.createdAt)\n    };\n}\n// src/comments/index.ts\nfunction getAuthBearerHeaderFromAuthValue(authValue) {\n    if (authValue.type === \"public\") {\n        return authValue.publicApiKey;\n    } else {\n        return authValue.token.raw;\n    }\n}\nvar CommentsApiError = class extends Error {\n    constructor(message, status, details){\n        super(message);\n        this.message = message;\n        this.status = status;\n        this.details = details;\n    }\n};\nfunction createCommentsApi(roomId, getAuthValue, config) {\n    async function fetchJson(endpoint, options) {\n        const response = await fetchApi(roomId, endpoint, options);\n        if (!response.ok) {\n            if (response.status >= 400 && response.status < 600) {\n                let error3;\n                try {\n                    const errorBody = await response.json();\n                    error3 = new CommentsApiError(errorBody.message, response.status, errorBody);\n                } catch  {\n                    error3 = new CommentsApiError(response.statusText, response.status);\n                }\n                throw error3;\n            }\n        }\n        let body;\n        try {\n            body = await response.json();\n        } catch  {\n            body = {};\n        }\n        return body;\n    }\n    async function fetchApi(roomId2, endpoint, options) {\n        const authValue = await getAuthValue();\n        const url = new URL(`/v2/c/rooms/${encodeURIComponent(roomId2)}${endpoint}`, config.baseUrl);\n        return await fetch(url.toString(), {\n            ...options,\n            headers: {\n                ...options?.headers,\n                Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n            }\n        });\n    }\n    async function getThreads(options) {\n        const response = await fetchApi(roomId, \"/threads/search\", {\n            body: JSON.stringify({\n                ...options?.query?.metadata && {\n                    metadata: options.query.metadata\n                }\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\"\n        });\n        if (response.ok) {\n            const json = await response.json();\n            return json.data.map((thread)=>convertToThreadData(thread));\n        } else if (response.status === 404) {\n            return [];\n        } else {\n            throw new Error(\"There was an error while getting threads.\");\n        }\n    }\n    async function createThread({ metadata, body, commentId, threadId }) {\n        const thread = await fetchJson(\"/threads\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: threadId,\n                comment: {\n                    id: commentId,\n                    body\n                },\n                metadata\n            })\n        });\n        return convertToThreadData(thread);\n    }\n    async function editThreadMetadata({ metadata, threadId }) {\n        return await fetchJson(`/threads/${encodeURIComponent(threadId)}/metadata`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(metadata)\n        });\n    }\n    async function createComment({ threadId, commentId, body }) {\n        const comment = await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: commentId,\n                body\n            })\n        });\n        return convertToCommentData(comment);\n    }\n    async function editComment({ threadId, commentId, body }) {\n        const comment = await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                body\n            })\n        });\n        return convertToCommentData(comment);\n    }\n    async function deleteComment({ threadId, commentId }) {\n        await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}`, {\n            method: \"DELETE\"\n        });\n    }\n    async function addReaction({ threadId, commentId, emoji }) {\n        const reaction = await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}/reactions`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                emoji\n            })\n        });\n        return convertToCommentUserReaction(reaction);\n    }\n    async function removeReaction({ threadId, commentId, emoji }) {\n        await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}/reactions/${encodeURIComponent(emoji)}`, {\n            method: \"DELETE\"\n        });\n    }\n    return {\n        getThreads,\n        createThread,\n        editThreadMetadata,\n        createComment,\n        editComment,\n        deleteComment,\n        addReaction,\n        removeReaction\n    };\n}\n// src/lib/position.ts\nvar MIN_CODE = 32;\nvar MAX_CODE = 126;\nvar NUM_DIGITS = MAX_CODE - MIN_CODE + 1;\nvar ZERO = nthDigit(0);\nvar ONE = nthDigit(1);\nvar ZERO_NINE = ZERO + nthDigit(-1);\nfunction nthDigit(n) {\n    const code = MIN_CODE + (n < 0 ? NUM_DIGITS + n : n);\n    if (code < MIN_CODE || code > MAX_CODE) {\n        throw new Error(`Invalid n value: ${n}`);\n    }\n    return String.fromCharCode(code);\n}\nfunction makePosition(x, y) {\n    if (x !== void 0 && y !== void 0) {\n        return between(x, y);\n    } else if (x !== void 0) {\n        return after(x);\n    } else if (y !== void 0) {\n        return before(y);\n    } else {\n        return ONE;\n    }\n}\nfunction before(pos) {\n    const lastIndex = pos.length - 1;\n    for(let i = 0; i <= lastIndex; i++){\n        const code = pos.charCodeAt(i);\n        if (code <= MIN_CODE) {\n            continue;\n        }\n        if (i === lastIndex) {\n            if (code === MIN_CODE + 1) {\n                return pos.substring(0, i) + ZERO_NINE;\n            } else {\n                return pos.substring(0, i) + String.fromCharCode(code - 1);\n            }\n        } else {\n            return pos.substring(0, i + 1);\n        }\n    }\n    return ONE;\n}\nfunction after(pos) {\n    for(let i = 0; i <= pos.length - 1; i++){\n        const code = pos.charCodeAt(i);\n        if (code >= MAX_CODE) {\n            continue;\n        }\n        return pos.substring(0, i) + String.fromCharCode(code + 1);\n    }\n    return pos + ONE;\n}\nfunction between(lo, hi) {\n    if (lo < hi) {\n        return _between(lo, hi);\n    } else if (lo > hi) {\n        return _between(hi, lo);\n    } else {\n        throw new Error(\"Cannot compute value between two equal positions\");\n    }\n}\nfunction _between(lo, hi) {\n    let index = 0;\n    const loLen = lo.length;\n    const hiLen = hi.length;\n    while(true){\n        const loCode = index < loLen ? lo.charCodeAt(index) : MIN_CODE;\n        const hiCode = index < hiLen ? hi.charCodeAt(index) : MAX_CODE;\n        if (loCode === hiCode) {\n            index++;\n            continue;\n        }\n        if (hiCode - loCode === 1) {\n            const size = index + 1;\n            let prefix = lo.substring(0, size);\n            if (prefix.length < size) {\n                prefix += ZERO.repeat(size - prefix.length);\n            }\n            const suffix = lo.substring(size);\n            const nines = \"\";\n            return prefix + _between(suffix, nines);\n        } else {\n            return takeN(lo, index) + String.fromCharCode(hiCode + loCode >> 1);\n        }\n    }\n}\nfunction takeN(pos, n) {\n    return n < pos.length ? pos.substring(0, n) : pos + ZERO.repeat(n - pos.length);\n}\nvar MIN_NON_ZERO_CODE = MIN_CODE + 1;\nfunction isPos(str) {\n    if (str === \"\") {\n        return false;\n    }\n    const lastIdx = str.length - 1;\n    const last = str.charCodeAt(lastIdx);\n    if (last < MIN_NON_ZERO_CODE || last > MAX_CODE) {\n        return false;\n    }\n    for(let i = 0; i < lastIdx; i++){\n        const code = str.charCodeAt(i);\n        if (code < MIN_CODE || code > MAX_CODE) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction convertToPos(str) {\n    const codes = [];\n    for(let i = 0; i < str.length; i++){\n        const code = str.charCodeAt(i);\n        codes.push(code < MIN_CODE ? MIN_CODE : code > MAX_CODE ? MAX_CODE : code);\n    }\n    while(codes.length > 0 && codes[codes.length - 1] === MIN_CODE){\n        codes.length--;\n    }\n    return codes.length > 0 ? String.fromCharCode(...codes) : // Edge case: the str was a 0-only string, which is invalid. Default back to .1\n    ONE;\n}\nfunction asPos(str) {\n    return isPos(str) ? str : convertToPos(str);\n}\n// src/protocol/Op.ts\nvar OpCode = /* @__PURE__ */ ((OpCode2)=>{\n    OpCode2[OpCode2[\"INIT\"] = 0] = \"INIT\";\n    OpCode2[OpCode2[\"SET_PARENT_KEY\"] = 1] = \"SET_PARENT_KEY\";\n    OpCode2[OpCode2[\"CREATE_LIST\"] = 2] = \"CREATE_LIST\";\n    OpCode2[OpCode2[\"UPDATE_OBJECT\"] = 3] = \"UPDATE_OBJECT\";\n    OpCode2[OpCode2[\"CREATE_OBJECT\"] = 4] = \"CREATE_OBJECT\";\n    OpCode2[OpCode2[\"DELETE_CRDT\"] = 5] = \"DELETE_CRDT\";\n    OpCode2[OpCode2[\"DELETE_OBJECT_KEY\"] = 6] = \"DELETE_OBJECT_KEY\";\n    OpCode2[OpCode2[\"CREATE_MAP\"] = 7] = \"CREATE_MAP\";\n    OpCode2[OpCode2[\"CREATE_REGISTER\"] = 8] = \"CREATE_REGISTER\";\n    return OpCode2;\n})(OpCode || {});\nfunction ackOp(opId) {\n    return {\n        type: 5 /* DELETE_CRDT */ ,\n        id: \"ACK\",\n        // (H)ACK\n        opId\n    };\n}\nfunction isAckOp(op) {\n    return op.type === 5 /* DELETE_CRDT */  && op.id === \"ACK\";\n}\n// src/crdts/AbstractCrdt.ts\nfunction crdtAsLiveNode(value) {\n    return value;\n}\nfunction HasParent(node, key, pos = asPos(key)) {\n    return Object.freeze({\n        type: \"HasParent\",\n        node,\n        key,\n        pos\n    });\n}\nvar NoParent = Object.freeze({\n    type: \"NoParent\"\n});\nfunction Orphaned(oldKey, oldPos = asPos(oldKey)) {\n    return Object.freeze({\n        type: \"Orphaned\",\n        oldKey,\n        oldPos\n    });\n}\nvar AbstractCrdt = class {\n    constructor(){\n        /** @internal */ this._parent = NoParent;\n    }\n    /** @internal */ _getParentKeyOrThrow() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.key;\n            case \"NoParent\":\n                throw new Error(\"Parent key is missing\");\n            case \"Orphaned\":\n                return this.parent.oldKey;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ get _parentPos() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.pos;\n            case \"NoParent\":\n                throw new Error(\"Parent key is missing\");\n            case \"Orphaned\":\n                return this.parent.oldPos;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ get _pool() {\n        return this.__pool;\n    }\n    get roomId() {\n        return this.__pool ? this.__pool.roomId : null;\n    }\n    /** @internal */ get _id() {\n        return this.__id;\n    }\n    /** @internal */ get parent() {\n        return this._parent;\n    }\n    /** @internal */ get _parentKey() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.key;\n            case \"NoParent\":\n                return null;\n            case \"Orphaned\":\n                return this.parent.oldKey;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ _apply(op, _isLocal) {\n        switch(op.type){\n            case 5 /* DELETE_CRDT */ :\n                {\n                    if (this.parent.type === \"HasParent\") {\n                        return this.parent.node._detachChild(crdtAsLiveNode(this));\n                    }\n                    return {\n                        modified: false\n                    };\n                }\n        }\n        return {\n            modified: false\n        };\n    }\n    /** @internal */ _setParentLink(newParentNode, newParentKey) {\n        switch(this.parent.type){\n            case \"HasParent\":\n                if (this.parent.node !== newParentNode) {\n                    throw new Error(\"Cannot set parent: node already has a parent\");\n                } else {\n                    this._parent = HasParent(newParentNode, newParentKey);\n                    return;\n                }\n            case \"Orphaned\":\n            case \"NoParent\":\n                {\n                    this._parent = HasParent(newParentNode, newParentKey);\n                    return;\n                }\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ _attach(id, pool) {\n        if (this.__id || this.__pool) {\n            throw new Error(\"Cannot attach node: already attached\");\n        }\n        pool.addNode(id, crdtAsLiveNode(this));\n        this.__id = id;\n        this.__pool = pool;\n    }\n    /** @internal */ _detach() {\n        if (this.__pool && this.__id) {\n            this.__pool.deleteNode(this.__id);\n        }\n        switch(this.parent.type){\n            case \"HasParent\":\n                {\n                    this._parent = Orphaned(this.parent.key, this.parent.pos);\n                    break;\n                }\n            case \"NoParent\":\n                {\n                    this._parent = NoParent;\n                    break;\n                }\n            case \"Orphaned\":\n                {\n                    break;\n                }\n            default:\n                assertNever(this.parent, \"Unknown state\");\n        }\n        this.__pool = void 0;\n    }\n    /**\n   * @internal\n   *\n   * Clear the Immutable cache, so that the next call to `.toImmutable()` will\n   * recompute the equivalent Immutable value again.  Call this after every\n   * mutation to the Live node.\n   */ invalidate() {\n        if (this._cachedImmutable !== void 0 || this._cachedTreeNode !== void 0) {\n            this._cachedImmutable = void 0;\n            this._cachedTreeNode = void 0;\n            if (this.parent.type === \"HasParent\") {\n                this.parent.node.invalidate();\n            }\n        }\n    }\n    /**\n   * @internal\n   *\n   * Return an snapshot of this Live tree for use in DevTools.\n   */ toTreeNode(key) {\n        if (this._cachedTreeNode === void 0 || this._cachedTreeNodeKey !== key) {\n            this._cachedTreeNodeKey = key;\n            this._cachedTreeNode = this._toTreeNode(key);\n        }\n        return this._cachedTreeNode;\n    }\n    /**\n   * Return an immutable snapshot of this Live node and its children.\n   */ toImmutable() {\n        if (this._cachedImmutable === void 0) {\n            this._cachedImmutable = this._toImmutable();\n        }\n        return this._cachedImmutable;\n    }\n};\n// src/protocol/SerializedCrdt.ts\nvar CrdtType = /* @__PURE__ */ ((CrdtType2)=>{\n    CrdtType2[CrdtType2[\"OBJECT\"] = 0] = \"OBJECT\";\n    CrdtType2[CrdtType2[\"LIST\"] = 1] = \"LIST\";\n    CrdtType2[CrdtType2[\"MAP\"] = 2] = \"MAP\";\n    CrdtType2[CrdtType2[\"REGISTER\"] = 3] = \"REGISTER\";\n    return CrdtType2;\n})(CrdtType || {});\nfunction isRootCrdt(crdt) {\n    return crdt.type === 0 /* OBJECT */  && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n    return crdt.parentId !== void 0 && crdt.parentKey !== void 0;\n}\n// src/lib/nanoid.ts\nfunction nanoid(length = 7) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./;[]~!@#$%&*()_+=-\";\n    const len = alphabet.length;\n    return Array.from({\n        length\n    }, ()=>alphabet.charAt(Math.floor(Math.random() * len))).join(\"\");\n}\n// src/crdts/LiveRegister.ts\nvar LiveRegister = class _LiveRegister extends AbstractCrdt {\n    constructor(data){\n        super();\n        this._data = data;\n    }\n    get data() {\n        return this._data;\n    }\n    /** @internal */ static _deserialize([id, item], _parentToChildren, pool) {\n        const register = new _LiveRegister(item.data);\n        register._attach(id, pool);\n        return register;\n    }\n    /** @internal */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize register if parentId or parentKey is undefined\");\n        }\n        return [\n            {\n                type: 8 /* CREATE_REGISTER */ ,\n                opId: pool?.generateOpId(),\n                id: this._id,\n                parentId,\n                parentKey,\n                data: this.data\n            }\n        ];\n    }\n    /** @internal */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n        }\n        return {\n            type: 3 /* REGISTER */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key,\n            data: this.data\n        };\n    }\n    /** @internal */ _attachChild(_op) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @internal */ _detachChild(_crdt) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @internal */ _apply(op, isLocal) {\n        return super._apply(op, isLocal);\n    }\n    /** @internal */ _toTreeNode(key) {\n        return {\n            type: \"Json\",\n            id: this._id ?? nanoid(),\n            key,\n            payload: this._data\n        };\n    }\n    /** @internal */ _toImmutable() {\n        return this._data;\n    }\n    clone() {\n        return deepClone(this.data);\n    }\n};\n// src/crdts/LiveList.ts\nfunction compareNodePosition(itemA, itemB) {\n    const posA = itemA._parentPos;\n    const posB = itemB._parentPos;\n    return posA === posB ? 0 : posA < posB ? -1 : 1;\n}\nvar LiveList = class _LiveList extends AbstractCrdt {\n    constructor(items = []){\n        super();\n        this._items = [];\n        this._implicitlyDeletedItems = /* @__PURE__ */ new WeakSet();\n        this._unacknowledgedSets = /* @__PURE__ */ new Map();\n        let position = void 0;\n        for (const item of items){\n            const newPosition = makePosition(position);\n            const node = lsonToLiveNode(item);\n            node._setParentLink(this, newPosition);\n            this._items.push(node);\n            position = newPosition;\n        }\n    }\n    /** @internal */ static _deserialize([id], parentToChildren, pool) {\n        const list = new _LiveList();\n        list._attach(id, pool);\n        const children = parentToChildren.get(id);\n        if (children === void 0) {\n            return list;\n        }\n        for (const [id2, crdt] of children){\n            const child = deserialize([\n                id2,\n                crdt\n            ], parentToChildren, pool);\n            child._setParentLink(list, crdt.parentKey);\n            list._insertAndSort(child);\n        }\n        return list;\n    }\n    /**\n   * @internal\n   * This function assumes that the resulting ops will be sent to the server if they have an 'opId'\n   * so we mutate _unacknowledgedSets to avoid potential flickering\n   * https://github.com/liveblocks/liveblocks/pull/1177\n   *\n   * This is quite unintuitive and should disappear as soon as\n   * we introduce an explicit LiveList.Set operation\n   */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const ops = [];\n        const op = {\n            id: this._id,\n            opId: pool?.generateOpId(),\n            type: 2 /* CREATE_LIST */ ,\n            parentId,\n            parentKey\n        };\n        ops.push(op);\n        for (const item of this._items){\n            const parentKey2 = item._getParentKeyOrThrow();\n            const childOps = HACK_addIntentAndDeletedIdToOperation(item._toOps(this._id, parentKey2, pool), void 0);\n            const childOpId = childOps[0].opId;\n            if (childOpId !== void 0) {\n                this._unacknowledgedSets.set(parentKey2, childOpId);\n            }\n            ops.push(...childOps);\n        }\n        return ops;\n    }\n    /**\n   * @internal\n   *\n   * Adds a new item into the sorted list, in the correct position.\n   */ _insertAndSort(item) {\n        this._items.push(item);\n        this._sortItems();\n    }\n    /** @internal */ _sortItems() {\n        this._items.sort(compareNodePosition);\n        this.invalidate();\n    }\n    /** @internal */ _indexOfPosition(position) {\n        return this._items.findIndex((item)=>item._getParentKeyOrThrow() === position);\n    }\n    /** @internal */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const item of this._items){\n            item._attach(pool.generateId(), pool);\n        }\n    }\n    /** @internal */ _detach() {\n        super._detach();\n        for (const item of this._items){\n            item._detach();\n        }\n    }\n    /** @internal */ _applySetRemote(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        child._attach(id, this._pool);\n        child._setParentLink(this, key);\n        const deletedId = op.deletedId;\n        const indexOfItemWithSamePosition = this._indexOfPosition(key);\n        if (indexOfItemWithSamePosition !== -1) {\n            const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n            if (itemWithSamePosition._id === deletedId) {\n                itemWithSamePosition._detach();\n                this._items[indexOfItemWithSamePosition] = child;\n                return {\n                    modified: makeUpdate(this, [\n                        setDelta(indexOfItemWithSamePosition, child)\n                    ]),\n                    reverse: []\n                };\n            } else {\n                this._implicitlyDeletedItems.add(itemWithSamePosition);\n                this._items[indexOfItemWithSamePosition] = child;\n                const delta = [\n                    setDelta(indexOfItemWithSamePosition, child)\n                ];\n                const deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);\n                if (deleteDelta2) {\n                    delta.push(deleteDelta2);\n                }\n                return {\n                    modified: makeUpdate(this, delta),\n                    reverse: []\n                };\n            }\n        } else {\n            const updates = [];\n            const deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);\n            if (deleteDelta2) {\n                updates.push(deleteDelta2);\n            }\n            this._insertAndSort(child);\n            updates.push(insertDelta(this._indexOfPosition(key), child));\n            return {\n                reverse: [],\n                modified: makeUpdate(this, updates)\n            };\n        }\n    }\n    /** @internal */ _applySetAck(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const delta = [];\n        const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n        if (deletedDelta) {\n            delta.push(deletedDelta);\n        }\n        const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n        if (unacknowledgedOpId !== void 0) {\n            if (unacknowledgedOpId !== op.opId) {\n                return delta.length === 0 ? {\n                    modified: false\n                } : {\n                    modified: makeUpdate(this, delta),\n                    reverse: []\n                };\n            } else {\n                this._unacknowledgedSets.delete(op.parentKey);\n            }\n        }\n        const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey);\n        const existingItem = this._items.find((item)=>item._id === op.id);\n        if (existingItem !== void 0) {\n            if (existingItem._parentKey === op.parentKey) {\n                return {\n                    modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n                    reverse: []\n                };\n            }\n            if (indexOfItemWithSamePosition !== -1) {\n                this._implicitlyDeletedItems.add(this._items[indexOfItemWithSamePosition]);\n                this._items.splice(indexOfItemWithSamePosition, 1);\n                delta.push(deleteDelta(indexOfItemWithSamePosition));\n            }\n            const previousIndex = this._items.indexOf(existingItem);\n            existingItem._setParentLink(this, op.parentKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(existingItem);\n            if (newIndex !== previousIndex) {\n                delta.push(moveDelta(previousIndex, newIndex, existingItem));\n            }\n            return {\n                modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n                reverse: []\n            };\n        } else {\n            const orphan = this._pool.getNode(op.id);\n            if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n                orphan._setParentLink(this, op.parentKey);\n                this._implicitlyDeletedItems.delete(orphan);\n                this._insertAndSort(orphan);\n                const recreatedItemIndex = this._items.indexOf(orphan);\n                return {\n                    modified: makeUpdate(this, [\n                        // If there is an item at this position, update is a set, else it's an insert\n                        indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),\n                        ...delta\n                    ]),\n                    reverse: []\n                };\n            } else {\n                if (indexOfItemWithSamePosition !== -1) {\n                    this._items.splice(indexOfItemWithSamePosition, 1);\n                }\n                const { newItem, newIndex } = this._createAttachItemAndSort(op, op.parentKey);\n                return {\n                    modified: makeUpdate(this, [\n                        // If there is an item at this position, update is a set, else it's an insert\n                        indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),\n                        ...delta\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /**\n   * Returns the update delta of the deletion or null\n   * @internal\n   */ _detachItemAssociatedToSetOperation(deletedId) {\n        if (deletedId === void 0 || this._pool === void 0) {\n            return null;\n        }\n        const deletedItem = this._pool.getNode(deletedId);\n        if (deletedItem === void 0) {\n            return null;\n        }\n        const result = this._detachChild(deletedItem);\n        if (result.modified === false) {\n            return null;\n        }\n        return result.modified.updates[0];\n    }\n    /** @internal */ _applyRemoteInsert(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const key = asPos(op.parentKey);\n        const existingItemIndex = this._indexOfPosition(key);\n        if (existingItemIndex !== -1) {\n            this._shiftItemPosition(existingItemIndex, key);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n        return {\n            modified: makeUpdate(this, [\n                insertDelta(newIndex, newItem)\n            ]),\n            reverse: []\n        };\n    }\n    /** @internal */ _applyInsertAck(op) {\n        const existingItem = this._items.find((item)=>item._id === op.id);\n        const key = asPos(op.parentKey);\n        const itemIndexAtPosition = this._indexOfPosition(key);\n        if (existingItem) {\n            if (existingItem._parentKey === key) {\n                return {\n                    modified: false\n                };\n            } else {\n                const oldPositionIndex = this._items.indexOf(existingItem);\n                if (itemIndexAtPosition !== -1) {\n                    this._shiftItemPosition(itemIndexAtPosition, key);\n                }\n                existingItem._setParentLink(this, key);\n                this._sortItems();\n                const newIndex = this._indexOfPosition(key);\n                if (newIndex === oldPositionIndex) {\n                    return {\n                        modified: false\n                    };\n                }\n                return {\n                    modified: makeUpdate(this, [\n                        moveDelta(oldPositionIndex, newIndex, existingItem)\n                    ]),\n                    reverse: []\n                };\n            }\n        } else {\n            const orphan = nn(this._pool).getNode(op.id);\n            if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n                orphan._setParentLink(this, key);\n                this._implicitlyDeletedItems.delete(orphan);\n                this._insertAndSort(orphan);\n                const newIndex = this._indexOfPosition(key);\n                return {\n                    modified: makeUpdate(this, [\n                        insertDelta(newIndex, orphan)\n                    ]),\n                    reverse: []\n                };\n            } else {\n                if (itemIndexAtPosition !== -1) {\n                    this._shiftItemPosition(itemIndexAtPosition, key);\n                }\n                const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n                return {\n                    modified: makeUpdate(this, [\n                        insertDelta(newIndex, newItem)\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /** @internal */ _applyInsertUndoRedo(op) {\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        if (this._pool?.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        child._attach(id, nn(this._pool));\n        child._setParentLink(this, key);\n        const existingItemIndex = this._indexOfPosition(key);\n        let newKey = key;\n        if (existingItemIndex !== -1) {\n            const before2 = this._items[existingItemIndex]?._parentPos;\n            const after2 = this._items[existingItemIndex + 1]?._parentPos;\n            newKey = makePosition(before2, after2);\n            child._setParentLink(this, newKey);\n        }\n        this._insertAndSort(child);\n        const newIndex = this._indexOfPosition(newKey);\n        return {\n            modified: makeUpdate(this, [\n                insertDelta(newIndex, child)\n            ]),\n            reverse: [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ]\n        };\n    }\n    /** @internal */ _applySetUndoRedo(op) {\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        if (this._pool?.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        this._unacknowledgedSets.set(key, nn(op.opId));\n        const indexOfItemWithSameKey = this._indexOfPosition(key);\n        child._attach(id, nn(this._pool));\n        child._setParentLink(this, key);\n        const newKey = key;\n        if (indexOfItemWithSameKey !== -1) {\n            const existingItem = this._items[indexOfItemWithSameKey];\n            existingItem._detach();\n            this._items[indexOfItemWithSameKey] = child;\n            const reverse = HACK_addIntentAndDeletedIdToOperation(existingItem._toOps(nn(this._id), key, this._pool), op.id);\n            const delta = [\n                setDelta(indexOfItemWithSameKey, child)\n            ];\n            const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n            if (deletedDelta) {\n                delta.push(deletedDelta);\n            }\n            return {\n                modified: makeUpdate(this, delta),\n                reverse\n            };\n        } else {\n            this._insertAndSort(child);\n            this._detachItemAssociatedToSetOperation(op.deletedId);\n            const newIndex = this._indexOfPosition(newKey);\n            return {\n                reverse: [\n                    {\n                        type: 5 /* DELETE_CRDT */ ,\n                        id\n                    }\n                ],\n                modified: makeUpdate(this, [\n                    insertDelta(newIndex, child)\n                ])\n            };\n        }\n    }\n    /** @internal */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        let result;\n        if (op.intent === \"set\") {\n            if (source === 1 /* REMOTE */ ) {\n                result = this._applySetRemote(op);\n            } else if (source === 2 /* ACK */ ) {\n                result = this._applySetAck(op);\n            } else {\n                result = this._applySetUndoRedo(op);\n            }\n        } else {\n            if (source === 1 /* REMOTE */ ) {\n                result = this._applyRemoteInsert(op);\n            } else if (source === 2 /* ACK */ ) {\n                result = this._applyInsertAck(op);\n            } else {\n                result = this._applyInsertUndoRedo(op);\n            }\n        }\n        if (result.modified !== false) {\n            this.invalidate();\n        }\n        return result;\n    }\n    /** @internal */ _detachChild(child) {\n        if (child) {\n            const parentKey = nn(child._parentKey);\n            const reverse = child._toOps(nn(this._id), parentKey, this._pool);\n            const indexToDelete = this._items.indexOf(child);\n            if (indexToDelete === -1) {\n                return {\n                    modified: false\n                };\n            }\n            this._items.splice(indexToDelete, 1);\n            this.invalidate();\n            child._detach();\n            return {\n                modified: makeUpdate(this, [\n                    deleteDelta(indexToDelete)\n                ]),\n                reverse\n            };\n        }\n        return {\n            modified: false\n        };\n    }\n    /** @internal */ _applySetChildKeyRemote(newKey, child) {\n        if (this._implicitlyDeletedItems.has(child)) {\n            this._implicitlyDeletedItems.delete(child);\n            child._setParentLink(this, newKey);\n            this._insertAndSort(child);\n            const newIndex = this._items.indexOf(child);\n            return {\n                modified: makeUpdate(this, [\n                    insertDelta(newIndex, child)\n                ]),\n                reverse: []\n            };\n        }\n        const previousKey = child._parentKey;\n        if (newKey === previousKey) {\n            return {\n                modified: false\n            };\n        }\n        const existingItemIndex = this._indexOfPosition(newKey);\n        if (existingItemIndex === -1) {\n            const previousIndex = this._items.indexOf(child);\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (newIndex === previousIndex) {\n                return {\n                    modified: false\n                };\n            }\n            return {\n                modified: makeUpdate(this, [\n                    moveDelta(previousIndex, newIndex, child)\n                ]),\n                reverse: []\n            };\n        } else {\n            this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n            const previousIndex = this._items.indexOf(child);\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (newIndex === previousIndex) {\n                return {\n                    modified: false\n                };\n            }\n            return {\n                modified: makeUpdate(this, [\n                    moveDelta(previousIndex, newIndex, child)\n                ]),\n                reverse: []\n            };\n        }\n    }\n    /** @internal */ _applySetChildKeyAck(newKey, child) {\n        const previousKey = nn(child._parentKey);\n        if (this._implicitlyDeletedItems.has(child)) {\n            const existingItemIndex = this._indexOfPosition(newKey);\n            this._implicitlyDeletedItems.delete(child);\n            if (existingItemIndex !== -1) {\n                this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n            }\n            child._setParentLink(this, newKey);\n            this._insertAndSort(child);\n            return {\n                modified: false\n            };\n        } else {\n            if (newKey === previousKey) {\n                return {\n                    modified: false\n                };\n            }\n            const previousIndex = this._items.indexOf(child);\n            const existingItemIndex = this._indexOfPosition(newKey);\n            if (existingItemIndex !== -1) {\n                this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n            }\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (previousIndex === newIndex) {\n                return {\n                    modified: false\n                };\n            } else {\n                return {\n                    modified: makeUpdate(this, [\n                        moveDelta(previousIndex, newIndex, child)\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /** @internal */ _applySetChildKeyUndoRedo(newKey, child) {\n        const previousKey = nn(child._parentKey);\n        const previousIndex = this._items.indexOf(child);\n        const existingItemIndex = this._indexOfPosition(newKey);\n        if (existingItemIndex !== -1) {\n            this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n        }\n        child._setParentLink(this, newKey);\n        this._sortItems();\n        const newIndex = this._items.indexOf(child);\n        if (previousIndex === newIndex) {\n            return {\n                modified: false\n            };\n        }\n        return {\n            modified: makeUpdate(this, [\n                moveDelta(previousIndex, newIndex, child)\n            ]),\n            reverse: [\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(child._id),\n                    parentKey: previousKey\n                }\n            ]\n        };\n    }\n    /** @internal */ _setChildKey(newKey, child, source) {\n        if (source === 1 /* REMOTE */ ) {\n            return this._applySetChildKeyRemote(newKey, child);\n        } else if (source === 2 /* ACK */ ) {\n            return this._applySetChildKeyAck(newKey, child);\n        } else {\n            return this._applySetChildKeyUndoRedo(newKey, child);\n        }\n    }\n    /** @internal */ _apply(op, isLocal) {\n        return super._apply(op, isLocal);\n    }\n    /** @internal */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveList if parent is missing\");\n        }\n        return {\n            type: 1 /* LIST */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key\n        };\n    }\n    /**\n   * Returns the number of elements.\n   */ get length() {\n        return this._items.length;\n    }\n    /**\n   * Adds one element to the end of the LiveList.\n   * @param element The element to add to the end of the LiveList.\n   */ push(element) {\n        this._pool?.assertStorageIsWritable();\n        return this.insert(element, this.length);\n    }\n    /**\n   * Inserts one element at a specified index.\n   * @param element The element to insert.\n   * @param index The index at which you want to insert the element.\n   */ insert(element, index) {\n        this._pool?.assertStorageIsWritable();\n        if (index < 0 || index > this._items.length) {\n            throw new Error(`Cannot insert list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length}`);\n        }\n        const before2 = this._items[index - 1] ? this._items[index - 1]._parentPos : void 0;\n        const after2 = this._items[index] ? this._items[index]._parentPos : void 0;\n        const position = makePosition(before2, after2);\n        const value = lsonToLiveNode(element);\n        value._setParentLink(this, position);\n        this._insertAndSort(value);\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            value._attach(id, this._pool);\n            this._pool.dispatch(value._toOps(this._id, position, this._pool), [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ], /* @__PURE__ */ new Map([\n                [\n                    this._id,\n                    makeUpdate(this, [\n                        insertDelta(index, value)\n                    ])\n                ]\n            ]));\n        }\n    }\n    /**\n   * Move one element from one index to another.\n   * @param index The index of the element to move\n   * @param targetIndex The index where the element should be after moving.\n   */ move(index, targetIndex) {\n        this._pool?.assertStorageIsWritable();\n        if (targetIndex < 0) {\n            throw new Error(\"targetIndex cannot be less than 0\");\n        }\n        if (targetIndex >= this._items.length) {\n            throw new Error(\"targetIndex cannot be greater or equal than the list length\");\n        }\n        if (index < 0) {\n            throw new Error(\"index cannot be less than 0\");\n        }\n        if (index >= this._items.length) {\n            throw new Error(\"index cannot be greater or equal than the list length\");\n        }\n        let beforePosition = null;\n        let afterPosition = null;\n        if (index < targetIndex) {\n            afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._parentPos;\n            beforePosition = this._items[targetIndex]._parentPos;\n        } else {\n            afterPosition = this._items[targetIndex]._parentPos;\n            beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._parentPos;\n        }\n        const position = makePosition(beforePosition, afterPosition);\n        const item = this._items[index];\n        const previousPosition = item._getParentKeyOrThrow();\n        item._setParentLink(this, position);\n        this._sortItems();\n        if (this._pool && this._id) {\n            const storageUpdates = /* @__PURE__ */ new Map([\n                [\n                    this._id,\n                    makeUpdate(this, [\n                        moveDelta(index, targetIndex, item)\n                    ])\n                ]\n            ]);\n            this._pool.dispatch([\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(item._id),\n                    opId: this._pool.generateOpId(),\n                    parentKey: position\n                }\n            ], [\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(item._id),\n                    parentKey: previousPosition\n                }\n            ], storageUpdates);\n        }\n    }\n    /**\n   * Deletes an element at the specified index\n   * @param index The index of the element to delete\n   */ delete(index) {\n        this._pool?.assertStorageIsWritable();\n        if (index < 0 || index >= this._items.length) {\n            throw new Error(`Cannot delete list item at index \"${index}\". index should be between 0 and ${this._items.length - 1}`);\n        }\n        const item = this._items[index];\n        item._detach();\n        this._items.splice(index, 1);\n        this.invalidate();\n        if (this._pool) {\n            const childRecordId = item._id;\n            if (childRecordId) {\n                const storageUpdates = /* @__PURE__ */ new Map();\n                storageUpdates.set(nn(this._id), makeUpdate(this, [\n                    deleteDelta(index)\n                ]));\n                this._pool.dispatch([\n                    {\n                        id: childRecordId,\n                        opId: this._pool.generateOpId(),\n                        type: 5 /* DELETE_CRDT */ \n                    }\n                ], item._toOps(nn(this._id), item._getParentKeyOrThrow()), storageUpdates);\n            }\n        }\n    }\n    clear() {\n        this._pool?.assertStorageIsWritable();\n        if (this._pool) {\n            const ops = [];\n            const reverseOps = [];\n            const updateDelta = [];\n            for (const item of this._items){\n                item._detach();\n                const childId = item._id;\n                if (childId) {\n                    ops.push({\n                        type: 5 /* DELETE_CRDT */ ,\n                        id: childId,\n                        opId: this._pool.generateOpId()\n                    });\n                    reverseOps.push(...item._toOps(nn(this._id), item._getParentKeyOrThrow()));\n                    updateDelta.push(deleteDelta(0));\n                }\n            }\n            this._items = [];\n            this.invalidate();\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta));\n            this._pool.dispatch(ops, reverseOps, storageUpdates);\n        } else {\n            for (const item of this._items){\n                item._detach();\n            }\n            this._items = [];\n            this.invalidate();\n        }\n    }\n    set(index, item) {\n        this._pool?.assertStorageIsWritable();\n        if (index < 0 || index >= this._items.length) {\n            throw new Error(`Cannot set list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length - 1}`);\n        }\n        const existingItem = this._items[index];\n        const position = existingItem._getParentKeyOrThrow();\n        const existingId = existingItem._id;\n        existingItem._detach();\n        const value = lsonToLiveNode(item);\n        value._setParentLink(this, position);\n        this._items[index] = value;\n        this.invalidate();\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            value._attach(id, this._pool);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(this._id, makeUpdate(this, [\n                setDelta(index, value)\n            ]));\n            const ops = HACK_addIntentAndDeletedIdToOperation(value._toOps(this._id, position, this._pool), existingId);\n            this._unacknowledgedSets.set(position, nn(ops[0].opId));\n            const reverseOps = HACK_addIntentAndDeletedIdToOperation(existingItem._toOps(this._id, position, void 0), id);\n            this._pool.dispatch(ops, reverseOps, storageUpdates);\n        }\n    }\n    /**\n   * Returns an Array of all the elements in the LiveList.\n   */ toArray() {\n        return this._items.map((entry)=>liveNodeToLson(entry));\n    }\n    /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   * @param predicate Function to test for each element, taking two arguments (the element and its index).\n   * @returns true if the predicate function returns a truthy value for every element. Otherwise, false.\n   */ every(predicate) {\n        return this.toArray().every(predicate);\n    }\n    /**\n   * Creates an array with all elements that pass the test implemented by the provided function.\n   * @param predicate Function to test each element of the LiveList. Return a value that coerces to true to keep the element, or to false otherwise.\n   * @returns An array with the elements that pass the test.\n   */ filter(predicate) {\n        return this.toArray().filter(predicate);\n    }\n    /**\n   * Returns the first element that satisfies the provided testing function.\n   * @param predicate Function to execute on each value.\n   * @returns The value of the first element in the LiveList that satisfies the provided testing function. Otherwise, undefined is returned.\n   */ find(predicate) {\n        return this.toArray().find(predicate);\n    }\n    /**\n   * Returns the index of the first element in the LiveList that satisfies the provided testing function.\n   * @param predicate Function to execute on each value until the function returns true, indicating that the satisfying element was found.\n   * @returns The index of the first element in the LiveList that passes the test. Otherwise, -1.\n   */ findIndex(predicate) {\n        return this.toArray().findIndex(predicate);\n    }\n    /**\n   * Executes a provided function once for each element.\n   * @param callbackfn Function to execute on each element.\n   */ forEach(callbackfn) {\n        return this.toArray().forEach(callbackfn);\n    }\n    /**\n   * Get the element at the specified index.\n   * @param index The index on the element to get.\n   * @returns The element at the specified index or undefined.\n   */ get(index) {\n        if (index < 0 || index >= this._items.length) {\n            return void 0;\n        }\n        return liveNodeToLson(this._items[index]);\n    }\n    /**\n   * Returns the first index at which a given element can be found in the LiveList, or -1 if it is not present.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index to start the search at.\n   * @returns The first index of the element in the LiveList; -1 if not found.\n   */ indexOf(searchElement, fromIndex) {\n        return this.toArray().indexOf(searchElement, fromIndex);\n    }\n    /**\n   * Returns the last index at which a given element can be found in the LiveList, or -1 if it is not present. The LiveLsit is searched backwards, starting at fromIndex.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index at which to start searching backwards.\n   * @returns\n   */ lastIndexOf(searchElement, fromIndex) {\n        return this.toArray().lastIndexOf(searchElement, fromIndex);\n    }\n    /**\n   * Creates an array populated with the results of calling a provided function on every element.\n   * @param callback Function that is called for every element.\n   * @returns An array with each element being the result of the callback function.\n   */ map(callback) {\n        return this._items.map((entry, i)=>callback(liveNodeToLson(entry), //                    ^^^^^^^^\n            //                    FIXME! This isn't safe.\n            i));\n    }\n    /**\n   * Tests whether at least one element in the LiveList passes the test implemented by the provided function.\n   * @param predicate Function to test for each element.\n   * @returns true if the callback function returns a truthy value for at least one element. Otherwise, false.\n   */ some(predicate) {\n        return this.toArray().some(predicate);\n    }\n    [Symbol.iterator]() {\n        return new LiveListIterator(this._items);\n    }\n    /** @internal */ _createAttachItemAndSort(op, key) {\n        const newItem = creationOpToLiveNode(op);\n        newItem._attach(op.id, nn(this._pool));\n        newItem._setParentLink(this, key);\n        this._insertAndSort(newItem);\n        const newIndex = this._indexOfPosition(key);\n        return {\n            newItem,\n            newIndex\n        };\n    }\n    /** @internal */ _shiftItemPosition(index, key) {\n        const shiftedPosition = makePosition(key, this._items.length > index + 1 ? this._items[index + 1]?._parentPos : void 0);\n        this._items[index]._setParentLink(this, shiftedPosition);\n    }\n    /** @internal */ _toTreeNode(key) {\n        return {\n            type: \"LiveList\",\n            id: this._id ?? nanoid(),\n            key,\n            payload: this._items.map((item, index)=>item.toTreeNode(index.toString()))\n        };\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ _toImmutable() {\n        const result = this._items.map((node)=>node.toImmutable());\n        return  false ? 0 : Object.freeze(result);\n    }\n    clone() {\n        return new _LiveList(this._items.map((item)=>item.clone()));\n    }\n};\nvar LiveListIterator = class {\n    constructor(items){\n        this._innerIterator = items[Symbol.iterator]();\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const result = this._innerIterator.next();\n        if (result.done) {\n            return {\n                done: true,\n                value: void 0\n            };\n        }\n        const value = liveNodeToLson(result.value);\n        return {\n            value\n        };\n    }\n};\nfunction makeUpdate(liveList, deltaUpdates) {\n    return {\n        node: liveList,\n        type: \"LiveList\",\n        updates: deltaUpdates\n    };\n}\nfunction setDelta(index, item) {\n    return {\n        index,\n        type: \"set\",\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction deleteDelta(index) {\n    return {\n        index,\n        type: \"delete\"\n    };\n}\nfunction insertDelta(index, item) {\n    return {\n        index,\n        type: \"insert\",\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction moveDelta(previousIndex, index, item) {\n    return {\n        index,\n        type: \"move\",\n        previousIndex,\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction HACK_addIntentAndDeletedIdToOperation(ops, deletedId) {\n    return ops.map((op, index)=>{\n        if (index === 0) {\n            const firstOp = op;\n            return {\n                ...firstOp,\n                intent: \"set\",\n                deletedId\n            };\n        } else {\n            return op;\n        }\n    });\n}\n// src/lib/freeze.ts\nvar freeze =  false ? /* istanbul ignore next */ 0 : Object.freeze;\n// src/crdts/LiveMap.ts\nvar LiveMap = class _LiveMap extends AbstractCrdt {\n    constructor(entries2){\n        super();\n        this.unacknowledgedSet = /* @__PURE__ */ new Map();\n        if (entries2) {\n            const mappedEntries = [];\n            for (const [key, value] of entries2){\n                const node = lsonToLiveNode(value);\n                node._setParentLink(this, key);\n                mappedEntries.push([\n                    key,\n                    node\n                ]);\n            }\n            this._map = new Map(mappedEntries);\n        } else {\n            this._map = /* @__PURE__ */ new Map();\n        }\n    }\n    /**\n   * @internal\n   */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const ops = [];\n        const op = {\n            id: this._id,\n            opId: pool?.generateOpId(),\n            type: 7 /* CREATE_MAP */ ,\n            parentId,\n            parentKey\n        };\n        ops.push(op);\n        for (const [key, value] of this._map){\n            ops.push(...value._toOps(this._id, key, pool));\n        }\n        return ops;\n    }\n    /**\n   * @internal\n   */ static _deserialize([id, _item], parentToChildren, pool) {\n        const map = new _LiveMap();\n        map._attach(id, pool);\n        const children = parentToChildren.get(id);\n        if (children === void 0) {\n            return map;\n        }\n        for (const [id2, crdt] of children){\n            const child = deserialize([\n                id2,\n                crdt\n            ], parentToChildren, pool);\n            child._setParentLink(map, crdt.parentKey);\n            map._map.set(crdt.parentKey, child);\n            map.invalidate();\n        }\n        return map;\n    }\n    /**\n   * @internal\n   */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const [_key, value] of this._map){\n            if (isLiveNode(value)) {\n                value._attach(pool.generateId(), pool);\n            }\n        }\n    }\n    /**\n   * @internal\n   */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, parentKey, opId } = op;\n        const key = parentKey;\n        const child = creationOpToLiveNode(op);\n        if (this._pool.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        if (source === 2 /* ACK */ ) {\n            const lastUpdateOpId = this.unacknowledgedSet.get(key);\n            if (lastUpdateOpId === opId) {\n                this.unacknowledgedSet.delete(key);\n                return {\n                    modified: false\n                };\n            } else if (lastUpdateOpId !== void 0) {\n                return {\n                    modified: false\n                };\n            }\n        } else if (source === 1 /* REMOTE */ ) {\n            this.unacknowledgedSet.delete(key);\n        }\n        const previousValue = this._map.get(key);\n        let reverse;\n        if (previousValue) {\n            const thisId = nn(this._id);\n            reverse = previousValue._toOps(thisId, key);\n            previousValue._detach();\n        } else {\n            reverse = [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ];\n        }\n        child._setParentLink(this, key);\n        child._attach(id, this._pool);\n        this._map.set(key, child);\n        this.invalidate();\n        return {\n            modified: {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            },\n            reverse\n        };\n    }\n    /**\n   * @internal\n   */ _detach() {\n        super._detach();\n        for (const item of this._map.values()){\n            item._detach();\n        }\n    }\n    /**\n   * @internal\n   */ _detachChild(child) {\n        const id = nn(this._id);\n        const parentKey = nn(child._parentKey);\n        const reverse = child._toOps(id, parentKey, this._pool);\n        for (const [key, value] of this._map){\n            if (value === child) {\n                this._map.delete(key);\n                this.invalidate();\n            }\n        }\n        child._detach();\n        const storageUpdate = {\n            node: this,\n            type: \"LiveMap\",\n            updates: {\n                [parentKey]: {\n                    type: \"delete\"\n                }\n            }\n        };\n        return {\n            modified: storageUpdate,\n            reverse\n        };\n    }\n    /**\n   * @internal\n   */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n        }\n        return {\n            type: 2 /* MAP */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key\n        };\n    }\n    /**\n   * Returns a specified element from the LiveMap.\n   * @param key The key of the element to return.\n   * @returns The element associated with the specified key, or undefined if the key can't be found in the LiveMap.\n   */ get(key) {\n        const value = this._map.get(key);\n        if (value === void 0) {\n            return void 0;\n        }\n        return liveNodeToLson(value);\n    }\n    /**\n   * Adds or updates an element with a specified key and a value.\n   * @param key The key of the element to add. Should be a string.\n   * @param value The value of the element to add. Should be serializable to JSON.\n   */ set(key, value) {\n        this._pool?.assertStorageIsWritable();\n        const oldValue = this._map.get(key);\n        if (oldValue) {\n            oldValue._detach();\n        }\n        const item = lsonToLiveNode(value);\n        item._setParentLink(this, key);\n        this._map.set(key, item);\n        this.invalidate();\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            item._attach(id, this._pool);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(this._id, {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            });\n            const ops = item._toOps(this._id, key, this._pool);\n            this.unacknowledgedSet.set(key, nn(ops[0].opId));\n            this._pool.dispatch(item._toOps(this._id, key, this._pool), oldValue ? oldValue._toOps(this._id, key) : [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ], storageUpdates);\n        }\n    }\n    /**\n   * Returns the number of elements in the LiveMap.\n   */ get size() {\n        return this._map.size;\n    }\n    /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key The key of the element to test for presence.\n   */ has(key) {\n        return this._map.has(key);\n    }\n    /**\n   * Removes the specified element by key.\n   * @param key The key of the element to remove.\n   * @returns true if an element existed and has been removed, or false if the element does not exist.\n   */ delete(key) {\n        this._pool?.assertStorageIsWritable();\n        const item = this._map.get(key);\n        if (item === void 0) {\n            return false;\n        }\n        item._detach();\n        this._map.delete(key);\n        this.invalidate();\n        if (this._pool && item._id) {\n            const thisId = nn(this._id);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(thisId, {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"delete\"\n                    }\n                }\n            });\n            this._pool.dispatch([\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id: item._id,\n                    opId: this._pool.generateOpId()\n                }\n            ], item._toOps(thisId, key), storageUpdates);\n        }\n        return true;\n    }\n    /**\n   * Returns a new Iterator object that contains the [key, value] pairs for each element.\n   */ entries() {\n        const innerIterator = this._map.entries();\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                const iteratorValue = innerIterator.next();\n                if (iteratorValue.done) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const entry = iteratorValue.value;\n                const key = entry[0];\n                const value = liveNodeToLson(iteratorValue.value[1]);\n                return {\n                    value: [\n                        key,\n                        value\n                    ]\n                };\n            }\n        };\n    }\n    /**\n   * Same function object as the initial value of the entries method.\n   */ [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n   * Returns a new Iterator object that contains the keys for each element.\n   */ keys() {\n        return this._map.keys();\n    }\n    /**\n   * Returns a new Iterator object that contains the values for each element.\n   */ values() {\n        const innerIterator = this._map.values();\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                const iteratorValue = innerIterator.next();\n                if (iteratorValue.done) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const value = liveNodeToLson(iteratorValue.value);\n                return {\n                    value\n                };\n            }\n        };\n    }\n    /**\n   * Executes a provided function once per each key/value pair in the Map object, in insertion order.\n   * @param callback Function to execute for each entry in the map.\n   */ forEach(callback) {\n        for (const entry of this){\n            callback(entry[1], entry[0], this);\n        }\n    }\n    /** @internal */ _toTreeNode(key) {\n        return {\n            type: \"LiveMap\",\n            id: this._id ?? nanoid(),\n            key,\n            payload: Array.from(this._map.entries()).map(([key2, val])=>val.toTreeNode(key2))\n        };\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ _toImmutable() {\n        const result = /* @__PURE__ */ new Map();\n        for (const [key, value] of this._map){\n            result.set(key, value.toImmutable());\n        }\n        return freeze(result);\n    }\n    clone() {\n        return new _LiveMap(Array.from(this._map).map(([key, node])=>[\n                key,\n                node.clone()\n            ]));\n    }\n};\n// src/crdts/LiveObject.ts\nvar LiveObject = class _LiveObject extends AbstractCrdt {\n    constructor(obj = {}){\n        super();\n        this._propToLastUpdate = /* @__PURE__ */ new Map();\n        for(const key in obj){\n            const value = obj[key];\n            if (value === void 0) {\n                continue;\n            } else if (isLiveNode(value)) {\n                value._setParentLink(this, key);\n            }\n        }\n        this._map = new Map(Object.entries(obj));\n    }\n    /** @internal */ static _buildRootAndParentToChildren(items) {\n        const parentToChildren = /* @__PURE__ */ new Map();\n        let root = null;\n        for (const [id, crdt] of items){\n            if (isRootCrdt(crdt)) {\n                root = [\n                    id,\n                    crdt\n                ];\n            } else {\n                const tuple = [\n                    id,\n                    crdt\n                ];\n                const children = parentToChildren.get(crdt.parentId);\n                if (children !== void 0) {\n                    children.push(tuple);\n                } else {\n                    parentToChildren.set(crdt.parentId, [\n                        tuple\n                    ]);\n                }\n            }\n        }\n        if (root === null) {\n            throw new Error(\"Root can't be null\");\n        }\n        return [\n            root,\n            parentToChildren\n        ];\n    }\n    /** @internal */ static _fromItems(items, pool) {\n        const [root, parentToChildren] = _LiveObject._buildRootAndParentToChildren(items);\n        return _LiveObject._deserialize(root, parentToChildren, pool);\n    }\n    /** @internal */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const opId = pool?.generateOpId();\n        const ops = [];\n        const op = {\n            type: 4 /* CREATE_OBJECT */ ,\n            id: this._id,\n            opId,\n            parentId,\n            parentKey,\n            data: {}\n        };\n        ops.push(op);\n        for (const [key, value] of this._map){\n            if (isLiveNode(value)) {\n                ops.push(...value._toOps(this._id, key, pool));\n            } else {\n                op.data[key] = value;\n            }\n        }\n        return ops;\n    }\n    /** @internal */ static _deserialize([id, item], parentToChildren, pool) {\n        const liveObj = new _LiveObject(item.data);\n        liveObj._attach(id, pool);\n        return this._deserializeChildren(liveObj, parentToChildren, pool);\n    }\n    /** @internal */ static _deserializeChildren(liveObj, parentToChildren, pool) {\n        const children = parentToChildren.get(nn(liveObj._id));\n        if (children === void 0) {\n            return liveObj;\n        }\n        for (const [id, crdt] of children){\n            const child = deserializeToLson([\n                id,\n                crdt\n            ], parentToChildren, pool);\n            if (isLiveStructure(child)) {\n                child._setParentLink(liveObj, crdt.parentKey);\n            }\n            liveObj._map.set(crdt.parentKey, child);\n            liveObj.invalidate();\n        }\n        return liveObj;\n    }\n    /** @internal */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const [_key, value] of this._map){\n            if (isLiveNode(value)) {\n                value._attach(pool.generateId(), pool);\n            }\n        }\n    }\n    /** @internal */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, opId, parentKey: key } = op;\n        const child = creationOpToLson(op);\n        if (this._pool.getNode(id) !== void 0) {\n            if (this._propToLastUpdate.get(key) === opId) {\n                this._propToLastUpdate.delete(key);\n            }\n            return {\n                modified: false\n            };\n        }\n        if (source === 0 /* UNDOREDO_RECONNECT */ ) {\n            this._propToLastUpdate.set(key, nn(opId));\n        } else if (this._propToLastUpdate.get(key) === void 0) {} else if (this._propToLastUpdate.get(key) === opId) {\n            this._propToLastUpdate.delete(key);\n            return {\n                modified: false\n            };\n        } else {\n            return {\n                modified: false\n            };\n        }\n        const thisId = nn(this._id);\n        const previousValue = this._map.get(key);\n        let reverse;\n        if (isLiveNode(previousValue)) {\n            reverse = previousValue._toOps(thisId, key);\n            previousValue._detach();\n        } else if (previousValue === void 0) {\n            reverse = [\n                {\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id: thisId,\n                    key\n                }\n            ];\n        } else {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    id: thisId,\n                    data: {\n                        [key]: previousValue\n                    }\n                }\n            ];\n        }\n        this._map.set(key, child);\n        this.invalidate();\n        if (isLiveStructure(child)) {\n            child._setParentLink(this, key);\n            child._attach(id, this._pool);\n        }\n        return {\n            reverse,\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            }\n        };\n    }\n    /** @internal */ _detachChild(child) {\n        if (child) {\n            const id = nn(this._id);\n            const parentKey = nn(child._parentKey);\n            const reverse = child._toOps(id, parentKey, this._pool);\n            for (const [key, value] of this._map){\n                if (value === child) {\n                    this._map.delete(key);\n                    this.invalidate();\n                }\n            }\n            child._detach();\n            const storageUpdate = {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [parentKey]: {\n                        type: \"delete\"\n                    }\n                }\n            };\n            return {\n                modified: storageUpdate,\n                reverse\n            };\n        }\n        return {\n            modified: false\n        };\n    }\n    /**\n   * @internal\n   */ _detach() {\n        super._detach();\n        for (const value of this._map.values()){\n            if (isLiveNode(value)) {\n                value._detach();\n            }\n        }\n    }\n    /** @internal */ _apply(op, isLocal) {\n        if (op.type === 3 /* UPDATE_OBJECT */ ) {\n            return this._applyUpdate(op, isLocal);\n        } else if (op.type === 6 /* DELETE_OBJECT_KEY */ ) {\n            return this._applyDeleteObjectKey(op, isLocal);\n        }\n        return super._apply(op, isLocal);\n    }\n    /**\n   * @internal\n   */ _serialize() {\n        const data = {};\n        for (const [key, value] of this._map){\n            if (!isLiveNode(value)) {\n                data[key] = value;\n            }\n        }\n        if (this.parent.type === \"HasParent\" && this.parent.node._id) {\n            return {\n                type: 0 /* OBJECT */ ,\n                parentId: this.parent.node._id,\n                parentKey: this.parent.key,\n                data\n            };\n        } else {\n            return {\n                type: 0 /* OBJECT */ ,\n                data\n            };\n        }\n    }\n    /** @internal */ _applyUpdate(op, isLocal) {\n        let isModified = false;\n        const id = nn(this._id);\n        const reverse = [];\n        const reverseUpdate = {\n            type: 3 /* UPDATE_OBJECT */ ,\n            id,\n            data: {}\n        };\n        for(const key in op.data){\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                reverse.push(...oldValue._toOps(id, key));\n                oldValue._detach();\n            } else if (oldValue !== void 0) {\n                reverseUpdate.data[key] = oldValue;\n            } else if (oldValue === void 0) {\n                reverse.push({\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id,\n                    key\n                });\n            }\n        }\n        const updateDelta = {};\n        for(const key in op.data){\n            const value = op.data[key];\n            if (value === void 0) {\n                continue;\n            }\n            if (isLocal) {\n                this._propToLastUpdate.set(key, nn(op.opId));\n            } else if (this._propToLastUpdate.get(key) === void 0) {\n                isModified = true;\n            } else if (this._propToLastUpdate.get(key) === op.opId) {\n                this._propToLastUpdate.delete(key);\n                continue;\n            } else {\n                continue;\n            }\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                oldValue._detach();\n            }\n            isModified = true;\n            updateDelta[key] = {\n                type: \"update\"\n            };\n            this._map.set(key, value);\n            this.invalidate();\n        }\n        if (Object.keys(reverseUpdate.data).length !== 0) {\n            reverse.unshift(reverseUpdate);\n        }\n        return isModified ? {\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: updateDelta\n            },\n            reverse\n        } : {\n            modified: false\n        };\n    }\n    /** @internal */ _applyDeleteObjectKey(op, isLocal) {\n        const key = op.key;\n        if (this._map.has(key) === false) {\n            return {\n                modified: false\n            };\n        }\n        if (!isLocal && this._propToLastUpdate.get(key) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        const oldValue = this._map.get(key);\n        const id = nn(this._id);\n        let reverse = [];\n        if (isLiveNode(oldValue)) {\n            reverse = oldValue._toOps(id, op.key);\n            oldValue._detach();\n        } else if (oldValue !== void 0) {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    id,\n                    data: {\n                        [key]: oldValue\n                    }\n                }\n            ];\n        }\n        this._map.delete(key);\n        this.invalidate();\n        return {\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [op.key]: {\n                        type: \"delete\"\n                    }\n                }\n            },\n            reverse\n        };\n    }\n    /**\n   * Transform the LiveObject into a javascript object\n   */ toObject() {\n        return Object.fromEntries(this._map);\n    }\n    /**\n   * Adds or updates a property with a specified key and a value.\n   * @param key The key of the property to add\n   * @param value The value of the property to add\n   */ set(key, value) {\n        this._pool?.assertStorageIsWritable();\n        this.update({\n            [key]: value\n        });\n    }\n    /**\n   * Returns a specified property from the LiveObject.\n   * @param key The key of the property to get\n   */ get(key) {\n        return this._map.get(key);\n    }\n    /**\n   * Deletes a key from the LiveObject\n   * @param key The key of the property to delete\n   */ delete(key) {\n        this._pool?.assertStorageIsWritable();\n        const keyAsString = key;\n        const oldValue = this._map.get(keyAsString);\n        if (oldValue === void 0) {\n            return;\n        }\n        if (this._pool === void 0 || this._id === void 0) {\n            if (isLiveNode(oldValue)) {\n                oldValue._detach();\n            }\n            this._map.delete(keyAsString);\n            this.invalidate();\n            return;\n        }\n        let reverse;\n        if (isLiveNode(oldValue)) {\n            oldValue._detach();\n            reverse = oldValue._toOps(this._id, keyAsString);\n        } else {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    data: {\n                        [keyAsString]: oldValue\n                    },\n                    id: this._id\n                }\n            ];\n        }\n        this._map.delete(keyAsString);\n        this.invalidate();\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(this._id, {\n            node: this,\n            type: \"LiveObject\",\n            updates: {\n                [key]: {\n                    type: \"delete\"\n                }\n            }\n        });\n        this._pool.dispatch([\n            {\n                type: 6 /* DELETE_OBJECT_KEY */ ,\n                key: keyAsString,\n                id: this._id,\n                opId: this._pool.generateOpId()\n            }\n        ], reverse, storageUpdates);\n    }\n    /**\n   * Adds or updates multiple properties at once with an object.\n   * @param patch The object used to overrides properties\n   */ update(patch) {\n        this._pool?.assertStorageIsWritable();\n        if (this._pool === void 0 || this._id === void 0) {\n            for(const key in patch){\n                const newValue = patch[key];\n                if (newValue === void 0) {\n                    continue;\n                }\n                const oldValue = this._map.get(key);\n                if (isLiveNode(oldValue)) {\n                    oldValue._detach();\n                }\n                if (isLiveNode(newValue)) {\n                    newValue._setParentLink(this, key);\n                }\n                this._map.set(key, newValue);\n                this.invalidate();\n            }\n            return;\n        }\n        const ops = [];\n        const reverseOps = [];\n        const opId = this._pool.generateOpId();\n        const updatedProps = {};\n        const reverseUpdateOp = {\n            id: this._id,\n            type: 3 /* UPDATE_OBJECT */ ,\n            data: {}\n        };\n        const updateDelta = {};\n        for(const key in patch){\n            const newValue = patch[key];\n            if (newValue === void 0) {\n                continue;\n            }\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                reverseOps.push(...oldValue._toOps(this._id, key));\n                oldValue._detach();\n            } else if (oldValue === void 0) {\n                reverseOps.push({\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id: this._id,\n                    key\n                });\n            } else {\n                reverseUpdateOp.data[key] = oldValue;\n            }\n            if (isLiveNode(newValue)) {\n                newValue._setParentLink(this, key);\n                newValue._attach(this._pool.generateId(), this._pool);\n                const newAttachChildOps = newValue._toOps(this._id, key, this._pool);\n                const createCrdtOp = newAttachChildOps.find((op)=>op.parentId === this._id);\n                if (createCrdtOp) {\n                    this._propToLastUpdate.set(key, nn(createCrdtOp.opId));\n                }\n                ops.push(...newAttachChildOps);\n            } else {\n                updatedProps[key] = newValue;\n                this._propToLastUpdate.set(key, opId);\n            }\n            this._map.set(key, newValue);\n            this.invalidate();\n            updateDelta[key] = {\n                type: \"update\"\n            };\n        }\n        if (Object.keys(reverseUpdateOp.data).length !== 0) {\n            reverseOps.unshift(reverseUpdateOp);\n        }\n        if (Object.keys(updatedProps).length !== 0) {\n            ops.unshift({\n                opId,\n                id: this._id,\n                type: 3 /* UPDATE_OBJECT */ ,\n                data: updatedProps\n            });\n        }\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(this._id, {\n            node: this,\n            type: \"LiveObject\",\n            updates: updateDelta\n        });\n        this._pool.dispatch(ops, reverseOps, storageUpdates);\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ toTreeNode(key) {\n        return super.toTreeNode(key);\n    }\n    /** @internal */ _toTreeNode(key) {\n        const nodeId = this._id ?? nanoid();\n        return {\n            type: \"LiveObject\",\n            id: nodeId,\n            key,\n            payload: Array.from(this._map.entries()).map(([key2, value])=>isLiveNode(value) ? value.toTreeNode(key2) : {\n                    type: \"Json\",\n                    id: `${nodeId}:${key2}`,\n                    key: key2,\n                    payload: value\n                })\n        };\n    }\n    /** @internal */ _toImmutable() {\n        const result = {};\n        for (const [key, val] of this._map){\n            result[key] = isLiveStructure(val) ? val.toImmutable() : val;\n        }\n        return  false ? 0 : Object.freeze(result);\n    }\n    clone() {\n        return new _LiveObject(Object.fromEntries(Array.from(this._map).map(([key, value])=>[\n                key,\n                isLiveStructure(value) ? value.clone() : deepClone(value)\n            ])));\n    }\n};\n// src/crdts/liveblocks-helpers.ts\nfunction creationOpToLiveNode(op) {\n    return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n    switch(op.type){\n        case 8 /* CREATE_REGISTER */ :\n            return op.data;\n        case 4 /* CREATE_OBJECT */ :\n            return new LiveObject(op.data);\n        case 7 /* CREATE_MAP */ :\n            return new LiveMap();\n        case 2 /* CREATE_LIST */ :\n            return new LiveList();\n        default:\n            return assertNever(op, \"Unknown creation Op\");\n    }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n    if (node === parent) {\n        return true;\n    }\n    if (node.parent.type === \"HasParent\") {\n        return isSameNodeOrChildOf(node.parent.node, parent);\n    }\n    return false;\n}\nfunction deserialize([id, crdt], parentToChildren, pool) {\n    switch(crdt.type){\n        case 0 /* OBJECT */ :\n            {\n                return LiveObject._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 1 /* LIST */ :\n            {\n                return LiveList._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 2 /* MAP */ :\n            {\n                return LiveMap._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 3 /* REGISTER */ :\n            {\n                return LiveRegister._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        default:\n            {\n                throw new Error(\"Unexpected CRDT type\");\n            }\n    }\n}\nfunction deserializeToLson([id, crdt], parentToChildren, pool) {\n    switch(crdt.type){\n        case 0 /* OBJECT */ :\n            {\n                return LiveObject._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 1 /* LIST */ :\n            {\n                return LiveList._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 2 /* MAP */ :\n            {\n                return LiveMap._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 3 /* REGISTER */ :\n            {\n                return crdt.data;\n            }\n        default:\n            {\n                throw new Error(\"Unexpected CRDT type\");\n            }\n    }\n}\nfunction isLiveStructure(value) {\n    return isLiveList(value) || isLiveMap(value) || isLiveObject(value);\n}\nfunction isLiveNode(value) {\n    return isLiveStructure(value) || isLiveRegister(value);\n}\nfunction isLiveList(value) {\n    return value instanceof LiveList;\n}\nfunction isLiveMap(value) {\n    return value instanceof LiveMap;\n}\nfunction isLiveObject(value) {\n    return value instanceof LiveObject;\n}\nfunction isLiveRegister(value) {\n    return value instanceof LiveRegister;\n}\nfunction cloneLson(value) {\n    return value === void 0 ? void 0 : isLiveStructure(value) ? value.clone() : deepClone(value);\n}\nfunction liveNodeToLson(obj) {\n    if (obj instanceof LiveRegister) {\n        return obj.data;\n    } else if (obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject) {\n        return obj;\n    } else {\n        return assertNever(obj, \"Unknown AbstractCrdt\");\n    }\n}\nfunction lsonToLiveNode(value) {\n    if (value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList) {\n        return value;\n    } else {\n        return new LiveRegister(value);\n    }\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n    const ops = [];\n    currentItems.forEach((_, id)=>{\n        if (!newItems.get(id)) {\n            ops.push({\n                type: 5 /* DELETE_CRDT */ ,\n                id\n            });\n        }\n    });\n    newItems.forEach((crdt, id)=>{\n        const currentCrdt = currentItems.get(id);\n        if (currentCrdt) {\n            if (crdt.type === 0 /* OBJECT */ ) {\n                if (currentCrdt.type !== 0 /* OBJECT */  || JSON.stringify(crdt.data) !== JSON.stringify(currentCrdt.data)) {\n                    ops.push({\n                        type: 3 /* UPDATE_OBJECT */ ,\n                        id,\n                        data: crdt.data\n                    });\n                }\n            }\n            if (crdt.parentKey !== currentCrdt.parentKey) {\n                ops.push({\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id,\n                    parentKey: nn(crdt.parentKey, \"Parent key must not be missing\")\n                });\n            }\n        } else {\n            switch(crdt.type){\n                case 3 /* REGISTER */ :\n                    ops.push({\n                        type: 8 /* CREATE_REGISTER */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey,\n                        data: crdt.data\n                    });\n                    break;\n                case 1 /* LIST */ :\n                    ops.push({\n                        type: 2 /* CREATE_LIST */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey\n                    });\n                    break;\n                case 0 /* OBJECT */ :\n                    if (crdt.parentId === void 0 || crdt.parentKey === void 0) {\n                        throw new Error(\"Internal error. Cannot serialize storage root into an operation\");\n                    }\n                    ops.push({\n                        type: 4 /* CREATE_OBJECT */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey,\n                        data: crdt.data\n                    });\n                    break;\n                case 2 /* MAP */ :\n                    ops.push({\n                        type: 7 /* CREATE_MAP */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey\n                    });\n                    break;\n            }\n        }\n    });\n    return ops;\n}\nfunction mergeObjectStorageUpdates(first, second) {\n    const updates = first.updates;\n    for (const [key, value] of entries(second.updates)){\n        updates[key] = value;\n    }\n    return {\n        ...second,\n        updates\n    };\n}\nfunction mergeMapStorageUpdates(first, second) {\n    const updates = first.updates;\n    for (const [key, value] of entries(second.updates)){\n        updates[key] = value;\n    }\n    return {\n        ...second,\n        updates\n    };\n}\nfunction mergeListStorageUpdates(first, second) {\n    const updates = first.updates;\n    return {\n        ...second,\n        updates: updates.concat(second.updates)\n    };\n}\nfunction mergeStorageUpdates(first, second) {\n    if (first === void 0) {\n        return second;\n    }\n    if (first.type === \"LiveObject\" && second.type === \"LiveObject\") {\n        return mergeObjectStorageUpdates(first, second);\n    } else if (first.type === \"LiveMap\" && second.type === \"LiveMap\") {\n        return mergeMapStorageUpdates(first, second);\n    } else if (first.type === \"LiveList\" && second.type === \"LiveList\") {\n        return mergeListStorageUpdates(first, second);\n    } else {}\n    return second;\n}\nfunction isPlain(value) {\n    const type = typeof value;\n    return value === void 0 || value === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(value) || isPlainObject(value);\n}\nfunction findNonSerializableValue(value, path = \"\") {\n    if (!isPlain) {\n        return {\n            path: path || \"root\",\n            value\n        };\n    }\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    for (const [key, nestedValue] of Object.entries(value)){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (!isPlain(nestedValue)) {\n            return {\n                path: nestedPath,\n                value: nestedValue\n            };\n        }\n        if (typeof nestedValue === \"object\") {\n            const nonSerializableNestedValue = findNonSerializableValue(nestedValue, nestedPath);\n            if (nonSerializableNestedValue) {\n                return nonSerializableNestedValue;\n            }\n        }\n    }\n    return false;\n}\n// src/lib/debug.ts\nfunction captureStackTrace(msg, traceRoot) {\n    const errorLike = {\n        name: msg\n    };\n    if (typeof Error.captureStackTrace !== \"function\") {\n        return void 0;\n    }\n    Error.captureStackTrace(errorLike, traceRoot);\n    return errorLike.stack;\n}\n// src/lib/Json.ts\nfunction isJsonScalar(data) {\n    return data === null || typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\";\n}\nfunction isJsonArray(data) {\n    return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n    return !isJsonScalar(data) && !isJsonArray(data);\n}\n// src/protocol/ClientMsg.ts\nvar ClientMsgCode = /* @__PURE__ */ ((ClientMsgCode2)=>{\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n    ClientMsgCode2[ClientMsgCode2[\"BROADCAST_EVENT\"] = 103] = \"BROADCAST_EVENT\";\n    ClientMsgCode2[ClientMsgCode2[\"FETCH_STORAGE\"] = 200] = \"FETCH_STORAGE\";\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n    ClientMsgCode2[ClientMsgCode2[\"FETCH_YDOC\"] = 300] = \"FETCH_YDOC\";\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_YDOC\"] = 301] = \"UPDATE_YDOC\";\n    return ClientMsgCode2;\n})(ClientMsgCode || {});\n// src/refs/ImmutableRef.ts\nfunction merge(target, patch) {\n    let updated = false;\n    const newValue = {\n        ...target\n    };\n    Object.keys(patch).forEach((k)=>{\n        const key = k;\n        const val = patch[key];\n        if (newValue[key] !== val) {\n            if (val === void 0) {\n                delete newValue[key];\n            } else {\n                newValue[key] = val;\n            }\n            updated = true;\n        }\n    });\n    return updated ? newValue : target;\n}\nvar ImmutableRef = class {\n    constructor(){\n        this._ev = makeEventSource();\n    }\n    get didInvalidate() {\n        return this._ev.observable;\n    }\n    invalidate() {\n        if (this._cache !== void 0) {\n            this._cache = void 0;\n            this._ev.notify();\n        }\n    }\n    get current() {\n        return this._cache ?? (this._cache = this._toImmutable());\n    }\n};\n// src/refs/OthersRef.ts\nfunction makeUser(conn, presence) {\n    const { connectionId, id, info } = conn;\n    const canWrite = canWriteStorage(conn.scopes);\n    return freeze(compactObject({\n        connectionId,\n        id,\n        info,\n        canWrite,\n        canComment: canComment(conn.scopes),\n        isReadOnly: !canWrite,\n        // Deprecated, kept for backward-compatibility\n        presence\n    }));\n}\nvar OthersRef = class extends ImmutableRef {\n    //\n    // --------------------------------------------------------------\n    //\n    constructor(){\n        super();\n        this._connections = /* @__PURE__ */ new Map();\n        this._presences = /* @__PURE__ */ new Map();\n        this._users = /* @__PURE__ */ new Map();\n    }\n    connectionIds() {\n        return this._connections.keys();\n    }\n    /** @internal */ _toImmutable() {\n        const users = compact(Array.from(this._presences.keys()).map((connectionId)=>this.getUser(Number(connectionId))));\n        return users;\n    }\n    clearOthers() {\n        this._connections = /* @__PURE__ */ new Map();\n        this._presences = /* @__PURE__ */ new Map();\n        this._users = /* @__PURE__ */ new Map();\n        this.invalidate();\n    }\n    /** @internal */ _getUser(connectionId) {\n        const conn = this._connections.get(connectionId);\n        const presence = this._presences.get(connectionId);\n        if (conn !== void 0 && presence !== void 0) {\n            return makeUser(conn, presence);\n        }\n        return void 0;\n    }\n    getUser(connectionId) {\n        const cachedUser = this._users.get(connectionId);\n        if (cachedUser) {\n            return cachedUser;\n        }\n        const computedUser = this._getUser(connectionId);\n        if (computedUser) {\n            this._users.set(connectionId, computedUser);\n            return computedUser;\n        }\n        return void 0;\n    }\n    /** @internal */ _invalidateUser(connectionId) {\n        if (this._users.has(connectionId)) {\n            this._users.delete(connectionId);\n        }\n        this.invalidate();\n    }\n    /**\n   * Records a known connection. This records the connection ID and the\n   * associated metadata.\n   */ setConnection(connectionId, metaUserId, metaUserInfo, scopes) {\n        this._connections.set(connectionId, freeze({\n            connectionId,\n            id: metaUserId,\n            info: metaUserInfo,\n            scopes\n        }));\n        if (this._presences.has(connectionId)) {\n            this._invalidateUser(connectionId);\n        }\n    }\n    /**\n   * Removes a known connectionId. Removes both the connection's metadata and\n   * the presence information.\n   */ removeConnection(connectionId) {\n        this._connections.delete(connectionId);\n        this._presences.delete(connectionId);\n        this._invalidateUser(connectionId);\n    }\n    /**\n   * Stores a new user from a full presence update. If the user already exists,\n   * its known presence data is overwritten.\n   */ setOther(connectionId, presence) {\n        this._presences.set(connectionId, freeze(compactObject(presence)));\n        if (this._connections.has(connectionId)) {\n            this._invalidateUser(connectionId);\n        }\n    }\n    /**\n   * Patches the presence data for an existing \"other\". If we don't know the\n   * initial presence data for this user yet, discard this patch and await the\n   * full .setOther() call first.\n   */ patchOther(connectionId, patch) {\n        const oldPresence = this._presences.get(connectionId);\n        if (oldPresence === void 0) {\n            return;\n        }\n        const newPresence = merge(oldPresence, patch);\n        if (oldPresence !== newPresence) {\n            this._presences.set(connectionId, freeze(newPresence));\n            this._invalidateUser(connectionId);\n        }\n    }\n};\n// src/refs/PatchableRef.ts\nvar PatchableRef = class extends ImmutableRef {\n    constructor(data){\n        super();\n        this._data = freeze(compactObject(data));\n    }\n    /** @internal */ _toImmutable() {\n        return this._data;\n    }\n    /**\n   * Patches the current object.\n   */ patch(patch) {\n        const oldData = this._data;\n        const newData = merge(oldData, patch);\n        if (oldData !== newData) {\n            this._data = freeze(newData);\n            this.invalidate();\n        }\n    }\n};\n// src/refs/ValueRef.ts\nvar ValueRef = class extends ImmutableRef {\n    constructor(initialValue){\n        super();\n        this._value = freeze(initialValue);\n    }\n    /** @internal */ _toImmutable() {\n        return this._value;\n    }\n    set(newValue) {\n        this._value = freeze(newValue);\n        this.invalidate();\n    }\n};\nvar DerivedRef = class extends ImmutableRef {\n    constructor(...args){\n        super();\n        const transformFn = args.pop();\n        const otherRefs = args;\n        this._refs = otherRefs;\n        this._refs.forEach((ref)=>{\n            ref.didInvalidate.subscribe(()=>this.invalidate());\n        });\n        this._transform = transformFn;\n    }\n    /** @internal */ _toImmutable() {\n        return this._transform(...this._refs.map((ref)=>ref.current));\n    }\n};\n// src/room.ts\nvar MAX_SOCKET_MESSAGE_SIZE = 1024 * 1024 - 1024;\nfunction makeIdFactory(connectionId) {\n    let count = 0;\n    return ()=>`${connectionId}:${count++}`;\n}\nfunction userToTreeNode(key, user) {\n    return {\n        type: \"User\",\n        id: `${user.connectionId}`,\n        key,\n        payload: user\n    };\n}\nfunction installBackgroundTabSpy() {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const inBackgroundSince = {\n        current: null\n    };\n    function onVisibilityChange() {\n        if (doc?.visibilityState === \"hidden\") {\n            inBackgroundSince.current = inBackgroundSince.current ?? Date.now();\n        } else {\n            inBackgroundSince.current = null;\n        }\n    }\n    doc?.addEventListener(\"visibilitychange\", onVisibilityChange);\n    const unsub = ()=>{\n        doc?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    return [\n        inBackgroundSince,\n        unsub\n    ];\n}\nfunction createRoom(options, config) {\n    const initialPresence = typeof options.initialPresence === \"function\" ? options.initialPresence(config.roomId) : options.initialPresence;\n    const initialStorage = typeof options.initialStorage === \"function\" ? options.initialStorage(config.roomId) : options.initialStorage;\n    const [inBackgroundSince, uninstallBgTabSpy] = installBackgroundTabSpy();\n    const delegates = {\n        ...config.delegates,\n        // A connection is allowed to go into \"zombie state\" only if all of the\n        // following conditions apply:\n        //\n        // - The `backgroundKeepAliveTimeout` client option is configured\n        // - The browser window has been in the background for at least\n        //   `backgroundKeepAliveTimeout` milliseconds\n        // - There are no pending changes\n        //\n        canZombie () {\n            return config.backgroundKeepAliveTimeout !== void 0 && inBackgroundSince.current !== null && Date.now() > inBackgroundSince.current + config.backgroundKeepAliveTimeout && getStorageStatus() !== \"synchronizing\";\n        }\n    };\n    const managedSocket = new ManagedSocket(delegates, config.enableDebugLogging);\n    const context = {\n        buffer: {\n            flushTimerID: void 0,\n            lastFlushedAt: 0,\n            presenceUpdates: // Queue up the initial presence message as a Full Presence™ update\n            {\n                type: \"full\",\n                data: initialPresence\n            },\n            messages: [],\n            storageOperations: []\n        },\n        staticSessionInfo: new ValueRef(null),\n        dynamicSessionInfo: new ValueRef(null),\n        myPresence: new PatchableRef(initialPresence),\n        others: new OthersRef(),\n        initialStorage,\n        idFactory: null,\n        // Storage\n        clock: 0,\n        opClock: 0,\n        nodes: /* @__PURE__ */ new Map(),\n        root: void 0,\n        undoStack: [],\n        redoStack: [],\n        pausedHistory: null,\n        activeBatch: null,\n        unacknowledgedOps: /* @__PURE__ */ new Map(),\n        // Debug\n        opStackTraces:  true ? /* @__PURE__ */ new Map() : 0\n    };\n    const doNotBatchUpdates = (cb)=>cb();\n    const batchUpdates = config.unstable_batchedUpdates ?? doNotBatchUpdates;\n    let lastTokenKey;\n    function onStatusDidChange(newStatus) {\n        const authValue = managedSocket.authValue;\n        if (authValue !== null) {\n            const tokenKey = authValue.type === \"secret\" ? authValue.token.raw : authValue.publicApiKey;\n            if (tokenKey !== lastTokenKey) {\n                lastTokenKey = tokenKey;\n                if (authValue.type === \"secret\") {\n                    const token = authValue.token.parsed;\n                    context.staticSessionInfo.set({\n                        userId: token.k === \"sec-legacy\" /* SECRET_LEGACY */  ? token.id : token.uid,\n                        userInfo: token.k === \"sec-legacy\" /* SECRET_LEGACY */  ? token.info : token.ui\n                    });\n                } else {\n                    context.staticSessionInfo.set({\n                        userId: void 0,\n                        userInfo: void 0\n                    });\n                }\n            }\n        }\n        batchUpdates(()=>{\n            eventHub.status.notify(newStatus);\n            notifySelfChanged(doNotBatchUpdates);\n        });\n    }\n    let _connectionLossTimerId;\n    let _hasLostConnection = false;\n    function handleConnectionLossEvent(newStatus) {\n        if (newStatus === \"reconnecting\") {\n            _connectionLossTimerId = setTimeout(()=>{\n                batchUpdates(()=>{\n                    eventHub.lostConnection.notify(\"lost\");\n                    _hasLostConnection = true;\n                    context.others.clearOthers();\n                    notify({\n                        others: [\n                            {\n                                type: \"reset\"\n                            }\n                        ]\n                    }, doNotBatchUpdates);\n                });\n            }, config.lostConnectionTimeout);\n        } else {\n            clearTimeout(_connectionLossTimerId);\n            if (_hasLostConnection) {\n                if (newStatus === \"disconnected\") {\n                    batchUpdates(()=>{\n                        eventHub.lostConnection.notify(\"failed\");\n                    });\n                } else {\n                    batchUpdates(()=>{\n                        eventHub.lostConnection.notify(\"restored\");\n                    });\n                }\n                _hasLostConnection = false;\n            }\n        }\n    }\n    function onDidConnect() {\n        context.buffer.presenceUpdates = {\n            type: \"full\",\n            data: // Because context.me.current is a readonly object, we'll have to\n            // make a copy here. Otherwise, type errors happen later when\n            // \"patching\" my presence.\n            {\n                ...context.myPresence.current\n            }\n        };\n        if (_getStorage$ !== null) {\n            refreshStorage({\n                flush: false\n            });\n        }\n        flushNowOrSoon();\n    }\n    function onDidDisconnect() {\n        clearTimeout(context.buffer.flushTimerID);\n    }\n    managedSocket.events.onMessage.subscribe(handleServerMessage);\n    managedSocket.events.statusDidChange.subscribe(onStatusDidChange);\n    managedSocket.events.statusDidChange.subscribe(handleConnectionLossEvent);\n    managedSocket.events.didConnect.subscribe(onDidConnect);\n    managedSocket.events.didDisconnect.subscribe(onDidDisconnect);\n    managedSocket.events.onLiveblocksError.subscribe((err)=>{\n        batchUpdates(()=>{\n            if (true) {\n                error2(`Connection to websocket server closed. Reason: ${err.message} (code: ${err.code}).`);\n            }\n            eventHub.error.notify(err);\n        });\n    });\n    const pool = {\n        roomId: config.roomId,\n        getNode: (id)=>context.nodes.get(id),\n        addNode: (id, node)=>void context.nodes.set(id, node),\n        deleteNode: (id)=>void context.nodes.delete(id),\n        generateId: ()=>`${getConnectionId()}:${context.clock++}`,\n        generateOpId: ()=>`${getConnectionId()}:${context.opClock++}`,\n        dispatch (ops, reverse, storageUpdates) {\n            const activeBatch = context.activeBatch;\n            if (true) {\n                const stackTrace = captureStackTrace(\"Storage mutation\", this.dispatch);\n                if (stackTrace) {\n                    for (const op of ops){\n                        if (op.opId) {\n                            nn(context.opStackTraces).set(op.opId, stackTrace);\n                        }\n                    }\n                }\n            }\n            if (activeBatch) {\n                activeBatch.ops.push(...ops);\n                for (const [key, value] of storageUpdates){\n                    activeBatch.updates.storageUpdates.set(key, mergeStorageUpdates(activeBatch.updates.storageUpdates.get(key), value));\n                }\n                activeBatch.reverseOps.unshift(...reverse);\n            } else {\n                batchUpdates(()=>{\n                    addToUndoStack(reverse, doNotBatchUpdates);\n                    context.redoStack.length = 0;\n                    dispatchOps(ops);\n                    notify({\n                        storageUpdates\n                    }, doNotBatchUpdates);\n                });\n            }\n        },\n        assertStorageIsWritable: ()=>{\n            const scopes = context.dynamicSessionInfo.current?.scopes;\n            if (scopes === void 0) {\n                return;\n            }\n            const canWrite = canWriteStorage(scopes);\n            if (!canWrite) {\n                throw new Error(\"Cannot write to storage with a read only user, please ensure the user has write permissions\");\n            }\n        }\n    };\n    const eventHub = {\n        connection: makeEventSource(),\n        // Old/deprecated API\n        status: makeEventSource(),\n        // New/recommended API\n        lostConnection: makeEventSource(),\n        customEvent: makeEventSource(),\n        self: makeEventSource(),\n        myPresence: makeEventSource(),\n        others: makeEventSource(),\n        error: makeEventSource(),\n        storage: makeEventSource(),\n        history: makeEventSource(),\n        storageDidLoad: makeEventSource(),\n        storageStatus: makeEventSource(),\n        ydoc: makeEventSource(),\n        comments: makeEventSource()\n    };\n    async function streamFetch(authTokenOrPublicApiKey, roomId) {\n        const url = new URL(`/v2/c/rooms/${encodeURIComponent(roomId)}/storage`, config.baseUrl).toString();\n        const fetcher = config.polyfills?.fetch || /* istanbul ignore next */ fetch;\n        return fetcher(url.toString(), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${authTokenOrPublicApiKey}`\n            }\n        });\n    }\n    async function httpPostToRoom(endpoint, body) {\n        if (!managedSocket.authValue) {\n            throw new Error(\"Not authorized\");\n        }\n        const authTokenOrPublicApiKey = managedSocket.authValue.type === \"public\" ? managedSocket.authValue.publicApiKey : managedSocket.authValue.token.raw;\n        const url = new URL(`/v2/c/rooms/${encodeURIComponent(config.roomId)}${endpoint}`, config.baseUrl).toString();\n        const fetcher = config.polyfills?.fetch || /* istanbul ignore next */ fetch;\n        return fetcher(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${authTokenOrPublicApiKey}`\n            },\n            body: JSON.stringify(body)\n        });\n    }\n    function sendMessages(messages) {\n        const serializedPayload = JSON.stringify(messages);\n        const nonce = context.dynamicSessionInfo.current?.nonce;\n        if (config.unstable_fallbackToHTTP && nonce) {\n            const size = new TextEncoder().encode(serializedPayload).length;\n            if (size > MAX_SOCKET_MESSAGE_SIZE) {\n                void httpPostToRoom(\"/send-message\", {\n                    nonce,\n                    messages\n                }).then((resp)=>{\n                    if (!resp.ok && resp.status === 403) {\n                        managedSocket.reconnect();\n                    }\n                });\n                warn(\"Message was too large for websockets and sent over HTTP instead\");\n                return;\n            }\n        }\n        managedSocket.send(serializedPayload);\n    }\n    const self = new DerivedRef(context.staticSessionInfo, context.dynamicSessionInfo, context.myPresence, (staticSession, dynamicSession, myPresence)=>{\n        if (staticSession === null || dynamicSession === null) {\n            return null;\n        } else {\n            const canWrite = canWriteStorage(dynamicSession.scopes);\n            return {\n                connectionId: dynamicSession.actor,\n                id: staticSession.userId,\n                info: staticSession.userInfo,\n                presence: myPresence,\n                canWrite,\n                canComment: canComment(dynamicSession.scopes),\n                isReadOnly: !canWrite\n            };\n        }\n    });\n    let _lastSelf;\n    function notifySelfChanged(batchedUpdatesWrapper) {\n        const currSelf = self.current;\n        if (currSelf !== null && currSelf !== _lastSelf) {\n            batchedUpdatesWrapper(()=>{\n                eventHub.self.notify(currSelf);\n            });\n            _lastSelf = currSelf;\n        }\n    }\n    const selfAsTreeNode = new DerivedRef(self, (me)=>me !== null ? userToTreeNode(\"Me\", me) : null);\n    function createOrUpdateRootFromMessage(message, batchedUpdatesWrapper) {\n        if (message.items.length === 0) {\n            throw new Error(\"Internal error: cannot load storage without items\");\n        }\n        if (context.root !== void 0) {\n            updateRoot(message.items, batchedUpdatesWrapper);\n        } else {\n            context.root = LiveObject._fromItems(message.items, pool);\n        }\n        const stackSizeBefore = context.undoStack.length;\n        for(const key in context.initialStorage){\n            if (context.root.get(key) === void 0) {\n                context.root.set(key, cloneLson(context.initialStorage[key]));\n            }\n        }\n        context.undoStack.length = stackSizeBefore;\n    }\n    function updateRoot(items, batchedUpdatesWrapper) {\n        if (context.root === void 0) {\n            return;\n        }\n        const currentItems = /* @__PURE__ */ new Map();\n        for (const [id, node] of context.nodes){\n            currentItems.set(id, node._serialize());\n        }\n        const ops = getTreesDiffOperations(currentItems, new Map(items));\n        const result = applyOps(ops, false);\n        notify(result.updates, batchedUpdatesWrapper);\n    }\n    function _addToRealUndoStack(historyOps, batchedUpdatesWrapper) {\n        if (context.undoStack.length >= 50) {\n            context.undoStack.shift();\n        }\n        context.undoStack.push(historyOps);\n        onHistoryChange(batchedUpdatesWrapper);\n    }\n    function addToUndoStack(historyOps, batchedUpdatesWrapper) {\n        if (context.pausedHistory !== null) {\n            context.pausedHistory.unshift(...historyOps);\n        } else {\n            _addToRealUndoStack(historyOps, batchedUpdatesWrapper);\n        }\n    }\n    function notify(updates, batchedUpdatesWrapper) {\n        const storageUpdates = updates.storageUpdates;\n        const othersUpdates = updates.others;\n        batchedUpdatesWrapper(()=>{\n            if (othersUpdates !== void 0 && othersUpdates.length > 0) {\n                const others = context.others.current;\n                for (const event of othersUpdates){\n                    eventHub.others.notify({\n                        ...event,\n                        others\n                    });\n                }\n            }\n            if (updates.presence ?? false) {\n                notifySelfChanged(doNotBatchUpdates);\n                eventHub.myPresence.notify(context.myPresence.current);\n            }\n            if (storageUpdates !== void 0 && storageUpdates.size > 0) {\n                const updates2 = Array.from(storageUpdates.values());\n                eventHub.storage.notify(updates2);\n            }\n            notifyStorageStatus();\n        });\n    }\n    function getConnectionId() {\n        const info = context.dynamicSessionInfo.current;\n        if (info) {\n            return info.actor;\n        }\n        throw new Error(\"Internal. Tried to get connection id but connection was never open\");\n    }\n    function applyOps(rawOps, isLocal) {\n        const output = {\n            reverse: [],\n            storageUpdates: /* @__PURE__ */ new Map(),\n            presence: false\n        };\n        const createdNodeIds = /* @__PURE__ */ new Set();\n        const ops = rawOps.map((op)=>{\n            if (op.type !== \"presence\" && !op.opId) {\n                return {\n                    ...op,\n                    opId: pool.generateOpId()\n                };\n            } else {\n                return op;\n            }\n        });\n        for (const op of ops){\n            if (op.type === \"presence\") {\n                const reverse = {\n                    type: \"presence\",\n                    data: {}\n                };\n                for(const key in op.data){\n                    reverse.data[key] = context.myPresence.current[key];\n                }\n                context.myPresence.patch(op.data);\n                if (context.buffer.presenceUpdates === null) {\n                    context.buffer.presenceUpdates = {\n                        type: \"partial\",\n                        data: op.data\n                    };\n                } else {\n                    for(const key in op.data){\n                        context.buffer.presenceUpdates.data[key] = op.data[key];\n                    }\n                }\n                output.reverse.unshift(reverse);\n                output.presence = true;\n            } else {\n                let source;\n                if (isLocal) {\n                    source = 0 /* UNDOREDO_RECONNECT */ ;\n                } else {\n                    const opId = nn(op.opId);\n                    if (true) {\n                        nn(context.opStackTraces).delete(opId);\n                    }\n                    const deleted = context.unacknowledgedOps.delete(opId);\n                    source = deleted ? 2 /* ACK */  : 1 /* REMOTE */ ;\n                }\n                const applyOpResult = applyOp(op, source);\n                if (applyOpResult.modified) {\n                    const nodeId = applyOpResult.modified.node._id;\n                    if (!(nodeId && createdNodeIds.has(nodeId))) {\n                        output.storageUpdates.set(nn(applyOpResult.modified.node._id), mergeStorageUpdates(output.storageUpdates.get(nn(applyOpResult.modified.node._id)), applyOpResult.modified));\n                        output.reverse.unshift(...applyOpResult.reverse);\n                    }\n                    if (op.type === 2 /* CREATE_LIST */  || op.type === 7 /* CREATE_MAP */  || op.type === 4 /* CREATE_OBJECT */ ) {\n                        createdNodeIds.add(nn(op.id));\n                    }\n                }\n            }\n        }\n        return {\n            ops,\n            reverse: output.reverse,\n            updates: {\n                storageUpdates: output.storageUpdates,\n                presence: output.presence\n            }\n        };\n    }\n    function applyOp(op, source) {\n        if (isAckOp(op)) {\n            return {\n                modified: false\n            };\n        }\n        switch(op.type){\n            case 6 /* DELETE_OBJECT_KEY */ :\n            case 3 /* UPDATE_OBJECT */ :\n            case 5 /* DELETE_CRDT */ :\n                {\n                    const node = context.nodes.get(op.id);\n                    if (node === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    return node._apply(op, source === 0 /* UNDOREDO_RECONNECT */ );\n                }\n            case 1 /* SET_PARENT_KEY */ :\n                {\n                    const node = context.nodes.get(op.id);\n                    if (node === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    if (node.parent.type === \"HasParent\" && isLiveList(node.parent.node)) {\n                        return node.parent.node._setChildKey(asPos(op.parentKey), node, source);\n                    }\n                    return {\n                        modified: false\n                    };\n                }\n            case 4 /* CREATE_OBJECT */ :\n            case 2 /* CREATE_LIST */ :\n            case 7 /* CREATE_MAP */ :\n            case 8 /* CREATE_REGISTER */ :\n                {\n                    if (op.parentId === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    const parentNode = context.nodes.get(op.parentId);\n                    if (parentNode === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    return parentNode._attachChild(op, source);\n                }\n        }\n    }\n    function updatePresence(patch, options2) {\n        const oldValues = {};\n        if (context.buffer.presenceUpdates === null) {\n            context.buffer.presenceUpdates = {\n                type: \"partial\",\n                data: {}\n            };\n        }\n        for(const key in patch){\n            const overrideValue = patch[key];\n            if (overrideValue === void 0) {\n                continue;\n            }\n            context.buffer.presenceUpdates.data[key] = overrideValue;\n            oldValues[key] = context.myPresence.current[key];\n        }\n        context.myPresence.patch(patch);\n        if (context.activeBatch) {\n            if (options2?.addToHistory) {\n                context.activeBatch.reverseOps.unshift({\n                    type: \"presence\",\n                    data: oldValues\n                });\n            }\n            context.activeBatch.updates.presence = true;\n        } else {\n            flushNowOrSoon();\n            batchUpdates(()=>{\n                if (options2?.addToHistory) {\n                    addToUndoStack([\n                        {\n                            type: \"presence\",\n                            data: oldValues\n                        }\n                    ], doNotBatchUpdates);\n                }\n                notify({\n                    presence: true\n                }, doNotBatchUpdates);\n            });\n        }\n    }\n    function onUpdatePresenceMessage(message) {\n        if (message.targetActor !== void 0) {\n            const oldUser = context.others.getUser(message.actor);\n            context.others.setOther(message.actor, message.data);\n            const newUser = context.others.getUser(message.actor);\n            if (oldUser === void 0 && newUser !== void 0) {\n                return {\n                    type: \"enter\",\n                    user: newUser\n                };\n            }\n        } else {\n            context.others.patchOther(message.actor, message.data), message;\n        }\n        const user = context.others.getUser(message.actor);\n        if (user) {\n            return {\n                type: \"update\",\n                updates: message.data,\n                user\n            };\n        } else {\n            return void 0;\n        }\n    }\n    function onUserLeftMessage(message) {\n        const user = context.others.getUser(message.actor);\n        if (user) {\n            context.others.removeConnection(message.actor);\n            return {\n                type: \"leave\",\n                user\n            };\n        }\n        return null;\n    }\n    function onRoomStateMessage(message, batchedUpdatesWrapper) {\n        context.dynamicSessionInfo.set({\n            actor: message.actor,\n            nonce: message.nonce,\n            scopes: message.scopes\n        });\n        context.idFactory = makeIdFactory(message.actor);\n        notifySelfChanged(batchedUpdatesWrapper);\n        for (const connectionId of context.others.connectionIds()){\n            const user = message.users[connectionId];\n            if (user === void 0) {\n                context.others.removeConnection(connectionId);\n            }\n        }\n        for(const key in message.users){\n            const user = message.users[key];\n            const connectionId = Number(key);\n            context.others.setConnection(connectionId, user.id, user.info, user.scopes);\n        }\n        return {\n            type: \"reset\"\n        };\n    }\n    function canUndo() {\n        return context.undoStack.length > 0;\n    }\n    function canRedo() {\n        return context.redoStack.length > 0;\n    }\n    function onHistoryChange(batchedUpdatesWrapper) {\n        batchedUpdatesWrapper(()=>{\n            eventHub.history.notify({\n                canUndo: canUndo(),\n                canRedo: canRedo()\n            });\n        });\n    }\n    function onUserJoinedMessage(message) {\n        context.others.setConnection(message.actor, message.id, message.info, message.scopes);\n        context.buffer.messages.push({\n            type: 100 /* UPDATE_PRESENCE */ ,\n            data: context.myPresence.current,\n            targetActor: message.actor\n        });\n        flushNowOrSoon();\n        const user = context.others.getUser(message.actor);\n        return user ? {\n            type: \"enter\",\n            user\n        } : void 0;\n    }\n    function parseServerMessage(data) {\n        if (!isJsonObject(data)) {\n            return null;\n        }\n        return data;\n    }\n    function parseServerMessages(text) {\n        const data = tryParseJson(text);\n        if (data === void 0) {\n            return null;\n        } else if (isJsonArray(data)) {\n            return compact(data.map((item)=>parseServerMessage(item)));\n        } else {\n            return compact([\n                parseServerMessage(data)\n            ]);\n        }\n    }\n    function applyAndSendOps(offlineOps, batchedUpdatesWrapper) {\n        if (offlineOps.size === 0) {\n            return;\n        }\n        const messages = [];\n        const ops = Array.from(offlineOps.values());\n        const result = applyOps(ops, true);\n        messages.push({\n            type: 201 /* UPDATE_STORAGE */ ,\n            ops: result.ops\n        });\n        notify(result.updates, batchedUpdatesWrapper);\n        sendMessages(messages);\n    }\n    function handleServerMessage(event) {\n        if (typeof event.data !== \"string\") {\n            return;\n        }\n        const messages = parseServerMessages(event.data);\n        if (messages === null || messages.length === 0) {\n            return;\n        }\n        const updates = {\n            storageUpdates: /* @__PURE__ */ new Map(),\n            others: []\n        };\n        batchUpdates(()=>{\n            for (const message of messages){\n                switch(message.type){\n                    case 101 /* USER_JOINED */ :\n                        {\n                            const userJoinedUpdate = onUserJoinedMessage(message);\n                            if (userJoinedUpdate) {\n                                updates.others.push(userJoinedUpdate);\n                            }\n                            break;\n                        }\n                    case 100 /* UPDATE_PRESENCE */ :\n                        {\n                            const othersPresenceUpdate = onUpdatePresenceMessage(message);\n                            if (othersPresenceUpdate) {\n                                updates.others.push(othersPresenceUpdate);\n                            }\n                            break;\n                        }\n                    case 103 /* BROADCASTED_EVENT */ :\n                        {\n                            const others = context.others.current;\n                            eventHub.customEvent.notify({\n                                connectionId: message.actor,\n                                user: message.actor < 0 ? null : others.find((u)=>u.connectionId === message.actor) ?? null,\n                                event: message.event\n                            });\n                            break;\n                        }\n                    case 102 /* USER_LEFT */ :\n                        {\n                            const event2 = onUserLeftMessage(message);\n                            if (event2) {\n                                updates.others.push(event2);\n                            }\n                            break;\n                        }\n                    case 300 /* UPDATE_YDOC */ :\n                        {\n                            eventHub.ydoc.notify(message);\n                            break;\n                        }\n                    case 104 /* ROOM_STATE */ :\n                        {\n                            updates.others.push(onRoomStateMessage(message, doNotBatchUpdates));\n                            break;\n                        }\n                    case 200 /* INITIAL_STORAGE_STATE */ :\n                        {\n                            processInitialStorage(message);\n                            break;\n                        }\n                    case 201 /* UPDATE_STORAGE */ :\n                        {\n                            const applyResult = applyOps(message.ops, false);\n                            for (const [key, value] of applyResult.updates.storageUpdates){\n                                updates.storageUpdates.set(key, mergeStorageUpdates(updates.storageUpdates.get(key), value));\n                            }\n                            break;\n                        }\n                    case 299 /* REJECT_STORAGE_OP */ :\n                        {\n                            errorWithTitle(\"Storage mutation rejection error\", message.reason);\n                            if (true) {\n                                const traces = /* @__PURE__ */ new Set();\n                                for (const opId of message.opIds){\n                                    const trace = context.opStackTraces?.get(opId);\n                                    if (trace) {\n                                        traces.add(trace);\n                                    }\n                                }\n                                if (traces.size > 0) {\n                                    warnWithTitle(\"The following function calls caused the rejected storage mutations:\", `\n\n${Array.from(traces).join(\"\\n\\n\")}`);\n                                }\n                                throw new Error(`Storage mutations rejected by server: ${message.reason}`);\n                            }\n                            break;\n                        }\n                    case 400 /* THREAD_CREATED */ :\n                    case 401 /* THREAD_METADATA_UPDATED */ :\n                    case 405 /* COMMENT_REACTION_ADDED */ :\n                    case 406 /* COMMENT_REACTION_REMOVED */ :\n                    case 402 /* COMMENT_CREATED */ :\n                    case 403 /* COMMENT_EDITED */ :\n                    case 404 /* COMMENT_DELETED */ :\n                        {\n                            eventHub.comments.notify(message);\n                            break;\n                        }\n                }\n            }\n            notify(updates, doNotBatchUpdates);\n        });\n    }\n    function flushNowOrSoon() {\n        const storageOps = context.buffer.storageOperations;\n        if (storageOps.length > 0) {\n            for (const op of storageOps){\n                context.unacknowledgedOps.set(nn(op.opId), op);\n            }\n            notifyStorageStatus();\n        }\n        if (managedSocket.getStatus() !== \"connected\") {\n            context.buffer.storageOperations = [];\n            return;\n        }\n        const now = Date.now();\n        const elapsedMillis = now - context.buffer.lastFlushedAt;\n        if (elapsedMillis >= config.throttleDelay) {\n            const messagesToFlush = serializeBuffer();\n            if (messagesToFlush.length === 0) {\n                return;\n            }\n            sendMessages(messagesToFlush);\n            context.buffer = {\n                flushTimerID: void 0,\n                lastFlushedAt: now,\n                messages: [],\n                storageOperations: [],\n                presenceUpdates: null\n            };\n        } else {\n            clearTimeout(context.buffer.flushTimerID);\n            context.buffer.flushTimerID = setTimeout(flushNowOrSoon, config.throttleDelay - elapsedMillis);\n        }\n    }\n    function serializeBuffer() {\n        const messages = [];\n        if (context.buffer.presenceUpdates) {\n            messages.push(context.buffer.presenceUpdates.type === \"full\" ? {\n                type: 100 /* UPDATE_PRESENCE */ ,\n                // Populating the `targetActor` field turns this message into\n                // a Full Presence™ update message (not a patch), which will get\n                // interpreted by other clients as such.\n                targetActor: -1,\n                data: context.buffer.presenceUpdates.data\n            } : {\n                type: 100 /* UPDATE_PRESENCE */ ,\n                data: context.buffer.presenceUpdates.data\n            });\n        }\n        for (const event of context.buffer.messages){\n            messages.push(event);\n        }\n        if (context.buffer.storageOperations.length > 0) {\n            messages.push({\n                type: 201 /* UPDATE_STORAGE */ ,\n                ops: context.buffer.storageOperations\n            });\n        }\n        return messages;\n    }\n    function updateYDoc(update, guid) {\n        const clientMsg = {\n            type: 301 /* UPDATE_YDOC */ ,\n            update,\n            guid\n        };\n        context.buffer.messages.push(clientMsg);\n        eventHub.ydoc.notify(clientMsg);\n        flushNowOrSoon();\n    }\n    function broadcastEvent(event, options2 = {\n        shouldQueueEventIfNotReady: false\n    }) {\n        if (managedSocket.getStatus() !== \"connected\" && !options2.shouldQueueEventIfNotReady) {\n            return;\n        }\n        context.buffer.messages.push({\n            type: 103 /* BROADCAST_EVENT */ ,\n            event\n        });\n        flushNowOrSoon();\n    }\n    function dispatchOps(ops) {\n        context.buffer.storageOperations.push(...ops);\n        flushNowOrSoon();\n    }\n    let _getStorage$ = null;\n    let _resolveStoragePromise = null;\n    function processInitialStorage(message) {\n        const unacknowledgedOps = new Map(context.unacknowledgedOps);\n        createOrUpdateRootFromMessage(message, doNotBatchUpdates);\n        applyAndSendOps(unacknowledgedOps, doNotBatchUpdates);\n        _resolveStoragePromise?.();\n        notifyStorageStatus();\n        eventHub.storageDidLoad.notify();\n    }\n    async function streamStorage() {\n        if (!managedSocket.authValue) {\n            return;\n        }\n        const result = await streamFetch(managedSocket.authValue.type === \"public\" ? managedSocket.authValue.publicApiKey : managedSocket.authValue.token.raw, config.roomId);\n        const items = await result.json();\n        processInitialStorage({\n            type: 200 /* INITIAL_STORAGE_STATE */ ,\n            items\n        });\n    }\n    function refreshStorage(options2) {\n        const messages = context.buffer.messages;\n        if (config.unstable_streamData) {\n            void streamStorage();\n        } else if (!messages.some((msg)=>msg.type === 200 /* FETCH_STORAGE */ )) {\n            messages.push({\n                type: 200 /* FETCH_STORAGE */ \n            });\n        }\n        if (options2.flush) {\n            flushNowOrSoon();\n        }\n    }\n    function startLoadingStorage() {\n        if (_getStorage$ === null) {\n            refreshStorage({\n                flush: true\n            });\n            _getStorage$ = new Promise((resolve)=>{\n                _resolveStoragePromise = resolve;\n            });\n            notifyStorageStatus();\n        }\n        return _getStorage$;\n    }\n    function getStorageSnapshot() {\n        const root = context.root;\n        if (root !== void 0) {\n            return root;\n        } else {\n            void startLoadingStorage();\n            return null;\n        }\n    }\n    async function getStorage() {\n        if (context.root !== void 0) {\n            return Promise.resolve({\n                root: context.root\n            });\n        }\n        await startLoadingStorage();\n        return {\n            root: nn(context.root)\n        };\n    }\n    function fetchYDoc(vector, guid) {\n        if (!context.buffer.messages.find((m)=>{\n            return m.type === 300 /* FETCH_YDOC */  && m.vector === vector && m.guid === guid;\n        })) {\n            context.buffer.messages.push({\n                type: 300 /* FETCH_YDOC */ ,\n                vector,\n                guid\n            });\n        }\n        flushNowOrSoon();\n    }\n    function undo() {\n        if (context.activeBatch) {\n            throw new Error(\"undo is not allowed during a batch\");\n        }\n        const historyOps = context.undoStack.pop();\n        if (historyOps === void 0) {\n            return;\n        }\n        context.pausedHistory = null;\n        const result = applyOps(historyOps, true);\n        batchUpdates(()=>{\n            notify(result.updates, doNotBatchUpdates);\n            context.redoStack.push(result.reverse);\n            onHistoryChange(doNotBatchUpdates);\n        });\n        for (const op of result.ops){\n            if (op.type !== \"presence\") {\n                context.buffer.storageOperations.push(op);\n            }\n        }\n        flushNowOrSoon();\n    }\n    function redo() {\n        if (context.activeBatch) {\n            throw new Error(\"redo is not allowed during a batch\");\n        }\n        const historyOps = context.redoStack.pop();\n        if (historyOps === void 0) {\n            return;\n        }\n        context.pausedHistory = null;\n        const result = applyOps(historyOps, true);\n        batchUpdates(()=>{\n            notify(result.updates, doNotBatchUpdates);\n            context.undoStack.push(result.reverse);\n            onHistoryChange(doNotBatchUpdates);\n        });\n        for (const op of result.ops){\n            if (op.type !== \"presence\") {\n                context.buffer.storageOperations.push(op);\n            }\n        }\n        flushNowOrSoon();\n    }\n    function clear() {\n        context.undoStack.length = 0;\n        context.redoStack.length = 0;\n    }\n    function batch(callback) {\n        if (context.activeBatch) {\n            return callback();\n        }\n        let returnValue = void 0;\n        batchUpdates(()=>{\n            context.activeBatch = {\n                ops: [],\n                updates: {\n                    storageUpdates: /* @__PURE__ */ new Map(),\n                    presence: false,\n                    others: []\n                },\n                reverseOps: []\n            };\n            try {\n                returnValue = callback();\n            } finally{\n                const currentBatch = context.activeBatch;\n                context.activeBatch = null;\n                if (currentBatch.reverseOps.length > 0) {\n                    addToUndoStack(currentBatch.reverseOps, doNotBatchUpdates);\n                }\n                if (currentBatch.ops.length > 0) {\n                    context.redoStack.length = 0;\n                }\n                if (currentBatch.ops.length > 0) {\n                    dispatchOps(currentBatch.ops);\n                }\n                notify(currentBatch.updates, doNotBatchUpdates);\n                flushNowOrSoon();\n            }\n        });\n        return returnValue;\n    }\n    function pauseHistory() {\n        if (context.pausedHistory === null) {\n            context.pausedHistory = [];\n        }\n    }\n    function resumeHistory() {\n        const historyOps = context.pausedHistory;\n        context.pausedHistory = null;\n        if (historyOps !== null && historyOps.length > 0) {\n            _addToRealUndoStack(historyOps, batchUpdates);\n        }\n    }\n    function getStorageStatus() {\n        if (context.root === void 0) {\n            return _getStorage$ === null ? \"not-loaded\" : \"loading\";\n        } else {\n            return context.unacknowledgedOps.size === 0 ? \"synchronized\" : \"synchronizing\";\n        }\n    }\n    let _lastStorageStatus = getStorageStatus();\n    function notifyStorageStatus() {\n        const storageStatus = getStorageStatus();\n        if (_lastStorageStatus !== storageStatus) {\n            _lastStorageStatus = storageStatus;\n            eventHub.storageStatus.notify(storageStatus);\n        }\n    }\n    const others_forDevTools = new DerivedRef(context.others, (others)=>others.map((other, index)=>userToTreeNode(`Other ${index}`, other)));\n    const events = {\n        status: eventHub.status.observable,\n        lostConnection: eventHub.lostConnection.observable,\n        customEvent: eventHub.customEvent.observable,\n        others: eventHub.others.observable,\n        self: eventHub.self.observable,\n        myPresence: eventHub.myPresence.observable,\n        error: eventHub.error.observable,\n        storage: eventHub.storage.observable,\n        history: eventHub.history.observable,\n        storageDidLoad: eventHub.storageDidLoad.observable,\n        storageStatus: eventHub.storageStatus.observable,\n        ydoc: eventHub.ydoc.observable,\n        comments: eventHub.comments.observable\n    };\n    const commentsApi = createCommentsApi(config.roomId, delegates.authenticate, {\n        baseUrl: config.baseUrl\n    });\n    return Object.defineProperty({\n        /* NOTE: Exposing __internal here only to allow testing implementation details in unit tests */ __internal: {\n            get presenceBuffer () {\n                return deepClone(context.buffer.presenceUpdates?.data ?? null);\n            },\n            // prettier-ignore\n            get undoStack () {\n                return deepClone(context.undoStack);\n            },\n            // prettier-ignore\n            get nodeCount () {\n                return context.nodes.size;\n            },\n            // prettier-ignore\n            // Support for the Liveblocks browser extension\n            getSelf_forDevTools: ()=>selfAsTreeNode.current,\n            getOthers_forDevTools: ()=>others_forDevTools.current,\n            // prettier-ignore\n            simulate: {\n                // These exist only for our E2E testing app\n                explicitClose: (event)=>managedSocket._privateSendMachineEvent({\n                        type: \"EXPLICIT_SOCKET_CLOSE\",\n                        event\n                    }),\n                rawSend: (data)=>managedSocket.send(data)\n            }\n        },\n        id: config.roomId,\n        subscribe: makeClassicSubscribeFn(events),\n        connect: ()=>managedSocket.connect(),\n        reconnect: ()=>managedSocket.reconnect(),\n        disconnect: ()=>managedSocket.disconnect(),\n        destroy: ()=>{\n            uninstallBgTabSpy();\n            managedSocket.destroy();\n        },\n        // Presence\n        updatePresence,\n        updateYDoc,\n        broadcastEvent,\n        // Storage\n        batch,\n        history: {\n            undo,\n            redo,\n            canUndo,\n            canRedo,\n            clear,\n            pause: pauseHistory,\n            resume: resumeHistory\n        },\n        fetchYDoc,\n        getStorage,\n        getStorageSnapshot,\n        getStorageStatus,\n        events,\n        // Core\n        getStatus: ()=>managedSocket.getStatus(),\n        getConnectionState: ()=>managedSocket.getLegacyStatus(),\n        getSelf: ()=>self.current,\n        // Presence\n        getPresence: ()=>context.myPresence.current,\n        getOthers: ()=>context.others.current,\n        ...commentsApi\n    }, // Explictly make the __internal field non-enumerable, to avoid aggressive\n    // freezing when used with Immer\n    \"__internal\", {\n        enumerable: false\n    });\n}\nfunction makeClassicSubscribeFn(events) {\n    function subscribeToLiveStructureDeeply(node, callback) {\n        return events.storage.subscribe((updates)=>{\n            const relatedUpdates = updates.filter((update)=>isSameNodeOrChildOf(update.node, node));\n            if (relatedUpdates.length > 0) {\n                callback(relatedUpdates);\n            }\n        });\n    }\n    function subscribeToLiveStructureShallowly(node, callback) {\n        return events.storage.subscribe((updates)=>{\n            for (const update of updates){\n                if (update.node._id === node._id) {\n                    callback(update.node);\n                }\n            }\n        });\n    }\n    function subscribe(first, second, options) {\n        if (typeof first === \"string\" && isRoomEventName(first)) {\n            if (typeof second !== \"function\") {\n                throw new Error(\"Second argument must be a callback function\");\n            }\n            const callback = second;\n            switch(first){\n                case \"event\":\n                    return events.customEvent.subscribe(callback);\n                case \"my-presence\":\n                    return events.myPresence.subscribe(callback);\n                case \"others\":\n                    {\n                        const cb = callback;\n                        return events.others.subscribe((event)=>{\n                            const { others, ...internalEvent } = event;\n                            return cb(others, internalEvent);\n                        });\n                    }\n                case \"error\":\n                    return events.error.subscribe(callback);\n                case \"connection\":\n                    {\n                        const cb = callback;\n                        return events.status.subscribe((status)=>cb(newToLegacyStatus(status)));\n                    }\n                case \"status\":\n                    return events.status.subscribe(callback);\n                case \"lost-connection\":\n                    return events.lostConnection.subscribe(callback);\n                case \"history\":\n                    return events.history.subscribe(callback);\n                case \"storage-status\":\n                    return events.storageStatus.subscribe(callback);\n                default:\n                    return assertNever(first, `\"${String(first)}\" is not a valid event name`);\n            }\n        }\n        if (second === void 0 || typeof first === \"function\") {\n            if (typeof first === \"function\") {\n                const storageCallback = first;\n                return events.storage.subscribe(storageCallback);\n            } else {\n                throw new Error(\"Please specify a listener callback\");\n            }\n        }\n        if (isLiveNode(first)) {\n            const node = first;\n            if (options?.isDeep) {\n                const storageCallback = second;\n                return subscribeToLiveStructureDeeply(node, storageCallback);\n            } else {\n                const nodeCallback = second;\n                return subscribeToLiveStructureShallowly(node, nodeCallback);\n            }\n        }\n        throw new Error(`${String(first)} is not a value that can be subscribed to.`);\n    }\n    return subscribe;\n}\nfunction isRoomEventName(value) {\n    return value === \"my-presence\" || value === \"others\" || value === \"event\" || value === \"error\" || value === \"history\" || value === \"status\" || value === \"storage-status\" || value === \"lost-connection\" || value === \"connection\";\n}\nfunction makeAuthDelegateForRoom(roomId, authManager) {\n    return async ()=>{\n        return authManager.getAuthValue(\"room:read\", roomId);\n    };\n}\nfunction makeCreateSocketDelegateForRoom(roomId, baseUrl, WebSocketPolyfill) {\n    return (authValue)=>{\n        const ws = WebSocketPolyfill ?? (typeof WebSocket === \"undefined\" ? void 0 : WebSocket);\n        if (ws === void 0) {\n            throw new StopRetrying(\"To use Liveblocks client in a non-DOM environment, you need to provide a WebSocket polyfill.\");\n        }\n        const url = new URL(baseUrl);\n        url.protocol = url.protocol === \"http:\" ? \"ws\" : \"wss\";\n        url.pathname = \"/v7\";\n        url.searchParams.set(\"roomId\", roomId);\n        if (authValue.type === \"secret\") {\n            url.searchParams.set(\"tok\", authValue.token.raw);\n        } else if (authValue.type === \"public\") {\n            url.searchParams.set(\"pubkey\", authValue.publicApiKey);\n        } else {\n            return assertNever(authValue, \"Unhandled case\");\n        }\n        url.searchParams.set(\"version\", PKG_VERSION || \"dev\");\n        return new ws(url.toString());\n    };\n}\n// src/client.ts\nvar MIN_THROTTLE = 16;\nvar MAX_THROTTLE = 1e3;\nvar DEFAULT_THROTTLE = 100;\nvar MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT = 15e3;\nvar MIN_LOST_CONNECTION_TIMEOUT = 200;\nvar RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT = 1e3;\nvar MAX_LOST_CONNECTION_TIMEOUT = 3e4;\nvar DEFAULT_LOST_CONNECTION_TIMEOUT = 5e3;\nfunction getBaseUrlFromClientOptions(clientOptions) {\n    if (\"liveblocksServer\" in clientOptions) {\n        throw new Error(\"Client option no longer supported\");\n    }\n    if (typeof clientOptions.baseUrl === \"string\" && clientOptions.baseUrl.startsWith(\"http\")) {\n        return clientOptions.baseUrl;\n    } else {\n        return DEFAULT_BASE_URL;\n    }\n}\nfunction createClient(options) {\n    const clientOptions = options;\n    const throttleDelay = getThrottle(clientOptions.throttle ?? DEFAULT_THROTTLE);\n    const lostConnectionTimeout = getLostConnectionTimeout(clientOptions.lostConnectionTimeout ?? DEFAULT_LOST_CONNECTION_TIMEOUT);\n    const backgroundKeepAliveTimeout = getBackgroundKeepAliveTimeout(clientOptions.backgroundKeepAliveTimeout);\n    const authManager = createAuthManager(options);\n    const roomsById = /* @__PURE__ */ new Map();\n    function teardownRoom(room) {\n        unlinkDevTools(room.id);\n        roomsById.delete(room.id);\n        room.destroy();\n    }\n    function leaseRoom(info) {\n        const leave = ()=>{\n            const self = leave;\n            if (!info.unsubs.delete(self)) {\n                warn(\"This leave function was already called. Calling it more than once has no effect.\");\n            } else {\n                if (info.unsubs.size === 0) {\n                    teardownRoom(info.room);\n                }\n            }\n        };\n        info.unsubs.add(leave);\n        return {\n            room: info.room,\n            leave\n        };\n    }\n    function enterRoom(roomId, options2) {\n        const existing = roomsById.get(roomId);\n        if (existing !== void 0) {\n            return leaseRoom(existing);\n        }\n        deprecateIf(options2.initialPresence === null || options2.initialPresence === void 0, \"Please provide an initial presence value for the current user when entering the room.\");\n        const baseUrl = getBaseUrlFromClientOptions(clientOptions);\n        const newRoom = createRoom({\n            initialPresence: options2.initialPresence ?? {},\n            initialStorage: options2.initialStorage\n        }, {\n            roomId,\n            throttleDelay,\n            lostConnectionTimeout,\n            backgroundKeepAliveTimeout,\n            polyfills: clientOptions.polyfills,\n            delegates: clientOptions.mockedDelegates ?? {\n                createSocket: makeCreateSocketDelegateForRoom(roomId, baseUrl, clientOptions.polyfills?.WebSocket),\n                authenticate: makeAuthDelegateForRoom(roomId, authManager)\n            },\n            enableDebugLogging: clientOptions.enableDebugLogging,\n            unstable_batchedUpdates: options2?.unstable_batchedUpdates,\n            baseUrl,\n            unstable_fallbackToHTTP: !!clientOptions.unstable_fallbackToHTTP,\n            unstable_streamData: !!clientOptions.unstable_streamData\n        });\n        const newRoomInfo = {\n            room: newRoom,\n            unsubs: /* @__PURE__ */ new Set()\n        };\n        roomsById.set(roomId, newRoomInfo);\n        setupDevTools(()=>Array.from(roomsById.keys()));\n        linkDevTools(roomId, newRoom);\n        const shouldConnect = options2.autoConnect ?? options2.shouldInitiallyConnect ?? true;\n        if (shouldConnect) {\n            if (typeof atob === \"undefined\") {\n                if (clientOptions.polyfills?.atob === void 0) {\n                    throw new Error(\"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\");\n                }\n                global.atob = clientOptions.polyfills.atob;\n            }\n            newRoom.connect();\n        }\n        return leaseRoom(newRoomInfo);\n    }\n    function enter(roomId, options2) {\n        const { room, leave: _ } = enterRoom(roomId, options2);\n        return room;\n    }\n    function getRoom(roomId) {\n        const room = roomsById.get(roomId)?.room;\n        return room ? room : null;\n    }\n    function forceLeave(roomId) {\n        const unsubs = roomsById.get(roomId)?.unsubs ?? /* @__PURE__ */ new Set();\n        for (const unsub of unsubs){\n            unsub();\n        }\n    }\n    function logout() {\n        authManager.reset();\n        for (const { room } of roomsById.values()){\n            if (!isIdle(room.getStatus())) {\n                room.reconnect();\n            }\n        }\n    }\n    return {\n        logout,\n        // Old, deprecated APIs\n        enter,\n        getRoom,\n        leave: forceLeave,\n        // New, preferred API\n        enterRoom\n    };\n}\nfunction checkBounds(option, value, min, max, recommendedMin) {\n    if (typeof value !== \"number\" || value < min || max !== void 0 && value > max) {\n        throw new Error(max !== void 0 ? `${option} should be between ${recommendedMin ?? min} and ${max}.` : `${option} should be at least ${recommendedMin ?? min}.`);\n    }\n    return value;\n}\nfunction getBackgroundKeepAliveTimeout(value) {\n    if (value === void 0) return void 0;\n    return checkBounds(\"backgroundKeepAliveTimeout\", value, MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT);\n}\nfunction getThrottle(value) {\n    return checkBounds(\"throttle\", value, MIN_THROTTLE, MAX_THROTTLE);\n}\nfunction getLostConnectionTimeout(value) {\n    return checkBounds(\"lostConnectionTimeout\", value, MIN_LOST_CONNECTION_TIMEOUT, MAX_LOST_CONNECTION_TIMEOUT, RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT);\n}\n// src/crdts/utils.ts\nfunction toPlainLson(lson) {\n    if (lson instanceof LiveObject) {\n        return {\n            liveblocksType: \"LiveObject\",\n            data: Object.fromEntries(Object.entries(lson.toObject()).flatMap(([key, value])=>value !== void 0 ? [\n                    [\n                        key,\n                        toPlainLson(value)\n                    ]\n                ] : []))\n        };\n    } else if (lson instanceof LiveMap) {\n        return {\n            liveblocksType: \"LiveMap\",\n            data: Object.fromEntries([\n                ...lson\n            ].map(([key, value])=>[\n                    key,\n                    toPlainLson(value)\n                ]))\n        };\n    } else if (lson instanceof LiveList) {\n        return {\n            liveblocksType: \"LiveList\",\n            data: [\n                ...lson\n            ].map((item)=>toPlainLson(item))\n        };\n    } else {\n        return lson;\n    }\n}\n// src/immutable.ts\nfunction lsonObjectToJson(obj) {\n    const result = {};\n    for(const key in obj){\n        const val = obj[key];\n        if (val !== void 0) {\n            result[key] = lsonToJson(val);\n        }\n    }\n    return result;\n}\nfunction liveObjectToJson(liveObject) {\n    return lsonObjectToJson(liveObject.toObject());\n}\nfunction liveMapToJson(map) {\n    const result = {};\n    for (const [key, value] of map.entries()){\n        result[key] = lsonToJson(value);\n    }\n    return result;\n}\nfunction lsonListToJson(value) {\n    return value.map(lsonToJson);\n}\nfunction liveListToJson(value) {\n    return lsonListToJson(value.toArray());\n}\nfunction lsonToJson(value) {\n    if (value instanceof LiveObject) {\n        return liveObjectToJson(value);\n    } else if (value instanceof LiveList) {\n        return liveListToJson(value);\n    } else if (value instanceof LiveMap) {\n        return liveMapToJson(value);\n    } else if (value instanceof LiveRegister) {\n        return value.data;\n    }\n    if (Array.isArray(value)) {\n        return lsonListToJson(value);\n    } else if (isPlainObject(value)) {\n        return lsonObjectToJson(value);\n    }\n    return value;\n}\nfunction deepLiveify(value) {\n    if (Array.isArray(value)) {\n        return new LiveList(value.map(deepLiveify));\n    } else if (isPlainObject(value)) {\n        const init = {};\n        for(const key in value){\n            const val = value[key];\n            if (val === void 0) {\n                continue;\n            }\n            init[key] = deepLiveify(val);\n        }\n        return new LiveObject(init);\n    } else {\n        return value;\n    }\n}\nfunction patchLiveList(liveList, prev, next) {\n    let i = 0;\n    let prevEnd = prev.length - 1;\n    let nextEnd = next.length - 1;\n    let prevNode = prev[0];\n    let nextNode = next[0];\n    outer: {\n        while(prevNode === nextNode){\n            ++i;\n            if (i > prevEnd || i > nextEnd) {\n                break outer;\n            }\n            prevNode = prev[i];\n            nextNode = next[i];\n        }\n        prevNode = prev[prevEnd];\n        nextNode = next[nextEnd];\n        while(prevNode === nextNode){\n            prevEnd--;\n            nextEnd--;\n            if (i > prevEnd || i > nextEnd) {\n                break outer;\n            }\n            prevNode = prev[prevEnd];\n            nextNode = next[nextEnd];\n        }\n    }\n    if (i > prevEnd) {\n        if (i <= nextEnd) {\n            while(i <= nextEnd){\n                liveList.insert(deepLiveify(next[i]), i);\n                i++;\n            }\n        }\n    } else if (i > nextEnd) {\n        let localI = i;\n        while(localI <= prevEnd){\n            liveList.delete(i);\n            localI++;\n        }\n    } else {\n        while(i <= prevEnd && i <= nextEnd){\n            prevNode = prev[i];\n            nextNode = next[i];\n            const liveListNode = liveList.get(i);\n            if (isLiveObject(liveListNode) && isPlainObject(prevNode) && isPlainObject(nextNode)) {\n                patchLiveObject(liveListNode, prevNode, nextNode);\n            } else {\n                liveList.set(i, deepLiveify(nextNode));\n            }\n            i++;\n        }\n        while(i <= nextEnd){\n            liveList.insert(deepLiveify(next[i]), i);\n            i++;\n        }\n        let localI = i;\n        while(localI <= prevEnd){\n            liveList.delete(i);\n            localI++;\n        }\n    }\n}\nfunction patchLiveObjectKey(liveObject, key, prev, next) {\n    if (true) {\n        const nonSerializableValue = findNonSerializableValue(next);\n        if (nonSerializableValue) {\n            error2(`New state path: '${nonSerializableValue.path}' value: '${String(nonSerializableValue.value)}' is not serializable.\nOnly serializable value can be synced with Liveblocks.`);\n            return;\n        }\n    }\n    const value = liveObject.get(key);\n    if (next === void 0) {\n        liveObject.delete(key);\n    } else if (value === void 0) {\n        liveObject.set(key, deepLiveify(next));\n    } else if (prev === next) {\n        return;\n    } else if (isLiveList(value) && Array.isArray(prev) && Array.isArray(next)) {\n        patchLiveList(value, prev, next);\n    } else if (isLiveObject(value) && isPlainObject(prev) && isPlainObject(next)) {\n        patchLiveObject(value, prev, next);\n    } else {\n        liveObject.set(key, deepLiveify(next));\n    }\n}\nfunction patchLiveObject(root, prev, next) {\n    const updates = {};\n    for(const key in next){\n        patchLiveObjectKey(root, key, prev[key], next[key]);\n    }\n    for(const key in prev){\n        if (next[key] === void 0) {\n            root.delete(key);\n        }\n    }\n    if (Object.keys(updates).length > 0) {\n        root.update(updates);\n    }\n}\nfunction getParentsPath(node) {\n    const path = [];\n    while(node.parent.type === \"HasParent\"){\n        if (isLiveList(node.parent.node)) {\n            path.push(node.parent.node._indexOfPosition(node.parent.key));\n        } else {\n            path.push(node.parent.key);\n        }\n        node = node.parent.node;\n    }\n    return path;\n}\nfunction legacy_patchImmutableObject(state, updates) {\n    return updates.reduce((state2, update)=>legacy_patchImmutableObjectWithUpdate(state2, update), state);\n}\nfunction legacy_patchImmutableObjectWithUpdate(state, update) {\n    const path = getParentsPath(update.node);\n    return legacy_patchImmutableNode(state, path, update);\n}\nfunction legacy_patchImmutableNode(state, path, update) {\n    const pathItem = path.pop();\n    if (pathItem === void 0) {\n        switch(update.type){\n            case \"LiveObject\":\n                {\n                    if (!isJsonObject(state)) {\n                        throw new Error(\"Internal: received update on LiveObject but state was not an object\");\n                    }\n                    const newState = Object.assign({}, state);\n                    for(const key in update.updates){\n                        if (update.updates[key]?.type === \"update\") {\n                            const val = update.node.get(key);\n                            if (val !== void 0) {\n                                newState[key] = lsonToJson(val);\n                            }\n                        } else if (update.updates[key]?.type === \"delete\") {\n                            delete newState[key];\n                        }\n                    }\n                    return newState;\n                }\n            case \"LiveList\":\n                {\n                    if (!Array.isArray(state)) {\n                        throw new Error(\"Internal: received update on LiveList but state was not an array\");\n                    }\n                    let newState = state.map((x)=>x);\n                    for (const listUpdate of update.updates){\n                        if (listUpdate.type === \"set\") {\n                            newState = newState.map((item, index)=>index === listUpdate.index ? lsonToJson(listUpdate.item) : item);\n                        } else if (listUpdate.type === \"insert\") {\n                            if (listUpdate.index === newState.length) {\n                                newState.push(lsonToJson(listUpdate.item));\n                            } else {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.index),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index)\n                                ];\n                            }\n                        } else if (listUpdate.type === \"delete\") {\n                            newState.splice(listUpdate.index, 1);\n                        } else if (listUpdate.type === \"move\") {\n                            if (listUpdate.previousIndex > listUpdate.index) {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.index),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index, listUpdate.previousIndex),\n                                    ...newState.slice(listUpdate.previousIndex + 1)\n                                ];\n                            } else {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.previousIndex),\n                                    ...newState.slice(listUpdate.previousIndex + 1, listUpdate.index + 1),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index + 1)\n                                ];\n                            }\n                        }\n                    }\n                    return newState;\n                }\n            case \"LiveMap\":\n                {\n                    if (!isJsonObject(state)) {\n                        throw new Error(\"Internal: received update on LiveMap but state was not an object\");\n                    }\n                    const newState = Object.assign({}, state);\n                    for(const key in update.updates){\n                        if (update.updates[key]?.type === \"update\") {\n                            const value = update.node.get(key);\n                            if (value !== void 0) {\n                                newState[key] = lsonToJson(value);\n                            }\n                        } else if (update.updates[key]?.type === \"delete\") {\n                            delete newState[key];\n                        }\n                    }\n                    return newState;\n                }\n        }\n    }\n    if (Array.isArray(state)) {\n        const newArray = [\n            ...state\n        ];\n        newArray[pathItem] = legacy_patchImmutableNode(state[pathItem], path, update);\n        return newArray;\n    } else if (isJsonObject(state)) {\n        const node = state[pathItem];\n        if (node === void 0) {\n            return state;\n        } else {\n            const stateAsObj = state;\n            return {\n                ...stateAsObj,\n                [pathItem]: legacy_patchImmutableNode(node, path, update)\n            };\n        }\n    } else {\n        return state;\n    }\n}\n// src/lib/shallow.ts\nfunction shallowArray(xs, ys) {\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for(let i = 0; i < xs.length; i++){\n        if (!Object.is(xs[i], ys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowObj(objA, objB) {\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null || Object.prototype.toString.call(objA) !== \"[object Object]\" || Object.prototype.toString.call(objB) !== \"[object Object]\") {\n        return false;\n    }\n    const keysA = Object.keys(objA);\n    if (keysA.length !== Object.keys(objB).length) {\n        return false;\n    }\n    return keysA.every((key)=>Object.prototype.hasOwnProperty.call(objB, key) && Object.is(objA[key], objB[key]));\n}\nfunction shallow(a, b) {\n    if (Object.is(a, b)) {\n        return true;\n    }\n    const isArrayA = Array.isArray(a);\n    const isArrayB = Array.isArray(b);\n    if (isArrayA || isArrayB) {\n        if (!isArrayA || !isArrayB) {\n            return false;\n        }\n        return shallowArray(a, b);\n    }\n    return shallowObj(a, b);\n}\n// src/lib/AsyncCache.ts\nvar noop = ()=>{};\nfunction isShallowEqual(a, b) {\n    if (a.isLoading !== b.isLoading || a.data === void 0 !== (b.data === void 0) || a.error === void 0 !== (b.error === void 0)) {\n        return false;\n    } else {\n        return shallow(a.data, b.data) && shallow(a.error, b.error);\n    }\n}\nfunction createCacheItem(key, asyncFunction, options) {\n    const $asyncFunction = async ()=>asyncFunction(key);\n    const context = {\n        isInvalid: true\n    };\n    let state = {\n        isLoading: false\n    };\n    let previousState = {\n        isLoading: false\n    };\n    const eventSource2 = makeEventSource();\n    function notify() {\n        const isEqual = options?.isStateEqual ?? isShallowEqual;\n        if (!isEqual(previousState, state)) {\n            previousState = state;\n            eventSource2.notify(state);\n        }\n    }\n    async function resolve() {\n        if (!context.promise) {\n            return;\n        }\n        try {\n            const data = await context.promise;\n            context.isInvalid = false;\n            state = {\n                isLoading: false,\n                data\n            };\n        } catch (error3) {\n            state = {\n                isLoading: false,\n                data: state.data,\n                error: error3\n            };\n        }\n        context.promise = void 0;\n        notify();\n    }\n    async function revalidate() {\n        context.isInvalid = true;\n        return get();\n    }\n    async function get() {\n        if (context.isInvalid) {\n            if (!context.promise) {\n                context.isInvalid = true;\n                context.promise = $asyncFunction();\n                state = {\n                    isLoading: true,\n                    data: state.data\n                };\n                notify();\n            }\n            await resolve();\n        }\n        return getState();\n    }\n    function getState() {\n        return state;\n    }\n    return {\n        ...eventSource2.observable,\n        get,\n        getState,\n        revalidate\n    };\n}\nfunction createAsyncCache(asyncFunction, options) {\n    const cache = /* @__PURE__ */ new Map();\n    function create(key) {\n        let cacheItem = cache.get(key);\n        if (cacheItem) {\n            return cacheItem;\n        }\n        cacheItem = createCacheItem(key, asyncFunction, options);\n        cache.set(key, cacheItem);\n        return cacheItem;\n    }\n    function get(key) {\n        return create(key).get();\n    }\n    function getState(key) {\n        return cache.get(key)?.getState();\n    }\n    function revalidate(key) {\n        return create(key).revalidate();\n    }\n    function subscribe(key, callback) {\n        return create(key).subscribe(callback) ?? noop;\n    }\n    function subscribeOnce(key, callback) {\n        return create(key).subscribeOnce(callback) ?? noop;\n    }\n    function has(key) {\n        return cache.has(key);\n    }\n    function clear() {\n        cache.clear();\n    }\n    return {\n        create,\n        get,\n        getState,\n        revalidate,\n        subscribe,\n        subscribeOnce,\n        has,\n        clear\n    };\n}\n// src/lib/Poller.ts\nfunction makePoller(callback) {\n    let context = {\n        state: \"stopped\",\n        timeoutHandle: null,\n        interval: null,\n        lastScheduledAt: null,\n        remainingInterval: null\n    };\n    function poll() {\n        if (context.state === \"running\") {\n            schedule(context.interval);\n        }\n        void callback();\n    }\n    function schedule(interval) {\n        context = {\n            state: \"running\",\n            interval: context.state !== \"stopped\" ? context.interval : interval,\n            lastScheduledAt: performance.now(),\n            timeoutHandle: setTimeout(poll, interval),\n            remainingInterval: null\n        };\n    }\n    function scheduleRemaining(remaining) {\n        if (context.state !== \"paused\") {\n            return;\n        }\n        context = {\n            state: \"running\",\n            interval: context.interval,\n            lastScheduledAt: context.lastScheduledAt,\n            timeoutHandle: setTimeout(poll, remaining),\n            remainingInterval: null\n        };\n    }\n    function start(interval) {\n        if (context.state === \"running\") {\n            return;\n        }\n        schedule(interval);\n    }\n    function restart(interval) {\n        stop();\n        start(interval);\n    }\n    function pause() {\n        if (context.state !== \"running\") {\n            return;\n        }\n        clearTimeout(context.timeoutHandle);\n        context = {\n            state: \"paused\",\n            interval: context.interval,\n            lastScheduledAt: context.lastScheduledAt,\n            timeoutHandle: null,\n            remainingInterval: context.interval - (performance.now() - context.lastScheduledAt)\n        };\n    }\n    function resume() {\n        if (context.state !== \"paused\") {\n            return;\n        }\n        scheduleRemaining(context.remainingInterval);\n    }\n    function stop() {\n        if (context.state === \"stopped\") {\n            return;\n        }\n        if (context.timeoutHandle) {\n            clearTimeout(context.timeoutHandle);\n        }\n        context = {\n            state: \"stopped\",\n            interval: null,\n            lastScheduledAt: null,\n            timeoutHandle: null,\n            remainingInterval: null\n        };\n    }\n    return {\n        start,\n        restart,\n        pause,\n        resume,\n        stop\n    };\n}\n// src/lib/stringify.ts\nfunction stringify(object, ...args) {\n    if (typeof object !== \"object\" || object === null || Array.isArray(object)) {\n        return JSON.stringify(object, ...args);\n    }\n    const sortedObject = Object.keys(object).sort().reduce((sortedObject2, key)=>{\n        sortedObject2[key] = object[key];\n        return sortedObject2;\n    }, {});\n    return JSON.stringify(sortedObject, ...args);\n}\n// src/index.ts\ndetectDupes(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Comment.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/Comment.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Comment: () => (/* binding */ Comment)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_toggle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @radix-ui/react-toggle */ \"(ssr)/./node_modules/@radix-ui/react-toggle/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _icons_Check_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../icons/Check.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Check.mjs\");\n/* harmony import */ var _icons_Cross_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../icons/Cross.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Cross.mjs\");\n/* harmony import */ var _icons_Delete_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../icons/Delete.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Delete.mjs\");\n/* harmony import */ var _icons_Edit_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../icons/Edit.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Edit.mjs\");\n/* harmony import */ var _icons_Ellipsis_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../icons/Ellipsis.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Ellipsis.mjs\");\n/* harmony import */ var _icons_EmojiAdd_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../icons/EmojiAdd.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/EmojiAdd.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../primitives/Comment/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/index.mjs\");\n/* harmony import */ var _primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../primitives/Composer/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/index.mjs\");\n/* harmony import */ var _primitives_Timestamp_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../primitives/Timestamp.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Timestamp.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* harmony import */ var _Composer_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./Composer.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Composer.mjs\");\n/* harmony import */ var _internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./internal/Avatar.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Avatar.mjs\");\n/* harmony import */ var _internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./internal/Button.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Button.mjs\");\n/* harmony import */ var _internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./internal/Dropdown.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Dropdown.mjs\");\n/* harmony import */ var _internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Emoji.mjs\");\n/* harmony import */ var _internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/EmojiPicker.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/EmojiPicker.mjs\");\n/* harmony import */ var _internal_List_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/List.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/List.mjs\");\n/* harmony import */ var _internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/Tooltip.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Tooltip.mjs\");\n/* harmony import */ var _internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/User.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/User.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"(ssr)/./node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ Comment auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst REACTIONS_TRUNCATE = 5;\nfunction CommentMention({ userId, className, ...props }) {\n    const { useSelf } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomContextBundle)();\n    const self = useSelf();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Mention, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-mention\", className),\n        \"data-self\": userId === self?.id ? \"\" : void 0,\n        ...props\n    }, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_4__.MENTION_CHARACTER, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__.User, {\n        userId\n    }));\n}\nfunction CommentLink({ href, children, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Link, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-link\", className),\n        href,\n        ...props\n    }, children);\n}\nconst CommentReaction = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ comment, reaction, className, ...props }, forwardedRef)=>{\n    const { useAddReaction, useRemoveReaction, useSelf } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomContextBundle)();\n    const self = useSelf();\n    const addReaction = useAddReaction();\n    const removeReaction = useRemoveReaction();\n    const isActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return reaction.users.some((users)=>users.id === self?.id);\n    }, [\n        reaction,\n        self?.id\n    ]);\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_6__.useOverrides)();\n    const tooltipContent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, $.COMMENT_REACTION_TOOLTIP(reaction.emoji, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_List_mjs__WEBPACK_IMPORTED_MODULE_7__.List, {\n            values: reaction.users.map((users, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__.User, {\n                    key: users.id,\n                    userId: users.id,\n                    capitalize: index === 0,\n                    replaceSelf: true\n                })),\n            formatRemaining: $.COMMENT_REACTION_REMAINING,\n            truncate: REACTIONS_TRUNCATE\n        }), reaction.users.length)), [\n        $,\n        reaction\n    ]);\n    const handlePressedChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((isPressed)=>{\n        if (isPressed) {\n            addReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji: reaction.emoji\n            });\n        } else {\n            removeReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji: reaction.emoji\n            });\n        }\n    }, [\n        addReaction,\n        comment.threadId,\n        comment.id,\n        reaction.emoji,\n        removeReaction\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.Tooltip, {\n        content: tooltipContent,\n        multiline: true,\n        className: \"lb-comment-reaction-tooltip\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_toggle__WEBPACK_IMPORTED_MODULE_9__.Root, {\n        asChild: true,\n        pressed: isActive,\n        onPressedChange: handlePressedChange,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__.Button, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-reaction\", className),\n        variant: \"outline\",\n        \"aria-label\": $.COMMENT_REACTION_DESCRIPTION(reaction.emoji, reaction.users.length),\n        \"data-self\": isActive ? \"\" : void 0,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_11__.Emoji, {\n        className: \"lb-comment-reaction-emoji\",\n        emoji: reaction.emoji\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-reaction-count\"\n    }, reaction.users.length))));\n});\nconst Comment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ comment, indentContent = true, showDeleted, showActions = \"hover\", showReactions = true, onAuthorClick, onMentionClick, onCommentEdit, onCommentDelete, overrides, root = true, additionalActions, additionalActionsClassName, className, ...props }, forwardedRef)=>{\n    const { useDeleteComment, useEditComment, useAddReaction, useRemoveReaction, useSelf } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomContextBundle)();\n    const self = useSelf();\n    const deleteComment = useDeleteComment();\n    const editComment = useEditComment();\n    const addReaction = useAddReaction();\n    const removeReaction = useRemoveReaction();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_6__.useOverrides)(overrides);\n    const [isEditing, setEditing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMoreActionOpen, setMoreActionOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isReactionActionOpen, setReactionActionOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const stopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n    }, []);\n    const handleEdit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setEditing(true);\n    }, []);\n    const handleEditCancel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n        setEditing(false);\n    }, []);\n    const handleEditSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ body }, event)=>{\n        onCommentEdit?.(comment);\n        event.preventDefault();\n        setEditing(false);\n        editComment({\n            commentId: comment.id,\n            threadId: comment.threadId,\n            body\n        });\n    }, [\n        comment,\n        editComment,\n        onCommentEdit\n    ]);\n    const handleDelete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        onCommentDelete?.(comment);\n        deleteComment({\n            commentId: comment.id,\n            threadId: comment.threadId\n        });\n    }, [\n        comment,\n        deleteComment,\n        onCommentDelete\n    ]);\n    const handleAuthorClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onAuthorClick?.(comment.userId, event);\n    }, [\n        comment.userId,\n        onAuthorClick\n    ]);\n    const handleReactionSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((emoji)=>{\n        const reactionIndex = comment.reactions.findIndex((reaction)=>reaction.emoji === emoji);\n        if (reactionIndex > 0 && self?.id && comment.reactions[reactionIndex].users.some((user)=>user.id === self?.id)) {\n            removeReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji\n            });\n        } else {\n            addReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji\n            });\n        }\n    }, [\n        addReaction,\n        comment.id,\n        comment.reactions,\n        comment.threadId,\n        removeReaction,\n        self?.id\n    ]);\n    if (!showDeleted && !comment.body) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_12__.TooltipProvider, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(root && \"lb-root\", \"lb-comment\", indentContent && \"lb-comment:indent-content\", showActions === \"hover\" && \"lb-comment:show-actions-hover\", (isMoreActionOpen || isReactionActionOpen) && \"lb-comment:action-open\", className),\n        \"data-deleted\": !comment.body ? \"\" : void 0,\n        dir: $.dir,\n        ...props,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-header\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-details\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_13__.Avatar, {\n        className: \"lb-comment-avatar\",\n        userId: comment.userId,\n        onClick: handleAuthorClick\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-details-labels\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__.User, {\n        className: \"lb-comment-author\",\n        userId: comment.userId,\n        onClick: handleAuthorClick\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-date\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Timestamp_mjs__WEBPACK_IMPORTED_MODULE_14__.Timestamp, {\n        locale: $.locale,\n        date: comment.createdAt,\n        className: \"lb-comment-date-timestamp\"\n    }), comment.editedAt && comment.body && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-date-edited\"\n    }, $.COMMENT_EDITED))))), showActions && !isEditing && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-actions\", additionalActionsClassName)\n    }, additionalActions ?? null, showReactions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_15__.EmojiPicker, {\n        onEmojiSelect: handleReactionSelect,\n        onOpenChange: setReactionActionOpen\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.Tooltip, {\n        content: $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_16__.PopoverTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__.Button, {\n        className: \"lb-comment-action\",\n        onClick: stopPropagation,\n        \"aria-label\": $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_EmojiAdd_mjs__WEBPACK_IMPORTED_MODULE_17__.EmojiAddIcon, {\n        className: \"lb-button-icon\"\n    }))))), comment.userId === self?.id && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_18__.Dropdown, {\n        open: isMoreActionOpen,\n        onOpenChange: setMoreActionOpen,\n        align: \"end\",\n        content: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_18__.DropdownItem, {\n            onSelect: handleEdit,\n            onClick: stopPropagation\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Edit_mjs__WEBPACK_IMPORTED_MODULE_19__.EditIcon, {\n            className: \"lb-dropdown-item-icon\"\n        }), $.COMMENT_EDIT), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_18__.DropdownItem, {\n            onSelect: handleDelete,\n            onClick: stopPropagation\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Delete_mjs__WEBPACK_IMPORTED_MODULE_20__.DeleteIcon, {\n            className: \"lb-dropdown-item-icon\"\n        }), $.COMMENT_DELETE))\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.Tooltip, {\n        content: $.COMMENT_MORE\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_21__.DropdownMenuTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__.Button, {\n        className: \"lb-comment-action\",\n        disabled: !comment.body,\n        onClick: stopPropagation,\n        \"aria-label\": $.COMMENT_MORE\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Ellipsis_mjs__WEBPACK_IMPORTED_MODULE_22__.EllipsisIcon, {\n        className: \"lb-button-icon\"\n    }))))))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-content\"\n    }, isEditing ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Composer_mjs__WEBPACK_IMPORTED_MODULE_23__.Composer, {\n        className: \"lb-comment-composer\",\n        root: false,\n        onComposerSubmit: handleEditSubmit,\n        defaultValue: comment.body,\n        autoFocus: true,\n        showAttribution: false,\n        actions: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.Tooltip, {\n            content: $.COMMENT_EDIT_COMPOSER_CANCEL,\n            \"aria-label\": $.COMMENT_EDIT_COMPOSER_CANCEL\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__.Button, {\n            className: \"lb-composer-action\",\n            onClick: handleEditCancel\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Cross_mjs__WEBPACK_IMPORTED_MODULE_24__.CrossIcon, {\n            className: \"lb-button-icon\"\n        }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.ShortcutTooltip, {\n            content: $.COMMENT_EDIT_COMPOSER_SAVE,\n            shortcut: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.ShortcutTooltipKey, {\n                name: \"enter\"\n            })\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_25__.Submit, {\n            asChild: true\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__.Button, {\n            variant: \"primary\",\n            className: \"lb-composer-action\",\n            onClick: stopPropagation,\n            \"aria-label\": $.COMMENT_EDIT_COMPOSER_SAVE\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Check_mjs__WEBPACK_IMPORTED_MODULE_26__.CheckIcon, {\n            className: \"lb-button-icon\"\n        }))))),\n        overrides: {\n            COMPOSER_PLACEHOLDER: $.COMMENT_EDIT_COMPOSER_PLACEHOLDER\n        }\n    }) : comment.body ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Body, {\n        className: \"lb-comment-body\",\n        body: comment.body,\n        components: {\n            Mention: ({ userId })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentMention, {\n                    userId,\n                    onClick: (event)=>onMentionClick?.(userId, event)\n                }),\n            Link: CommentLink\n        }\n    }), showReactions && comment.reactions.length > 0 && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-reactions\"\n    }, comment.reactions.map((reaction)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentReaction, {\n            key: reaction.emoji,\n            comment,\n            reaction\n        })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_15__.EmojiPicker, {\n        onEmojiSelect: handleReactionSelect\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_8__.Tooltip, {\n        content: $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_16__.PopoverTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_10__.Button, {\n        className: \"lb-comment-reaction lb-comment-reaction-add\",\n        variant: \"outline\",\n        onClick: stopPropagation,\n        \"aria-label\": $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_EmojiAdd_mjs__WEBPACK_IMPORTED_MODULE_17__.EmojiAddIcon, {\n        className: \"lb-button-icon\"\n    }))))))) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-body\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        className: \"lb-comment-deleted\"\n    }, $.COMMENT_DELETED)))));\n});\n //# sourceMappingURL=Comment.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Comment.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Composer.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/Composer.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composer: () => (/* binding */ Composer)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _icons_Emoji_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../icons/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Emoji.mjs\");\n/* harmony import */ var _icons_Mention_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../icons/Mention.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Mention.mjs\");\n/* harmony import */ var _icons_Send_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../icons/Send.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Send.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../primitives/Composer/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/index.mjs\");\n/* harmony import */ var _primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../primitives/Composer/contexts.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/contexts.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_use_controllable_state_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/use-controllable-state.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-controllable-state.mjs\");\n/* harmony import */ var _internal_Attribution_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./internal/Attribution.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Attribution.mjs\");\n/* harmony import */ var _internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/Avatar.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Avatar.mjs\");\n/* harmony import */ var _internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/Button.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Button.mjs\");\n/* harmony import */ var _internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/EmojiPicker.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/EmojiPicker.mjs\");\n/* harmony import */ var _internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/Tooltip.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Tooltip.mjs\");\n/* harmony import */ var _internal_User_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/User.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/User.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ Composer auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction ComposerInsertMentionEditorAction({ label, className, onClick, ...props }) {\n    const { createMention } = (0,_primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__.useComposer)();\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onClick?.(event);\n        if (!event.isDefaultPrevented()) {\n            event.stopPropagation();\n            createMention();\n        }\n    }, [\n        createMention,\n        onClick\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {\n        content: label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-composer-editor-action\", className),\n        onMouseDown: preventDefault,\n        onClick: handleClick,\n        \"aria-label\": label,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Mention_mjs__WEBPACK_IMPORTED_MODULE_5__.MentionIcon, {\n        className: \"lb-button-icon\"\n    })));\n}\nfunction ComposerInsertEmojiEditorAction({ label, onPickerOpenChange, className, ...props }) {\n    const { insertText } = (0,_primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__.useComposer)();\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_6__.EmojiPicker, {\n        onEmojiSelect: insertText,\n        onOpenChange: onPickerOpenChange\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {\n        content: label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.PopoverTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-composer-editor-action\", className),\n        onMouseDown: preventDefault,\n        \"aria-label\": label,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Emoji_mjs__WEBPACK_IMPORTED_MODULE_8__.EmojiIcon, {\n        className: \"lb-button-icon\"\n    })))));\n}\nfunction ComposerMention({ userId }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Mention, {\n        className: \"lb-composer-mention\"\n    }, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_10__.MENTION_CHARACTER, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_11__.User, {\n        userId\n    }));\n}\nfunction ComposerMentionSuggestions({ userIds }) {\n    return userIds.length > 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Suggestions, {\n        className: \"lb-root lb-portal lb-elevation lb-composer-suggestions lb-composer-mention-suggestions\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.SuggestionsList, {\n        className: \"lb-composer-suggestions-list lb-composer-mention-suggestions-list\"\n    }, userIds.map((userId)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.SuggestionsListItem, {\n            key: userId,\n            className: \"lb-composer-suggestions-list-item lb-composer-mention-suggestion\",\n            value: userId\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_12__.Avatar, {\n            userId,\n            className: \"lb-composer-mention-suggestion-avatar\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_11__.User, {\n            userId,\n            className: \"lb-composer-mention-suggestion-user\"\n        }))))) : null;\n}\nfunction ComposerLink({ href, children }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Link, {\n        href,\n        className: \"lb-composer-link\"\n    }, children);\n}\nconst editorComponents = {\n    Mention: ComposerMention,\n    MentionSuggestions: ComposerMentionSuggestions,\n    Link: ComposerLink\n};\nconst ComposerWithContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ defaultValue, disabled, autoFocus, collapsed: controlledCollapsed, defaultCollapsed, onCollapsedChange: controlledOnCollapsedChange, actions, overrides, showAttribution, root = true, onFocus, onBlur, className, ...props }, forwardedRef)=>{\n    const { hasResolveMentionSuggestions } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__.useRoomContextBundle)();\n    const { isEmpty } = (0,_primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__.useComposer)();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_14__.useOverrides)(overrides);\n    const [isEmojiPickerOpen, setEmojiPickerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [collapsed, onCollapsedChange] = (0,_utils_use_controllable_state_mjs__WEBPACK_IMPORTED_MODULE_15__.useControllableState)(controlledCollapsed === void 0 && defaultCollapsed === void 0 ? false : controlledCollapsed, controlledOnCollapsedChange, defaultCollapsed);\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    const stopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n    }, []);\n    const handleEditorClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n        if (isEmpty) {\n            onCollapsedChange?.(false);\n        }\n    }, [\n        isEmpty,\n        onCollapsedChange\n    ]);\n    const handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onFocus?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if (isEmpty) {\n            onCollapsedChange?.(false);\n        }\n    }, [\n        isEmpty,\n        onCollapsedChange,\n        onFocus\n    ]);\n    const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onBlur?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        const isOutside = !event.currentTarget.contains(event.relatedTarget);\n        if (isOutside && isEmpty && !isEmojiPickerOpen) {\n            onCollapsedChange?.(true);\n        }\n    }, [\n        isEmojiPickerOpen,\n        isEmpty,\n        onBlur,\n        onCollapsedChange\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(root && \"lb-root\", \"lb-composer lb-composer-form\", className),\n        dir: $.dir,\n        ...props,\n        ref: forwardedRef,\n        \"data-collapsed\": collapsed ? \"\" : void 0,\n        onFocus: handleFocus,\n        onBlur: handleBlur\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Editor, {\n        className: \"lb-composer-editor\",\n        onClick: handleEditorClick,\n        placeholder: $.COMPOSER_PLACEHOLDER,\n        defaultValue,\n        disabled,\n        autoFocus,\n        components: editorComponents,\n        dir: $.dir\n    }), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-composer-footer\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-composer-editor-actions\"\n    }, hasResolveMentionSuggestions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerInsertMentionEditorAction, {\n        label: $.COMPOSER_INSERT_MENTION\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerInsertEmojiEditorAction, {\n        label: $.COMPOSER_INSERT_EMOJI,\n        onPickerOpenChange: setEmojiPickerOpen\n    })), showAttribution && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Attribution_mjs__WEBPACK_IMPORTED_MODULE_16__.Attribution, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-composer-actions\"\n    }, actions ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.ShortcutTooltip, {\n        content: $.COMPOSER_SEND,\n        shortcut: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.ShortcutTooltipKey, {\n            name: \"enter\"\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Submit, {\n        disabled,\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        onMouseDown: preventDefault,\n        onClick: stopPropagation,\n        className: \"lb-composer-action\",\n        variant: \"primary\",\n        \"aria-label\": $.COMPOSER_SEND\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Send_mjs__WEBPACK_IMPORTED_MODULE_17__.SendIcon, null))))))));\n});\nconst Composer = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ threadId, commentId, metadata, onComposerSubmit, ...props }, forwardedRef)=>{\n    const { useCreateThread, useCreateComment, useEditComment } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__.useRoomContextBundle)();\n    const createThread = useCreateThread();\n    const createComment = useCreateComment();\n    const editComment = useEditComment();\n    const handleCommentSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((comment, event)=>{\n        onComposerSubmit?.(comment, event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if (commentId && threadId) {\n            editComment({\n                commentId,\n                threadId,\n                body: comment.body\n            });\n        } else if (threadId) {\n            createComment({\n                threadId,\n                body: comment.body\n            });\n        } else {\n            createThread({\n                body: comment.body,\n                metadata: metadata ?? {}\n            });\n        }\n    }, [\n        commentId,\n        createComment,\n        createThread,\n        editComment,\n        metadata,\n        onComposerSubmit,\n        threadId\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_18__.TooltipProvider, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Form, {\n        onComposerSubmit: handleCommentSubmit,\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerWithContext, {\n        ...props,\n        ref: forwardedRef\n    })));\n});\n //# sourceMappingURL=Composer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Composer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Thread.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/Thread.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Thread: () => (/* binding */ Thread)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_toggle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-toggle */ \"(ssr)/./node_modules/@radix-ui/react-toggle/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _icons_Resolve_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../icons/Resolve.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Resolve.mjs\");\n/* harmony import */ var _icons_Resolved_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../icons/Resolved.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Resolved.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* harmony import */ var _Comment_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Comment.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Comment.mjs\");\n/* harmony import */ var _Composer_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Composer.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Composer.mjs\");\n/* harmony import */ var _internal_Button_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/Button.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Button.mjs\");\n/* harmony import */ var _internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/Tooltip.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Tooltip.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ Thread auto */ \n\n\n\n\n\n\n\n\n\n\n\nconst Thread = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ thread, indentCommentContent = true, showActions = \"hover\", showDeletedComments, showResolveAction = true, showReactions = true, showComposer = \"collapsed\", onResolvedChange, onCommentEdit, onCommentDelete, onThreadDelete, onAuthorClick, onMentionClick, overrides, className, ...props }, forwardedRef)=>{\n    const { useEditThreadMetadata } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomContextBundle)();\n    const editThreadMetadata = useEditThreadMetadata();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_2__.useOverrides)(overrides);\n    const firstCommentIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return showDeletedComments ? 0 : thread.comments.findIndex((comment)=>comment.body);\n    }, [\n        showDeletedComments,\n        thread.comments\n    ]);\n    const stopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n    }, []);\n    const handleResolvedChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((resolved)=>{\n        onResolvedChange?.(resolved);\n        editThreadMetadata({\n            threadId: thread.id,\n            metadata: {\n                resolved\n            }\n        });\n    }, [\n        editThreadMetadata,\n        onResolvedChange,\n        thread.id\n    ]);\n    const handleCommentDelete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((comment)=>{\n        onCommentDelete?.(comment);\n        const filteredComments = thread.comments.filter((comment2)=>comment2.body);\n        if (filteredComments.length <= 1) {\n            onThreadDelete?.(thread);\n        }\n    }, [\n        onCommentDelete,\n        onThreadDelete,\n        thread\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_3__.TooltipProvider, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-root lb-thread\", showActions === \"hover\" && \"lb-thread:show-actions-hover\", className),\n        \"data-resolved\": thread.metadata.resolved ? \"\" : void 0,\n        dir: $.dir,\n        ...props,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-thread-comments\"\n    }, thread.comments.map((comment, index)=>{\n        const isFirstComment = index === firstCommentIndex;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Comment_mjs__WEBPACK_IMPORTED_MODULE_5__.Comment, {\n            key: comment.id,\n            className: \"lb-thread-comment\",\n            root: false,\n            comment,\n            indentContent: indentCommentContent,\n            showDeleted: showDeletedComments,\n            showActions,\n            showReactions,\n            onCommentEdit,\n            onCommentDelete: handleCommentDelete,\n            onAuthorClick,\n            onMentionClick,\n            additionalActionsClassName: isFirstComment ? \"lb-thread-actions\" : void 0,\n            additionalActions: isFirstComment && showResolveAction ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_6__.Tooltip, {\n                content: thread.metadata.resolved ? $.THREAD_UNRESOLVE : $.THREAD_RESOLVE\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_toggle__WEBPACK_IMPORTED_MODULE_7__.Root, {\n                pressed: thread.metadata.resolved,\n                onPressedChange: handleResolvedChange,\n                asChild: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_8__.Button, {\n                className: \"lb-comment-action\",\n                onClick: stopPropagation,\n                \"aria-label\": thread.metadata.resolved ? $.THREAD_UNRESOLVE : $.THREAD_RESOLVE\n            }, thread.metadata.resolved ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Resolved_mjs__WEBPACK_IMPORTED_MODULE_9__.ResolvedIcon, {\n                className: \"lb-button-icon\"\n            }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Resolve_mjs__WEBPACK_IMPORTED_MODULE_10__.ResolveIcon, {\n                className: \"lb-button-icon\"\n            })))) : null\n        });\n    })), showComposer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Composer_mjs__WEBPACK_IMPORTED_MODULE_11__.Composer, {\n        className: \"lb-thread-composer\",\n        root: false,\n        threadId: thread.id,\n        defaultCollapsed: showComposer === \"collapsed\" ? true : void 0,\n        overrides: {\n            COMPOSER_PLACEHOLDER: $.THREAD_COMPOSER_PLACEHOLDER,\n            COMPOSER_SEND: $.THREAD_COMPOSER_SEND\n        }\n    })));\n});\n //# sourceMappingURL=Thread.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/Thread.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Attribution.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Attribution.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Attribution: () => (/* binding */ Attribution)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n\n\nfunction Attribution({ className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://liveblocks.io\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-composer-attribution\", className),\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 384 72\",\n        \"aria-label\": \"Made with Liveblocks\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M86 10h-8v50h8V10Zm16 14h-8v36h8V24Zm0-15h-8v9h8V9Zm13 15h-9l12 36h10l13-36h-9l-9 28-8-28Zm44-1c-11 0-18 8-18 19s7 19 18 19c8 0 15-4 17-13h-8c-1 4-5 6-9 6-6 0-9-3-9-10h27c0-10-6-21-18-21Zm0 7c5 0 9 3 9 8h-18c0-5 4-8 9-8Zm42-7c-4 0-8 2-11 6V10h-8v50h8v-5c3 4 7 6 11 6 11 0 16-9 16-19s-5-19-16-19Zm-2 32c-7 0-9-7-9-13s2-13 9-13 9 7 9 13-2 13-9 13Zm32-45h-8v50h8V10Zm24 51c11 0 18-8 18-19s-8-19-18-19c-11 0-19 8-19 19s7 19 19 19Zm0-6c-8 0-10-7-10-13s2-13 10-13c7 0 9 7 9 13s-2 13-9 13Zm39 6c8 0 15-4 17-12l-8-1c-2 4-4 6-9 6-7 0-9-6-9-12s2-12 9-12c5 0 8 3 8 7l9-1c-2-8-9-13-17-13-11 0-18 9-18 19 0 11 7 19 18 19Zm30-14 4-4 10 17h10l-15-23 15-13h-11l-13 13V10h-9v50h9V47Zm39 14c8 0 16-3 16-12 0-8-8-10-15-11-2-1-7-1-7-5 0-3 3-4 6-4 4 0 7 3 7 7l8-1c-1-9-8-12-15-12s-15 3-15 11 9 10 15 11c3 1 8 2 8 5 0 4-4 5-7 5-5 0-8-3-9-7l-8 1c1 8 9 12 16 12ZM41 27H0l12 12v17l29-29ZM20 60h40L48 48V32L20 60Z\",\n        fill: \"currentColor\"\n    })));\n}\n //# sourceMappingURL=Attribution.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0F0dHJpYnV0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDc0I7QUFFekQsU0FBU0UsWUFBWSxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsT0FBTztJQUMxQyxPQUFPLGFBQWEsaUJBQUdKLGdEQUE0QixDQUFDLEtBQUs7UUFDdkRNLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxLQUFLO1FBQ0xMLFdBQVdGLGtFQUFVQSxDQUFDLDJCQUEyQkU7UUFDakQsR0FBR0MsS0FBSztJQUNWLEdBQUcsYUFBYSxpQkFBR0osZ0RBQTRCLENBQUMsT0FBTztRQUNyRFMsT0FBTztRQUNQQyxTQUFTO1FBQ1QsY0FBYztJQUNoQixHQUFHLGFBQWEsaUJBQUdWLGdEQUE0QixDQUFDLFFBQVE7UUFDdERXLFVBQVU7UUFDVkMsVUFBVTtRQUNWQyxHQUFHO1FBQ0hDLE1BQU07SUFDUjtBQUNGO0FBRXVCLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9BdHRyaWJ1dGlvbi5tanM/NWUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL2NsYXNzLW5hbWVzLm1qcyc7XG5cbmZ1bmN0aW9uIEF0dHJpYnV0aW9uKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGhyZWY6IFwiaHR0cHM6Ly9saXZlYmxvY2tzLmlvXCIsXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwibGItY29tcG9zZXItYXR0cmlidXRpb25cIiwgY2xhc3NOYW1lKSxcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAzODQgNzJcIixcbiAgICBcImFyaWEtbGFiZWxcIjogXCJNYWRlIHdpdGggTGl2ZWJsb2Nrc1wiXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk04NiAxMGgtOHY1MGg4VjEwWm0xNiAxNGgtOHYzNmg4VjI0Wm0wLTE1aC04djloOFY5Wm0xMyAxNWgtOWwxMiAzNmgxMGwxMy0zNmgtOWwtOSAyOC04LTI4Wm00NC0xYy0xMSAwLTE4IDgtMTggMTlzNyAxOSAxOCAxOWM4IDAgMTUtNCAxNy0xM2gtOGMtMSA0LTUgNi05IDYtNiAwLTktMy05LTEwaDI3YzAtMTAtNi0yMS0xOC0yMVptMCA3YzUgMCA5IDMgOSA4aC0xOGMwLTUgNC04IDktOFptNDItN2MtNCAwLTggMi0xMSA2VjEwaC04djUwaDh2LTVjMyA0IDcgNiAxMSA2IDExIDAgMTYtOSAxNi0xOXMtNS0xOS0xNi0xOVptLTIgMzJjLTcgMC05LTctOS0xM3MyLTEzIDktMTMgOSA3IDkgMTMtMiAxMy05IDEzWm0zMi00NWgtOHY1MGg4VjEwWm0yNCA1MWMxMSAwIDE4LTggMTgtMTlzLTgtMTktMTgtMTljLTExIDAtMTkgOC0xOSAxOXM3IDE5IDE5IDE5Wm0wLTZjLTggMC0xMC03LTEwLTEzczItMTMgMTAtMTNjNyAwIDkgNyA5IDEzcy0yIDEzLTkgMTNabTM5IDZjOCAwIDE1LTQgMTctMTJsLTgtMWMtMiA0LTQgNi05IDYtNyAwLTktNi05LTEyczItMTIgOS0xMmM1IDAgOCAzIDggN2w5LTFjLTItOC05LTEzLTE3LTEzLTExIDAtMTggOS0xOCAxOSAwIDExIDcgMTkgMTggMTlabTMwLTE0IDQtNCAxMCAxN2gxMGwtMTUtMjMgMTUtMTNoLTExbC0xMyAxM1YxMGgtOXY1MGg5VjQ3Wm0zOSAxNGM4IDAgMTYtMyAxNi0xMiAwLTgtOC0xMC0xNS0xMS0yLTEtNy0xLTctNSAwLTMgMy00IDYtNCA0IDAgNyAzIDcgN2w4LTFjLTEtOS04LTEyLTE1LTEycy0xNSAzLTE1IDExIDkgMTAgMTUgMTFjMyAxIDggMiA4IDUgMCA0LTQgNS03IDUtNSAwLTgtMy05LTdsLTggMWMxIDggOSAxMiAxNiAxMlpNNDEgMjdIMGwxMiAxMnYxN2wyOS0yOVpNMjAgNjBoNDBMNDggNDhWMzJMMjAgNjBaXCIsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIlxuICB9KSkpO1xufVxuXG5leHBvcnQgeyBBdHRyaWJ1dGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiY2xhc3NOYW1lcyIsIkF0dHJpYnV0aW9uIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsInRhcmdldCIsInJlbCIsInhtbG5zIiwidmlld0JveCIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJkIiwiZmlsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Attribution.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Avatar.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Avatar.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Avatar: () => (/* binding */ Avatar)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_get_initials_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/get-initials.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/get-initials.mjs\");\n/* __next_internal_client_entry_do_not_use__ Avatar auto */ \n\n\n\nfunction Avatar({ userId, className, ...props }) {\n    const { useUser } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomContextBundle)();\n    const { user, isLoading } = useUser(userId);\n    const resolvedUserName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>user?.name, [\n        user\n    ]);\n    const resolvedUserAvatar = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>user?.avatar, [\n        user\n    ]);\n    const resolvedUserInitials = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>resolvedUserName ? (0,_utils_get_initials_mjs__WEBPACK_IMPORTED_MODULE_2__.getInitials)(resolvedUserName) : void 0, [\n        resolvedUserName\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-avatar\", className),\n        \"data-loading\": isLoading ? \"\" : void 0,\n        ...props\n    }, resolvedUserAvatar && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        className: \"lb-avatar-image\",\n        src: resolvedUserAvatar,\n        alt: resolvedUserName\n    }), resolvedUserInitials && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-avatar-fallback\",\n        \"aria-hidden\": true\n    }, resolvedUserInitials));\n}\n //# sourceMappingURL=Avatar.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0F2YXRhci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7NERBQ3lEO0FBQ1Q7QUFDUztBQUNFO0FBRTNELFNBQVNLLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsT0FBTztJQUM3QyxNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHVCx1RUFBb0JBO0lBQ3hDLE1BQU0sRUFBRVUsSUFBSSxFQUFFQyxTQUFTLEVBQUUsR0FBR0YsUUFBUUg7SUFDcEMsTUFBTU0sbUJBQW1CViw4Q0FBT0EsQ0FBQyxJQUFNUSxNQUFNRyxNQUFNO1FBQUNIO0tBQUs7SUFDekQsTUFBTUkscUJBQXFCWiw4Q0FBT0EsQ0FBQyxJQUFNUSxNQUFNSyxRQUFRO1FBQUNMO0tBQUs7SUFDN0QsTUFBTU0sdUJBQXVCZCw4Q0FBT0EsQ0FDbEMsSUFBTVUsbUJBQW1CUixvRUFBV0EsQ0FBQ1Esb0JBQW9CLEtBQUssR0FDOUQ7UUFBQ0E7S0FBaUI7SUFFcEIsT0FBTyxhQUFhLGlCQUFHWCxnREFBNEIsQ0FBQyxPQUFPO1FBQ3pETSxXQUFXSixrRUFBVUEsQ0FBQyxhQUFhSTtRQUNuQyxnQkFBZ0JJLFlBQVksS0FBSyxLQUFLO1FBQ3RDLEdBQUdILEtBQUs7SUFDVixHQUFHTSxzQkFBc0IsYUFBYSxpQkFBR2IsZ0RBQTRCLENBQUMsT0FBTztRQUMzRU0sV0FBVztRQUNYVyxLQUFLSjtRQUNMSyxLQUFLUDtJQUNQLElBQUlJLHdCQUF3QixhQUFhLGlCQUFHZixnREFBNEIsQ0FBQyxRQUFRO1FBQy9FTSxXQUFXO1FBQ1gsZUFBZTtJQUNqQixHQUFHUztBQUNMO0FBRWtCLENBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9BdmF0YXIubWpzPzc1ODAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0IHsgdXNlUm9vbUNvbnRleHRCdW5kbGUgfSBmcm9tICdAbGl2ZWJsb2Nrcy9yZWFjdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tICcuLi8uLi91dGlscy9jbGFzcy1uYW1lcy5tanMnO1xuaW1wb3J0IHsgZ2V0SW5pdGlhbHMgfSBmcm9tICcuLi8uLi91dGlscy9nZXQtaW5pdGlhbHMubWpzJztcblxuZnVuY3Rpb24gQXZhdGFyKHsgdXNlcklkLCBjbGFzc05hbWUsIC4uLnByb3BzIH0pIHtcbiAgY29uc3QgeyB1c2VVc2VyIH0gPSB1c2VSb29tQ29udGV4dEJ1bmRsZSgpO1xuICBjb25zdCB7IHVzZXIsIGlzTG9hZGluZyB9ID0gdXNlVXNlcih1c2VySWQpO1xuICBjb25zdCByZXNvbHZlZFVzZXJOYW1lID0gdXNlTWVtbygoKSA9PiB1c2VyPy5uYW1lLCBbdXNlcl0pO1xuICBjb25zdCByZXNvbHZlZFVzZXJBdmF0YXIgPSB1c2VNZW1vKCgpID0+IHVzZXI/LmF2YXRhciwgW3VzZXJdKTtcbiAgY29uc3QgcmVzb2x2ZWRVc2VySW5pdGlhbHMgPSB1c2VNZW1vKFxuICAgICgpID0+IHJlc29sdmVkVXNlck5hbWUgPyBnZXRJbml0aWFscyhyZXNvbHZlZFVzZXJOYW1lKSA6IHZvaWQgMCxcbiAgICBbcmVzb2x2ZWRVc2VyTmFtZV1cbiAgKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi1hdmF0YXJcIiwgY2xhc3NOYW1lKSxcbiAgICBcImRhdGEtbG9hZGluZ1wiOiBpc0xvYWRpbmcgPyBcIlwiIDogdm9pZCAwLFxuICAgIC4uLnByb3BzXG4gIH0sIHJlc29sdmVkVXNlckF2YXRhciAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgY2xhc3NOYW1lOiBcImxiLWF2YXRhci1pbWFnZVwiLFxuICAgIHNyYzogcmVzb2x2ZWRVc2VyQXZhdGFyLFxuICAgIGFsdDogcmVzb2x2ZWRVc2VyTmFtZVxuICB9KSwgcmVzb2x2ZWRVc2VySW5pdGlhbHMgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwibGItYXZhdGFyLWZhbGxiYWNrXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gIH0sIHJlc29sdmVkVXNlckluaXRpYWxzKSk7XG59XG5cbmV4cG9ydCB7IEF2YXRhciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXZhdGFyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VSb29tQ29udGV4dEJ1bmRsZSIsIlJlYWN0X19kZWZhdWx0IiwidXNlTWVtbyIsImNsYXNzTmFtZXMiLCJnZXRJbml0aWFscyIsIkF2YXRhciIsInVzZXJJZCIsImNsYXNzTmFtZSIsInByb3BzIiwidXNlVXNlciIsInVzZXIiLCJpc0xvYWRpbmciLCJyZXNvbHZlZFVzZXJOYW1lIiwibmFtZSIsInJlc29sdmVkVXNlckF2YXRhciIsImF2YXRhciIsInJlc29sdmVkVXNlckluaXRpYWxzIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImFsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Avatar.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Button.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Button.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ Button auto */ \n\nconst Button = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ variant = \"default\", className, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        type: \"button\",\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-button\", className),\n        \"data-variant\": variant,\n        ...props,\n        ref: forwardedRef\n    });\n});\n //# sourceMappingURL=Button.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0J1dHRvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OzREQUNtRDtBQUNNO0FBRXpELE1BQU1HLHVCQUFTRixpREFBVUEsQ0FDdkIsQ0FBQyxFQUFFRyxVQUFVLFNBQVMsRUFBRUMsU0FBUyxFQUFFLEdBQUdDLE9BQU8sRUFBRUM7SUFDN0MsT0FBTyxhQUFhLGlCQUFHUCxnREFBNEIsQ0FBQyxVQUFVO1FBQzVEUyxNQUFNO1FBQ05KLFdBQVdILGtFQUFVQSxDQUFDLGFBQWFHO1FBQ25DLGdCQUFnQkQ7UUFDaEIsR0FBR0UsS0FBSztRQUNSSSxLQUFLSDtJQUNQO0FBQ0Y7QUFHZ0IsQ0FDbEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0J1dHRvbi5tanM/MjgyZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tICcuLi8uLi91dGlscy9jbGFzcy1uYW1lcy5tanMnO1xuXG5jb25zdCBCdXR0b24gPSBmb3J3YXJkUmVmKFxuICAoeyB2YXJpYW50ID0gXCJkZWZhdWx0XCIsIGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi1idXR0b25cIiwgY2xhc3NOYW1lKSxcbiAgICAgIFwiZGF0YS12YXJpYW50XCI6IHZhcmlhbnQsXG4gICAgICAuLi5wcm9wcyxcbiAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgfSk7XG4gIH1cbik7XG5cbmV4cG9ydCB7IEJ1dHRvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnV0dG9uLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdF9fZGVmYXVsdCIsImZvcndhcmRSZWYiLCJjbGFzc05hbWVzIiwiQnV0dG9uIiwidmFyaWFudCIsImNsYXNzTmFtZSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Button.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Dropdown.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Dropdown.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropdown: () => (/* binding */ Dropdown),\n/* harmony export */   DropdownItem: () => (/* binding */ DropdownItem),\n/* harmony export */   DropdownTrigger: () => (/* reexport safe */ _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.DropdownMenuTrigger)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"(ssr)/./node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ DropdownTrigger,Dropdown,DropdownItem auto */ \n\n\n\n\n\n\nfunction Dropdown({ children, content, defaultOpen, open, onOpenChange, className, ...props }) {\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_2__.useOverrides)();\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_3__.useCommentsConfig)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.Root, {\n        defaultOpen,\n        open,\n        onOpenChange,\n        dir: $.dir\n    }, children, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n        container: portalContainer\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.Content, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-root lb-portal lb-elevation lb-dropdown\", className),\n        sideOffset: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_SIDE_OFFSET,\n        collisionPadding: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_COLLISION_PADDING,\n        ...props\n    }, content)));\n}\nconst DropdownItem = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ children, className, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.DropdownMenuItem, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-dropdown-item\", className),\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\n //# sourceMappingURL=Dropdown.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0Ryb3Bkb3duLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7MkZBQ3VFO0FBQ2dCO0FBQ3BDO0FBQ0U7QUFDa0Q7QUFDcEQ7QUFDTTtBQUV6RCxTQUFTVSxTQUFTLEVBQ2hCQyxRQUFRLEVBQ1JDLE9BQU8sRUFDUEMsV0FBVyxFQUNYQyxJQUFJLEVBQ0pDLFlBQVksRUFDWkMsU0FBUyxFQUNULEdBQUdDLE9BQ0o7SUFDQyxNQUFNQyxJQUFJViw0REFBWUE7SUFDdEIsTUFBTSxFQUFFVyxlQUFlLEVBQUUsR0FBR2QsOERBQWlCQTtJQUM3QyxPQUFPLGFBQWEsaUJBQUdGLGdEQUE0QixDQUFDSCwrREFBMEIsRUFBRTtRQUM5RWE7UUFDQUM7UUFDQUM7UUFDQU8sS0FBS0osRUFBRUksR0FBRztJQUNaLEdBQUdYLFVBQVUsYUFBYSxpQkFBR1IsZ0RBQTRCLENBQUNILGlFQUE0QixFQUFFO1FBQ3RGd0IsV0FBV0w7SUFDYixHQUFHLGFBQWEsaUJBQUdoQixnREFBNEIsQ0FBQ0gsa0VBQTZCLEVBQUU7UUFDN0VnQixXQUFXUCxrRUFBVUEsQ0FDbkIsOENBQ0FPO1FBRUZVLFlBQVlwQix3RUFBNEJBO1FBQ3hDcUIsa0JBQWtCcEIsOEVBQWtDQTtRQUNwRCxHQUFHVSxLQUFLO0lBQ1YsR0FBR0w7QUFDTDtBQUNBLE1BQU1nQiw2QkFBZXhCLGlEQUFVQSxDQUFDLENBQUMsRUFBRU8sUUFBUSxFQUFFSyxTQUFTLEVBQUUsR0FBR0MsT0FBTyxFQUFFWTtJQUNsRSxPQUFPLGFBQWEsaUJBQUcxQixnREFBNEIsQ0FBQ0gsMkVBQXNDLEVBQUU7UUFDMUZnQixXQUFXUCxrRUFBVUEsQ0FBQyxvQkFBb0JPO1FBQzFDLEdBQUdDLEtBQUs7UUFDUmMsS0FBS0Y7SUFDUCxHQUFHbEI7QUFDTDtBQUVrQyxDQUNsQyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2NvbXBvbmVudHMvaW50ZXJuYWwvRHJvcGRvd24ubWpzPzFlODEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0ICogYXMgRHJvcGRvd25NZW51UHJpbWl0aXZlIGZyb20gJ0ByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51JztcbmV4cG9ydCB7IERyb3Bkb3duTWVudVRyaWdnZXIgYXMgRHJvcGRvd25UcmlnZ2VyIH0gZnJvbSAnQHJhZGl4LXVpL3JlYWN0LWRyb3Bkb3duLW1lbnUnO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb21tZW50c0NvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy5tanMnO1xuaW1wb3J0IHsgRkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVCwgRkxPQVRJTkdfRUxFTUVOVF9DT0xMSVNJT05fUEFERElORyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgdXNlT3ZlcnJpZGVzIH0gZnJvbSAnLi4vLi4vb3ZlcnJpZGVzLm1qcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcblxuZnVuY3Rpb24gRHJvcGRvd24oe1xuICBjaGlsZHJlbixcbiAgY29udGVudCxcbiAgZGVmYXVsdE9wZW4sXG4gIG9wZW4sXG4gIG9uT3BlbkNoYW5nZSxcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufSkge1xuICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKCk7XG4gIGNvbnN0IHsgcG9ydGFsQ29udGFpbmVyIH0gPSB1c2VDb21tZW50c0NvbmZpZygpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25NZW51UHJpbWl0aXZlLlJvb3QsIHtcbiAgICBkZWZhdWx0T3BlbixcbiAgICBvcGVuLFxuICAgIG9uT3BlbkNoYW5nZSxcbiAgICBkaXI6ICQuZGlyXG4gIH0sIGNoaWxkcmVuLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChEcm9wZG93bk1lbnVQcmltaXRpdmUuUG9ydGFsLCB7XG4gICAgY29udGFpbmVyOiBwb3J0YWxDb250YWluZXJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25NZW51UHJpbWl0aXZlLkNvbnRlbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXG4gICAgICBcImxiLXJvb3QgbGItcG9ydGFsIGxiLWVsZXZhdGlvbiBsYi1kcm9wZG93blwiLFxuICAgICAgY2xhc3NOYW1lXG4gICAgKSxcbiAgICBzaWRlT2Zmc2V0OiBGTE9BVElOR19FTEVNRU5UX1NJREVfT0ZGU0VULFxuICAgIGNvbGxpc2lvblBhZGRpbmc6IEZMT0FUSU5HX0VMRU1FTlRfQ09MTElTSU9OX1BBRERJTkcsXG4gICAgLi4ucHJvcHNcbiAgfSwgY29udGVudCkpKTtcbn1cbmNvbnN0IERyb3Bkb3duSXRlbSA9IGZvcndhcmRSZWYoKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChEcm9wZG93bk1lbnVQcmltaXRpdmUuRHJvcGRvd25NZW51SXRlbSwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcImxiLWRyb3Bkb3duLWl0ZW1cIiwgY2xhc3NOYW1lKSxcbiAgICAuLi5wcm9wcyxcbiAgICByZWY6IGZvcndhcmRlZFJlZlxuICB9LCBjaGlsZHJlbik7XG59KTtcblxuZXhwb3J0IHsgRHJvcGRvd24sIERyb3Bkb3duSXRlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHJvcGRvd24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkRyb3Bkb3duTWVudVByaW1pdGl2ZSIsIkRyb3Bkb3duTWVudVRyaWdnZXIiLCJEcm9wZG93blRyaWdnZXIiLCJSZWFjdF9fZGVmYXVsdCIsImZvcndhcmRSZWYiLCJ1c2VDb21tZW50c0NvbmZpZyIsIkZMT0FUSU5HX0VMRU1FTlRfU0lERV9PRkZTRVQiLCJGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HIiwidXNlT3ZlcnJpZGVzIiwiY2xhc3NOYW1lcyIsIkRyb3Bkb3duIiwiY2hpbGRyZW4iLCJjb250ZW50IiwiZGVmYXVsdE9wZW4iLCJvcGVuIiwib25PcGVuQ2hhbmdlIiwiY2xhc3NOYW1lIiwicHJvcHMiLCIkIiwicG9ydGFsQ29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsIlJvb3QiLCJkaXIiLCJQb3J0YWwiLCJjb250YWluZXIiLCJDb250ZW50Iiwic2lkZU9mZnNldCIsImNvbGxpc2lvblBhZGRpbmciLCJEcm9wZG93bkl0ZW0iLCJmb3J3YXJkZWRSZWYiLCJEcm9wZG93bk1lbnVJdGVtIiwicmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Dropdown.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Emoji.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Emoji.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emoji: () => (/* binding */ Emoji)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _primitives_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../primitives/internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/internal/Emoji.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n\n\n\nconst Emoji = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_1__.Emoji, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji\", className),\n        ...props,\n        ref: forwardedRef\n    });\n});\n //# sourceMappingURL=Emoji.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0Vtb2ppLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBQ29CO0FBQ2Q7QUFFekQsTUFBTUUsc0JBQVFELGlEQUFVQSxDQUN0QixDQUFDLEVBQUVJLFNBQVMsRUFBRSxHQUFHQyxPQUFPLEVBQUVDO0lBQ3hCLE9BQU8sYUFBYSxpQkFBR1AsZ0RBQTRCLENBQUNHLGlFQUFPQSxFQUFFO1FBQzNERSxXQUFXRCxrRUFBVUEsQ0FBQyxZQUFZQztRQUNsQyxHQUFHQyxLQUFLO1FBQ1JHLEtBQUtGO0lBQ1A7QUFDRjtBQUdlLENBQ2pCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9FbW9qaS5tanM/NTRjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVtb2ppIGFzIEVtb2ppJDEgfSBmcm9tICcuLi8uLi9wcmltaXRpdmVzL2ludGVybmFsL0Vtb2ppLm1qcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcblxuY29uc3QgRW1vamkgPSBmb3J3YXJkUmVmKFxuICAoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChFbW9qaSQxLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi1lbW9qaVwiLCBjbGFzc05hbWUpLFxuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0pO1xuICB9XG4pO1xuXG5leHBvcnQgeyBFbW9qaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiZm9yd2FyZFJlZiIsIkVtb2ppIiwiRW1vamkkMSIsImNsYXNzTmFtZXMiLCJjbGFzc05hbWUiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Emoji.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/EmojiPicker.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/EmojiPicker.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiPicker: () => (/* binding */ EmojiPicker),\n/* harmony export */   EmojiPickerTrigger: () => (/* reexport safe */ _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.PopoverTrigger)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\");\n/* harmony import */ var _icons_Search_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../icons/Search.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Search.mjs\");\n/* harmony import */ var _icons_Spinner_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../icons/Spinner.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Spinner.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../primitives/EmojiPicker/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/index.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* harmony import */ var _Emoji_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Emoji.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nfunction EmojiPickerLoading({ className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-loading\", className),\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_icons_Spinner_mjs__WEBPACK_IMPORTED_MODULE_3__.SpinnerIcon, null));\n}\nfunction EmojiPickerEmpty({ className, ...props }) {\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_4__.useOverrides)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-empty\", className),\n        ...props\n    }, $.EMOJI_PICKER_EMPTY);\n}\nfunction EmojiPickerError({ error, className, ...props }) {\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_4__.useOverrides)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-error\", className),\n        ...props\n    }, $.EMOJI_PICKER_ERROR(error));\n}\nfunction EmojiPickerCategoryHeader({ category, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-category-header\", className),\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"lb-emoji-picker-category-header-title\"\n    }, category));\n}\nfunction EmojiPickerGrid({ children, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-grid\", className),\n        ...props\n    }, children);\n}\nfunction EmojiPickerRow({ attributes, children, className, ...props }) {\n    const isFirstRow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>attributes.categoryRowIndex === 0, [\n        attributes.categoryRowIndex\n    ]);\n    const isLastRow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>attributes.categoryRowIndex === attributes.categoryRowsCount - 1, [\n        attributes.categoryRowIndex,\n        attributes.categoryRowsCount\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-row\", className),\n        \"data-first\": isFirstRow ? \"\" : void 0,\n        \"data-last\": isLastRow ? \"\" : void 0,\n        ...props\n    }, children);\n}\nfunction EmojiPickerEmoji({ emoji, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"button\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-emoji\", className),\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Emoji_mjs__WEBPACK_IMPORTED_MODULE_5__.Emoji, {\n        emoji\n    }));\n}\nconst EmojiPicker = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ onEmojiSelect, onOpenChange, children, className, ...props }, forwardedRef)=>{\n    const [isOpen, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_6__.useCommentsConfig)();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_4__.useOverrides)();\n    const handleOpenChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((isOpen2)=>{\n        setOpen(isOpen2);\n        onOpenChange?.(isOpen2);\n    }, [\n        onOpenChange\n    ]);\n    const handleEmojiSelect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((emoji)=>{\n        setOpen(false);\n        onEmojiSelect?.(emoji);\n    }, [\n        onEmojiSelect\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.Root, {\n        open: isOpen,\n        onOpenChange: handleOpenChange\n    }, children, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n        container: portalContainer\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.Content, {\n        side: \"top\",\n        align: \"center\",\n        sideOffset: _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.FLOATING_ELEMENT_SIDE_OFFSET,\n        collisionPadding: _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.FLOATING_ELEMENT_COLLISION_PADDING,\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-root lb-portal lb-elevation lb-emoji-picker\", className),\n        ...props,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Root, {\n        onEmojiSelect: handleEmojiSelect,\n        locale: $.locale\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"lb-emoji-picker-header\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"lb-emoji-picker-search-container\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Search, {\n        className: \"lb-emoji-picker-search\",\n        placeholder: $.EMOJI_PICKER_SEARCH_PLACEHOLDER,\n        autoFocus: true\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_icons_Search_mjs__WEBPACK_IMPORTED_MODULE_9__.SearchIcon, {\n        className: \"lb-emoji-picker-search-icon\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Content, {\n        className: \"lb-emoji-picker-content\",\n        components: {\n            Loading: EmojiPickerLoading,\n            Empty: EmojiPickerEmpty,\n            Error: EmojiPickerError,\n            CategoryHeader: EmojiPickerCategoryHeader,\n            Grid: EmojiPickerGrid,\n            Row: EmojiPickerRow,\n            Emoji: EmojiPickerEmoji\n        }\n    })))));\n});\n //# sourceMappingURL=EmojiPicker.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/EmojiPicker.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICON_HEIGHT: () => (/* binding */ ICON_HEIGHT),\n/* harmony export */   ICON_WIDTH: () => (/* binding */ ICON_WIDTH),\n/* harmony export */   Icon: () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n\n\nconst ICON_WIDTH = 20;\nconst ICON_HEIGHT = 20;\nfunction Icon({ children, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: ICON_WIDTH,\n        height: ICON_HEIGHT,\n        viewBox: `0 0 ${ICON_WIDTH} ${ICON_HEIGHT}`,\n        fill: \"none\",\n        stroke: \"currentColor\",\n        strokeWidth: 1.5,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        role: \"presentation\",\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-icon\", className),\n        ...props\n    }, children);\n}\n //# sourceMappingURL=Icon.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1DO0FBQ3NCO0FBRXpELE1BQU1FLGFBQWE7QUFDbkIsTUFBTUMsY0FBYztBQUNwQixTQUFTQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFLEdBQUdDLE9BQU87SUFDN0MsT0FBTyxhQUFhLGlCQUFHUCxnREFBNEIsQ0FBQyxPQUFPO1FBQ3pEUyxPQUFPO1FBQ1BDLE9BQU9SO1FBQ1BTLFFBQVFSO1FBQ1JTLFNBQVMsQ0FBQyxJQUFJLEVBQUVWLFdBQVcsQ0FBQyxFQUFFQyxZQUFZLENBQUM7UUFDM0NVLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsZ0JBQWdCO1FBQ2hCQyxNQUFNO1FBQ05aLFdBQVdMLGtFQUFVQSxDQUFDLFdBQVdLO1FBQ2pDLEdBQUdDLEtBQUs7SUFDVixHQUFHRjtBQUNMO0FBRXlDLENBQ3pDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcz9jZmFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcblxuY29uc3QgSUNPTl9XSURUSCA9IDIwO1xuY29uc3QgSUNPTl9IRUlHSFQgPSAyMDtcbmZ1bmN0aW9uIEljb24oeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB3aWR0aDogSUNPTl9XSURUSCxcbiAgICBoZWlnaHQ6IElDT05fSEVJR0hULFxuICAgIHZpZXdCb3g6IGAwIDAgJHtJQ09OX1dJRFRIfSAke0lDT05fSEVJR0hUfWAsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIHN0cm9rZVdpZHRoOiAxLjUsXG4gICAgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLFxuICAgIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi1pY29uXCIsIGNsYXNzTmFtZSksXG4gICAgLi4ucHJvcHNcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5leHBvcnQgeyBJQ09OX0hFSUdIVCwgSUNPTl9XSURUSCwgSWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SWNvbi5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJjbGFzc05hbWVzIiwiSUNPTl9XSURUSCIsIklDT05fSEVJR0hUIiwiSWNvbiIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwieG1sbnMiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdCb3giLCJmaWxsIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJyb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/List.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/List.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   List: () => (/* binding */ List)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _utils_intl_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/intl.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/intl.mjs\");\n\n\n\n\nconst List = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ values, formatRemaining, truncate, locale, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"span\";\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_2__.useOverrides)();\n    const formatRemainingWithDefault = formatRemaining ?? $.LIST_REMAINING;\n    const formattedList = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const elements = truncate && truncate < values.length - 1 ? [\n            ...values.slice(0, truncate),\n            formatRemainingWithDefault(values.length - truncate)\n        ] : [\n            ...values\n        ];\n        const placeholders = Array(elements.length).fill(\".\");\n        const parts = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_3__.listFormat)(locale).formatToParts(placeholders);\n        return parts.map((part)=>part.type === \"element\" ? elements.shift() : part.value);\n    }, [\n        formatRemainingWithDefault,\n        locale,\n        truncate,\n        values\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef\n    }, formattedList);\n});\n //# sourceMappingURL=List.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0xpc3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRDO0FBQ2dCO0FBQ1Q7QUFDRDtBQUVsRCxNQUFNTSxxQkFBT0osaURBQVVBLENBQ3JCLENBQUMsRUFBRUssTUFBTSxFQUFFQyxlQUFlLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0MsT0FBTyxFQUFFQztJQUNqRSxNQUFNQyxZQUFZSCxVQUFVWCxzREFBSUEsR0FBRztJQUNuQyxNQUFNZSxJQUFJWCw0REFBWUE7SUFDdEIsTUFBTVksNkJBQTZCUixtQkFBbUJPLEVBQUVFLGNBQWM7SUFDdEUsTUFBTUMsZ0JBQWdCZiw4Q0FBT0EsQ0FBQztRQUM1QixNQUFNZ0IsV0FBV1YsWUFBWUEsV0FBV0YsT0FBT2EsTUFBTSxHQUFHLElBQUk7ZUFDdkRiLE9BQU9jLEtBQUssQ0FBQyxHQUFHWjtZQUNuQk8sMkJBQTJCVCxPQUFPYSxNQUFNLEdBQUdYO1NBQzVDLEdBQUc7ZUFBSUY7U0FBTztRQUNmLE1BQU1lLGVBQWVDLE1BQU1KLFNBQVNDLE1BQU0sRUFBRUksSUFBSSxDQUFDO1FBQ2pELE1BQU1DLFFBQVFwQiwyREFBVUEsQ0FBQ0ssUUFBUWdCLGFBQWEsQ0FBQ0o7UUFDL0MsT0FBT0csTUFBTUUsR0FBRyxDQUNkLENBQUNDLE9BQVNBLEtBQUtDLElBQUksS0FBSyxZQUFZVixTQUFTVyxLQUFLLEtBQUtGLEtBQUtHLEtBQUs7SUFFckUsR0FBRztRQUFDZjtRQUE0Qk47UUFBUUQ7UUFBVUY7S0FBTztJQUN6RCxPQUFPLGFBQWEsaUJBQUdOLGdEQUE0QixDQUFDYSxXQUFXO1FBQzdELEdBQUdGLEtBQUs7UUFDUnFCLEtBQUtwQjtJQUNQLEdBQUdLO0FBQ0w7QUFHYyxDQUNoQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2NvbXBvbmVudHMvaW50ZXJuYWwvTGlzdC5tanM/Nzg3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTbG90IH0gZnJvbSAnQHJhZGl4LXVpL3JlYWN0LXNsb3QnO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IGZvcndhcmRSZWYsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VPdmVycmlkZXMgfSBmcm9tICcuLi8uLi9vdmVycmlkZXMubWpzJztcbmltcG9ydCB7IGxpc3RGb3JtYXQgfSBmcm9tICcuLi8uLi91dGlscy9pbnRsLm1qcyc7XG5cbmNvbnN0IExpc3QgPSBmb3J3YXJkUmVmKFxuICAoeyB2YWx1ZXMsIGZvcm1hdFJlbWFpbmluZywgdHJ1bmNhdGUsIGxvY2FsZSwgYXNDaGlsZCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gYXNDaGlsZCA/IFNsb3QgOiBcInNwYW5cIjtcbiAgICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKCk7XG4gICAgY29uc3QgZm9ybWF0UmVtYWluaW5nV2l0aERlZmF1bHQgPSBmb3JtYXRSZW1haW5pbmcgPz8gJC5MSVNUX1JFTUFJTklORztcbiAgICBjb25zdCBmb3JtYXR0ZWRMaXN0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IHRydW5jYXRlICYmIHRydW5jYXRlIDwgdmFsdWVzLmxlbmd0aCAtIDEgPyBbXG4gICAgICAgIC4uLnZhbHVlcy5zbGljZSgwLCB0cnVuY2F0ZSksXG4gICAgICAgIGZvcm1hdFJlbWFpbmluZ1dpdGhEZWZhdWx0KHZhbHVlcy5sZW5ndGggLSB0cnVuY2F0ZSlcbiAgICAgIF0gOiBbLi4udmFsdWVzXTtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IEFycmF5KGVsZW1lbnRzLmxlbmd0aCkuZmlsbChcIi5cIik7XG4gICAgICBjb25zdCBwYXJ0cyA9IGxpc3RGb3JtYXQobG9jYWxlKS5mb3JtYXRUb1BhcnRzKHBsYWNlaG9sZGVycyk7XG4gICAgICByZXR1cm4gcGFydHMubWFwKFxuICAgICAgICAocGFydCkgPT4gcGFydC50eXBlID09PSBcImVsZW1lbnRcIiA/IGVsZW1lbnRzLnNoaWZ0KCkgOiBwYXJ0LnZhbHVlXG4gICAgICApO1xuICAgIH0sIFtmb3JtYXRSZW1haW5pbmdXaXRoRGVmYXVsdCwgbG9jYWxlLCB0cnVuY2F0ZSwgdmFsdWVzXSk7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0sIGZvcm1hdHRlZExpc3QpO1xuICB9XG4pO1xuXG5leHBvcnQgeyBMaXN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaXN0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTbG90IiwiUmVhY3RfX2RlZmF1bHQiLCJmb3J3YXJkUmVmIiwidXNlTWVtbyIsInVzZU92ZXJyaWRlcyIsImxpc3RGb3JtYXQiLCJMaXN0IiwidmFsdWVzIiwiZm9ybWF0UmVtYWluaW5nIiwidHJ1bmNhdGUiLCJsb2NhbGUiLCJhc0NoaWxkIiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJDb21wb25lbnQiLCIkIiwiZm9ybWF0UmVtYWluaW5nV2l0aERlZmF1bHQiLCJMSVNUX1JFTUFJTklORyIsImZvcm1hdHRlZExpc3QiLCJlbGVtZW50cyIsImxlbmd0aCIsInNsaWNlIiwicGxhY2Vob2xkZXJzIiwiQXJyYXkiLCJmaWxsIiwicGFydHMiLCJmb3JtYXRUb1BhcnRzIiwibWFwIiwicGFydCIsInR5cGUiLCJzaGlmdCIsInZhbHVlIiwiY3JlYXRlRWxlbWVudCIsInJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/List.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Tooltip.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/Tooltip.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ShortcutTooltip: () => (/* binding */ ShortcutTooltip),\n/* harmony export */   ShortcutTooltipKey: () => (/* binding */ ShortcutTooltipKey),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TooltipProvider: () => (/* reexport safe */ _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.TooltipProvider)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_is_apple_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is-apple.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-apple.mjs\");\n/* __next_internal_client_entry_do_not_use__ TooltipProvider,ShortcutTooltip,ShortcutTooltipKey,Tooltip auto */ \n\n\n\n\n\n\nconst KEYS = {\n    alt: ()=>({\n            title: \"Alt\",\n            key: \"⌥\"\n        }),\n    mod: ()=>(0,_utils_is_apple_mjs__WEBPACK_IMPORTED_MODULE_2__.isApple)() ? {\n            title: \"Command\",\n            key: \"⌘\"\n        } : {\n            title: \"Ctrl\",\n            key: \"⌃\"\n        },\n    shift: ()=>{\n        return {\n            title: \"Shift\",\n            key: \"⇧\"\n        };\n    },\n    enter: ()=>{\n        return {\n            title: \"Enter\",\n            key: \"⏎\"\n        };\n    }\n};\nconst Tooltip = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ children, content, multiline, className, ...props }, forwardedRef)=>{\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_3__.useCommentsConfig)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Root, {\n        disableHoverableContent: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Trigger, {\n        asChild: true,\n        ref: forwardedRef\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n        container: portalContainer\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Content, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-root lb-portal lb-tooltip\", multiline && \"lb-tooltip:multiline\", className),\n        side: \"top\",\n        align: \"center\",\n        sideOffset: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_SIDE_OFFSET,\n        collisionPadding: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_COLLISION_PADDING,\n        ...props\n    }, content)));\n});\nconst ShortcutTooltip = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ children, content, shortcut, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Tooltip, {\n        content: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, content, shortcut && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"kbd\", {\n            className: \"lb-tooltip-shortcut\"\n        }, shortcut)),\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nfunction ShortcutTooltipKey({ name, ...props }) {\n    const { title, key } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>KEYS[name]?.(), [\n        name\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"abbr\", {\n        title,\n        ...props\n    }, key);\n}\n //# sourceMappingURL=Tooltip.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL1Rvb2x0aXAubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0hBQzREO0FBQ0Y7QUFDRTtBQUNQO0FBQ2tEO0FBQzlDO0FBQ047QUFFbkQsTUFBTVUsT0FBTztJQUNYQyxLQUFLLElBQU87WUFBRUMsT0FBTztZQUFPQyxLQUFLO1FBQVM7SUFDMUNDLEtBQUssSUFBTUwsNERBQU9BLEtBQUs7WUFBRUcsT0FBTztZQUFXQyxLQUFLO1FBQVMsSUFBSTtZQUFFRCxPQUFPO1lBQVFDLEtBQUs7UUFBUztJQUM1RkUsT0FBTztRQUNMLE9BQU87WUFBRUgsT0FBTztZQUFTQyxLQUFLO1FBQVM7SUFDekM7SUFDQUcsT0FBTztRQUNMLE9BQU87WUFBRUosT0FBTztZQUFTQyxLQUFLO1FBQVM7SUFDekM7QUFDRjtBQUNBLE1BQU1JLHdCQUFVZCxpREFBVUEsQ0FDeEIsQ0FBQyxFQUFFZSxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsT0FBTyxFQUFFQztJQUN0RCxNQUFNLEVBQUVDLGVBQWUsRUFBRSxHQUFHbkIsOERBQWlCQTtJQUM3QyxPQUFPLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDRix5REFBcUIsRUFBRTtRQUN6RTJCLHlCQUF5QjtJQUMzQixHQUFHLGFBQWEsaUJBQUd6QixnREFBNEIsQ0FBQ0YsNERBQXdCLEVBQUU7UUFDeEU2QixTQUFTO1FBQ1RDLEtBQUtQO0lBQ1AsR0FBR0wsV0FBVyxhQUFhLGlCQUFHaEIsZ0RBQTRCLENBQUNGLDJEQUF1QixFQUFFO1FBQ2xGZ0MsV0FBV1I7SUFDYixHQUFHLGFBQWEsaUJBQUd0QixnREFBNEIsQ0FBQ0YsNERBQXdCLEVBQUU7UUFDeEVxQixXQUFXYixrRUFBVUEsQ0FDbkIsZ0NBQ0FZLGFBQWEsd0JBQ2JDO1FBRUZhLE1BQU07UUFDTkMsT0FBTztRQUNQQyxZQUFZOUIsd0VBQTRCQTtRQUN4QytCLGtCQUFrQjlCLDhFQUFrQ0E7UUFDcEQsR0FBR2UsS0FBSztJQUNWLEdBQUdIO0FBQ0w7QUFFRixNQUFNbUIsZ0NBQWtCbkMsaURBQVVBLENBQUMsQ0FBQyxFQUFFZSxRQUFRLEVBQUVDLE9BQU8sRUFBRW9CLFFBQVEsRUFBRSxHQUFHakIsT0FBTyxFQUFFQztJQUM3RSxPQUFPLGFBQWEsaUJBQUdyQixnREFBNEIsQ0FBQ2UsU0FBUztRQUMzREUsU0FBUyxhQUFhLGlCQUFHakIsZ0RBQTRCLENBQUNBLDJDQUF1QixFQUFFLE1BQU1pQixTQUFTb0IsWUFBWSxhQUFhLGlCQUFHckMsZ0RBQTRCLENBQUMsT0FBTztZQUM1Sm1CLFdBQVc7UUFDYixHQUFHa0I7UUFDSCxHQUFHakIsS0FBSztRQUNSUSxLQUFLUDtJQUNQLEdBQUdMO0FBQ0w7QUFDQSxTQUFTdUIsbUJBQW1CLEVBQzFCQyxJQUFJLEVBQ0osR0FBR3BCLE9BQ0o7SUFDQyxNQUFNLEVBQUVWLEtBQUssRUFBRUMsR0FBRyxFQUFFLEdBQUdULDhDQUFPQSxDQUFDLElBQU1NLElBQUksQ0FBQ2dDLEtBQUssTUFBTTtRQUFDQTtLQUFLO0lBQzNELE9BQU8sYUFBYSxpQkFBR3hDLGdEQUE0QixDQUFDLFFBQVE7UUFDMURVO1FBQ0EsR0FBR1UsS0FBSztJQUNWLEdBQUdUO0FBQ0w7QUFFd0QsQ0FDeEQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL1Rvb2x0aXAubWpzPzkyYzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0ICogYXMgVG9vbHRpcFByaW1pdGl2ZSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcCc7XG5leHBvcnQgeyBUb29sdGlwUHJvdmlkZXIgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbW1lbnRzQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnLm1qcyc7XG5pbXBvcnQgeyBGTE9BVElOR19FTEVNRU5UX1NJREVfT0ZGU0VULCBGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcbmltcG9ydCB7IGlzQXBwbGUgfSBmcm9tICcuLi8uLi91dGlscy9pcy1hcHBsZS5tanMnO1xuXG5jb25zdCBLRVlTID0ge1xuICBhbHQ6ICgpID0+ICh7IHRpdGxlOiBcIkFsdFwiLCBrZXk6IFwiXFx1MjMyNVwiIH0pLFxuICBtb2Q6ICgpID0+IGlzQXBwbGUoKSA/IHsgdGl0bGU6IFwiQ29tbWFuZFwiLCBrZXk6IFwiXFx1MjMxOFwiIH0gOiB7IHRpdGxlOiBcIkN0cmxcIiwga2V5OiBcIlxcdTIzMDNcIiB9LFxuICBzaGlmdDogKCkgPT4ge1xuICAgIHJldHVybiB7IHRpdGxlOiBcIlNoaWZ0XCIsIGtleTogXCJcXHUyMUU3XCIgfTtcbiAgfSxcbiAgZW50ZXI6ICgpID0+IHtcbiAgICByZXR1cm4geyB0aXRsZTogXCJFbnRlclwiLCBrZXk6IFwiXFx1MjNDRVwiIH07XG4gIH1cbn07XG5jb25zdCBUb29sdGlwID0gZm9yd2FyZFJlZihcbiAgKHsgY2hpbGRyZW4sIGNvbnRlbnQsIG11bHRpbGluZSwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgICBjb25zdCB7IHBvcnRhbENvbnRhaW5lciB9ID0gdXNlQ29tbWVudHNDb25maWcoKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcFByaW1pdGl2ZS5Sb290LCB7XG4gICAgICBkaXNhYmxlSG92ZXJhYmxlQ29udGVudDogdHJ1ZVxuICAgIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRvb2x0aXBQcmltaXRpdmUuVHJpZ2dlciwge1xuICAgICAgYXNDaGlsZDogdHJ1ZSxcbiAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgfSwgY2hpbGRyZW4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChUb29sdGlwUHJpbWl0aXZlLlBvcnRhbCwge1xuICAgICAgY29udGFpbmVyOiBwb3J0YWxDb250YWluZXJcbiAgICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChUb29sdGlwUHJpbWl0aXZlLkNvbnRlbnQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhcbiAgICAgICAgXCJsYi1yb290IGxiLXBvcnRhbCBsYi10b29sdGlwXCIsXG4gICAgICAgIG11bHRpbGluZSAmJiBcImxiLXRvb2x0aXA6bXVsdGlsaW5lXCIsXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKSxcbiAgICAgIHNpZGU6IFwidG9wXCIsXG4gICAgICBhbGlnbjogXCJjZW50ZXJcIixcbiAgICAgIHNpZGVPZmZzZXQ6IEZMT0FUSU5HX0VMRU1FTlRfU0lERV9PRkZTRVQsXG4gICAgICBjb2xsaXNpb25QYWRkaW5nOiBGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HLFxuICAgICAgLi4ucHJvcHNcbiAgICB9LCBjb250ZW50KSkpO1xuICB9XG4pO1xuY29uc3QgU2hvcnRjdXRUb29sdGlwID0gZm9yd2FyZFJlZigoeyBjaGlsZHJlbiwgY29udGVudCwgc2hvcnRjdXQsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcCwge1xuICAgIGNvbnRlbnQ6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0X19kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBjb250ZW50LCBzaG9ydGN1dCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImtiZFwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwibGItdG9vbHRpcC1zaG9ydGN1dFwiXG4gICAgfSwgc2hvcnRjdXQpKSxcbiAgICAuLi5wcm9wcyxcbiAgICByZWY6IGZvcndhcmRlZFJlZlxuICB9LCBjaGlsZHJlbik7XG59KTtcbmZ1bmN0aW9uIFNob3J0Y3V0VG9vbHRpcEtleSh7XG4gIG5hbWUsXG4gIC4uLnByb3BzXG59KSB7XG4gIGNvbnN0IHsgdGl0bGUsIGtleSB9ID0gdXNlTWVtbygoKSA9PiBLRVlTW25hbWVdPy4oKSwgW25hbWVdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYWJiclwiLCB7XG4gICAgdGl0bGUsXG4gICAgLi4ucHJvcHNcbiAgfSwga2V5KTtcbn1cblxuZXhwb3J0IHsgU2hvcnRjdXRUb29sdGlwLCBTaG9ydGN1dFRvb2x0aXBLZXksIFRvb2x0aXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvb2x0aXAubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlRvb2x0aXBQcmltaXRpdmUiLCJUb29sdGlwUHJvdmlkZXIiLCJSZWFjdF9fZGVmYXVsdCIsImZvcndhcmRSZWYiLCJ1c2VNZW1vIiwidXNlQ29tbWVudHNDb25maWciLCJGTE9BVElOR19FTEVNRU5UX1NJREVfT0ZGU0VUIiwiRkxPQVRJTkdfRUxFTUVOVF9DT0xMSVNJT05fUEFERElORyIsImNsYXNzTmFtZXMiLCJpc0FwcGxlIiwiS0VZUyIsImFsdCIsInRpdGxlIiwia2V5IiwibW9kIiwic2hpZnQiLCJlbnRlciIsIlRvb2x0aXAiLCJjaGlsZHJlbiIsImNvbnRlbnQiLCJtdWx0aWxpbmUiLCJjbGFzc05hbWUiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsInBvcnRhbENvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJSb290IiwiZGlzYWJsZUhvdmVyYWJsZUNvbnRlbnQiLCJUcmlnZ2VyIiwiYXNDaGlsZCIsInJlZiIsIlBvcnRhbCIsImNvbnRhaW5lciIsIkNvbnRlbnQiLCJzaWRlIiwiYWxpZ24iLCJzaWRlT2Zmc2V0IiwiY29sbGlzaW9uUGFkZGluZyIsIlNob3J0Y3V0VG9vbHRpcCIsInNob3J0Y3V0IiwiRnJhZ21lbnQiLCJTaG9ydGN1dFRvb2x0aXBLZXkiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Tooltip.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/User.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/components/internal/User.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   User: () => (/* binding */ User)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* harmony import */ var _utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/capitalize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/capitalize.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ User auto */ \n\n\n\n\nfunction User({ userId, replaceSelf, capitalize: shouldCapitalize, className, ...props }) {\n    const { useUser, useSelf } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomContextBundle)();\n    const { user, isLoading } = useUser(userId);\n    const self = useSelf();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_2__.useOverrides)();\n    const resolvedUserName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const name = replaceSelf && self?.id === userId ? $.SELF : user?.name ?? $.UNKNOWN_USER;\n        return shouldCapitalize ? (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_3__.capitalize)(name) : name;\n    }, [\n        $.SELF,\n        $.UNKNOWN_USER,\n        shouldCapitalize,\n        replaceSelf,\n        self?.id,\n        user?.name,\n        userId\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-user\", className),\n        \"data-loading\": isLoading ? \"\" : void 0,\n        ...props\n    }, isLoading ? null : resolvedUserName);\n}\n //# sourceMappingURL=User.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL1VzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OzswREFDeUQ7QUFDVDtBQUNHO0FBQ0s7QUFDQztBQUV6RCxTQUFTTSxLQUFLLEVBQ1pDLE1BQU0sRUFDTkMsV0FBVyxFQUNYSixZQUFZSyxnQkFBZ0IsRUFDNUJDLFNBQVMsRUFDVCxHQUFHQyxPQUNKO0lBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRSxHQUFHYix1RUFBb0JBO0lBQ2pELE1BQU0sRUFBRWMsSUFBSSxFQUFFQyxTQUFTLEVBQUUsR0FBR0gsUUFBUUw7SUFDcEMsTUFBTVMsT0FBT0g7SUFDYixNQUFNSSxJQUFJZCw0REFBWUE7SUFDdEIsTUFBTWUsbUJBQW1CaEIsOENBQU9BLENBQUM7UUFDL0IsTUFBTWlCLE9BQU9YLGVBQWVRLE1BQU1JLE9BQU9iLFNBQVNVLEVBQUVJLElBQUksR0FBR1AsTUFBTUssUUFBUUYsRUFBRUssWUFBWTtRQUN2RixPQUFPYixtQkFBbUJMLGlFQUFVQSxDQUFDZSxRQUFRQTtJQUMvQyxHQUFHO1FBQ0RGLEVBQUVJLElBQUk7UUFDTkosRUFBRUssWUFBWTtRQUNkYjtRQUNBRDtRQUNBUSxNQUFNSTtRQUNOTixNQUFNSztRQUNOWjtLQUNEO0lBQ0QsT0FBTyxhQUFhLGlCQUFHTixnREFBNEIsQ0FBQyxRQUFRO1FBQzFEUyxXQUFXTCxrRUFBVUEsQ0FBQyxXQUFXSztRQUNqQyxnQkFBZ0JLLFlBQVksS0FBSyxLQUFLO1FBQ3RDLEdBQUdKLEtBQUs7SUFDVixHQUFHSSxZQUFZLE9BQU9HO0FBQ3hCO0FBRWdCLENBQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9Vc2VyLm1qcz8wY2YwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IHVzZVJvb21Db250ZXh0QnVuZGxlIH0gZnJvbSAnQGxpdmVibG9ja3MvcmVhY3QnO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VPdmVycmlkZXMgfSBmcm9tICcuLi8uLi9vdmVycmlkZXMubWpzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi8uLi91dGlscy9jYXBpdGFsaXplLm1qcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcblxuZnVuY3Rpb24gVXNlcih7XG4gIHVzZXJJZCxcbiAgcmVwbGFjZVNlbGYsXG4gIGNhcGl0YWxpemU6IHNob3VsZENhcGl0YWxpemUsXG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgY29uc3QgeyB1c2VVc2VyLCB1c2VTZWxmIH0gPSB1c2VSb29tQ29udGV4dEJ1bmRsZSgpO1xuICBjb25zdCB7IHVzZXIsIGlzTG9hZGluZyB9ID0gdXNlVXNlcih1c2VySWQpO1xuICBjb25zdCBzZWxmID0gdXNlU2VsZigpO1xuICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKCk7XG4gIGNvbnN0IHJlc29sdmVkVXNlck5hbWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBuYW1lID0gcmVwbGFjZVNlbGYgJiYgc2VsZj8uaWQgPT09IHVzZXJJZCA/ICQuU0VMRiA6IHVzZXI/Lm5hbWUgPz8gJC5VTktOT1dOX1VTRVI7XG4gICAgcmV0dXJuIHNob3VsZENhcGl0YWxpemUgPyBjYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbiAgfSwgW1xuICAgICQuU0VMRixcbiAgICAkLlVOS05PV05fVVNFUixcbiAgICBzaG91bGRDYXBpdGFsaXplLFxuICAgIHJlcGxhY2VTZWxmLFxuICAgIHNlbGY/LmlkLFxuICAgIHVzZXI/Lm5hbWUsXG4gICAgdXNlcklkXG4gIF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi11c2VyXCIsIGNsYXNzTmFtZSksXG4gICAgXCJkYXRhLWxvYWRpbmdcIjogaXNMb2FkaW5nID8gXCJcIiA6IHZvaWQgMCxcbiAgICAuLi5wcm9wc1xuICB9LCBpc0xvYWRpbmcgPyBudWxsIDogcmVzb2x2ZWRVc2VyTmFtZSk7XG59XG5cbmV4cG9ydCB7IFVzZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVzZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZVJvb21Db250ZXh0QnVuZGxlIiwiUmVhY3RfX2RlZmF1bHQiLCJ1c2VNZW1vIiwidXNlT3ZlcnJpZGVzIiwiY2FwaXRhbGl6ZSIsImNsYXNzTmFtZXMiLCJVc2VyIiwidXNlcklkIiwicmVwbGFjZVNlbGYiLCJzaG91bGRDYXBpdGFsaXplIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJ1c2VVc2VyIiwidXNlU2VsZiIsInVzZXIiLCJpc0xvYWRpbmciLCJzZWxmIiwiJCIsInJlc29sdmVkVXNlck5hbWUiLCJuYW1lIiwiaWQiLCJTRUxGIiwiVU5LTk9XTl9VU0VSIiwiY3JlYXRlRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/User.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/config.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/config.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommentsConfig: () => (/* binding */ CommentsConfig),\n/* harmony export */   useCommentsConfig: () => (/* binding */ useCommentsConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\");\n/* __next_internal_client_entry_do_not_use__ CommentsConfig,useCommentsConfig auto */ \n\nconst CommentsConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nfunction useCommentsConfig() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CommentsConfigContext);\n}\nfunction CommentsConfig({ overrides, portalContainer, children }) {\n    const commentsConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            portalContainer\n        }), [\n        portalContainer\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentsConfigContext.Provider, {\n        value: commentsConfig\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_overrides_mjs__WEBPACK_IMPORTED_MODULE_1__.OverridesProvider, {\n        overrides\n    }, children));\n}\n //# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb25maWcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7c0ZBQzJFO0FBQ3ZCO0FBRXBELE1BQU1LLHNDQUF3Qkosb0RBQWFBLENBQUMsQ0FBQztBQUM3QyxTQUFTSztJQUNQLE9BQU9KLGlEQUFVQSxDQUFDRztBQUNwQjtBQUNBLFNBQVNFLGVBQWUsRUFDdEJDLFNBQVMsRUFDVEMsZUFBZSxFQUNmQyxRQUFRLEVBQ1Q7SUFDQyxNQUFNQyxpQkFBaUJSLDhDQUFPQSxDQUM1QixJQUFPO1lBQUVNO1FBQWdCLElBQ3pCO1FBQUNBO0tBQWdCO0lBRW5CLE9BQU8sYUFBYSxpQkFBR1QsZ0RBQTRCLENBQUNLLHNCQUFzQlEsUUFBUSxFQUFFO1FBQ2xGQyxPQUFPSDtJQUNULEdBQUcsYUFBYSxpQkFBR1gsZ0RBQTRCLENBQUNJLDZEQUFpQkEsRUFBRTtRQUNqRUk7SUFDRixHQUFHRTtBQUNMO0FBRTZDLENBQzdDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29uZmlnLm1qcz9kZmU5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgT3ZlcnJpZGVzUHJvdmlkZXIgfSBmcm9tICcuL292ZXJyaWRlcy5tanMnO1xuXG5jb25zdCBDb21tZW50c0NvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbmZ1bmN0aW9uIHVzZUNvbW1lbnRzQ29uZmlnKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChDb21tZW50c0NvbmZpZ0NvbnRleHQpO1xufVxuZnVuY3Rpb24gQ29tbWVudHNDb25maWcoe1xuICBvdmVycmlkZXMsXG4gIHBvcnRhbENvbnRhaW5lcixcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgY29tbWVudHNDb25maWcgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7IHBvcnRhbENvbnRhaW5lciB9KSxcbiAgICBbcG9ydGFsQ29udGFpbmVyXVxuICApO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tbWVudHNDb25maWdDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbW1lbnRzQ29uZmlnXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KE92ZXJyaWRlc1Byb3ZpZGVyLCB7XG4gICAgb3ZlcnJpZGVzXG4gIH0sIGNoaWxkcmVuKSk7XG59XG5cbmV4cG9ydCB7IENvbW1lbnRzQ29uZmlnLCB1c2VDb21tZW50c0NvbmZpZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdF9fZGVmYXVsdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlTWVtbyIsIk92ZXJyaWRlc1Byb3ZpZGVyIiwiQ29tbWVudHNDb25maWdDb250ZXh0IiwidXNlQ29tbWVudHNDb25maWciLCJDb21tZW50c0NvbmZpZyIsIm92ZXJyaWRlcyIsInBvcnRhbENvbnRhaW5lciIsImNoaWxkcmVuIiwiY29tbWVudHNDb25maWciLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/constants.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMOJI_FONT_FAMILY: () => (/* binding */ EMOJI_FONT_FAMILY),\n/* harmony export */   FLOATING_ELEMENT_COLLISION_PADDING: () => (/* binding */ FLOATING_ELEMENT_COLLISION_PADDING),\n/* harmony export */   FLOATING_ELEMENT_SIDE_OFFSET: () => (/* binding */ FLOATING_ELEMENT_SIDE_OFFSET)\n/* harmony export */ });\nconst FLOATING_ELEMENT_SIDE_OFFSET = 6;\nconst FLOATING_ELEMENT_COLLISION_PADDING = 10;\nconst EMOJI_FONT_FAMILY = \"'Apple Color Emoji', 'Noto Color Emoji', 'Twemoji Mozilla', 'Android Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', EmojiSymbols, sans-serif\";\n //# sourceMappingURL=constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9jb25zdGFudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLCtCQUErQjtBQUNyQyxNQUFNQyxxQ0FBcUM7QUFDM0MsTUFBTUMsb0JBQW9CO0FBRXFFLENBQy9GLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvY29uc3RhbnRzLm1qcz83M2RhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZMT0FUSU5HX0VMRU1FTlRfU0lERV9PRkZTRVQgPSA2O1xuY29uc3QgRkxPQVRJTkdfRUxFTUVOVF9DT0xMSVNJT05fUEFERElORyA9IDEwO1xuY29uc3QgRU1PSklfRk9OVF9GQU1JTFkgPSBcIidBcHBsZSBDb2xvciBFbW9qaScsICdOb3RvIENvbG9yIEVtb2ppJywgJ1R3ZW1vamkgTW96aWxsYScsICdBbmRyb2lkIEVtb2ppJywgJ1NlZ29lIFVJIEVtb2ppJywgJ1NlZ29lIFVJIFN5bWJvbCcsIEVtb2ppU3ltYm9scywgc2Fucy1zZXJpZlwiO1xuXG5leHBvcnQgeyBFTU9KSV9GT05UX0ZBTUlMWSwgRkxPQVRJTkdfRUxFTUVOVF9DT0xMSVNJT05fUEFERElORywgRkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJGTE9BVElOR19FTEVNRU5UX1NJREVfT0ZGU0VUIiwiRkxPQVRJTkdfRUxFTUVOVF9DT0xMSVNJT05fUEFERElORyIsIkVNT0pJX0ZPTlRfRkFNSUxZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Check.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Check.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckIcon: () => (/* binding */ CheckIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction CheckIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M16 6L8 14L4 10\"\n    }));\n}\n //# sourceMappingURL=Check.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9DaGVjay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29CO0FBRXZELFNBQVNFLFVBQVVDLEtBQUs7SUFDdEIsT0FBTyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQ0MsK0RBQUlBLEVBQUU7UUFDeEQsR0FBR0UsS0FBSztJQUNWLEdBQUcsYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUMsUUFBUTtRQUN0REssR0FBRztJQUNMO0FBQ0Y7QUFFcUIsQ0FDckIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9DaGVjay5tanM/ODgyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvaW50ZXJuYWwvSWNvbi5tanMnO1xuXG5mdW5jdGlvbiBDaGVja0ljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE2IDZMOCAxNEw0IDEwXCJcbiAgfSkpO1xufVxuXG5leHBvcnQgeyBDaGVja0ljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoZWNrLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdF9fZGVmYXVsdCIsIkljb24iLCJDaGVja0ljb24iLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Check.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Cross.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Cross.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CrossIcon: () => (/* binding */ CrossIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction CrossIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M15 5L5 15\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M5 5L15 15\"\n    }));\n}\n //# sourceMappingURL=Cross.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9Dcm9zcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29CO0FBRXZELFNBQVNFLFVBQVVDLEtBQUs7SUFDdEIsT0FBTyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQ0MsK0RBQUlBLEVBQUU7UUFDeEQsR0FBR0UsS0FBSztJQUNWLEdBQUcsYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUMsUUFBUTtRQUN0REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsUUFBUTtRQUN2REssR0FBRztJQUNMO0FBQ0Y7QUFFcUIsQ0FDckIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9Dcm9zcy5tanM/ZjU4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvaW50ZXJuYWwvSWNvbi5tanMnO1xuXG5mdW5jdGlvbiBDcm9zc0ljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE1IDVMNSAxNVwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTUgNUwxNSAxNVwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgQ3Jvc3NJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Dcm9zcy5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJJY29uIiwiQ3Jvc3NJY29uIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Cross.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Delete.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Delete.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteIcon: () => (/* binding */ DeleteIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction DeleteIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M4.5 6.5h11M14 6.5V14a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 6 14V6.5M7.5 6.5V5a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v1.5\"\n    }));\n}\n //# sourceMappingURL=Delete.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9EZWxldGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNvQjtBQUV2RCxTQUFTRSxXQUFXQyxLQUFLO0lBQ3ZCLE9BQU8sYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUNDLCtEQUFJQSxFQUFFO1FBQ3hELEdBQUdFLEtBQUs7SUFDVixHQUFHLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDLFFBQVE7UUFDdERLLEdBQUc7SUFDTDtBQUNGO0FBRXNCLENBQ3RCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvaWNvbnMvRGVsZXRlLm1qcz8yYjc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIERlbGV0ZUljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTQuNSA2LjVoMTFNMTQgNi41VjE0YTEuNSAxLjUgMCAwIDEtMS41IDEuNWgtNUExLjUgMS41IDAgMCAxIDYgMTRWNi41TTcuNSA2LjVWNWExIDEgMCAwIDEgMS0xaDNhMSAxIDAgMCAxIDEgMXYxLjVcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IERlbGV0ZUljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlbGV0ZS5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJJY29uIiwiRGVsZXRlSWNvbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Delete.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Edit.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Edit.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditIcon: () => (/* binding */ EditIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction EditIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"m11.784 5.797-6.13 6.138a4 4 0 0 0-1.03 1.775L4 16l2.285-.624a4 4 0 0 0 1.776-1.032l6.145-6.152m-2.422-2.395 1.244-1.246c.608-.608 1.826-.81 2.53-.104.7.7.499 1.893-.122 2.515l-1.23 1.23m-2.422-2.395 2.422 2.395\"\n    }));\n}\n //# sourceMappingURL=Edit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9FZGl0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7QUFFdkQsU0FBU0UsU0FBU0MsS0FBSztJQUNyQixPQUFPLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDQywrREFBSUEsRUFBRTtRQUN4RCxHQUFHRSxLQUFLO0lBQ1YsR0FBRyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQyxRQUFRO1FBQ3RESyxHQUFHO0lBQ0w7QUFDRjtBQUVvQixDQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL0VkaXQubWpzPzI1MzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gRWRpdEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTExLjc4NCA1Ljc5Ny02LjEzIDYuMTM4YTQgNCAwIDAgMC0xLjAzIDEuNzc1TDQgMTZsMi4yODUtLjYyNGE0IDQgMCAwIDAgMS43NzYtMS4wMzJsNi4xNDUtNi4xNTJtLTIuNDIyLTIuMzk1IDEuMjQ0LTEuMjQ2Yy42MDgtLjYwOCAxLjgyNi0uODEgMi41My0uMTA0LjcuNy40OTkgMS44OTMtLjEyMiAyLjUxNWwtMS4yMyAxLjIzbS0yLjQyMi0yLjM5NSAyLjQyMiAyLjM5NVwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgRWRpdEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVkaXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiSWNvbiIsIkVkaXRJY29uIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Edit.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Ellipsis.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Ellipsis.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EllipsisIcon: () => (/* binding */ EllipsisIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction EllipsisIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        fill: \"currentColor\",\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 5,\n        cy: 10,\n        r: 0.75\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 10,\n        cy: 10,\n        r: 0.75\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 15,\n        cy: 10,\n        r: 0.75\n    }));\n}\n //# sourceMappingURL=Ellipsis.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9FbGxpcHNpcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29CO0FBRXZELFNBQVNFLGFBQWFDLEtBQUs7SUFDekIsT0FBTyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQ0MsK0RBQUlBLEVBQUU7UUFDeERJLE1BQU07UUFDTixHQUFHRixLQUFLO0lBQ1YsR0FBRyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQyxVQUFVO1FBQ3hETSxJQUFJO1FBQ0pDLElBQUk7UUFDSkMsR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR1IsZ0RBQTRCLENBQUMsVUFBVTtRQUN6RE0sSUFBSTtRQUNKQyxJQUFJO1FBQ0pDLEdBQUc7SUFDTCxJQUFJLGFBQWEsaUJBQUdSLGdEQUE0QixDQUFDLFVBQVU7UUFDekRNLElBQUk7UUFDSkMsSUFBSTtRQUNKQyxHQUFHO0lBQ0w7QUFDRjtBQUV3QixDQUN4QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL0VsbGlwc2lzLm1qcz80N2MyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIEVsbGlwc2lzSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgLi4ucHJvcHNcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICAgIGN4OiA1LFxuICAgIGN5OiAxMCxcbiAgICByOiAwLjc1XG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IDEwLFxuICAgIGN5OiAxMCxcbiAgICByOiAwLjc1XG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IDE1LFxuICAgIGN5OiAxMCxcbiAgICByOiAwLjc1XG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgRWxsaXBzaXNJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbGxpcHNpcy5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJJY29uIiwiRWxsaXBzaXNJY29uIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiZmlsbCIsImN4IiwiY3kiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Ellipsis.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Emoji.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Emoji.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiIcon: () => (/* binding */ EmojiIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction EmojiIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.5 11.5S8.25 13 10 13s2.5-1.5 2.5-1.5M8 8h.007\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 8h.007\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 8,\n        cy: 8,\n        r: 0.25\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 12,\n        cy: 8,\n        r: 0.25\n    }));\n}\n //# sourceMappingURL=Emoji.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9FbW9qaS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29CO0FBRXZELFNBQVNFLFVBQVVDLEtBQUs7SUFDdEIsT0FBTyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQ0MsK0RBQUlBLEVBQUU7UUFDeEQsR0FBR0UsS0FBSztJQUNWLEdBQUcsYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUMsUUFBUTtRQUN0REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsUUFBUTtRQUN2REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsUUFBUTtRQUN2REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsVUFBVTtRQUN6RE0sSUFBSTtRQUNKQyxJQUFJO1FBQ0pDLEdBQUc7SUFDTCxJQUFJLGFBQWEsaUJBQUdSLGdEQUE0QixDQUFDLFVBQVU7UUFDekRNLElBQUk7UUFDSkMsSUFBSTtRQUNKQyxHQUFHO0lBQ0w7QUFDRjtBQUVxQixDQUNyQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL0Vtb2ppLm1qcz9lMGZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIEVtb2ppSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIC4uLnByb3BzXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTAgMTdhNyA3IDAgMSAwIDAtMTQgNyA3IDAgMCAwIDAgMTRaXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNy41IDExLjVTOC4yNSAxMyAxMCAxM3MyLjUtMS41IDIuNS0xLjVNOCA4aC4wMDdcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMiA4aC4wMDdcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICAgIGN4OiA4LFxuICAgIGN5OiA4LFxuICAgIHI6IDAuMjVcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjeDogMTIsXG4gICAgY3k6IDgsXG4gICAgcjogMC4yNVxuICB9KSk7XG59XG5cbmV4cG9ydCB7IEVtb2ppSWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiSWNvbiIsIkVtb2ppSWNvbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImQiLCJjeCIsImN5IiwiciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Emoji.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/EmojiAdd.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/EmojiAdd.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiAddIcon: () => (/* binding */ EmojiAddIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction EmojiAddIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M11 3.07A7 7 0 1 0 16.93 9\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.5 11.5S8.25 13 10 13s2.5-1.5 2.5-1.5M8 8h0\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 8h0\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M13 5h4m-2-2v4\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: \"8\",\n        cy: \"8\",\n        r: \".25\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: \"12\",\n        cy: \"8\",\n        r: \".25\"\n    }));\n}\n //# sourceMappingURL=EmojiAdd.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9FbW9qaUFkZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29CO0FBRXZELFNBQVNFLGFBQWFDLEtBQUs7SUFDekIsT0FBTyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQ0MsK0RBQUlBLEVBQUU7UUFDeEQsR0FBR0UsS0FBSztJQUNWLEdBQUcsYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUMsUUFBUTtRQUN0REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsUUFBUTtRQUN2REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsUUFBUTtRQUN2REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsUUFBUTtRQUN2REssR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR0wsZ0RBQTRCLENBQUMsVUFBVTtRQUN6RE0sSUFBSTtRQUNKQyxJQUFJO1FBQ0pDLEdBQUc7SUFDTCxJQUFJLGFBQWEsaUJBQUdSLGdEQUE0QixDQUFDLFVBQVU7UUFDekRNLElBQUk7UUFDSkMsSUFBSTtRQUNKQyxHQUFHO0lBQ0w7QUFDRjtBQUV3QixDQUN4QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL0Vtb2ppQWRkLm1qcz81ZGY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIEVtb2ppQWRkSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIC4uLnByb3BzXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTEgMy4wN0E3IDcgMCAxIDAgMTYuOTMgOVwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTcuNSAxMS41UzguMjUgMTMgMTAgMTNzMi41LTEuNSAyLjUtMS41TTggOGgwXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTIgOGgwXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTMgNWg0bS0yLTJ2NFwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IFwiOFwiLFxuICAgIGN5OiBcIjhcIixcbiAgICByOiBcIi4yNVwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IFwiMTJcIixcbiAgICBjeTogXCI4XCIsXG4gICAgcjogXCIuMjVcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IEVtb2ppQWRkSWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamlBZGQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiSWNvbiIsIkVtb2ppQWRkSWNvbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImQiLCJjeCIsImN5IiwiciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/EmojiAdd.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Mention.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Mention.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MentionIcon: () => (/* binding */ MentionIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction MentionIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M10 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M13 7v3.7c0 1.105.855 2.1 1.9 2.1a2.12 2.12 0 0 0 2.1-2.1V10a7 7 0 1 0-2.8 5.6\"\n    }));\n}\n //# sourceMappingURL=Mention.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9NZW50aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7QUFFdkQsU0FBU0UsWUFBWUMsS0FBSztJQUN4QixPQUFPLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDQywrREFBSUEsRUFBRTtRQUN4RCxHQUFHRSxLQUFLO0lBQ1YsR0FBRyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQyxRQUFRO1FBQ3RESyxHQUFHO0lBQ0wsSUFBSSxhQUFhLGlCQUFHTCxnREFBNEIsQ0FBQyxRQUFRO1FBQ3ZESyxHQUFHO0lBQ0w7QUFDRjtBQUV1QixDQUN2QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL01lbnRpb24ubWpzP2JkNDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gTWVudGlvbkljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwIDEzYTMgMyAwIDEgMCAwLTYgMyAzIDAgMCAwIDAgNlpcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMyA3djMuN2MwIDEuMTA1Ljg1NSAyLjEgMS45IDIuMWEyLjEyIDIuMTIgMCAwIDAgMi4xLTIuMVYxMGE3IDcgMCAxIDAtMi44IDUuNlwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgTWVudGlvbkljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lbnRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiSWNvbiIsIk1lbnRpb25JY29uIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Mention.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Resolve.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Resolve.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolveIcon: () => (/* binding */ ResolveIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction ResolveIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 10,\n        cy: 10,\n        r: 7\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"m13 8-4 4-2-2\"\n    }));\n}\n //# sourceMappingURL=Resolve.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9SZXNvbHZlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7QUFFdkQsU0FBU0UsWUFBWUMsS0FBSztJQUN4QixPQUFPLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDQywrREFBSUEsRUFBRTtRQUN4RCxHQUFHRSxLQUFLO0lBQ1YsR0FBRyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQyxVQUFVO1FBQ3hESyxJQUFJO1FBQ0pDLElBQUk7UUFDSkMsR0FBRztJQUNMLElBQUksYUFBYSxpQkFBR1AsZ0RBQTRCLENBQUMsUUFBUTtRQUN2RFEsR0FBRztJQUNMO0FBQ0Y7QUFFdUIsQ0FDdkIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9SZXNvbHZlLm1qcz85ZDRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIFJlc29sdmVJY29uKHByb3BzKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChJY29uLCB7XG4gICAgLi4ucHJvcHNcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICAgIGN4OiAxMCxcbiAgICBjeTogMTAsXG4gICAgcjogN1xuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIm0xMyA4LTQgNC0yLTJcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IFJlc29sdmVJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNvbHZlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdF9fZGVmYXVsdCIsIkljb24iLCJSZXNvbHZlSWNvbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImN4IiwiY3kiLCJyIiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Resolve.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Resolved.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Resolved.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolvedIcon: () => (/* binding */ ResolvedIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction ResolvedIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 10,\n        cy: 10,\n        r: 7,\n        fill: \"currentColor\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"m13 8-4 4-2-2\",\n        stroke: \"var(--lb-icon-background)\"\n    }));\n}\n //# sourceMappingURL=Resolved.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9SZXNvbHZlZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29CO0FBRXZELFNBQVNFLGFBQWFDLEtBQUs7SUFDekIsT0FBTyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQ0MsK0RBQUlBLEVBQUU7UUFDeEQsR0FBR0UsS0FBSztJQUNWLEdBQUcsYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUMsVUFBVTtRQUN4REssSUFBSTtRQUNKQyxJQUFJO1FBQ0pDLEdBQUc7UUFDSEMsTUFBTTtJQUNSLElBQUksYUFBYSxpQkFBR1IsZ0RBQTRCLENBQUMsUUFBUTtRQUN2RFMsR0FBRztRQUNIQyxRQUFRO0lBQ1Y7QUFDRjtBQUV3QixDQUN4QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL1Jlc29sdmVkLm1qcz80MDlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIFJlc29sdmVkSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIC4uLnByb3BzXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjeDogMTAsXG4gICAgY3k6IDEwLFxuICAgIHI6IDcsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIm0xMyA4LTQgNC0yLTJcIixcbiAgICBzdHJva2U6IFwidmFyKC0tbGItaWNvbi1iYWNrZ3JvdW5kKVwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgUmVzb2x2ZWRJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNvbHZlZC5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJJY29uIiwiUmVzb2x2ZWRJY29uIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiY3giLCJjeSIsInIiLCJmaWxsIiwiZCIsInN0cm9rZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Resolved.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Search.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Search.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchIcon: () => (/* binding */ SearchIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction SearchIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M9 15A6 6 0 1 0 9 3a6 6 0 0 0 0 12Zm7.5 1.5-3.25-3.25\"\n    }));\n}\n //# sourceMappingURL=Search.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9TZWFyY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNvQjtBQUV2RCxTQUFTRSxXQUFXQyxLQUFLO0lBQ3ZCLE9BQU8sYUFBYSxpQkFBR0gsZ0RBQTRCLENBQUNDLCtEQUFJQSxFQUFFO1FBQ3hELEdBQUdFLEtBQUs7SUFDVixHQUFHLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDLFFBQVE7UUFDdERLLEdBQUc7SUFDTDtBQUNGO0FBRXNCLENBQ3RCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvaWNvbnMvU2VhcmNoLm1qcz83MDMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIFNlYXJjaEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTkgMTVBNiA2IDAgMSAwIDkgM2E2IDYgMCAwIDAgMCAxMlptNy41IDEuNS0zLjI1LTMuMjVcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IFNlYXJjaEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlYXJjaC5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJJY29uIiwiU2VhcmNoSWNvbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Search.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Send.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Send.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SendIcon: () => (/* binding */ SendIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction SendIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"m5 16 12-6L5 4l2 6-2 6ZM7 10h10\"\n    }));\n}\n //# sourceMappingURL=Send.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9TZW5kLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7QUFFdkQsU0FBU0UsU0FBU0MsS0FBSztJQUNyQixPQUFPLGFBQWEsaUJBQUdILGdEQUE0QixDQUFDQywrREFBSUEsRUFBRTtRQUN4RCxHQUFHRSxLQUFLO0lBQ1YsR0FBRyxhQUFhLGlCQUFHSCxnREFBNEIsQ0FBQyxRQUFRO1FBQ3RESyxHQUFHO0lBQ0w7QUFDRjtBQUVvQixDQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL1NlbmQubWpzPzAwMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gU2VuZEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTUgMTYgMTItNkw1IDRsMiA2LTIgNlpNNyAxMGgxMFwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgU2VuZEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbmQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwiSWNvbiIsIlNlbmRJY29uIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Send.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Spinner.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/icons/Spinner.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpinnerIcon: () => (/* binding */ SpinnerIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Icon.mjs\");\n\n\nfunction SpinnerIcon(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M3 10a7 7 0 0 1 7-7\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"animateTransform\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        attributeName: \"transform\",\n        type: \"rotate\",\n        dur: \"0.75s\",\n        values: `0 ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_WIDTH / 2} ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_HEIGHT / 2};360 ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_WIDTH / 2} ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_HEIGHT / 2}`,\n        repeatCount: \"indefinite\"\n    })));\n}\n //# sourceMappingURL=Spinner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9pY29ucy9TcGlubmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDNkM7QUFFaEYsU0FBU0ksWUFBWUMsS0FBSztJQUN4QixPQUFPLGFBQWEsaUJBQUdMLGdEQUE0QixDQUFDQywrREFBSUEsRUFBRTtRQUN4RCxHQUFHSSxLQUFLO0lBQ1YsR0FBRyxhQUFhLGlCQUFHTCxnREFBNEIsQ0FBQyxRQUFRO1FBQ3RETyxHQUFHO0lBQ0wsR0FBRyxhQUFhLGlCQUFHUCxnREFBNEIsQ0FBQyxvQkFBb0I7UUFDbEVRLE9BQU87UUFDUEMsZUFBZTtRQUNmQyxNQUFNO1FBQ05DLEtBQUs7UUFDTEMsUUFBUSxDQUFDLEVBQUUsRUFBRVYscUVBQVVBLEdBQUcsRUFBRSxDQUFDLEVBQUVDLHNFQUFXQSxHQUFHLEVBQUUsS0FBSyxFQUFFRCxxRUFBVUEsR0FBRyxFQUFFLENBQUMsRUFBRUMsc0VBQVdBLEdBQUcsRUFBRSxDQUFDO1FBQ3pGVSxhQUFhO0lBQ2Y7QUFDRjtBQUV1QixDQUN2QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L2ljb25zL1NwaW5uZXIubWpzP2U5ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24sIElDT05fV0lEVEgsIElDT05fSEVJR0hUIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIFNwaW5uZXJJY29uKHByb3BzKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChJY29uLCB7XG4gICAgLi4ucHJvcHNcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0zIDEwYTcgNyAwIDAgMSA3LTdcIlxuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVUcmFuc2Zvcm1cIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgYXR0cmlidXRlTmFtZTogXCJ0cmFuc2Zvcm1cIixcbiAgICB0eXBlOiBcInJvdGF0ZVwiLFxuICAgIGR1cjogXCIwLjc1c1wiLFxuICAgIHZhbHVlczogYDAgJHtJQ09OX1dJRFRIIC8gMn0gJHtJQ09OX0hFSUdIVCAvIDJ9OzM2MCAke0lDT05fV0lEVEggLyAyfSAke0lDT05fSEVJR0hUIC8gMn1gLFxuICAgIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIlxuICB9KSkpO1xufVxuXG5leHBvcnQgeyBTcGlubmVySWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Bpbm5lci5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJJY29uIiwiSUNPTl9XSURUSCIsIklDT05fSEVJR0hUIiwiU3Bpbm5lckljb24iLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJkIiwieG1sbnMiLCJhdHRyaWJ1dGVOYW1lIiwidHlwZSIsImR1ciIsInZhbHVlcyIsInJlcGVhdENvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/icons/Spinner.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/overrides.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OverridesContext: () => (/* binding */ OverridesContext),\n/* harmony export */   OverridesProvider: () => (/* binding */ OverridesProvider),\n/* harmony export */   defaultOverrides: () => (/* binding */ defaultOverrides),\n/* harmony export */   useOverrides: () => (/* binding */ useOverrides)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/components/internal/Emoji.mjs\");\n/* __next_internal_client_entry_do_not_use__ OverridesContext,OverridesProvider,defaultOverrides,useOverrides auto */ \n\n\nconst defaultOverrides = {\n    locale: \"en\",\n    dir: \"ltr\",\n    SELF: \"you\",\n    UNKNOWN_USER: \"Anonymous\",\n    LIST_REMAINING: (count)=>`${count} more`,\n    EMOJI_PICKER_SEARCH_PLACEHOLDER: \"Search…\",\n    EMOJI_PICKER_EMPTY: \"No emoji found.\",\n    EMOJI_PICKER_ERROR: ()=>\"There was an error while getting the list of emoji.\",\n    COMPOSER_INSERT_MENTION: \"Mention someone\",\n    COMPOSER_INSERT_EMOJI: \"Add emoji\",\n    COMPOSER_PLACEHOLDER: \"Write a comment…\",\n    COMPOSER_SEND: \"Send\",\n    COMMENT_EDITED: \"(edited)\",\n    COMMENT_DELETED: \"This comment has been deleted.\",\n    COMMENT_MORE: \"More\",\n    COMMENT_EDIT: \"Edit comment\",\n    COMMENT_EDIT_COMPOSER_PLACEHOLDER: \"Edit comment…\",\n    COMMENT_EDIT_COMPOSER_CANCEL: \"Cancel\",\n    COMMENT_EDIT_COMPOSER_SAVE: \"Save\",\n    COMMENT_DELETE: \"Delete comment\",\n    COMMENT_ADD_REACTION: \"Add reaction\",\n    COMMENT_REACTION_TOOLTIP: (emoji, list)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, list, \" reacted with \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_1__.Emoji, {\n            emoji\n        })),\n    COMMENT_REACTION_REMAINING: (others)=>`${others} other${others > 1 ? \"s\" : \"\"}`,\n    COMMENT_REACTION_DESCRIPTION: (emoji, count)=>`${count} reaction${count > 1 ? \"s\" : \"\"}, react with ${emoji}`,\n    THREAD_RESOLVE: \"Resolve thread\",\n    THREAD_UNRESOLVE: \"Re-open thread\",\n    THREAD_COMPOSER_PLACEHOLDER: \"Reply to thread…\",\n    THREAD_COMPOSER_SEND: \"Reply\"\n};\nconst OverridesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useOverrides(overrides) {\n    const contextOverrides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(OverridesContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultOverrides,\n            ...contextOverrides,\n            ...overrides\n        }), [\n        contextOverrides,\n        overrides\n    ]);\n}\nfunction OverridesProvider({ children, overrides: providerOverrides }) {\n    const contextOverrides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(OverridesContext);\n    const overrides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultOverrides,\n            ...contextOverrides,\n            ...providerOverrides\n        }), [\n        contextOverrides,\n        providerOverrides\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(OverridesContext.Provider, {\n        value: overrides\n    }, children);\n}\n //# sourceMappingURL=overrides.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9vdmVycmlkZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztzSEFDK0I7QUFDNEI7QUFDSDtBQUV4RCxNQUFNSyxtQkFBbUI7SUFDdkJDLFFBQVE7SUFDUkMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLGNBQWM7SUFDZEMsZ0JBQWdCLENBQUNDLFFBQVUsQ0FBQyxFQUFFQSxNQUFNLEtBQUssQ0FBQztJQUMxQ0MsaUNBQWlDO0lBQ2pDQyxvQkFBb0I7SUFDcEJDLG9CQUFvQixJQUFNO0lBQzFCQyx5QkFBeUI7SUFDekJDLHVCQUF1QjtJQUN2QkMsc0JBQXNCO0lBQ3RCQyxlQUFlO0lBQ2ZDLGdCQUFnQjtJQUNoQkMsaUJBQWlCO0lBQ2pCQyxjQUFjO0lBQ2RDLGNBQWM7SUFDZEMsbUNBQW1DO0lBQ25DQyw4QkFBOEI7SUFDOUJDLDRCQUE0QjtJQUM1QkMsZ0JBQWdCO0lBQ2hCQyxzQkFBc0I7SUFDdEJDLDBCQUEwQixDQUFDQyxPQUFPQyxPQUFTLGFBQWEsaUJBQUc5QixnREFBbUIsQ0FBQ0EsMkNBQWMsRUFBRSxNQUFNOEIsTUFBTSxrQkFBa0IsYUFBYSxpQkFBRzlCLGdEQUFtQixDQUFDSSxpRUFBS0EsRUFBRTtZQUN0S3lCO1FBQ0Y7SUFDQUksNEJBQTRCLENBQUNDLFNBQVcsQ0FBQyxFQUFFQSxPQUFPLE1BQU0sRUFBRUEsU0FBUyxJQUFJLE1BQU0sR0FBRyxDQUFDO0lBQ2pGQyw4QkFBOEIsQ0FBQ04sT0FBT2xCLFFBQVUsQ0FBQyxFQUFFQSxNQUFNLFNBQVMsRUFBRUEsUUFBUSxJQUFJLE1BQU0sR0FBRyxhQUFhLEVBQUVrQixNQUFNLENBQUM7SUFDL0dPLGdCQUFnQjtJQUNoQkMsa0JBQWtCO0lBQ2xCQyw2QkFBNkI7SUFDN0JDLHNCQUFzQjtBQUN4QjtBQUNBLE1BQU1DLGlDQUFtQnZDLG9EQUFhQSxDQUFDLEtBQUs7QUFDNUMsU0FBU3dDLGFBQWFDLFNBQVM7SUFDN0IsTUFBTUMsbUJBQW1CekMsaURBQVVBLENBQUNzQztJQUNwQyxPQUFPckMsOENBQU9BLENBQ1osSUFBTztZQUNMLEdBQUdFLGdCQUFnQjtZQUNuQixHQUFHc0MsZ0JBQWdCO1lBQ25CLEdBQUdELFNBQVM7UUFDZCxJQUNBO1FBQUNDO1FBQWtCRDtLQUFVO0FBRWpDO0FBQ0EsU0FBU0Usa0JBQWtCLEVBQ3pCQyxRQUFRLEVBQ1JILFdBQVdJLGlCQUFpQixFQUM3QjtJQUNDLE1BQU1ILG1CQUFtQnpDLGlEQUFVQSxDQUFDc0M7SUFDcEMsTUFBTUUsWUFBWXZDLDhDQUFPQSxDQUN2QixJQUFPO1lBQ0wsR0FBR0UsZ0JBQWdCO1lBQ25CLEdBQUdzQyxnQkFBZ0I7WUFDbkIsR0FBR0csaUJBQWlCO1FBQ3RCLElBQ0E7UUFBQ0g7UUFBa0JHO0tBQWtCO0lBRXZDLE9BQU8sYUFBYSxpQkFBRzlDLGdEQUFtQixDQUFDd0MsaUJBQWlCTyxRQUFRLEVBQUU7UUFDcEVDLE9BQU9OO0lBQ1QsR0FBR0c7QUFDTDtBQUUrRSxDQUMvRSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L292ZXJyaWRlcy5tanM/ZTU0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRW1vamkgfSBmcm9tICcuL2NvbXBvbmVudHMvaW50ZXJuYWwvRW1vamkubWpzJztcblxuY29uc3QgZGVmYXVsdE92ZXJyaWRlcyA9IHtcbiAgbG9jYWxlOiBcImVuXCIsXG4gIGRpcjogXCJsdHJcIixcbiAgU0VMRjogXCJ5b3VcIixcbiAgVU5LTk9XTl9VU0VSOiBcIkFub255bW91c1wiLFxuICBMSVNUX1JFTUFJTklORzogKGNvdW50KSA9PiBgJHtjb3VudH0gbW9yZWAsXG4gIEVNT0pJX1BJQ0tFUl9TRUFSQ0hfUExBQ0VIT0xERVI6IFwiU2VhcmNoXFx1MjAyNlwiLFxuICBFTU9KSV9QSUNLRVJfRU1QVFk6IFwiTm8gZW1vamkgZm91bmQuXCIsXG4gIEVNT0pJX1BJQ0tFUl9FUlJPUjogKCkgPT4gXCJUaGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgZ2V0dGluZyB0aGUgbGlzdCBvZiBlbW9qaS5cIixcbiAgQ09NUE9TRVJfSU5TRVJUX01FTlRJT046IFwiTWVudGlvbiBzb21lb25lXCIsXG4gIENPTVBPU0VSX0lOU0VSVF9FTU9KSTogXCJBZGQgZW1vamlcIixcbiAgQ09NUE9TRVJfUExBQ0VIT0xERVI6IFwiV3JpdGUgYSBjb21tZW50XFx1MjAyNlwiLFxuICBDT01QT1NFUl9TRU5EOiBcIlNlbmRcIixcbiAgQ09NTUVOVF9FRElURUQ6IFwiKGVkaXRlZClcIixcbiAgQ09NTUVOVF9ERUxFVEVEOiBcIlRoaXMgY29tbWVudCBoYXMgYmVlbiBkZWxldGVkLlwiLFxuICBDT01NRU5UX01PUkU6IFwiTW9yZVwiLFxuICBDT01NRU5UX0VESVQ6IFwiRWRpdCBjb21tZW50XCIsXG4gIENPTU1FTlRfRURJVF9DT01QT1NFUl9QTEFDRUhPTERFUjogXCJFZGl0IGNvbW1lbnRcXHUyMDI2XCIsXG4gIENPTU1FTlRfRURJVF9DT01QT1NFUl9DQU5DRUw6IFwiQ2FuY2VsXCIsXG4gIENPTU1FTlRfRURJVF9DT01QT1NFUl9TQVZFOiBcIlNhdmVcIixcbiAgQ09NTUVOVF9ERUxFVEU6IFwiRGVsZXRlIGNvbW1lbnRcIixcbiAgQ09NTUVOVF9BRERfUkVBQ1RJT046IFwiQWRkIHJlYWN0aW9uXCIsXG4gIENPTU1FTlRfUkVBQ1RJT05fVE9PTFRJUDogKGVtb2ppLCBsaXN0KSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgbGlzdCwgXCIgcmVhY3RlZCB3aXRoIFwiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChFbW9qaSwge1xuICAgIGVtb2ppXG4gIH0pKSxcbiAgQ09NTUVOVF9SRUFDVElPTl9SRU1BSU5JTkc6IChvdGhlcnMpID0+IGAke290aGVyc30gb3RoZXIke290aGVycyA+IDEgPyBcInNcIiA6IFwiXCJ9YCxcbiAgQ09NTUVOVF9SRUFDVElPTl9ERVNDUklQVElPTjogKGVtb2ppLCBjb3VudCkgPT4gYCR7Y291bnR9IHJlYWN0aW9uJHtjb3VudCA+IDEgPyBcInNcIiA6IFwiXCJ9LCByZWFjdCB3aXRoICR7ZW1vaml9YCxcbiAgVEhSRUFEX1JFU09MVkU6IFwiUmVzb2x2ZSB0aHJlYWRcIixcbiAgVEhSRUFEX1VOUkVTT0xWRTogXCJSZS1vcGVuIHRocmVhZFwiLFxuICBUSFJFQURfQ09NUE9TRVJfUExBQ0VIT0xERVI6IFwiUmVwbHkgdG8gdGhyZWFkXFx1MjAyNlwiLFxuICBUSFJFQURfQ09NUE9TRVJfU0VORDogXCJSZXBseVwiXG59O1xuY29uc3QgT3ZlcnJpZGVzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodm9pZCAwKTtcbmZ1bmN0aW9uIHVzZU92ZXJyaWRlcyhvdmVycmlkZXMpIHtcbiAgY29uc3QgY29udGV4dE92ZXJyaWRlcyA9IHVzZUNvbnRleHQoT3ZlcnJpZGVzQ29udGV4dCk7XG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAuLi5kZWZhdWx0T3ZlcnJpZGVzLFxuICAgICAgLi4uY29udGV4dE92ZXJyaWRlcyxcbiAgICAgIC4uLm92ZXJyaWRlc1xuICAgIH0pLFxuICAgIFtjb250ZXh0T3ZlcnJpZGVzLCBvdmVycmlkZXNdXG4gICk7XG59XG5mdW5jdGlvbiBPdmVycmlkZXNQcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICBvdmVycmlkZXM6IHByb3ZpZGVyT3ZlcnJpZGVzXG59KSB7XG4gIGNvbnN0IGNvbnRleHRPdmVycmlkZXMgPSB1c2VDb250ZXh0KE92ZXJyaWRlc0NvbnRleHQpO1xuICBjb25zdCBvdmVycmlkZXMgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAuLi5kZWZhdWx0T3ZlcnJpZGVzLFxuICAgICAgLi4uY29udGV4dE92ZXJyaWRlcyxcbiAgICAgIC4uLnByb3ZpZGVyT3ZlcnJpZGVzXG4gICAgfSksXG4gICAgW2NvbnRleHRPdmVycmlkZXMsIHByb3ZpZGVyT3ZlcnJpZGVzXVxuICApO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoT3ZlcnJpZGVzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBvdmVycmlkZXNcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5leHBvcnQgeyBPdmVycmlkZXNDb250ZXh0LCBPdmVycmlkZXNQcm92aWRlciwgZGVmYXVsdE92ZXJyaWRlcywgdXNlT3ZlcnJpZGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdmVycmlkZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VNZW1vIiwiRW1vamkiLCJkZWZhdWx0T3ZlcnJpZGVzIiwibG9jYWxlIiwiZGlyIiwiU0VMRiIsIlVOS05PV05fVVNFUiIsIkxJU1RfUkVNQUlOSU5HIiwiY291bnQiLCJFTU9KSV9QSUNLRVJfU0VBUkNIX1BMQUNFSE9MREVSIiwiRU1PSklfUElDS0VSX0VNUFRZIiwiRU1PSklfUElDS0VSX0VSUk9SIiwiQ09NUE9TRVJfSU5TRVJUX01FTlRJT04iLCJDT01QT1NFUl9JTlNFUlRfRU1PSkkiLCJDT01QT1NFUl9QTEFDRUhPTERFUiIsIkNPTVBPU0VSX1NFTkQiLCJDT01NRU5UX0VESVRFRCIsIkNPTU1FTlRfREVMRVRFRCIsIkNPTU1FTlRfTU9SRSIsIkNPTU1FTlRfRURJVCIsIkNPTU1FTlRfRURJVF9DT01QT1NFUl9QTEFDRUhPTERFUiIsIkNPTU1FTlRfRURJVF9DT01QT1NFUl9DQU5DRUwiLCJDT01NRU5UX0VESVRfQ09NUE9TRVJfU0FWRSIsIkNPTU1FTlRfREVMRVRFIiwiQ09NTUVOVF9BRERfUkVBQ1RJT04iLCJDT01NRU5UX1JFQUNUSU9OX1RPT0xUSVAiLCJlbW9qaSIsImxpc3QiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJDT01NRU5UX1JFQUNUSU9OX1JFTUFJTklORyIsIm90aGVycyIsIkNPTU1FTlRfUkVBQ1RJT05fREVTQ1JJUFRJT04iLCJUSFJFQURfUkVTT0xWRSIsIlRIUkVBRF9VTlJFU09MVkUiLCJUSFJFQURfQ09NUE9TRVJfUExBQ0VIT0xERVIiLCJUSFJFQURfQ09NUE9TRVJfU0VORCIsIk92ZXJyaWRlc0NvbnRleHQiLCJ1c2VPdmVycmlkZXMiLCJvdmVycmlkZXMiLCJjb250ZXh0T3ZlcnJpZGVzIiwiT3ZlcnJpZGVzUHJvdmlkZXIiLCJjaGlsZHJlbiIsInByb3ZpZGVyT3ZlcnJpZGVzIiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/overrides.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/index.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/Comment/index.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Body: () => (/* binding */ CommentBody),\n/* harmony export */   Link: () => (/* binding */ CommentLink),\n/* harmony export */   Mention: () => (/* binding */ CommentMention)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/utils.mjs\");\n\n\n\n\nconst COMMENT_MENTION_NAME = \"CommentMention\";\nconst COMMENT_BODY_NAME = \"CommentBody\";\nconst COMMENT_LINK_NAME = \"CommentLink\";\nconst CommentMention = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"span\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst CommentLink = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"a\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        target: \"_blank\",\n        rel: \"noopener noreferrer nofollow\",\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst defaultBodyComponents = {\n    Mention: ({ userId })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentMention, null, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.MENTION_CHARACTER, userId);\n    },\n    Link: ({ href, children })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentLink, {\n            href\n        }, children);\n    }\n};\nconst CommentBody = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ body, components, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"div\";\n    const { Mention, Link } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultBodyComponents,\n            ...components\n        }), [\n        components\n    ]);\n    if (!body || !body?.content) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef\n    }, body.content.map((block, index)=>{\n        switch(block.type){\n            case \"paragraph\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n                    key: index\n                }, block.children.map((inline, index2)=>{\n                    if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.isCommentBodyMention)(inline)) {\n                        return inline.id ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mention, {\n                            userId: inline.id,\n                            key: index2\n                        }) : null;\n                    }\n                    if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.isCommentBodyLink)(inline)) {\n                        const href = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.toAbsoluteUrl)(inline.url) ?? inline.url;\n                        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Link, {\n                            href,\n                            key: index2\n                        }, inline.url);\n                    }\n                    let children = inline.text;\n                    if (inline.bold) {\n                        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", {\n                            key: index2\n                        }, children);\n                    }\n                    if (inline.italic) {\n                        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"em\", {\n                            key: index2\n                        }, children);\n                    }\n                    if (inline.strikethrough) {\n                        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"s\", {\n                            key: index2\n                        }, children);\n                    }\n                    if (inline.code) {\n                        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n                            key: index2\n                        }, children);\n                    }\n                    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n                        key: index2\n                    }, children);\n                }));\n            default:\n                return null;\n        }\n    }));\n});\nif (true) {\n    CommentBody.displayName = COMMENT_BODY_NAME;\n    CommentMention.displayName = COMMENT_MENTION_NAME;\n    CommentLink.displayName = COMMENT_LINK_NAME;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/utils.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/Comment/utils.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCommentBodyLink: () => (/* binding */ isCommentBodyLink),\n/* harmony export */   isCommentBodyMention: () => (/* binding */ isCommentBodyMention),\n/* harmony export */   isCommentBodyText: () => (/* binding */ isCommentBodyText),\n/* harmony export */   toAbsoluteUrl: () => (/* binding */ toAbsoluteUrl)\n/* harmony export */ });\nfunction isCommentBodyText(element) {\n    return \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n    return \"type\" in element && element.type === \"link\";\n}\nfunction toAbsoluteUrl(url) {\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n        return url;\n    } else if (url.startsWith(\"www.\")) {\n        return \"https://\" + url;\n    }\n    return;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL0NvbW1lbnQvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxrQkFBa0JDLE9BQU87SUFDaEMsT0FBTyxVQUFVQSxXQUFXLE9BQU9BLFFBQVFDLElBQUksS0FBSztBQUN0RDtBQUNBLFNBQVNDLHFCQUFxQkYsT0FBTztJQUNuQyxPQUFPLFVBQVVBLFdBQVdBLFFBQVFHLElBQUksS0FBSztBQUMvQztBQUNBLFNBQVNDLGtCQUFrQkosT0FBTztJQUNoQyxPQUFPLFVBQVVBLFdBQVdBLFFBQVFHLElBQUksS0FBSztBQUMvQztBQUNBLFNBQVNFLGNBQWNDLEdBQUc7SUFDeEIsSUFBSUEsSUFBSUMsVUFBVSxDQUFDLGNBQWNELElBQUlDLFVBQVUsQ0FBQyxhQUFhO1FBQzNELE9BQU9EO0lBQ1QsT0FBTyxJQUFJQSxJQUFJQyxVQUFVLENBQUMsU0FBUztRQUNqQyxPQUFPLGFBQWFEO0lBQ3RCO0lBQ0E7QUFDRjtBQUVxRixDQUNyRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3ByaW1pdGl2ZXMvQ29tbWVudC91dGlscy5tanM/NWFhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0NvbW1lbnRCb2R5VGV4dChlbGVtZW50KSB7XG4gIHJldHVybiBcInRleHRcIiBpbiBlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LnRleHQgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0NvbW1lbnRCb2R5TWVudGlvbihlbGVtZW50KSB7XG4gIHJldHVybiBcInR5cGVcIiBpbiBlbGVtZW50ICYmIGVsZW1lbnQudHlwZSA9PT0gXCJtZW50aW9uXCI7XG59XG5mdW5jdGlvbiBpc0NvbW1lbnRCb2R5TGluayhlbGVtZW50KSB7XG4gIHJldHVybiBcInR5cGVcIiBpbiBlbGVtZW50ICYmIGVsZW1lbnQudHlwZSA9PT0gXCJsaW5rXCI7XG59XG5mdW5jdGlvbiB0b0Fic29sdXRlVXJsKHVybCkge1xuICBpZiAodXJsLnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpIHx8IHVybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IGVsc2UgaWYgKHVybC5zdGFydHNXaXRoKFwid3d3LlwiKSkge1xuICAgIHJldHVybiBcImh0dHBzOi8vXCIgKyB1cmw7XG4gIH1cbiAgcmV0dXJuO1xufVxuXG5leHBvcnQgeyBpc0NvbW1lbnRCb2R5TGluaywgaXNDb21tZW50Qm9keU1lbnRpb24sIGlzQ29tbWVudEJvZHlUZXh0LCB0b0Fic29sdXRlVXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNDb21tZW50Qm9keVRleHQiLCJlbGVtZW50IiwidGV4dCIsImlzQ29tbWVudEJvZHlNZW50aW9uIiwidHlwZSIsImlzQ29tbWVudEJvZHlMaW5rIiwidG9BYnNvbHV0ZVVybCIsInVybCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/contexts.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/Composer/contexts.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComposerContext: () => (/* binding */ ComposerContext),\n/* harmony export */   ComposerEditorContext: () => (/* binding */ ComposerEditorContext),\n/* harmony export */   ComposerSuggestionsContext: () => (/* binding */ ComposerSuggestionsContext),\n/* harmony export */   useComposer: () => (/* binding */ useComposer),\n/* harmony export */   useComposerEditorContext: () => (/* binding */ useComposerEditorContext),\n/* harmony export */   useComposerSuggestionsContext: () => (/* binding */ useComposerSuggestionsContext)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nconst ComposerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst ComposerEditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst ComposerSuggestionsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useComposerEditorContext() {\n    const composerEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComposerEditorContext);\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(composerEditorContext, \"Composer.Form is missing from the React tree.\");\n}\nfunction useComposer() {\n    const composerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComposerContext);\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(composerContext, \"Composer.Form is missing from the React tree.\");\n}\nfunction useComposerSuggestionsContext(source = \"useComposerSuggestionsContext\") {\n    const composerSuggestionsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComposerSuggestionsContext);\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(composerSuggestionsContext, `${source} can\\u2019t be used outside of Composer.Editor.`);\n}\n //# sourceMappingURL=contexts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL0NvbXBvc2VyL2NvbnRleHRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzQztBQUNZO0FBRWxELE1BQU1HLGdDQUFrQkYsb0RBQWFBLENBQUM7QUFDdEMsTUFBTUcsc0NBQXdCSCxvREFBYUEsQ0FBQztBQUM1QyxNQUFNSSwyQ0FBNkJKLG9EQUFhQSxDQUFDO0FBQ2pELFNBQVNLO0lBQ1AsTUFBTUMsd0JBQXdCTCxpREFBVUEsQ0FBQ0U7SUFDekMsT0FBT0osb0RBQUVBLENBQ1BPLHVCQUNBO0FBRUo7QUFDQSxTQUFTQztJQUNQLE1BQU1DLGtCQUFrQlAsaURBQVVBLENBQUNDO0lBQ25DLE9BQU9ILG9EQUFFQSxDQUFDUyxpQkFBaUI7QUFDN0I7QUFDQSxTQUFTQyw4QkFBOEJDLFNBQVMsK0JBQStCO0lBQzdFLE1BQU1DLDZCQUE2QlYsaURBQVVBLENBQUNHO0lBQzlDLE9BQU9MLG9EQUFFQSxDQUNQWSw0QkFDQSxDQUFDLEVBQUVELE9BQU8sK0NBQStDLENBQUM7QUFFOUQ7QUFFb0osQ0FDcEoscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL0NvbXBvc2VyL2NvbnRleHRzLm1qcz82ODk4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5uIH0gZnJvbSAnQGxpdmVibG9ja3MvY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBDb21wb3NlckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuY29uc3QgQ29tcG9zZXJFZGl0b3JDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IENvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcbmZ1bmN0aW9uIHVzZUNvbXBvc2VyRWRpdG9yQ29udGV4dCgpIHtcbiAgY29uc3QgY29tcG9zZXJFZGl0b3JDb250ZXh0ID0gdXNlQ29udGV4dChDb21wb3NlckVkaXRvckNvbnRleHQpO1xuICByZXR1cm4gbm4oXG4gICAgY29tcG9zZXJFZGl0b3JDb250ZXh0LFxuICAgIFwiQ29tcG9zZXIuRm9ybSBpcyBtaXNzaW5nIGZyb20gdGhlIFJlYWN0IHRyZWUuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIHVzZUNvbXBvc2VyKCkge1xuICBjb25zdCBjb21wb3NlckNvbnRleHQgPSB1c2VDb250ZXh0KENvbXBvc2VyQ29udGV4dCk7XG4gIHJldHVybiBubihjb21wb3NlckNvbnRleHQsIFwiQ29tcG9zZXIuRm9ybSBpcyBtaXNzaW5nIGZyb20gdGhlIFJlYWN0IHRyZWUuXCIpO1xufVxuZnVuY3Rpb24gdXNlQ29tcG9zZXJTdWdnZXN0aW9uc0NvbnRleHQoc291cmNlID0gXCJ1c2VDb21wb3NlclN1Z2dlc3Rpb25zQ29udGV4dFwiKSB7XG4gIGNvbnN0IGNvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0ID0gdXNlQ29udGV4dChDb21wb3NlclN1Z2dlc3Rpb25zQ29udGV4dCk7XG4gIHJldHVybiBubihcbiAgICBjb21wb3NlclN1Z2dlc3Rpb25zQ29udGV4dCxcbiAgICBgJHtzb3VyY2V9IGNhblxcdTIwMTl0IGJlIHVzZWQgb3V0c2lkZSBvZiBDb21wb3Nlci5FZGl0b3IuYFxuICApO1xufVxuXG5leHBvcnQgeyBDb21wb3NlckNvbnRleHQsIENvbXBvc2VyRWRpdG9yQ29udGV4dCwgQ29tcG9zZXJTdWdnZXN0aW9uc0NvbnRleHQsIHVzZUNvbXBvc2VyLCB1c2VDb21wb3NlckVkaXRvckNvbnRleHQsIHVzZUNvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0cy5tanMubWFwXG4iXSwibmFtZXMiOlsibm4iLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsIkNvbXBvc2VyQ29udGV4dCIsIkNvbXBvc2VyRWRpdG9yQ29udGV4dCIsIkNvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0IiwidXNlQ29tcG9zZXJFZGl0b3JDb250ZXh0IiwiY29tcG9zZXJFZGl0b3JDb250ZXh0IiwidXNlQ29tcG9zZXIiLCJjb21wb3NlckNvbnRleHQiLCJ1c2VDb21wb3NlclN1Z2dlc3Rpb25zQ29udGV4dCIsInNvdXJjZSIsImNvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/contexts.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/index.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/Composer/index.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Editor: () => (/* binding */ ComposerEditor),\n/* harmony export */   Form: () => (/* binding */ ComposerForm),\n/* harmony export */   Link: () => (/* binding */ ComposerLink),\n/* harmony export */   Mention: () => (/* binding */ ComposerMention),\n/* harmony export */   Submit: () => (/* binding */ ComposerSubmit),\n/* harmony export */   Suggestions: () => (/* binding */ ComposerSuggestions),\n/* harmony export */   SuggestionsList: () => (/* binding */ ComposerSuggestionsList),\n/* harmony export */   SuggestionsListItem: () => (/* binding */ ComposerSuggestionsListItem)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_history__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! slate-history */ \"(ssr)/./node_modules/slate-history/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\");\n/* harmony import */ var _slate_plugins_auto_formatting_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../slate/plugins/auto-formatting.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-formatting.mjs\");\n/* harmony import */ var _slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../slate/plugins/auto-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-links.mjs\");\n/* harmony import */ var _slate_plugins_empty_clear_formatting_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../slate/plugins/empty-clear-formatting.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/empty-clear-formatting.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _slate_utils_get_dom_range_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../slate/utils/get-dom-range.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-dom-range.mjs\");\n/* harmony import */ var _slate_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../slate/utils/is-empty.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty.mjs\");\n/* harmony import */ var _slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../slate/utils/marks.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/marks.mjs\");\n/* harmony import */ var _utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../utils/is-key.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-key.mjs\");\n/* harmony import */ var _utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utils/Persist.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/Persist.mjs\");\n/* harmony import */ var _utils_Portal_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../utils/Portal.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/Portal.mjs\");\n/* harmony import */ var _utils_request_submit_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../utils/request-submit.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/request-submit.mjs\");\n/* harmony import */ var _utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../utils/use-id.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-id.mjs\");\n/* harmony import */ var _utils_use_index_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../utils/use-index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-index.mjs\");\n/* harmony import */ var _utils_use_initial_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../utils/use-initial.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-initial.mjs\");\n/* harmony import */ var _utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utils/use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-layout-effect.mjs\");\n/* harmony import */ var _utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utils/use-refs.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-refs.mjs\");\n/* harmony import */ var _Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Comment/utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/utils.mjs\");\n/* harmony import */ var _contexts_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./contexts.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/contexts.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/utils.mjs\");\n/* __next_internal_client_entry_do_not_use__ Editor,Form,Link,Mention,Submit,Suggestions,SuggestionsList,SuggestionsListItem auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MENTION_SUGGESTIONS_POSITION = \"top\";\nconst COMPOSER_MENTION_NAME = \"ComposerMention\";\nconst COMPOSER_LINK_NAME = \"ComposerLink\";\nconst COMPOSER_SUGGESTIONS_NAME = \"ComposerSuggestions\";\nconst COMPOSER_SUGGESTIONS_LIST_NAME = \"ComposerSuggestionsList\";\nconst COMPOSER_SUGGESTIONS_LIST_ITEM_NAME = \"ComposerSuggestionsListItem\";\nconst COMPOSER_SUBMIT_NAME = \"ComposerSubmit\";\nconst COMPOSER_EDITOR_NAME = \"ComposerEditor\";\nconst COMPOSER_FORM_NAME = \"ComposerForm\";\nconst emptyCommentBody = {\n    version: 1,\n    content: [\n        {\n            type: \"paragraph\",\n            children: [\n                {\n                    text: \"\"\n                }\n            ]\n        }\n    ]\n};\nfunction createComposerEditor() {\n    return (0,_slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_1__.withAutoLinks)((0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.withMentions)((0,_slate_plugins_empty_clear_formatting_mjs__WEBPACK_IMPORTED_MODULE_3__.withEmptyClearFormatting)((0,_slate_plugins_auto_formatting_mjs__WEBPACK_IMPORTED_MODULE_4__.withAutoFormatting)((0,slate_history__WEBPACK_IMPORTED_MODULE_5__.withHistory)((0,slate_react__WEBPACK_IMPORTED_MODULE_6__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_7__.createEditor)()))))));\n}\nfunction ComposerEditorMentionWrapper({ Mention, attributes, children, element }) {\n    const isSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_6__.useSelected)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes\n    }, element.id ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mention, {\n        userId: element.id,\n        isSelected\n    }) : null, children);\n}\nfunction ComposerEditorLinkWrapper({ Link, attributes, element, children }) {\n    const href = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_8__.toAbsoluteUrl)(element.url) ?? element.url, [\n        element.url\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Link, {\n        href\n    }, children));\n}\nfunction ComposerEditorMentionSuggestionsWrapper({ id, itemId, userIds, selectedUserId, setSelectedUserId, mentionDraft, onItemSelect, position = MENTION_SUGGESTIONS_POSITION, dir, MentionSuggestions }) {\n    const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_6__.useSlateStatic)();\n    const { isFocused } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposer)();\n    const [content, setContent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contentZIndex, setContentZIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(setContent, [\n        setContent\n    ]);\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_10__.useCommentsConfig)();\n    const floatingOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const detectOverflowOptions = {\n            padding: _constants_mjs__WEBPACK_IMPORTED_MODULE_11__.FLOATING_ELEMENT_COLLISION_PADDING\n        };\n        return {\n            strategy: \"fixed\",\n            placement: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_12__.getPlacementFromPosition)(position, dir),\n            middleware: [\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__.flip)({\n                    ...detectOverflowOptions,\n                    crossAxis: false\n                }),\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__.hide)(detectOverflowOptions),\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__.shift)({\n                    ...detectOverflowOptions,\n                    limiter: (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__.limitShift)()\n                }),\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__.size)({\n                    ...detectOverflowOptions,\n                    apply ({ availableWidth, availableHeight, elements }) {\n                        elements.floating.style.setProperty(\"--lb-composer-suggestions-available-width\", `${availableWidth}px`);\n                        elements.floating.style.setProperty(\"--lb-composer-suggestions-available-height\", `${availableHeight}px`);\n                    }\n                })\n            ],\n            whileElementsMounted: _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_13__.autoUpdate\n        };\n    }, [\n        position,\n        dir\n    ]);\n    const { refs: { setReference, setFloating }, strategy, isPositioned, placement, x, y } = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_14__.useFloating)(floatingOptions);\n    (0,_utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_15__.useLayoutEffect)(()=>{\n        if (content) {\n            setContentZIndex(window.getComputedStyle(content).zIndex);\n        }\n    }, [\n        content\n    ]);\n    (0,_utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_15__.useLayoutEffect)(()=>{\n        if (!mentionDraft) {\n            return;\n        }\n        const domRange = (0,_slate_utils_get_dom_range_mjs__WEBPACK_IMPORTED_MODULE_16__.getDOMRange)(editor, mentionDraft.range);\n        if (domRange) {\n            setReference({\n                getBoundingClientRect: ()=>domRange.getBoundingClientRect(),\n                getClientRects: ()=>domRange.getClientRects()\n            });\n        }\n    }, [\n        setReference,\n        editor,\n        mentionDraft\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_17__.Persist, null, mentionDraft?.range && isFocused && userIds ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.ComposerSuggestionsContext.Provider, {\n        value: {\n            id,\n            itemId,\n            selectedValue: selectedUserId,\n            setSelectedValue: setSelectedUserId,\n            onItemSelect,\n            placement,\n            dir,\n            ref: contentRef\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils_Portal_mjs__WEBPACK_IMPORTED_MODULE_18__.Portal, {\n        ref: setFloating,\n        container: portalContainer,\n        style: {\n            position: strategy,\n            top: 0,\n            left: 0,\n            transform: isPositioned ? `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)` : \"translate3d(0, -200%, 0)\",\n            minWidth: \"max-content\",\n            zIndex: contentZIndex\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MentionSuggestions, {\n        userIds,\n        selectedUserId\n    }))) : null);\n}\nfunction ComposerEditorElement({ Mention, Link, ...props }) {\n    const { attributes, children, element } = props;\n    switch(element.type){\n        case \"mention\":\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorMentionWrapper, {\n                Mention,\n                ...props\n            });\n        case \"auto-link\":\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorLinkWrapper, {\n                Link,\n                ...props\n            });\n        case \"paragraph\":\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n                ...attributes,\n                style: {\n                    position: \"relative\"\n                }\n            }, children);\n        default:\n            return null;\n    }\n}\nfunction ComposerEditorLeaf({ attributes, children, leaf }) {\n    if (leaf.bold) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, children);\n    }\n    if (leaf.italic) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"em\", null, children);\n    }\n    if (leaf.strikethrough) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"s\", null, children);\n    }\n    if (leaf.code) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, children);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes\n    }, children);\n}\nfunction ComposerEditorPlaceholder({ attributes, children }) {\n    const { opacity: _opacity, ...style } = attributes.style;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes,\n        style,\n        \"data-placeholder\": \"\"\n    }, children);\n}\nconst ComposerMention = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"span\";\n    const isSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_6__.useSelected)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        \"data-selected\": isSelected || void 0,\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst ComposerLink = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"a\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        target: \"_blank\",\n        rel: \"noopener noreferrer nofollow\",\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst ComposerSuggestions = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, style, asChild, ...props }, forwardedRef)=>{\n    const [isPresent] = (0,_utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_17__.usePersist)();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { ref: contentRef, placement, dir } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposerSuggestionsContext)(COMPOSER_SUGGESTIONS_NAME);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_20__.useRefs)(forwardedRef, contentRef, ref);\n    const [side, align] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_12__.getSideAndAlignFromPlacement)(placement), [\n        placement\n    ]);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"div\";\n    (0,_utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_17__.useAnimationPersist)(ref);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        dir,\n        ...props,\n        \"data-state\": isPresent ? \"open\" : \"closed\",\n        \"data-side\": side,\n        \"data-align\": align,\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"var(--lb-composer-suggestions-available-height)\",\n            overflowY: \"auto\",\n            ...style\n        },\n        ref: mergedRefs\n    }, children);\n});\nconst ComposerSuggestionsList = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const { id } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposerSuggestionsContext)(COMPOSER_SUGGESTIONS_LIST_NAME);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"ul\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        role: \"listbox\",\n        id,\n        \"aria-label\": \"Suggestions list\",\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst ComposerSuggestionsListItem = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ value, children, onPointerMove, onPointerDown, asChild, ...props }, forwardedRef)=>{\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_20__.useRefs)(forwardedRef, ref);\n    const { selectedValue, setSelectedValue, itemId, onItemSelect } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposerSuggestionsContext)(COMPOSER_SUGGESTIONS_LIST_ITEM_NAME);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"li\";\n    const isSelected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectedValue === value, [\n        selectedValue,\n        value\n    ]);\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>itemId(value), [\n        itemId,\n        value\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (ref?.current && isSelected) {\n            ref.current.scrollIntoView({\n                block: \"nearest\"\n            });\n        }\n    }, [\n        isSelected\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onPointerMove?.(event);\n        if (!event.isDefaultPrevented()) {\n            setSelectedValue(value);\n        }\n    }, [\n        onPointerMove,\n        setSelectedValue,\n        value\n    ]);\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onPointerDown?.(event);\n        if (!event.isDefaultPrevented()) {\n            const target = event.target;\n            if (target.hasPointerCapture(event.pointerId)) {\n                target.releasePointerCapture(event.pointerId);\n            }\n            if (event.button === 0 && event.ctrlKey === false) {\n                onItemSelect(value);\n                event.preventDefault();\n            }\n        }\n    }, [\n        onItemSelect,\n        onPointerDown,\n        value\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        role: \"option\",\n        id,\n        \"data-selected\": isSelected || void 0,\n        \"aria-selected\": isSelected || void 0,\n        onPointerMove: handlePointerMove,\n        onPointerDown: handlePointerDown,\n        ...props,\n        ref: mergedRefs\n    }, children);\n});\nconst defaultEditorComponents = {\n    Link: ({ href, children })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerLink, {\n            href\n        }, children);\n    },\n    Mention: ({ userId })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerMention, null, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.MENTION_CHARACTER, userId);\n    },\n    MentionSuggestions: ({ userIds })=>{\n        return userIds.length > 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerSuggestions, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerSuggestionsList, null, userIds.map((userId)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerSuggestionsListItem, {\n                key: userId,\n                value: userId\n            }, userId)))) : null;\n    }\n};\nconst ComposerEditor = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ defaultValue, onKeyDown, onFocus, onBlur, disabled, autoFocus, components, dir, ...props }, forwardedRef)=>{\n    const { useMentionSuggestions, useSelf } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_21__.useRoomContextBundle)();\n    const self = useSelf();\n    const isDisabled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>disabled || !self?.canComment, [\n        disabled,\n        self?.canComment\n    ]);\n    const { editor, validate, setFocused } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposerEditorContext)();\n    const { submit, focus, select, isEmpty, isFocused } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposer)();\n    const initialBody = (0,_utils_use_initial_mjs__WEBPACK_IMPORTED_MODULE_22__.useInitial)(defaultValue ?? emptyCommentBody);\n    const initialEditorValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_12__.commentBodyToComposerBody)(initialBody);\n    }, [\n        initialBody\n    ]);\n    const { Link, Mention, MentionSuggestions } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultEditorComponents,\n            ...components\n        }), [\n        components\n    ]);\n    const [mentionDraft, setMentionDraft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const mentionSuggestions = useMentionSuggestions(mentionDraft?.text);\n    const [selectedMentionSuggestionIndex, setPreviousSelectedMentionSuggestionIndex, setNextSelectedMentionSuggestionIndex, setSelectedMentionSuggestionIndex] = (0,_utils_use_index_mjs__WEBPACK_IMPORTED_MODULE_23__.useIndex)(0, mentionSuggestions?.length ?? 0);\n    const id = (0,_utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_24__.useId)();\n    const suggestionsListId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>`liveblocks-suggestions-list-${id}`, [\n        id\n    ]);\n    const suggestionsListItemId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((userId)=>userId ? `liveblocks-suggestions-list-item-${id}-${userId}` : void 0, [\n        id\n    ]);\n    const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((props2)=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorElement, {\n            Mention,\n            Link,\n            ...props2\n        });\n    }, [\n        Link,\n        Mention\n    ]);\n    const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        validate(value);\n        setMentionDraft((0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.getMentionDraftAtSelection)(editor));\n    }, [\n        editor,\n        validate\n    ]);\n    const createMention = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((userId)=>{\n        if (!mentionDraft || !userId) {\n            return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, mentionDraft.range);\n        (0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.insertMention)(editor, userId);\n        setMentionDraft(void 0);\n        setSelectedMentionSuggestionIndex(0);\n    }, [\n        editor,\n        mentionDraft,\n        setSelectedMentionSuggestionIndex\n    ]);\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onKeyDown?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"ArrowLeft\")) {\n            (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__.leaveMarkEdge)(editor, \"start\");\n        }\n        if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"ArrowRight\")) {\n            (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__.leaveMarkEdge)(editor, \"end\");\n        }\n        if (mentionDraft && mentionSuggestions?.length) {\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"ArrowDown\")) {\n                event.preventDefault();\n                setNextSelectedMentionSuggestionIndex();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"ArrowUp\")) {\n                event.preventDefault();\n                setPreviousSelectedMentionSuggestionIndex();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"Enter\") || (0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"Tab\")) {\n                event.preventDefault();\n                const userId = mentionSuggestions?.[selectedMentionSuggestionIndex];\n                createMention(userId);\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"Escape\")) {\n                event.preventDefault();\n                setMentionDraft(void 0);\n                setSelectedMentionSuggestionIndex(0);\n            }\n        } else {\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"Escape\")) {\n                event.preventDefault();\n                slate_react__WEBPACK_IMPORTED_MODULE_6__.ReactEditor.blur(editor);\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"Enter\", {\n                shift: false\n            }) && !isEmpty) {\n                event.preventDefault();\n                submit();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"Enter\", {\n                shift: true\n            })) {\n                event.preventDefault();\n                editor.insertBreak();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"b\", {\n                mod: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__.toggleMark)(editor, \"bold\");\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"i\", {\n                mod: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__.toggleMark)(editor, \"italic\");\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"s\", {\n                mod: true,\n                shift: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__.toggleMark)(editor, \"strikethrough\");\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_25__.isKey)(event, \"e\", {\n                mod: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_26__.toggleMark)(editor, \"code\");\n            }\n        }\n    }, [\n        createMention,\n        editor,\n        isEmpty,\n        mentionDraft,\n        mentionSuggestions,\n        selectedMentionSuggestionIndex,\n        onKeyDown,\n        setNextSelectedMentionSuggestionIndex,\n        setPreviousSelectedMentionSuggestionIndex,\n        setSelectedMentionSuggestionIndex,\n        submit\n    ]);\n    const handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onFocus?.(event);\n        if (!event.isDefaultPrevented()) {\n            setFocused(true);\n        }\n    }, [\n        onFocus,\n        setFocused\n    ]);\n    const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onBlur?.(event);\n        if (!event.isDefaultPrevented()) {\n            setFocused(false);\n        }\n    }, [\n        onBlur,\n        setFocused\n    ]);\n    const selectedMentionSuggestionUserId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>mentionSuggestions?.[selectedMentionSuggestionIndex], [\n        selectedMentionSuggestionIndex,\n        mentionSuggestions\n    ]);\n    const setSelectedMentionSuggestionUserId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((userId)=>{\n        const index = mentionSuggestions?.indexOf(userId);\n        if (index !== void 0 && index >= 0) {\n            setSelectedMentionSuggestionIndex(index);\n        }\n    }, [\n        setSelectedMentionSuggestionIndex,\n        mentionSuggestions\n    ]);\n    const propsWhileSuggesting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>mentionDraft ? {\n            role: \"combobox\",\n            \"aria-autocomplete\": \"list\",\n            \"aria-expanded\": true,\n            \"aria-controls\": suggestionsListId,\n            \"aria-activedescendant\": suggestionsListItemId(selectedMentionSuggestionUserId)\n        } : {}, [\n        mentionDraft,\n        suggestionsListId,\n        suggestionsListItemId,\n        selectedMentionSuggestionUserId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(forwardedRef, ()=>{\n        return slate_react__WEBPACK_IMPORTED_MODULE_6__.ReactEditor.toDOMNode(editor, editor);\n    }, [\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoFocus) {\n            focus();\n        }\n    }, [\n        autoFocus,\n        editor,\n        focus\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isFocused && editor.selection === null) {\n            select();\n        }\n    }, [\n        editor,\n        select,\n        isFocused\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(slate_react__WEBPACK_IMPORTED_MODULE_6__.Slate, {\n        editor,\n        initialValue: initialEditorValue,\n        onChange: handleChange\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(slate_react__WEBPACK_IMPORTED_MODULE_6__.Editable, {\n        dir,\n        enterKeyHint: mentionDraft ? \"enter\" : \"send\",\n        autoCapitalize: \"sentences\",\n        \"aria-label\": \"Composer editor\",\n        \"data-focused\": isFocused || void 0,\n        \"data-disabled\": isDisabled || void 0,\n        ...propsWhileSuggesting,\n        ...props,\n        readOnly: isDisabled,\n        disabled: isDisabled,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        renderElement,\n        renderLeaf: ComposerEditorLeaf,\n        renderPlaceholder: ComposerEditorPlaceholder\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorMentionSuggestionsWrapper, {\n        dir,\n        mentionDraft,\n        selectedUserId: selectedMentionSuggestionUserId,\n        setSelectedUserId: setSelectedMentionSuggestionUserId,\n        userIds: mentionSuggestions,\n        id: suggestionsListId,\n        itemId: suggestionsListItemId,\n        onItemSelect: createMention,\n        MentionSuggestions\n    }));\n});\nconst ComposerForm = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, onSubmit, onComposerSubmit, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"form\";\n    const editor = (0,_utils_use_initial_mjs__WEBPACK_IMPORTED_MODULE_22__.useInitial)(createComposerEditor);\n    const [isEmpty$1, setEmpty] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isFocused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_20__.useRefs)(forwardedRef, ref);\n    const validate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        setEmpty((0,_slate_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_27__.isEmpty)(editor, value));\n    }, [\n        editor\n    ]);\n    const submit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (ref.current) {\n            (0,_utils_request_submit_mjs__WEBPACK_IMPORTED_MODULE_28__.requestSubmit)(ref.current);\n        }\n    }, []);\n    const clear = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor, {\n            at: {\n                anchor: slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []),\n                focus: slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, [])\n            }\n        });\n    }, [\n        editor\n    ]);\n    const select = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, {\n            anchor: slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, []),\n            focus: slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, [])\n        });\n    }, [\n        editor\n    ]);\n    const focus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((resetSelection = true)=>{\n        if (!slate_react__WEBPACK_IMPORTED_MODULE_6__.ReactEditor.isFocused(editor)) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, resetSelection || !editor.selection ? slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, []) : editor.selection);\n            slate_react__WEBPACK_IMPORTED_MODULE_6__.ReactEditor.focus(editor);\n        }\n    }, [\n        editor\n    ]);\n    const blur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        slate_react__WEBPACK_IMPORTED_MODULE_6__.ReactEditor.blur(editor);\n    }, [\n        editor\n    ]);\n    const onSubmitEnd = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        clear();\n        blur();\n    }, [\n        blur,\n        clear\n    ]);\n    const createMention = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        focus();\n        (0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.insertMentionCharacter)(editor);\n    }, [\n        editor,\n        focus\n    ]);\n    const insertText$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((text)=>{\n        focus(false);\n        (0,slate__WEBPACK_IMPORTED_MODULE_7__.insertText)(editor, text);\n    }, [\n        editor,\n        focus\n    ]);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onSubmit?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        const body = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_12__.composerBodyToCommentBody)(editor.children);\n        const comment = {\n            body\n        };\n        const promise = onComposerSubmit?.(comment, event);\n        event.preventDefault();\n        if (promise) {\n            promise.then(onSubmitEnd);\n        } else {\n            onSubmitEnd();\n        }\n    }, [\n        editor.children,\n        onComposerSubmit,\n        onSubmit,\n        onSubmitEnd\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.ComposerEditorContext.Provider, {\n        value: {\n            editor,\n            validate,\n            setFocused\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.ComposerContext.Provider, {\n        value: {\n            isFocused,\n            isEmpty: isEmpty$1,\n            submit,\n            clear,\n            select,\n            focus,\n            blur,\n            createMention,\n            insertText: insertText$1\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        onSubmit: handleSubmit,\n        ref: mergedRefs\n    }, children)));\n});\nconst ComposerSubmit = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, disabled, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_19__.Slot : \"button\";\n    const { useSelf } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_21__.useRoomContextBundle)();\n    const { isEmpty } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_9__.useComposer)();\n    const self = useSelf();\n    const isDisabled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>disabled || isEmpty || !self?.canComment, [\n        disabled,\n        isEmpty,\n        self?.canComment\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        type: \"submit\",\n        ...props,\n        ref: forwardedRef,\n        disabled: isDisabled\n    }, children);\n});\nif (true) {\n    ComposerEditor.displayName = COMPOSER_EDITOR_NAME;\n    ComposerForm.displayName = COMPOSER_FORM_NAME;\n    ComposerMention.displayName = COMPOSER_MENTION_NAME;\n    ComposerLink.displayName = COMPOSER_LINK_NAME;\n    ComposerSubmit.displayName = COMPOSER_SUBMIT_NAME;\n    ComposerSuggestions.displayName = COMPOSER_SUGGESTIONS_NAME;\n    ComposerSuggestionsList.displayName = COMPOSER_SUGGESTIONS_LIST_NAME;\n    ComposerSuggestionsListItem.displayName = COMPOSER_SUGGESTIONS_LIST_ITEM_NAME;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/utils.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/Composer/utils.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commentBodyLinkToComposerBodyLink: () => (/* binding */ commentBodyLinkToComposerBodyLink),\n/* harmony export */   commentBodyMentionToComposerBodyMention: () => (/* binding */ commentBodyMentionToComposerBodyMention),\n/* harmony export */   commentBodyToComposerBody: () => (/* binding */ commentBodyToComposerBody),\n/* harmony export */   composerBodyAutoLinkToCommentBodyLink: () => (/* binding */ composerBodyAutoLinkToCommentBodyLink),\n/* harmony export */   composerBodyMentionToCommentBodyMention: () => (/* binding */ composerBodyMentionToCommentBodyMention),\n/* harmony export */   composerBodyToCommentBody: () => (/* binding */ composerBodyToCommentBody),\n/* harmony export */   getPlacementFromPosition: () => (/* binding */ getPlacementFromPosition),\n/* harmony export */   getSideAndAlignFromPlacement: () => (/* binding */ getSideAndAlignFromPlacement)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../slate/plugins/auto-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-links.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_exists_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/exists.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/exists.mjs\");\n/* harmony import */ var _Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Comment/utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Comment/utils.mjs\");\n\n\n\n\n\nfunction composerBodyMentionToCommentBodyMention(mention) {\n    return {\n        type: \"mention\",\n        id: mention.id\n    };\n}\nfunction composerBodyAutoLinkToCommentBodyLink(link) {\n    return {\n        type: \"link\",\n        url: link.url\n    };\n}\nfunction commentBodyMentionToComposerBodyMention(mention) {\n    return {\n        type: \"mention\",\n        id: mention.id,\n        children: [\n            {\n                text: \"\"\n            }\n        ]\n    };\n}\nfunction commentBodyLinkToComposerBodyLink(link) {\n    return {\n        type: \"auto-link\",\n        url: link.url,\n        children: [\n            {\n                text: link.url\n            }\n        ]\n    };\n}\nfunction composerBodyToCommentBody(body) {\n    return {\n        version: 1,\n        content: body.map((block)=>{\n            const children = block.children.map((inline)=>{\n                if ((0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_0__.isComposerBodyMention)(inline)) {\n                    return composerBodyMentionToCommentBodyMention(inline);\n                }\n                if ((0,_slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_1__.isComposerBodyAutoLink)(inline)) {\n                    return composerBodyAutoLinkToCommentBodyLink(inline);\n                }\n                if (slate__WEBPACK_IMPORTED_MODULE_2__.Text.isText(inline)) {\n                    return inline;\n                }\n                return null;\n            }).filter(_utils_exists_mjs__WEBPACK_IMPORTED_MODULE_3__.exists);\n            return {\n                ...block,\n                children\n            };\n        })\n    };\n}\nconst emptyComposerBody = [];\nfunction commentBodyToComposerBody(body) {\n    if (!body || !body?.content) {\n        return emptyComposerBody;\n    }\n    return body.content.map((block)=>{\n        const children = block.children.map((inline)=>{\n            if ((0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.isCommentBodyMention)(inline)) {\n                return commentBodyMentionToComposerBodyMention(inline);\n            }\n            if ((0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.isCommentBodyLink)(inline)) {\n                return commentBodyLinkToComposerBodyLink(inline);\n            }\n            if ((0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.isCommentBodyText)(inline)) {\n                return inline;\n            }\n            return null;\n        }).filter(_utils_exists_mjs__WEBPACK_IMPORTED_MODULE_3__.exists);\n        return {\n            ...block,\n            children\n        };\n    });\n}\nfunction getPlacementFromPosition(position, direction = \"ltr\") {\n    return `${position}-${direction === \"rtl\" ? \"end\" : \"start\"}`;\n}\nfunction getSideAndAlignFromPlacement(placement) {\n    const [side, align = \"center\"] = placement.split(\"-\");\n    return [\n        side,\n        align\n    ];\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL0NvbXBvc2VyL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQytDO0FBQ0g7QUFDekI7QUFDa0Q7QUFFbEcsU0FBU08sd0NBQXdDQyxPQUFPO0lBQ3RELE9BQU87UUFDTEMsTUFBTTtRQUNOQyxJQUFJRixRQUFRRSxFQUFFO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTQyxzQ0FBc0NDLElBQUk7SUFDakQsT0FBTztRQUNMSCxNQUFNO1FBQ05JLEtBQUtELEtBQUtDLEdBQUc7SUFDZjtBQUNGO0FBQ0EsU0FBU0Msd0NBQXdDTixPQUFPO0lBQ3RELE9BQU87UUFDTEMsTUFBTTtRQUNOQyxJQUFJRixRQUFRRSxFQUFFO1FBQ2RLLFVBQVU7WUFBQztnQkFBRUMsTUFBTTtZQUFHO1NBQUU7SUFDMUI7QUFDRjtBQUNBLFNBQVNDLGtDQUFrQ0wsSUFBSTtJQUM3QyxPQUFPO1FBQ0xILE1BQU07UUFDTkksS0FBS0QsS0FBS0MsR0FBRztRQUNiRSxVQUFVO1lBQ1I7Z0JBQ0VDLE1BQU1KLEtBQUtDLEdBQUc7WUFDaEI7U0FDRDtJQUNIO0FBQ0Y7QUFDQSxTQUFTSywwQkFBMEJDLElBQUk7SUFDckMsT0FBTztRQUNMQyxTQUFTO1FBQ1RDLFNBQVNGLEtBQUtHLEdBQUcsQ0FBQyxDQUFDQztZQUNqQixNQUFNUixXQUFXUSxNQUFNUixRQUFRLENBQUNPLEdBQUcsQ0FBQyxDQUFDRTtnQkFDbkMsSUFBSXRCLGtGQUFxQkEsQ0FBQ3NCLFNBQVM7b0JBQ2pDLE9BQU9qQix3Q0FBd0NpQjtnQkFDakQ7Z0JBQ0EsSUFBSXZCLHFGQUFzQkEsQ0FBQ3VCLFNBQVM7b0JBQ2xDLE9BQU9iLHNDQUFzQ2E7Z0JBQy9DO2dCQUNBLElBQUl4Qix1Q0FBSUEsQ0FBQ3lCLE1BQU0sQ0FBQ0QsU0FBUztvQkFDdkIsT0FBT0E7Z0JBQ1Q7Z0JBQ0EsT0FBTztZQUNULEdBQUdFLE1BQU0sQ0FBQ3ZCLHFEQUFNQTtZQUNoQixPQUFPO2dCQUNMLEdBQUdvQixLQUFLO2dCQUNSUjtZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsTUFBTVksb0JBQW9CLEVBQUU7QUFDNUIsU0FBU0MsMEJBQTBCVCxJQUFJO0lBQ3JDLElBQUksQ0FBQ0EsUUFBUSxDQUFDQSxNQUFNRSxTQUFTO1FBQzNCLE9BQU9NO0lBQ1Q7SUFDQSxPQUFPUixLQUFLRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDQztRQUN2QixNQUFNUixXQUFXUSxNQUFNUixRQUFRLENBQUNPLEdBQUcsQ0FBQyxDQUFDRTtZQUNuQyxJQUFJcEIsd0VBQW9CQSxDQUFDb0IsU0FBUztnQkFDaEMsT0FBT1Ysd0NBQXdDVTtZQUNqRDtZQUNBLElBQUluQixxRUFBaUJBLENBQUNtQixTQUFTO2dCQUM3QixPQUFPUCxrQ0FBa0NPO1lBQzNDO1lBQ0EsSUFBSWxCLHFFQUFpQkEsQ0FBQ2tCLFNBQVM7Z0JBQzdCLE9BQU9BO1lBQ1Q7WUFDQSxPQUFPO1FBQ1QsR0FBR0UsTUFBTSxDQUFDdkIscURBQU1BO1FBQ2hCLE9BQU87WUFDTCxHQUFHb0IsS0FBSztZQUNSUjtRQUNGO0lBQ0Y7QUFDRjtBQUNBLFNBQVNjLHlCQUF5QkMsUUFBUSxFQUFFQyxZQUFZLEtBQUs7SUFDM0QsT0FBTyxDQUFDLEVBQUVELFNBQVMsQ0FBQyxFQUFFQyxjQUFjLFFBQVEsUUFBUSxRQUFRLENBQUM7QUFDL0Q7QUFDQSxTQUFTQyw2QkFBNkJDLFNBQVM7SUFDN0MsTUFBTSxDQUFDQyxNQUFNQyxRQUFRLFFBQVEsQ0FBQyxHQUFHRixVQUFVRyxLQUFLLENBQUM7SUFDakQsT0FBTztRQUFDRjtRQUFNQztLQUFNO0FBQ3RCO0FBRW9SLENBQ3BSLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvcHJpbWl0aXZlcy9Db21wb3Nlci91dGlscy5tanM/MjA3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0IH0gZnJvbSAnc2xhdGUnO1xuaW1wb3J0IHsgaXNDb21wb3NlckJvZHlBdXRvTGluayB9IGZyb20gJy4uLy4uL3NsYXRlL3BsdWdpbnMvYXV0by1saW5rcy5tanMnO1xuaW1wb3J0IHsgaXNDb21wb3NlckJvZHlNZW50aW9uIH0gZnJvbSAnLi4vLi4vc2xhdGUvcGx1Z2lucy9tZW50aW9ucy5tanMnO1xuaW1wb3J0IHsgZXhpc3RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXhpc3RzLm1qcyc7XG5pbXBvcnQgeyBpc0NvbW1lbnRCb2R5TWVudGlvbiwgaXNDb21tZW50Qm9keUxpbmssIGlzQ29tbWVudEJvZHlUZXh0IH0gZnJvbSAnLi4vQ29tbWVudC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjb21wb3NlckJvZHlNZW50aW9uVG9Db21tZW50Qm9keU1lbnRpb24obWVudGlvbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwibWVudGlvblwiLFxuICAgIGlkOiBtZW50aW9uLmlkXG4gIH07XG59XG5mdW5jdGlvbiBjb21wb3NlckJvZHlBdXRvTGlua1RvQ29tbWVudEJvZHlMaW5rKGxpbmspIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImxpbmtcIixcbiAgICB1cmw6IGxpbmsudXJsXG4gIH07XG59XG5mdW5jdGlvbiBjb21tZW50Qm9keU1lbnRpb25Ub0NvbXBvc2VyQm9keU1lbnRpb24obWVudGlvbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwibWVudGlvblwiLFxuICAgIGlkOiBtZW50aW9uLmlkLFxuICAgIGNoaWxkcmVuOiBbeyB0ZXh0OiBcIlwiIH1dXG4gIH07XG59XG5mdW5jdGlvbiBjb21tZW50Qm9keUxpbmtUb0NvbXBvc2VyQm9keUxpbmsobGluaykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiYXV0by1saW5rXCIsXG4gICAgdXJsOiBsaW5rLnVybCxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICB0ZXh0OiBsaW5rLnVybFxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VyQm9keVRvQ29tbWVudEJvZHkoYm9keSkge1xuICByZXR1cm4ge1xuICAgIHZlcnNpb246IDEsXG4gICAgY29udGVudDogYm9keS5tYXAoKGJsb2NrKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGJsb2NrLmNoaWxkcmVuLm1hcCgoaW5saW5lKSA9PiB7XG4gICAgICAgIGlmIChpc0NvbXBvc2VyQm9keU1lbnRpb24oaW5saW5lKSkge1xuICAgICAgICAgIHJldHVybiBjb21wb3NlckJvZHlNZW50aW9uVG9Db21tZW50Qm9keU1lbnRpb24oaW5saW5lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb21wb3NlckJvZHlBdXRvTGluayhpbmxpbmUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VyQm9keUF1dG9MaW5rVG9Db21tZW50Qm9keUxpbmsoaW5saW5lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVGV4dC5pc1RleHQoaW5saW5lKSkge1xuICAgICAgICAgIHJldHVybiBpbmxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZXhpc3RzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmJsb2NrLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgfTtcbiAgICB9KVxuICB9O1xufVxuY29uc3QgZW1wdHlDb21wb3NlckJvZHkgPSBbXTtcbmZ1bmN0aW9uIGNvbW1lbnRCb2R5VG9Db21wb3NlckJvZHkoYm9keSkge1xuICBpZiAoIWJvZHkgfHwgIWJvZHk/LmNvbnRlbnQpIHtcbiAgICByZXR1cm4gZW1wdHlDb21wb3NlckJvZHk7XG4gIH1cbiAgcmV0dXJuIGJvZHkuY29udGVudC5tYXAoKGJsb2NrKSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoKGlubGluZSkgPT4ge1xuICAgICAgaWYgKGlzQ29tbWVudEJvZHlNZW50aW9uKGlubGluZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRCb2R5TWVudGlvblRvQ29tcG9zZXJCb2R5TWVudGlvbihpbmxpbmUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbWVudEJvZHlMaW5rKGlubGluZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRCb2R5TGlua1RvQ29tcG9zZXJCb2R5TGluayhpbmxpbmUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbWVudEJvZHlUZXh0KGlubGluZSkpIHtcbiAgICAgICAgcmV0dXJuIGlubGluZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pLmZpbHRlcihleGlzdHMpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5ibG9jayxcbiAgICAgIGNoaWxkcmVuXG4gICAgfTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRQbGFjZW1lbnRGcm9tUG9zaXRpb24ocG9zaXRpb24sIGRpcmVjdGlvbiA9IFwibHRyXCIpIHtcbiAgcmV0dXJuIGAke3Bvc2l0aW9ufS0ke2RpcmVjdGlvbiA9PT0gXCJydGxcIiA/IFwiZW5kXCIgOiBcInN0YXJ0XCJ9YDtcbn1cbmZ1bmN0aW9uIGdldFNpZGVBbmRBbGlnbkZyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIGNvbnN0IFtzaWRlLCBhbGlnbiA9IFwiY2VudGVyXCJdID0gcGxhY2VtZW50LnNwbGl0KFwiLVwiKTtcbiAgcmV0dXJuIFtzaWRlLCBhbGlnbl07XG59XG5cbmV4cG9ydCB7IGNvbW1lbnRCb2R5TGlua1RvQ29tcG9zZXJCb2R5TGluaywgY29tbWVudEJvZHlNZW50aW9uVG9Db21wb3NlckJvZHlNZW50aW9uLCBjb21tZW50Qm9keVRvQ29tcG9zZXJCb2R5LCBjb21wb3NlckJvZHlBdXRvTGlua1RvQ29tbWVudEJvZHlMaW5rLCBjb21wb3NlckJvZHlNZW50aW9uVG9Db21tZW50Qm9keU1lbnRpb24sIGNvbXBvc2VyQm9keVRvQ29tbWVudEJvZHksIGdldFBsYWNlbWVudEZyb21Qb3NpdGlvbiwgZ2V0U2lkZUFuZEFsaWduRnJvbVBsYWNlbWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlRleHQiLCJpc0NvbXBvc2VyQm9keUF1dG9MaW5rIiwiaXNDb21wb3NlckJvZHlNZW50aW9uIiwiZXhpc3RzIiwiaXNDb21tZW50Qm9keU1lbnRpb24iLCJpc0NvbW1lbnRCb2R5TGluayIsImlzQ29tbWVudEJvZHlUZXh0IiwiY29tcG9zZXJCb2R5TWVudGlvblRvQ29tbWVudEJvZHlNZW50aW9uIiwibWVudGlvbiIsInR5cGUiLCJpZCIsImNvbXBvc2VyQm9keUF1dG9MaW5rVG9Db21tZW50Qm9keUxpbmsiLCJsaW5rIiwidXJsIiwiY29tbWVudEJvZHlNZW50aW9uVG9Db21wb3NlckJvZHlNZW50aW9uIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiY29tbWVudEJvZHlMaW5rVG9Db21wb3NlckJvZHlMaW5rIiwiY29tcG9zZXJCb2R5VG9Db21tZW50Qm9keSIsImJvZHkiLCJ2ZXJzaW9uIiwiY29udGVudCIsIm1hcCIsImJsb2NrIiwiaW5saW5lIiwiaXNUZXh0IiwiZmlsdGVyIiwiZW1wdHlDb21wb3NlckJvZHkiLCJjb21tZW50Qm9keVRvQ29tcG9zZXJCb2R5IiwiZ2V0UGxhY2VtZW50RnJvbVBvc2l0aW9uIiwicG9zaXRpb24iLCJkaXJlY3Rpb24iLCJnZXRTaWRlQW5kQWxpZ25Gcm9tUGxhY2VtZW50IiwicGxhY2VtZW50Iiwic2lkZSIsImFsaWduIiwic3BsaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Composer/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/contexts.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/contexts.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiPickerContext: () => (/* binding */ EmojiPickerContext),\n/* harmony export */   useEmojiPicker: () => (/* binding */ useEmojiPicker)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nconst EmojiPickerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useEmojiPicker() {\n    const emojiPickerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmojiPickerContext);\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(emojiPickerContext, \"EmojiPicker.Root is missing from the React tree.\");\n}\n //# sourceMappingURL=contexts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL0Vtb2ppUGlja2VyL2NvbnRleHRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDO0FBQ1k7QUFFbEQsTUFBTUcsbUNBQXFCRixvREFBYUEsQ0FDdEM7QUFFRixTQUFTRztJQUNQLE1BQU1DLHFCQUFxQkgsaURBQVVBLENBQUNDO0lBQ3RDLE9BQU9ILG9EQUFFQSxDQUNQSyxvQkFDQTtBQUVKO0FBRThDLENBQzlDLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvcHJpbWl0aXZlcy9FbW9qaVBpY2tlci9jb250ZXh0cy5tanM/YmZlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBubiB9IGZyb20gJ0BsaXZlYmxvY2tzL2NvcmUnO1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgRW1vamlQaWNrZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dChcbiAgbnVsbFxuKTtcbmZ1bmN0aW9uIHVzZUVtb2ppUGlja2VyKCkge1xuICBjb25zdCBlbW9qaVBpY2tlckNvbnRleHQgPSB1c2VDb250ZXh0KEVtb2ppUGlja2VyQ29udGV4dCk7XG4gIHJldHVybiBubihcbiAgICBlbW9qaVBpY2tlckNvbnRleHQsXG4gICAgXCJFbW9qaVBpY2tlci5Sb290IGlzIG1pc3NpbmcgZnJvbSB0aGUgUmVhY3QgdHJlZS5cIlxuICApO1xufVxuXG5leHBvcnQgeyBFbW9qaVBpY2tlckNvbnRleHQsIHVzZUVtb2ppUGlja2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0cy5tanMubWFwXG4iXSwibmFtZXMiOlsibm4iLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsIkVtb2ppUGlja2VyQ29udGV4dCIsInVzZUVtb2ppUGlja2VyIiwiZW1vamlQaWNrZXJDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/contexts.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/index.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/index.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Content: () => (/* binding */ EmojiPickerContent),\n/* harmony export */   Root: () => (/* binding */ EmojiPickerRoot),\n/* harmony export */   Search: () => (/* binding */ EmojiPickerSearch)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_virtuoso__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-virtuoso */ \"(ssr)/./node_modules/react-virtuoso/dist/index.mjs\");\n/* harmony import */ var _utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/is-key.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-key.mjs\");\n/* harmony import */ var _utils_request_idle_callback_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request-idle-callback.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/request-idle-callback.mjs\");\n/* harmony import */ var _utils_use_transition_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/use-transition.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-transition.mjs\");\n/* harmony import */ var _utils_visually_hidden_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/visually-hidden.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/visually-hidden.mjs\");\n/* harmony import */ var _internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/internal/Emoji.mjs\");\n/* harmony import */ var _contexts_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contexts.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/contexts.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/utils.mjs\");\n/* __next_internal_client_entry_do_not_use__ Content,Root,Search auto */ \n\n\n\n\n\n\n\n\n\nconst DEFAULT_COLUMNS = 10;\nconst DEFAULT_LOCALE = \"en\";\nconst LOADING_MINIMUM_TIMEOUT = 100;\nconst EMOJIPICKER_ROOT_NAME = \"EmojiPickerRoot\";\nconst EMOJIPICKER_CONTENT_NAME = \"EmojiPickerContent\";\nconst EMOJIPICKER_SEARCH_NAME = \"EmojiPickerSearch\";\nfunction EmojiPickerRoot({ columns = DEFAULT_COLUMNS, locale = DEFAULT_LOCALE, onEmojiSelect, children }) {\n    const emojiData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const search = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"\");\n    const [, startEmojisTransition] = (0,_utils_use_transition_mjs__WEBPACK_IMPORTED_MODULE_1__.useTransition)();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const [selectedColumnIndex, setSelectedColumnIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [selectedRowIndex, setSelectedRowIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [interaction, setInteraction] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"none\");\n    const selectCurrentEmoji = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (onEmojiSelect) {\n            const emoji = data?.rows[selectedRowIndex]?.[selectedColumnIndex];\n            if (emoji) {\n                onEmojiSelect(emoji.emoji);\n            }\n        }\n    }, [\n        data?.rows,\n        onEmojiSelect,\n        selectedColumnIndex,\n        selectedRowIndex\n    ]);\n    const resetSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setSelectedColumnIndex(0);\n        setSelectedRowIndex(0);\n    }, []);\n    const setPointerSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((columnIndex, rowIndex)=>{\n        setInteraction(\"pointer\");\n        setSelectedColumnIndex(columnIndex);\n        setSelectedRowIndex(rowIndex);\n    }, []);\n    const moveSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((direction, event)=>{\n        if (!data) {\n            return;\n        }\n        event.preventDefault();\n        if (interaction === \"none\") {\n            setInteraction(\"keyboard\");\n            return;\n        }\n        setInteraction(\"keyboard\");\n        switch(direction){\n            case \"left\":\n                {\n                    if (selectedColumnIndex === 0) {\n                        const previousRowIndex = selectedRowIndex - 1;\n                        const previousRow = data.rows[previousRowIndex];\n                        if (previousRow) {\n                            setSelectedRowIndex(previousRowIndex);\n                            setSelectedColumnIndex(previousRow.length - 1);\n                        }\n                    } else {\n                        setSelectedColumnIndex(selectedColumnIndex - 1);\n                    }\n                    break;\n                }\n            case \"right\":\n                {\n                    const currentRow = data.rows[selectedRowIndex];\n                    if (selectedColumnIndex === currentRow.length - 1) {\n                        const nextRowIndex = selectedRowIndex + 1;\n                        const nextRow = data.rows[nextRowIndex];\n                        if (nextRow) {\n                            setSelectedRowIndex(nextRowIndex);\n                            setSelectedColumnIndex(0);\n                        }\n                    } else {\n                        setSelectedColumnIndex(selectedColumnIndex + 1);\n                    }\n                    break;\n                }\n            case \"up\":\n                {\n                    const previousRow = data.rows[selectedRowIndex - 1];\n                    if (previousRow) {\n                        setSelectedRowIndex(selectedRowIndex - 1);\n                        if (!previousRow[selectedColumnIndex]) {\n                            setSelectedColumnIndex(previousRow.length - 1);\n                        }\n                    }\n                    break;\n                }\n            case \"down\":\n                {\n                    const nextRow = data.rows[selectedRowIndex + 1];\n                    if (nextRow) {\n                        setSelectedRowIndex(selectedRowIndex + 1);\n                        if (!nextRow[selectedColumnIndex]) {\n                            setSelectedColumnIndex(nextRow.length - 1);\n                        }\n                    }\n                    break;\n                }\n        }\n    }, [\n        data,\n        interaction,\n        selectedColumnIndex,\n        selectedRowIndex\n    ]);\n    const updateEmojis = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!emojiData.current) {\n            return;\n        }\n        startEmojisTransition(()=>{\n            setData(()=>{\n                if (!emojiData.current) {\n                    return;\n                }\n                const filteredEmojis = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.filterEmojis)(emojiData.current.emojis, search.current);\n                return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.generateEmojiPickerData)(filteredEmojis, emojiData.current.categories, columns);\n            });\n            resetSelection();\n        });\n    }, [\n        columns,\n        resetSelection\n    ]);\n    const handleSearch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        search.current = value;\n        updateEmojis();\n    }, [\n        updateEmojis\n    ]);\n    const initializeEmojiData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (locale2)=>{\n        try {\n            emojiData.current = await (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getEmojiData)(locale2);\n            updateEmojis();\n        } catch (error2) {\n            setError(error2);\n        }\n    }, [\n        updateEmojis\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let idleCallbackId;\n        const timeoutId = setTimeout(()=>{\n            idleCallbackId = (0,_utils_request_idle_callback_mjs__WEBPACK_IMPORTED_MODULE_3__.requestIdleCallback)(()=>{\n                initializeEmojiData(locale);\n            });\n        }, LOADING_MINIMUM_TIMEOUT);\n        return ()=>{\n            clearTimeout(timeoutId);\n            (0,_utils_request_idle_callback_mjs__WEBPACK_IMPORTED_MODULE_3__.cancelIdleCallback)(idleCallbackId);\n        };\n    }, [\n        locale\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (interaction === \"none\") {\n            resetSelection();\n        }\n    }, [\n        interaction\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_4__.EmojiPickerContext.Provider, {\n        value: {\n            data,\n            error,\n            isLoading: !data && !error,\n            columns,\n            onSearch: handleSearch,\n            onEmojiSelect,\n            selectCurrentEmoji,\n            selectedRowIndex,\n            selectedColumnIndex,\n            moveSelection,\n            setPointerSelection,\n            interaction,\n            setInteraction\n        }\n    }, children);\n}\nconst EmojiPickerSearch = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ asChild, value, defaultValue, onChange, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"input\";\n    const { onSearch, selectCurrentEmoji, moveSelection, interaction, setInteraction } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_4__.useEmojiPicker)();\n    const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onChange?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        const value2 = event.target.value;\n        setInteraction(value2 ? \"keyboard\" : \"none\");\n        onSearch(value2);\n    }, [\n        onChange,\n        onSearch,\n        setInteraction\n    ]);\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowLeft\")) {\n            moveSelection(\"left\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowRight\")) {\n            moveSelection(\"right\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowUp\")) {\n            moveSelection(\"up\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowDown\")) {\n            moveSelection(\"down\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"Enter\")) {\n            if (interaction !== \"none\") {\n                event.preventDefault();\n                selectCurrentEmoji();\n            }\n        }\n    }, [\n        interaction,\n        moveSelection,\n        selectCurrentEmoji\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        onSearch(value ? String(value) : defaultValue ? String(defaultValue) : \"\");\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        type: \"search\",\n        value,\n        defaultValue,\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        ...props,\n        ref: forwardedRef\n    });\n});\nconst defaultContentComponents = {\n    CategoryHeader: ({ category, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }, category),\n    Row: ({ children, attributes, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }, children),\n    Emoji: ({ emoji, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...props\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_7__.Emoji, {\n            emoji\n        })),\n    Loading: (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }),\n    Empty: (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }),\n    Grid: (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }),\n    Error: ({ error, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        })\n};\nconst placeholderRowAttributes = {\n    rowIndex: -1,\n    categoryRowIndex: -1,\n    categoryRowsCount: 0\n};\nconst VirtuosoScroller = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...props,\n        tabIndex: -1,\n        \"data-test-id\": void 0,\n        ref: forwardedRef\n    }, children);\n});\nconst VirtuosoTopList = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...props,\n        \"data-test-id\": void 0,\n        ref: forwardedRef\n    }, children);\n});\nconst EmojiPickerContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"div\";\n    const virtuosoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { data, error, isLoading, columns, onEmojiSelect, selectedColumnIndex, selectedRowIndex, setPointerSelection, interaction, setInteraction } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_4__.useEmojiPicker)();\n    const selectedEmoji = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>data?.rows[selectedRowIndex]?.[selectedColumnIndex], [\n        data?.rows,\n        selectedColumnIndex,\n        selectedRowIndex\n    ]);\n    const { Loading, Empty, Error, CategoryHeader, Grid, Row, Emoji } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultContentComponents,\n            ...components\n        }), [\n        components\n    ]);\n    const VirtuosoList = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, ...props2 }, forwardedRef2)=>{\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                role: \"grid\",\n                \"aria-colcount\": columns,\n                ...props2,\n                \"data-test-id\": void 0,\n                ref: forwardedRef2\n            }, children);\n        }), [\n        columns\n    ]);\n    const placeholderColumns = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>Array(columns).fill(\"\\uD83C\\uDF2B️\"), [\n        columns\n    ]);\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    const handleEmojiPointerLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (interaction === \"pointer\") {\n            setInteraction(\"none\");\n        }\n    }, [\n        interaction,\n        setInteraction\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (interaction === \"keyboard\") {\n            virtuosoRef.current?.scrollIntoView({\n                index: selectedRowIndex,\n                behavior: \"auto\"\n            });\n        }\n    }, [\n        interaction,\n        selectedRowIndex\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            visibility: \"hidden\",\n            height: 0\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Row, {\n        attributes: placeholderRowAttributes\n    }, placeholderColumns.map((placeholder, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Emoji, {\n            emoji: placeholder,\n            key: index\n        })))), isLoading ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Loading, null) : error ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Error, {\n        error\n    }) : data.count === 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Empty, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Grid, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_virtuoso__WEBPACK_IMPORTED_MODULE_8__.GroupedVirtuoso, {\n        ref: virtuosoRef,\n        components: {\n            Scroller: VirtuosoScroller,\n            List: VirtuosoList,\n            TopItemList: VirtuosoTopList\n        },\n        groupCounts: data.categoriesRowCounts,\n        groupContent: (groupIndex)=>{\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CategoryHeader, {\n                category: data.categories[groupIndex]\n            });\n        },\n        itemContent: (rowIndex, groupIndex)=>{\n            const categoryRowIndex = data.categoriesRowIndices[groupIndex].indexOf(rowIndex);\n            const categoryRowsCount = data.categoriesRowCounts[groupIndex];\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Row, {\n                attributes: {\n                    rowIndex,\n                    categoryRowIndex,\n                    categoryRowsCount\n                }\n            }, data.rows[rowIndex].map((emoji, columnIndex)=>{\n                const isSelected = interaction !== \"none\" && selectedColumnIndex === columnIndex && selectedRowIndex === rowIndex;\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Emoji, {\n                    key: emoji.emoji,\n                    role: \"gridcell\",\n                    \"aria-colindex\": columnIndex,\n                    \"aria-selected\": isSelected || void 0,\n                    \"data-selected\": isSelected || void 0,\n                    onMouseDown: preventDefault,\n                    tabIndex: -1,\n                    onPointerEnter: ()=>{\n                        setPointerSelection(columnIndex, rowIndex);\n                    },\n                    onPointerLeave: handleEmojiPointerLeave,\n                    onClick: (event)=>{\n                        onEmojiSelect?.(emoji.emoji);\n                        event.stopPropagation();\n                    },\n                    emoji: emoji.emoji\n                });\n            }));\n        }\n    })), selectedEmoji && interaction !== \"none\" && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"aria-live\": \"polite\",\n        style: _utils_visually_hidden_mjs__WEBPACK_IMPORTED_MODULE_9__.visuallyHidden\n    }, selectedEmoji.name));\n});\nif (true) {\n    EmojiPickerRoot.displayName = EMOJIPICKER_ROOT_NAME;\n    EmojiPickerContent.displayName = EMOJIPICKER_CONTENT_NAME;\n    EmojiPickerSearch.displayName = EMOJIPICKER_SEARCH_NAME;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/utils.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/utils.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterEmojis: () => (/* binding */ filterEmojis),\n/* harmony export */   generateEmojiPickerData: () => (/* binding */ generateEmojiPickerData),\n/* harmony export */   getEmojiData: () => (/* binding */ getEmojiData)\n/* harmony export */ });\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\");\n/* harmony import */ var _utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/capitalize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/capitalize.mjs\");\n/* harmony import */ var _utils_chunk_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/chunk.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/chunk.mjs\");\n\n\n\nconst EMOJIBASE_VERSION = \"15.0.0\";\nconst EMOJIBASE_CDN_URL = `https://cdn.jsdelivr.net/npm/emojibase-data@${EMOJIBASE_VERSION}`;\nconst EMOJIBASE_EMOJIS_URL = (locale)=>`${EMOJIBASE_CDN_URL}/${locale}/data.json`;\nconst EMOJIBASE_MESSAGES_URL = (locale)=>`${EMOJIBASE_CDN_URL}/${locale}/messages.json`;\nconst EMOJIBASE_LOCALES = [\n    \"da\",\n    \"de\",\n    \"en\",\n    \"en-gb\",\n    \"es\",\n    \"es-mx\",\n    \"et\",\n    \"fi\",\n    \"fr\",\n    \"hu\",\n    \"it\",\n    \"ja\",\n    \"ko\",\n    \"lt\",\n    \"ms\",\n    \"nb\",\n    \"nl\",\n    \"pl\",\n    \"pt\",\n    \"ru\",\n    \"sv\",\n    \"th\",\n    \"uk\",\n    \"zh\",\n    \"zh-hant\"\n];\nconst EMOJIBASE_DEFAULT_LOCALE = \"en\";\nconst CACHE_EMOJI_DATA_KEY = (locale)=>`lb-emoji-data-${locale}`;\nconst CACHE_EMOJI_METADATA_KEY = (locale)=>`lb-emoji-metadata-${locale}`;\nconst CACHE_EMOJI_SESSION_METADATA_KEY = \"lb-emoji-metadata\";\nconst EMOJI_DETECTION_CANVAS_WIDTH = 20;\nconst EMOJI_DETECTION_CANVAS_HEIGHT = 25;\nconst EMOJI_DETECTION_COUNTRY_FLAG = \"\\uD83C\\uDDEB\\uD83C\\uDDF7\";\nfunction generateRangeIndices(start, end) {\n    const range = [];\n    for(let i = start; i <= end; i++){\n        range.push(i);\n    }\n    return range;\n}\nfunction getStorageItem(storage, key) {\n    const item = storage.getItem(key);\n    return item ? JSON.parse(item) : null;\n}\nfunction setStorageItem(storage, key, value) {\n    storage.setItem(key, JSON.stringify(value));\n}\nasync function fetchEtag(url) {\n    try {\n        const response = await fetch(url, {\n            method: \"HEAD\"\n        });\n        return response.headers.get(\"etag\");\n    } catch (error) {\n        return null;\n    }\n}\nfunction getEmojibaseSupportedLocale(locale) {\n    return EMOJIBASE_LOCALES.includes(locale) ? locale : EMOJIBASE_DEFAULT_LOCALE;\n}\nasync function fetchEmojibaseData(locale) {\n    const [{ emojis, emojisEtag }, { messages, messagesEtag }] = await Promise.all([\n        fetch(EMOJIBASE_EMOJIS_URL(locale)).then(async (response)=>{\n            return {\n                emojis: await response.json(),\n                emojisEtag: response.headers.get(\"etag\")\n            };\n        }),\n        fetch(EMOJIBASE_MESSAGES_URL(locale)).then(async (response)=>{\n            return {\n                messages: await response.json(),\n                messagesEtag: response.headers.get(\"etag\")\n            };\n        })\n    ]);\n    return {\n        emojis,\n        messages,\n        emojisEtag,\n        messagesEtag\n    };\n}\nasync function fetchEmojibaseEtags(locale) {\n    const [emojisEtag, messagesEtag] = await Promise.all([\n        fetchEtag(EMOJIBASE_EMOJIS_URL(locale)),\n        fetchEtag(EMOJIBASE_MESSAGES_URL(locale))\n    ]);\n    return {\n        emojisEtag,\n        messagesEtag\n    };\n}\nasync function fetchEmojiData(locale) {\n    const { emojis, emojisEtag, messages, messagesEtag } = await fetchEmojibaseData(locale);\n    const countryFlagsSubgroup = messages.subgroups.find((subgroup)=>subgroup.key === \"subdivision-flag\");\n    const filteredGroups = messages.groups.filter((group)=>group.key !== \"component\");\n    const filteredEmojis = emojis.filter((emoji)=>{\n        return \"group\" in emoji;\n    });\n    const categories = filteredGroups.map((group)=>({\n            key: group.order,\n            name: (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__.capitalize)(group.message)\n        }));\n    const skinTones = messages.skinTones.map((skinTone)=>({\n            key: skinTone.key,\n            name: (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__.capitalize)(skinTone.message)\n        }));\n    const compactEmojis = filteredEmojis.map((emoji)=>{\n        const compactEmoji = {\n            emoji: emoji.emoji,\n            category: emoji.group,\n            version: emoji.version,\n            name: (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__.capitalize)(emoji.label),\n            tags: emoji.tags\n        };\n        if (countryFlagsSubgroup && emoji.subgroup === countryFlagsSubgroup.order) {\n            compactEmoji.countryFlag = true;\n        }\n        return compactEmoji;\n    });\n    const emojiData = {\n        emojis: compactEmojis,\n        categories,\n        skinTones\n    };\n    setStorageItem(localStorage, CACHE_EMOJI_DATA_KEY(locale), emojiData);\n    setStorageItem(localStorage, CACHE_EMOJI_METADATA_KEY(locale), {\n        emojisEtag,\n        messagesEtag\n    });\n    return emojiData;\n}\nfunction detectEmojiSupport(canvasContext, emoji) {\n    canvasContext.clearRect(0, 0, EMOJI_DETECTION_CANVAS_WIDTH * 2, EMOJI_DETECTION_CANVAS_HEIGHT);\n    canvasContext.fillStyle = \"#f00\";\n    canvasContext.fillText(emoji, 0, 22);\n    canvasContext.fillStyle = \"#00f\";\n    canvasContext.fillText(emoji, EMOJI_DETECTION_CANVAS_WIDTH, 22);\n    const pixels = canvasContext.getImageData(0, 0, EMOJI_DETECTION_CANVAS_WIDTH, EMOJI_DETECTION_CANVAS_HEIGHT).data;\n    const pixelCount = pixels.length;\n    let i = 0;\n    for(; i < pixelCount && !pixels[i + 3]; i += 4);\n    if (i >= pixelCount) {\n        return false;\n    }\n    const x = EMOJI_DETECTION_CANVAS_WIDTH + i / 4 % EMOJI_DETECTION_CANVAS_WIDTH;\n    const y = Math.floor(i / 4 / EMOJI_DETECTION_CANVAS_WIDTH);\n    const pixel = canvasContext.getImageData(x, y, 1, 1).data;\n    if (pixels[i] !== pixel[0] || pixels[i + 2] !== pixel[2]) {\n        return false;\n    }\n    if (canvasContext.measureText(emoji).width >= EMOJI_DETECTION_CANVAS_WIDTH) {\n        return false;\n    }\n    return true;\n}\nfunction getEmojiFontFamily() {\n    try {\n        const element = document.createElement(\"span\");\n        element.style.display = \"none\";\n        element.dataset.emoji = \"\";\n        document.body.appendChild(element);\n        const computedFontFamily = window.getComputedStyle(element).fontFamily;\n        document.body.removeChild(element);\n        return computedFontFamily;\n    } catch  {\n        return _constants_mjs__WEBPACK_IMPORTED_MODULE_1__.EMOJI_FONT_FAMILY;\n    }\n}\nfunction getEmojiSessionMetadata(emojis) {\n    const versions = /* @__PURE__ */ new Map();\n    for (const emoji of emojis){\n        if (!versions.has(emoji.version)) {\n            versions.set(emoji.version, emoji.emoji);\n        }\n    }\n    const descendingVersions = [\n        ...versions.keys()\n    ].sort((a, b)=>b - a);\n    const canvasContext = document.createElement(\"canvas\").getContext(\"2d\", {\n        willReadFrequently: true\n    });\n    if (!canvasContext) {\n        return {\n            emojiVersion: descendingVersions[0],\n            countryFlags: true\n        };\n    }\n    canvasContext.font = `${Math.floor(EMOJI_DETECTION_CANVAS_HEIGHT / 2)}px ${getEmojiFontFamily()}`;\n    canvasContext.textBaseline = \"top\";\n    canvasContext.canvas.width = EMOJI_DETECTION_CANVAS_WIDTH * 2;\n    canvasContext.canvas.height = EMOJI_DETECTION_CANVAS_HEIGHT;\n    const supportsCountryFlags = detectEmojiSupport(canvasContext, EMOJI_DETECTION_COUNTRY_FLAG);\n    for (const version of descendingVersions){\n        const emoji = versions.get(version);\n        const isSupported = detectEmojiSupport(canvasContext, emoji);\n        if (isSupported) {\n            return {\n                emojiVersion: version,\n                countryFlags: supportsCountryFlags\n            };\n        }\n    }\n    return {\n        emojiVersion: descendingVersions[0],\n        countryFlags: supportsCountryFlags\n    };\n}\nasync function getEmojiData(locale) {\n    const emojibaseLocale = getEmojibaseSupportedLocale(locale);\n    const sessionMetadata = getStorageItem(sessionStorage, CACHE_EMOJI_SESSION_METADATA_KEY);\n    const cachedData = getStorageItem(localStorage, CACHE_EMOJI_DATA_KEY(emojibaseLocale));\n    let data;\n    if (cachedData) {\n        if (sessionMetadata) {\n            data = cachedData;\n        } else {\n            const { emojisEtag, messagesEtag } = await fetchEmojibaseEtags(emojibaseLocale);\n            const cachedMetadata = getStorageItem(localStorage, CACHE_EMOJI_METADATA_KEY(emojibaseLocale));\n            if (cachedMetadata && emojisEtag === cachedMetadata.emojisEtag && messagesEtag === cachedMetadata.messagesEtag) {\n                data = cachedData;\n            } else {\n                data = await fetchEmojiData(emojibaseLocale);\n            }\n        }\n    } else {\n        data = await fetchEmojiData(emojibaseLocale);\n    }\n    const newSessionMetadata = sessionMetadata ?? getEmojiSessionMetadata(data.emojis);\n    setStorageItem(sessionStorage, CACHE_EMOJI_SESSION_METADATA_KEY, newSessionMetadata);\n    const filteredEmojis = data.emojis.filter((emoji)=>{\n        const isSupportedVersion = emoji.version <= newSessionMetadata.emojiVersion;\n        return emoji.countryFlag ? isSupportedVersion && newSessionMetadata.countryFlags : isSupportedVersion;\n    });\n    return {\n        emojis: filteredEmojis,\n        categories: data.categories,\n        skinTones: data.skinTones\n    };\n}\nfunction filterEmojis(emojis, search) {\n    if (!search) {\n        return emojis;\n    }\n    const searchText = search.toLowerCase().trim();\n    return emojis.filter((emoji)=>emoji.name.toLowerCase().includes(searchText) || emoji.tags?.some((tag)=>tag.toLowerCase().includes(searchText)));\n}\nfunction generateEmojiPickerData(emojis, categories, columns) {\n    let currentIndex = 0;\n    const rows = [];\n    const indexedEmojis = emojis.map((emoji, index)=>({\n            ...emoji,\n            index\n        }));\n    const categoriesRowCounts = [];\n    const categoriesRowIndices = [];\n    const categoriesNames = [];\n    const categorizedEmojis = categories.map((category)=>({\n            ...category,\n            emojis: indexedEmojis.filter((emoji)=>emoji.category === category.key)\n        })).filter((category)=>category.emojis.length > 0);\n    for (const category of categorizedEmojis){\n        const categoryRows = (0,_utils_chunk_mjs__WEBPACK_IMPORTED_MODULE_2__.chunk)(category.emojis, columns);\n        const nextIndex = currentIndex + categoryRows.length;\n        rows.push(...categoryRows);\n        categoriesNames.push(category.name);\n        categoriesRowCounts.push(categoryRows.length);\n        categoriesRowIndices.push(generateRangeIndices(currentIndex, nextIndex - 1));\n        currentIndex = nextIndex;\n    }\n    return {\n        count: emojis.length,\n        rows,\n        categories: categoriesNames,\n        categoriesRowCounts,\n        categoriesRowIndices\n    };\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL0Vtb2ppUGlja2VyL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0Q7QUFDQTtBQUNWO0FBRTlDLE1BQU1HLG9CQUFvQjtBQUMxQixNQUFNQyxvQkFBb0IsQ0FBQyw0Q0FBNEMsRUFBRUQsa0JBQWtCLENBQUM7QUFDNUYsTUFBTUUsdUJBQXVCLENBQUNDLFNBQVcsQ0FBQyxFQUFFRixrQkFBa0IsQ0FBQyxFQUFFRSxPQUFPLFVBQVUsQ0FBQztBQUNuRixNQUFNQyx5QkFBeUIsQ0FBQ0QsU0FBVyxDQUFDLEVBQUVGLGtCQUFrQixDQUFDLEVBQUVFLE9BQU8sY0FBYyxDQUFDO0FBQ3pGLE1BQU1FLG9CQUFvQjtJQUN4QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBQ0QsTUFBTUMsMkJBQTJCO0FBQ2pDLE1BQU1DLHVCQUF1QixDQUFDSixTQUFXLENBQUMsY0FBYyxFQUFFQSxPQUFPLENBQUM7QUFDbEUsTUFBTUssMkJBQTJCLENBQUNMLFNBQVcsQ0FBQyxrQkFBa0IsRUFBRUEsT0FBTyxDQUFDO0FBQzFFLE1BQU1NLG1DQUFtQztBQUN6QyxNQUFNQywrQkFBK0I7QUFDckMsTUFBTUMsZ0NBQWdDO0FBQ3RDLE1BQU1DLCtCQUErQjtBQUNyQyxTQUFTQyxxQkFBcUJDLEtBQUssRUFBRUMsR0FBRztJQUN0QyxNQUFNQyxRQUFRLEVBQUU7SUFDaEIsSUFBSyxJQUFJQyxJQUFJSCxPQUFPRyxLQUFLRixLQUFLRSxJQUFLO1FBQ2pDRCxNQUFNRSxJQUFJLENBQUNEO0lBQ2I7SUFDQSxPQUFPRDtBQUNUO0FBQ0EsU0FBU0csZUFBZUMsT0FBTyxFQUFFQyxHQUFHO0lBQ2xDLE1BQU1DLE9BQU9GLFFBQVFHLE9BQU8sQ0FBQ0Y7SUFDN0IsT0FBT0MsT0FBT0UsS0FBS0MsS0FBSyxDQUFDSCxRQUFRO0FBQ25DO0FBQ0EsU0FBU0ksZUFBZU4sT0FBTyxFQUFFQyxHQUFHLEVBQUVNLEtBQUs7SUFDekNQLFFBQVFRLE9BQU8sQ0FBQ1AsS0FBS0csS0FBS0ssU0FBUyxDQUFDRjtBQUN0QztBQUNBLGVBQWVHLFVBQVVDLEdBQUc7SUFDMUIsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTUYsS0FBSztZQUFFRyxRQUFRO1FBQU87UUFDbkQsT0FBT0YsU0FBU0csT0FBTyxDQUFDQyxHQUFHLENBQUM7SUFDOUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsT0FBTztJQUNUO0FBQ0Y7QUFDQSxTQUFTQyw0QkFBNEJuQyxNQUFNO0lBQ3pDLE9BQU9FLGtCQUFrQmtDLFFBQVEsQ0FBQ3BDLFVBQVVBLFNBQVNHO0FBQ3ZEO0FBQ0EsZUFBZWtDLG1CQUFtQnJDLE1BQU07SUFDdEMsTUFBTSxDQUFDLEVBQUVzQyxNQUFNLEVBQUVDLFVBQVUsRUFBRSxFQUFFLEVBQUVDLFFBQVEsRUFBRUMsWUFBWSxFQUFFLENBQUMsR0FBRyxNQUFNQyxRQUFRQyxHQUFHLENBQUM7UUFDN0ViLE1BQU0vQixxQkFBcUJDLFNBQVM0QyxJQUFJLENBQUMsT0FBT2Y7WUFDOUMsT0FBTztnQkFDTFMsUUFBUSxNQUFNVCxTQUFTZ0IsSUFBSTtnQkFDM0JOLFlBQVlWLFNBQVNHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO1lBQ25DO1FBQ0Y7UUFDQUgsTUFBTTdCLHVCQUF1QkQsU0FBUzRDLElBQUksQ0FBQyxPQUFPZjtZQUNoRCxPQUFPO2dCQUNMVyxVQUFVLE1BQU1YLFNBQVNnQixJQUFJO2dCQUM3QkosY0FBY1osU0FBU0csT0FBTyxDQUFDQyxHQUFHLENBQUM7WUFDckM7UUFDRjtLQUNEO0lBQ0QsT0FBTztRQUNMSztRQUNBRTtRQUNBRDtRQUNBRTtJQUNGO0FBQ0Y7QUFDQSxlQUFlSyxvQkFBb0I5QyxNQUFNO0lBQ3ZDLE1BQU0sQ0FBQ3VDLFlBQVlFLGFBQWEsR0FBRyxNQUFNQyxRQUFRQyxHQUFHLENBQUM7UUFDbkRoQixVQUFVNUIscUJBQXFCQztRQUMvQjJCLFVBQVUxQix1QkFBdUJEO0tBQ2xDO0lBQ0QsT0FBTztRQUNMdUM7UUFDQUU7SUFDRjtBQUNGO0FBQ0EsZUFBZU0sZUFBZS9DLE1BQU07SUFDbEMsTUFBTSxFQUFFc0MsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsWUFBWSxFQUFFLEdBQUcsTUFBTUosbUJBQW1CckM7SUFDaEYsTUFBTWdELHVCQUF1QlIsU0FBU1MsU0FBUyxDQUFDQyxJQUFJLENBQ2xELENBQUNDLFdBQWFBLFNBQVNqQyxHQUFHLEtBQUs7SUFFakMsTUFBTWtDLGlCQUFpQlosU0FBU2EsTUFBTSxDQUFDQyxNQUFNLENBQzNDLENBQUNDLFFBQVVBLE1BQU1yQyxHQUFHLEtBQUs7SUFFM0IsTUFBTXNDLGlCQUFpQmxCLE9BQU9nQixNQUFNLENBQUMsQ0FBQ0c7UUFDcEMsT0FBTyxXQUFXQTtJQUNwQjtJQUNBLE1BQU1DLGFBQWFOLGVBQWVPLEdBQUcsQ0FBQyxDQUFDSixRQUFXO1lBQ2hEckMsS0FBS3FDLE1BQU1LLEtBQUs7WUFDaEJDLE1BQU1sRSxpRUFBVUEsQ0FBQzRELE1BQU1PLE9BQU87UUFDaEM7SUFDQSxNQUFNQyxZQUFZdkIsU0FBU3VCLFNBQVMsQ0FBQ0osR0FBRyxDQUFDLENBQUNLLFdBQWM7WUFDdEQ5QyxLQUFLOEMsU0FBUzlDLEdBQUc7WUFDakIyQyxNQUFNbEUsaUVBQVVBLENBQUNxRSxTQUFTRixPQUFPO1FBQ25DO0lBQ0EsTUFBTUcsZ0JBQWdCVCxlQUFlRyxHQUFHLENBQUMsQ0FBQ0Y7UUFDeEMsTUFBTVMsZUFBZTtZQUNuQlQsT0FBT0EsTUFBTUEsS0FBSztZQUNsQlUsVUFBVVYsTUFBTUYsS0FBSztZQUNyQmEsU0FBU1gsTUFBTVcsT0FBTztZQUN0QlAsTUFBTWxFLGlFQUFVQSxDQUFDOEQsTUFBTVksS0FBSztZQUM1QkMsTUFBTWIsTUFBTWEsSUFBSTtRQUNsQjtRQUNBLElBQUl0Qix3QkFBd0JTLE1BQU1OLFFBQVEsS0FBS0gscUJBQXFCWSxLQUFLLEVBQUU7WUFDekVNLGFBQWFLLFdBQVcsR0FBRztRQUM3QjtRQUNBLE9BQU9MO0lBQ1Q7SUFDQSxNQUFNTSxZQUFZO1FBQ2hCbEMsUUFBUTJCO1FBQ1JQO1FBQ0FLO0lBQ0Y7SUFDQXhDLGVBQ0VrRCxjQUNBckUscUJBQXFCSixTQUNyQndFO0lBRUZqRCxlQUNFa0QsY0FDQXBFLHlCQUF5QkwsU0FDekI7UUFDRXVDO1FBQ0FFO0lBQ0Y7SUFFRixPQUFPK0I7QUFDVDtBQUNBLFNBQVNFLG1CQUFtQkMsYUFBYSxFQUFFbEIsS0FBSztJQUM5Q2tCLGNBQWNDLFNBQVMsQ0FDckIsR0FDQSxHQUNBckUsK0JBQStCLEdBQy9CQztJQUVGbUUsY0FBY0UsU0FBUyxHQUFHO0lBQzFCRixjQUFjRyxRQUFRLENBQUNyQixPQUFPLEdBQUc7SUFDakNrQixjQUFjRSxTQUFTLEdBQUc7SUFDMUJGLGNBQWNHLFFBQVEsQ0FBQ3JCLE9BQU9sRCw4QkFBOEI7SUFDNUQsTUFBTXdFLFNBQVNKLGNBQWNLLFlBQVksQ0FDdkMsR0FDQSxHQUNBekUsOEJBQ0FDLCtCQUNBeUUsSUFBSTtJQUNOLE1BQU1DLGFBQWFILE9BQU9JLE1BQU07SUFDaEMsSUFBSXJFLElBQUk7SUFDUixNQUFPQSxJQUFJb0UsY0FBYyxDQUFDSCxNQUFNLENBQUNqRSxJQUFJLEVBQUUsRUFBRUEsS0FBSztJQUU5QyxJQUFJQSxLQUFLb0UsWUFBWTtRQUNuQixPQUFPO0lBQ1Q7SUFDQSxNQUFNRSxJQUFJN0UsK0JBQStCTyxJQUFJLElBQUlQO0lBQ2pELE1BQU04RSxJQUFJQyxLQUFLQyxLQUFLLENBQUN6RSxJQUFJLElBQUlQO0lBQzdCLE1BQU1pRixRQUFRYixjQUFjSyxZQUFZLENBQUNJLEdBQUdDLEdBQUcsR0FBRyxHQUFHSixJQUFJO0lBQ3pELElBQUlGLE1BQU0sQ0FBQ2pFLEVBQUUsS0FBSzBFLEtBQUssQ0FBQyxFQUFFLElBQUlULE1BQU0sQ0FBQ2pFLElBQUksRUFBRSxLQUFLMEUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUN4RCxPQUFPO0lBQ1Q7SUFDQSxJQUFJYixjQUFjYyxXQUFXLENBQUNoQyxPQUFPaUMsS0FBSyxJQUFJbkYsOEJBQThCO1FBQzFFLE9BQU87SUFDVDtJQUNBLE9BQU87QUFDVDtBQUNBLFNBQVNvRjtJQUNQLElBQUk7UUFDRixNQUFNQyxVQUFVQyxTQUFTQyxhQUFhLENBQUM7UUFDdkNGLFFBQVFHLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO1FBQ3hCSixRQUFRSyxPQUFPLENBQUN4QyxLQUFLLEdBQUc7UUFDeEJvQyxTQUFTSyxJQUFJLENBQUNDLFdBQVcsQ0FBQ1A7UUFDMUIsTUFBTVEscUJBQXFCQyxPQUFPQyxnQkFBZ0IsQ0FBQ1YsU0FBU1csVUFBVTtRQUN0RVYsU0FBU0ssSUFBSSxDQUFDTSxXQUFXLENBQUNaO1FBQzFCLE9BQU9RO0lBQ1QsRUFBRSxPQUFNO1FBQ04sT0FBTzFHLDZEQUFpQkE7SUFDMUI7QUFDRjtBQUNBLFNBQVMrRyx3QkFBd0JuRSxNQUFNO0lBQ3JDLE1BQU1vRSxXQUFXLGFBQWEsR0FBRyxJQUFJQztJQUNyQyxLQUFLLE1BQU1sRCxTQUFTbkIsT0FBUTtRQUMxQixJQUFJLENBQUNvRSxTQUFTRSxHQUFHLENBQUNuRCxNQUFNVyxPQUFPLEdBQUc7WUFDaENzQyxTQUFTRyxHQUFHLENBQUNwRCxNQUFNVyxPQUFPLEVBQUVYLE1BQU1BLEtBQUs7UUFDekM7SUFDRjtJQUNBLE1BQU1xRCxxQkFBcUI7V0FBSUosU0FBU0ssSUFBSTtLQUFHLENBQUNDLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNQSxJQUFJRDtJQUNuRSxNQUFNdEMsZ0JBQWdCa0IsU0FBU0MsYUFBYSxDQUFDLFVBQVVxQixVQUFVLENBQUMsTUFBTTtRQUFFQyxvQkFBb0I7SUFBSztJQUNuRyxJQUFJLENBQUN6QyxlQUFlO1FBQ2xCLE9BQU87WUFBRTBDLGNBQWNQLGtCQUFrQixDQUFDLEVBQUU7WUFBRVEsY0FBYztRQUFLO0lBQ25FO0lBQ0EzQyxjQUFjNEMsSUFBSSxHQUFHLENBQUMsRUFBRWpDLEtBQUtDLEtBQUssQ0FDaEMvRSxnQ0FBZ0MsR0FDaEMsR0FBRyxFQUFFbUYscUJBQXFCLENBQUM7SUFDN0JoQixjQUFjNkMsWUFBWSxHQUFHO0lBQzdCN0MsY0FBYzhDLE1BQU0sQ0FBQy9CLEtBQUssR0FBR25GLCtCQUErQjtJQUM1RG9FLGNBQWM4QyxNQUFNLENBQUNDLE1BQU0sR0FBR2xIO0lBQzlCLE1BQU1tSCx1QkFBdUJqRCxtQkFDM0JDLGVBQ0FsRTtJQUVGLEtBQUssTUFBTTJELFdBQVcwQyxtQkFBb0I7UUFDeEMsTUFBTXJELFFBQVFpRCxTQUFTekUsR0FBRyxDQUFDbUM7UUFDM0IsTUFBTXdELGNBQWNsRCxtQkFBbUJDLGVBQWVsQjtRQUN0RCxJQUFJbUUsYUFBYTtZQUNmLE9BQU87Z0JBQ0xQLGNBQWNqRDtnQkFDZGtELGNBQWNLO1lBQ2hCO1FBQ0Y7SUFDRjtJQUNBLE9BQU87UUFDTE4sY0FBY1Asa0JBQWtCLENBQUMsRUFBRTtRQUNuQ1EsY0FBY0s7SUFDaEI7QUFDRjtBQUNBLGVBQWVFLGFBQWE3SCxNQUFNO0lBQ2hDLE1BQU04SCxrQkFBa0IzRiw0QkFBNEJuQztJQUNwRCxNQUFNK0gsa0JBQWtCL0csZUFDdEJnSCxnQkFDQTFIO0lBRUYsTUFBTTJILGFBQWFqSCxlQUNqQnlELGNBQ0FyRSxxQkFBcUIwSDtJQUV2QixJQUFJN0M7SUFDSixJQUFJZ0QsWUFBWTtRQUNkLElBQUlGLGlCQUFpQjtZQUNuQjlDLE9BQU9nRDtRQUNULE9BQU87WUFDTCxNQUFNLEVBQUUxRixVQUFVLEVBQUVFLFlBQVksRUFBRSxHQUFHLE1BQU1LLG9CQUFvQmdGO1lBQy9ELE1BQU1JLGlCQUFpQmxILGVBQ3JCeUQsY0FDQXBFLHlCQUF5QnlIO1lBRTNCLElBQUlJLGtCQUFrQjNGLGVBQWUyRixlQUFlM0YsVUFBVSxJQUFJRSxpQkFBaUJ5RixlQUFlekYsWUFBWSxFQUFFO2dCQUM5R3dDLE9BQU9nRDtZQUNULE9BQU87Z0JBQ0xoRCxPQUFPLE1BQU1sQyxlQUFlK0U7WUFDOUI7UUFDRjtJQUNGLE9BQU87UUFDTDdDLE9BQU8sTUFBTWxDLGVBQWUrRTtJQUM5QjtJQUNBLE1BQU1LLHFCQUFxQkosbUJBQW1CdEIsd0JBQXdCeEIsS0FBSzNDLE1BQU07SUFDakZmLGVBQ0V5RyxnQkFDQTFILGtDQUNBNkg7SUFFRixNQUFNM0UsaUJBQWlCeUIsS0FBSzNDLE1BQU0sQ0FBQ2dCLE1BQU0sQ0FBQyxDQUFDRztRQUN6QyxNQUFNMkUscUJBQXFCM0UsTUFBTVcsT0FBTyxJQUFJK0QsbUJBQW1CZCxZQUFZO1FBQzNFLE9BQU81RCxNQUFNYyxXQUFXLEdBQUc2RCxzQkFBc0JELG1CQUFtQmIsWUFBWSxHQUFHYztJQUNyRjtJQUNBLE9BQU87UUFDTDlGLFFBQVFrQjtRQUNSRSxZQUFZdUIsS0FBS3ZCLFVBQVU7UUFDM0JLLFdBQVdrQixLQUFLbEIsU0FBUztJQUMzQjtBQUNGO0FBQ0EsU0FBU3NFLGFBQWEvRixNQUFNLEVBQUVnRyxNQUFNO0lBQ2xDLElBQUksQ0FBQ0EsUUFBUTtRQUNYLE9BQU9oRztJQUNUO0lBQ0EsTUFBTWlHLGFBQWFELE9BQU9FLFdBQVcsR0FBR0MsSUFBSTtJQUM1QyxPQUFPbkcsT0FBT2dCLE1BQU0sQ0FDbEIsQ0FBQ0csUUFBVUEsTUFBTUksSUFBSSxDQUFDMkUsV0FBVyxHQUFHcEcsUUFBUSxDQUFDbUcsZUFBZTlFLE1BQU1hLElBQUksRUFBRW9FLEtBQUssQ0FBQ0MsTUFBUUEsSUFBSUgsV0FBVyxHQUFHcEcsUUFBUSxDQUFDbUc7QUFFckg7QUFDQSxTQUFTSyx3QkFBd0J0RyxNQUFNLEVBQUVvQixVQUFVLEVBQUVtRixPQUFPO0lBQzFELElBQUlDLGVBQWU7SUFDbkIsTUFBTUMsT0FBTyxFQUFFO0lBQ2YsTUFBTUMsZ0JBQWdCMUcsT0FBT3FCLEdBQUcsQ0FBQyxDQUFDRixPQUFPd0YsUUFBVztZQUFFLEdBQUd4RixLQUFLO1lBQUV3RjtRQUFNO0lBQ3RFLE1BQU1DLHNCQUFzQixFQUFFO0lBQzlCLE1BQU1DLHVCQUF1QixFQUFFO0lBQy9CLE1BQU1DLGtCQUFrQixFQUFFO0lBQzFCLE1BQU1DLG9CQUFvQjNGLFdBQVdDLEdBQUcsQ0FBQyxDQUFDUSxXQUFjO1lBQ3RELEdBQUdBLFFBQVE7WUFDWDdCLFFBQVEwRyxjQUFjMUYsTUFBTSxDQUFDLENBQUNHLFFBQVVBLE1BQU1VLFFBQVEsS0FBS0EsU0FBU2pELEdBQUc7UUFDekUsSUFBSW9DLE1BQU0sQ0FBQyxDQUFDYSxXQUFhQSxTQUFTN0IsTUFBTSxDQUFDNkMsTUFBTSxHQUFHO0lBQ2xELEtBQUssTUFBTWhCLFlBQVlrRixrQkFBbUI7UUFDeEMsTUFBTUMsZUFBZTFKLHVEQUFLQSxDQUFDdUUsU0FBUzdCLE1BQU0sRUFBRXVHO1FBQzVDLE1BQU1VLFlBQVlULGVBQWVRLGFBQWFuRSxNQUFNO1FBQ3BENEQsS0FBS2hJLElBQUksSUFBSXVJO1FBQ2JGLGdCQUFnQnJJLElBQUksQ0FBQ29ELFNBQVNOLElBQUk7UUFDbENxRixvQkFBb0JuSSxJQUFJLENBQUN1SSxhQUFhbkUsTUFBTTtRQUM1Q2dFLHFCQUFxQnBJLElBQUksQ0FDdkJMLHFCQUFxQm9JLGNBQWNTLFlBQVk7UUFFakRULGVBQWVTO0lBQ2pCO0lBQ0EsT0FBTztRQUNMQyxPQUFPbEgsT0FBTzZDLE1BQU07UUFDcEI0RDtRQUNBckYsWUFBWTBGO1FBQ1pGO1FBQ0FDO0lBQ0Y7QUFDRjtBQUUrRCxDQUMvRCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3ByaW1pdGl2ZXMvRW1vamlQaWNrZXIvdXRpbHMubWpzPzExOTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRU1PSklfRk9OVF9GQU1JTFkgfSBmcm9tICcuLi8uLi9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi8uLi91dGlscy9jYXBpdGFsaXplLm1qcyc7XG5pbXBvcnQgeyBjaHVuayB9IGZyb20gJy4uLy4uL3V0aWxzL2NodW5rLm1qcyc7XG5cbmNvbnN0IEVNT0pJQkFTRV9WRVJTSU9OID0gXCIxNS4wLjBcIjtcbmNvbnN0IEVNT0pJQkFTRV9DRE5fVVJMID0gYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vZW1vamliYXNlLWRhdGFAJHtFTU9KSUJBU0VfVkVSU0lPTn1gO1xuY29uc3QgRU1PSklCQVNFX0VNT0pJU19VUkwgPSAobG9jYWxlKSA9PiBgJHtFTU9KSUJBU0VfQ0ROX1VSTH0vJHtsb2NhbGV9L2RhdGEuanNvbmA7XG5jb25zdCBFTU9KSUJBU0VfTUVTU0FHRVNfVVJMID0gKGxvY2FsZSkgPT4gYCR7RU1PSklCQVNFX0NETl9VUkx9LyR7bG9jYWxlfS9tZXNzYWdlcy5qc29uYDtcbmNvbnN0IEVNT0pJQkFTRV9MT0NBTEVTID0gW1xuICBcImRhXCIsXG4gIFwiZGVcIixcbiAgXCJlblwiLFxuICBcImVuLWdiXCIsXG4gIFwiZXNcIixcbiAgXCJlcy1teFwiLFxuICBcImV0XCIsXG4gIFwiZmlcIixcbiAgXCJmclwiLFxuICBcImh1XCIsXG4gIFwiaXRcIixcbiAgXCJqYVwiLFxuICBcImtvXCIsXG4gIFwibHRcIixcbiAgXCJtc1wiLFxuICBcIm5iXCIsXG4gIFwibmxcIixcbiAgXCJwbFwiLFxuICBcInB0XCIsXG4gIFwicnVcIixcbiAgXCJzdlwiLFxuICBcInRoXCIsXG4gIFwidWtcIixcbiAgXCJ6aFwiLFxuICBcInpoLWhhbnRcIlxuXTtcbmNvbnN0IEVNT0pJQkFTRV9ERUZBVUxUX0xPQ0FMRSA9IFwiZW5cIjtcbmNvbnN0IENBQ0hFX0VNT0pJX0RBVEFfS0VZID0gKGxvY2FsZSkgPT4gYGxiLWVtb2ppLWRhdGEtJHtsb2NhbGV9YDtcbmNvbnN0IENBQ0hFX0VNT0pJX01FVEFEQVRBX0tFWSA9IChsb2NhbGUpID0+IGBsYi1lbW9qaS1tZXRhZGF0YS0ke2xvY2FsZX1gO1xuY29uc3QgQ0FDSEVfRU1PSklfU0VTU0lPTl9NRVRBREFUQV9LRVkgPSBcImxiLWVtb2ppLW1ldGFkYXRhXCI7XG5jb25zdCBFTU9KSV9ERVRFQ1RJT05fQ0FOVkFTX1dJRFRIID0gMjA7XG5jb25zdCBFTU9KSV9ERVRFQ1RJT05fQ0FOVkFTX0hFSUdIVCA9IDI1O1xuY29uc3QgRU1PSklfREVURUNUSU9OX0NPVU5UUllfRkxBRyA9IFwiXFx1ezFGMUVCfVxcdXsxRjFGN31cIjtcbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZ2VJbmRpY2VzKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgcmFuZ2UgPSBbXTtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgcmFuZ2UucHVzaChpKTtcbiAgfVxuICByZXR1cm4gcmFuZ2U7XG59XG5mdW5jdGlvbiBnZXRTdG9yYWdlSXRlbShzdG9yYWdlLCBrZXkpIHtcbiAgY29uc3QgaXRlbSA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICByZXR1cm4gaXRlbSA/IEpTT04ucGFyc2UoaXRlbSkgOiBudWxsO1xufVxuZnVuY3Rpb24gc2V0U3RvcmFnZUl0ZW0oc3RvcmFnZSwga2V5LCB2YWx1ZSkge1xuICBzdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hFdGFnKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7IG1ldGhvZDogXCJIRUFEXCIgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiZXRhZ1wiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0RW1vamliYXNlU3VwcG9ydGVkTG9jYWxlKGxvY2FsZSkge1xuICByZXR1cm4gRU1PSklCQVNFX0xPQ0FMRVMuaW5jbHVkZXMobG9jYWxlKSA/IGxvY2FsZSA6IEVNT0pJQkFTRV9ERUZBVUxUX0xPQ0FMRTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZldGNoRW1vamliYXNlRGF0YShsb2NhbGUpIHtcbiAgY29uc3QgW3sgZW1vamlzLCBlbW9qaXNFdGFnIH0sIHsgbWVzc2FnZXMsIG1lc3NhZ2VzRXRhZyB9XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBmZXRjaChFTU9KSUJBU0VfRU1PSklTX1VSTChsb2NhbGUpKS50aGVuKGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW1vamlzOiBhd2FpdCByZXNwb25zZS5qc29uKCksXG4gICAgICAgIGVtb2ppc0V0YWc6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiZXRhZ1wiKVxuICAgICAgfTtcbiAgICB9KSxcbiAgICBmZXRjaChFTU9KSUJBU0VfTUVTU0FHRVNfVVJMKGxvY2FsZSkpLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlczogYXdhaXQgcmVzcG9uc2UuanNvbigpLFxuICAgICAgICBtZXNzYWdlc0V0YWc6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiZXRhZ1wiKVxuICAgICAgfTtcbiAgICB9KVxuICBdKTtcbiAgcmV0dXJuIHtcbiAgICBlbW9qaXMsXG4gICAgbWVzc2FnZXMsXG4gICAgZW1vamlzRXRhZyxcbiAgICBtZXNzYWdlc0V0YWdcbiAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZldGNoRW1vamliYXNlRXRhZ3MobG9jYWxlKSB7XG4gIGNvbnN0IFtlbW9qaXNFdGFnLCBtZXNzYWdlc0V0YWddID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGZldGNoRXRhZyhFTU9KSUJBU0VfRU1PSklTX1VSTChsb2NhbGUpKSxcbiAgICBmZXRjaEV0YWcoRU1PSklCQVNFX01FU1NBR0VTX1VSTChsb2NhbGUpKVxuICBdKTtcbiAgcmV0dXJuIHtcbiAgICBlbW9qaXNFdGFnLFxuICAgIG1lc3NhZ2VzRXRhZ1xuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hFbW9qaURhdGEobG9jYWxlKSB7XG4gIGNvbnN0IHsgZW1vamlzLCBlbW9qaXNFdGFnLCBtZXNzYWdlcywgbWVzc2FnZXNFdGFnIH0gPSBhd2FpdCBmZXRjaEVtb2ppYmFzZURhdGEobG9jYWxlKTtcbiAgY29uc3QgY291bnRyeUZsYWdzU3ViZ3JvdXAgPSBtZXNzYWdlcy5zdWJncm91cHMuZmluZChcbiAgICAoc3ViZ3JvdXApID0+IHN1Ymdyb3VwLmtleSA9PT0gXCJzdWJkaXZpc2lvbi1mbGFnXCJcbiAgKTtcbiAgY29uc3QgZmlsdGVyZWRHcm91cHMgPSBtZXNzYWdlcy5ncm91cHMuZmlsdGVyKFxuICAgIChncm91cCkgPT4gZ3JvdXAua2V5ICE9PSBcImNvbXBvbmVudFwiXG4gICk7XG4gIGNvbnN0IGZpbHRlcmVkRW1vamlzID0gZW1vamlzLmZpbHRlcigoZW1vamkpID0+IHtcbiAgICByZXR1cm4gXCJncm91cFwiIGluIGVtb2ppO1xuICB9KTtcbiAgY29uc3QgY2F0ZWdvcmllcyA9IGZpbHRlcmVkR3JvdXBzLm1hcCgoZ3JvdXApID0+ICh7XG4gICAga2V5OiBncm91cC5vcmRlcixcbiAgICBuYW1lOiBjYXBpdGFsaXplKGdyb3VwLm1lc3NhZ2UpXG4gIH0pKTtcbiAgY29uc3Qgc2tpblRvbmVzID0gbWVzc2FnZXMuc2tpblRvbmVzLm1hcCgoc2tpblRvbmUpID0+ICh7XG4gICAga2V5OiBza2luVG9uZS5rZXksXG4gICAgbmFtZTogY2FwaXRhbGl6ZShza2luVG9uZS5tZXNzYWdlKVxuICB9KSk7XG4gIGNvbnN0IGNvbXBhY3RFbW9qaXMgPSBmaWx0ZXJlZEVtb2ppcy5tYXAoKGVtb2ppKSA9PiB7XG4gICAgY29uc3QgY29tcGFjdEVtb2ppID0ge1xuICAgICAgZW1vamk6IGVtb2ppLmVtb2ppLFxuICAgICAgY2F0ZWdvcnk6IGVtb2ppLmdyb3VwLFxuICAgICAgdmVyc2lvbjogZW1vamkudmVyc2lvbixcbiAgICAgIG5hbWU6IGNhcGl0YWxpemUoZW1vamkubGFiZWwpLFxuICAgICAgdGFnczogZW1vamkudGFnc1xuICAgIH07XG4gICAgaWYgKGNvdW50cnlGbGFnc1N1Ymdyb3VwICYmIGVtb2ppLnN1Ymdyb3VwID09PSBjb3VudHJ5RmxhZ3NTdWJncm91cC5vcmRlcikge1xuICAgICAgY29tcGFjdEVtb2ppLmNvdW50cnlGbGFnID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhY3RFbW9qaTtcbiAgfSk7XG4gIGNvbnN0IGVtb2ppRGF0YSA9IHtcbiAgICBlbW9qaXM6IGNvbXBhY3RFbW9qaXMsXG4gICAgY2F0ZWdvcmllcyxcbiAgICBza2luVG9uZXNcbiAgfTtcbiAgc2V0U3RvcmFnZUl0ZW0oXG4gICAgbG9jYWxTdG9yYWdlLFxuICAgIENBQ0hFX0VNT0pJX0RBVEFfS0VZKGxvY2FsZSksXG4gICAgZW1vamlEYXRhXG4gICk7XG4gIHNldFN0b3JhZ2VJdGVtKFxuICAgIGxvY2FsU3RvcmFnZSxcbiAgICBDQUNIRV9FTU9KSV9NRVRBREFUQV9LRVkobG9jYWxlKSxcbiAgICB7XG4gICAgICBlbW9qaXNFdGFnLFxuICAgICAgbWVzc2FnZXNFdGFnXG4gICAgfVxuICApO1xuICByZXR1cm4gZW1vamlEYXRhO1xufVxuZnVuY3Rpb24gZGV0ZWN0RW1vamlTdXBwb3J0KGNhbnZhc0NvbnRleHQsIGVtb2ppKSB7XG4gIGNhbnZhc0NvbnRleHQuY2xlYXJSZWN0KFxuICAgIDAsXG4gICAgMCxcbiAgICBFTU9KSV9ERVRFQ1RJT05fQ0FOVkFTX1dJRFRIICogMixcbiAgICBFTU9KSV9ERVRFQ1RJT05fQ0FOVkFTX0hFSUdIVFxuICApO1xuICBjYW52YXNDb250ZXh0LmZpbGxTdHlsZSA9IFwiI2YwMFwiO1xuICBjYW52YXNDb250ZXh0LmZpbGxUZXh0KGVtb2ppLCAwLCAyMik7XG4gIGNhbnZhc0NvbnRleHQuZmlsbFN0eWxlID0gXCIjMDBmXCI7XG4gIGNhbnZhc0NvbnRleHQuZmlsbFRleHQoZW1vamksIEVNT0pJX0RFVEVDVElPTl9DQU5WQVNfV0lEVEgsIDIyKTtcbiAgY29uc3QgcGl4ZWxzID0gY2FudmFzQ29udGV4dC5nZXRJbWFnZURhdGEoXG4gICAgMCxcbiAgICAwLFxuICAgIEVNT0pJX0RFVEVDVElPTl9DQU5WQVNfV0lEVEgsXG4gICAgRU1PSklfREVURUNUSU9OX0NBTlZBU19IRUlHSFRcbiAgKS5kYXRhO1xuICBjb25zdCBwaXhlbENvdW50ID0gcGl4ZWxzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgaSA8IHBpeGVsQ291bnQgJiYgIXBpeGVsc1tpICsgM107IGkgKz0gNClcbiAgICA7XG4gIGlmIChpID49IHBpeGVsQ291bnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgeCA9IEVNT0pJX0RFVEVDVElPTl9DQU5WQVNfV0lEVEggKyBpIC8gNCAlIEVNT0pJX0RFVEVDVElPTl9DQU5WQVNfV0lEVEg7XG4gIGNvbnN0IHkgPSBNYXRoLmZsb29yKGkgLyA0IC8gRU1PSklfREVURUNUSU9OX0NBTlZBU19XSURUSCk7XG4gIGNvbnN0IHBpeGVsID0gY2FudmFzQ29udGV4dC5nZXRJbWFnZURhdGEoeCwgeSwgMSwgMSkuZGF0YTtcbiAgaWYgKHBpeGVsc1tpXSAhPT0gcGl4ZWxbMF0gfHwgcGl4ZWxzW2kgKyAyXSAhPT0gcGl4ZWxbMl0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGNhbnZhc0NvbnRleHQubWVhc3VyZVRleHQoZW1vamkpLndpZHRoID49IEVNT0pJX0RFVEVDVElPTl9DQU5WQVNfV0lEVEgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBnZXRFbW9qaUZvbnRGYW1pbHkoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIGVsZW1lbnQuZGF0YXNldC5lbW9qaSA9IFwiXCI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICBjb25zdCBjb21wdXRlZEZvbnRGYW1pbHkgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5mb250RmFtaWx5O1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgcmV0dXJuIGNvbXB1dGVkRm9udEZhbWlseTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIEVNT0pJX0ZPTlRfRkFNSUxZO1xuICB9XG59XG5mdW5jdGlvbiBnZXRFbW9qaVNlc3Npb25NZXRhZGF0YShlbW9qaXMpIHtcbiAgY29uc3QgdmVyc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGVtb2ppIG9mIGVtb2ppcykge1xuICAgIGlmICghdmVyc2lvbnMuaGFzKGVtb2ppLnZlcnNpb24pKSB7XG4gICAgICB2ZXJzaW9ucy5zZXQoZW1vamkudmVyc2lvbiwgZW1vamkuZW1vamkpO1xuICAgIH1cbiAgfVxuICBjb25zdCBkZXNjZW5kaW5nVmVyc2lvbnMgPSBbLi4udmVyc2lvbnMua2V5cygpXS5zb3J0KChhLCBiKSA9PiBiIC0gYSk7XG4gIGNvbnN0IGNhbnZhc0NvbnRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSB9KTtcbiAgaWYgKCFjYW52YXNDb250ZXh0KSB7XG4gICAgcmV0dXJuIHsgZW1vamlWZXJzaW9uOiBkZXNjZW5kaW5nVmVyc2lvbnNbMF0sIGNvdW50cnlGbGFnczogdHJ1ZSB9O1xuICB9XG4gIGNhbnZhc0NvbnRleHQuZm9udCA9IGAke01hdGguZmxvb3IoXG4gICAgRU1PSklfREVURUNUSU9OX0NBTlZBU19IRUlHSFQgLyAyXG4gICl9cHggJHtnZXRFbW9qaUZvbnRGYW1pbHkoKX1gO1xuICBjYW52YXNDb250ZXh0LnRleHRCYXNlbGluZSA9IFwidG9wXCI7XG4gIGNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoID0gRU1PSklfREVURUNUSU9OX0NBTlZBU19XSURUSCAqIDI7XG4gIGNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCA9IEVNT0pJX0RFVEVDVElPTl9DQU5WQVNfSEVJR0hUO1xuICBjb25zdCBzdXBwb3J0c0NvdW50cnlGbGFncyA9IGRldGVjdEVtb2ppU3VwcG9ydChcbiAgICBjYW52YXNDb250ZXh0LFxuICAgIEVNT0pJX0RFVEVDVElPTl9DT1VOVFJZX0ZMQUdcbiAgKTtcbiAgZm9yIChjb25zdCB2ZXJzaW9uIG9mIGRlc2NlbmRpbmdWZXJzaW9ucykge1xuICAgIGNvbnN0IGVtb2ppID0gdmVyc2lvbnMuZ2V0KHZlcnNpb24pO1xuICAgIGNvbnN0IGlzU3VwcG9ydGVkID0gZGV0ZWN0RW1vamlTdXBwb3J0KGNhbnZhc0NvbnRleHQsIGVtb2ppKTtcbiAgICBpZiAoaXNTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVtb2ppVmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgY291bnRyeUZsYWdzOiBzdXBwb3J0c0NvdW50cnlGbGFnc1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBlbW9qaVZlcnNpb246IGRlc2NlbmRpbmdWZXJzaW9uc1swXSxcbiAgICBjb3VudHJ5RmxhZ3M6IHN1cHBvcnRzQ291bnRyeUZsYWdzXG4gIH07XG59XG5hc3luYyBmdW5jdGlvbiBnZXRFbW9qaURhdGEobG9jYWxlKSB7XG4gIGNvbnN0IGVtb2ppYmFzZUxvY2FsZSA9IGdldEVtb2ppYmFzZVN1cHBvcnRlZExvY2FsZShsb2NhbGUpO1xuICBjb25zdCBzZXNzaW9uTWV0YWRhdGEgPSBnZXRTdG9yYWdlSXRlbShcbiAgICBzZXNzaW9uU3RvcmFnZSxcbiAgICBDQUNIRV9FTU9KSV9TRVNTSU9OX01FVEFEQVRBX0tFWVxuICApO1xuICBjb25zdCBjYWNoZWREYXRhID0gZ2V0U3RvcmFnZUl0ZW0oXG4gICAgbG9jYWxTdG9yYWdlLFxuICAgIENBQ0hFX0VNT0pJX0RBVEFfS0VZKGVtb2ppYmFzZUxvY2FsZSlcbiAgKTtcbiAgbGV0IGRhdGE7XG4gIGlmIChjYWNoZWREYXRhKSB7XG4gICAgaWYgKHNlc3Npb25NZXRhZGF0YSkge1xuICAgICAgZGF0YSA9IGNhY2hlZERhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgZW1vamlzRXRhZywgbWVzc2FnZXNFdGFnIH0gPSBhd2FpdCBmZXRjaEVtb2ppYmFzZUV0YWdzKGVtb2ppYmFzZUxvY2FsZSk7XG4gICAgICBjb25zdCBjYWNoZWRNZXRhZGF0YSA9IGdldFN0b3JhZ2VJdGVtKFxuICAgICAgICBsb2NhbFN0b3JhZ2UsXG4gICAgICAgIENBQ0hFX0VNT0pJX01FVEFEQVRBX0tFWShlbW9qaWJhc2VMb2NhbGUpXG4gICAgICApO1xuICAgICAgaWYgKGNhY2hlZE1ldGFkYXRhICYmIGVtb2ppc0V0YWcgPT09IGNhY2hlZE1ldGFkYXRhLmVtb2ppc0V0YWcgJiYgbWVzc2FnZXNFdGFnID09PSBjYWNoZWRNZXRhZGF0YS5tZXNzYWdlc0V0YWcpIHtcbiAgICAgICAgZGF0YSA9IGNhY2hlZERhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gYXdhaXQgZmV0Y2hFbW9qaURhdGEoZW1vamliYXNlTG9jYWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGF0YSA9IGF3YWl0IGZldGNoRW1vamlEYXRhKGVtb2ppYmFzZUxvY2FsZSk7XG4gIH1cbiAgY29uc3QgbmV3U2Vzc2lvbk1ldGFkYXRhID0gc2Vzc2lvbk1ldGFkYXRhID8/IGdldEVtb2ppU2Vzc2lvbk1ldGFkYXRhKGRhdGEuZW1vamlzKTtcbiAgc2V0U3RvcmFnZUl0ZW0oXG4gICAgc2Vzc2lvblN0b3JhZ2UsXG4gICAgQ0FDSEVfRU1PSklfU0VTU0lPTl9NRVRBREFUQV9LRVksXG4gICAgbmV3U2Vzc2lvbk1ldGFkYXRhXG4gICk7XG4gIGNvbnN0IGZpbHRlcmVkRW1vamlzID0gZGF0YS5lbW9qaXMuZmlsdGVyKChlbW9qaSkgPT4ge1xuICAgIGNvbnN0IGlzU3VwcG9ydGVkVmVyc2lvbiA9IGVtb2ppLnZlcnNpb24gPD0gbmV3U2Vzc2lvbk1ldGFkYXRhLmVtb2ppVmVyc2lvbjtcbiAgICByZXR1cm4gZW1vamkuY291bnRyeUZsYWcgPyBpc1N1cHBvcnRlZFZlcnNpb24gJiYgbmV3U2Vzc2lvbk1ldGFkYXRhLmNvdW50cnlGbGFncyA6IGlzU3VwcG9ydGVkVmVyc2lvbjtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZW1vamlzOiBmaWx0ZXJlZEVtb2ppcyxcbiAgICBjYXRlZ29yaWVzOiBkYXRhLmNhdGVnb3JpZXMsXG4gICAgc2tpblRvbmVzOiBkYXRhLnNraW5Ub25lc1xuICB9O1xufVxuZnVuY3Rpb24gZmlsdGVyRW1vamlzKGVtb2ppcywgc2VhcmNoKSB7XG4gIGlmICghc2VhcmNoKSB7XG4gICAgcmV0dXJuIGVtb2ppcztcbiAgfVxuICBjb25zdCBzZWFyY2hUZXh0ID0gc2VhcmNoLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICByZXR1cm4gZW1vamlzLmZpbHRlcihcbiAgICAoZW1vamkpID0+IGVtb2ppLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXh0KSB8fCBlbW9qaS50YWdzPy5zb21lKCh0YWcpID0+IHRhZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQpKVxuICApO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVFbW9qaVBpY2tlckRhdGEoZW1vamlzLCBjYXRlZ29yaWVzLCBjb2x1bW5zKSB7XG4gIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICBjb25zdCByb3dzID0gW107XG4gIGNvbnN0IGluZGV4ZWRFbW9qaXMgPSBlbW9qaXMubWFwKChlbW9qaSwgaW5kZXgpID0+ICh7IC4uLmVtb2ppLCBpbmRleCB9KSk7XG4gIGNvbnN0IGNhdGVnb3JpZXNSb3dDb3VudHMgPSBbXTtcbiAgY29uc3QgY2F0ZWdvcmllc1Jvd0luZGljZXMgPSBbXTtcbiAgY29uc3QgY2F0ZWdvcmllc05hbWVzID0gW107XG4gIGNvbnN0IGNhdGVnb3JpemVkRW1vamlzID0gY2F0ZWdvcmllcy5tYXAoKGNhdGVnb3J5KSA9PiAoe1xuICAgIC4uLmNhdGVnb3J5LFxuICAgIGVtb2ppczogaW5kZXhlZEVtb2ppcy5maWx0ZXIoKGVtb2ppKSA9PiBlbW9qaS5jYXRlZ29yeSA9PT0gY2F0ZWdvcnkua2V5KVxuICB9KSkuZmlsdGVyKChjYXRlZ29yeSkgPT4gY2F0ZWdvcnkuZW1vamlzLmxlbmd0aCA+IDApO1xuICBmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIGNhdGVnb3JpemVkRW1vamlzKSB7XG4gICAgY29uc3QgY2F0ZWdvcnlSb3dzID0gY2h1bmsoY2F0ZWdvcnkuZW1vamlzLCBjb2x1bW5zKTtcbiAgICBjb25zdCBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggKyBjYXRlZ29yeVJvd3MubGVuZ3RoO1xuICAgIHJvd3MucHVzaCguLi5jYXRlZ29yeVJvd3MpO1xuICAgIGNhdGVnb3JpZXNOYW1lcy5wdXNoKGNhdGVnb3J5Lm5hbWUpO1xuICAgIGNhdGVnb3JpZXNSb3dDb3VudHMucHVzaChjYXRlZ29yeVJvd3MubGVuZ3RoKTtcbiAgICBjYXRlZ29yaWVzUm93SW5kaWNlcy5wdXNoKFxuICAgICAgZ2VuZXJhdGVSYW5nZUluZGljZXMoY3VycmVudEluZGV4LCBuZXh0SW5kZXggLSAxKVxuICAgICk7XG4gICAgY3VycmVudEluZGV4ID0gbmV4dEluZGV4O1xuICB9XG4gIHJldHVybiB7XG4gICAgY291bnQ6IGVtb2ppcy5sZW5ndGgsXG4gICAgcm93cyxcbiAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzTmFtZXMsXG4gICAgY2F0ZWdvcmllc1Jvd0NvdW50cyxcbiAgICBjYXRlZ29yaWVzUm93SW5kaWNlc1xuICB9O1xufVxuXG5leHBvcnQgeyBmaWx0ZXJFbW9qaXMsIGdlbmVyYXRlRW1vamlQaWNrZXJEYXRhLCBnZXRFbW9qaURhdGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJFTU9KSV9GT05UX0ZBTUlMWSIsImNhcGl0YWxpemUiLCJjaHVuayIsIkVNT0pJQkFTRV9WRVJTSU9OIiwiRU1PSklCQVNFX0NETl9VUkwiLCJFTU9KSUJBU0VfRU1PSklTX1VSTCIsImxvY2FsZSIsIkVNT0pJQkFTRV9NRVNTQUdFU19VUkwiLCJFTU9KSUJBU0VfTE9DQUxFUyIsIkVNT0pJQkFTRV9ERUZBVUxUX0xPQ0FMRSIsIkNBQ0hFX0VNT0pJX0RBVEFfS0VZIiwiQ0FDSEVfRU1PSklfTUVUQURBVEFfS0VZIiwiQ0FDSEVfRU1PSklfU0VTU0lPTl9NRVRBREFUQV9LRVkiLCJFTU9KSV9ERVRFQ1RJT05fQ0FOVkFTX1dJRFRIIiwiRU1PSklfREVURUNUSU9OX0NBTlZBU19IRUlHSFQiLCJFTU9KSV9ERVRFQ1RJT05fQ09VTlRSWV9GTEFHIiwiZ2VuZXJhdGVSYW5nZUluZGljZXMiLCJzdGFydCIsImVuZCIsInJhbmdlIiwiaSIsInB1c2giLCJnZXRTdG9yYWdlSXRlbSIsInN0b3JhZ2UiLCJrZXkiLCJpdGVtIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInNldFN0b3JhZ2VJdGVtIiwidmFsdWUiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZmV0Y2hFdGFnIiwidXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJnZXQiLCJlcnJvciIsImdldEVtb2ppYmFzZVN1cHBvcnRlZExvY2FsZSIsImluY2x1ZGVzIiwiZmV0Y2hFbW9qaWJhc2VEYXRhIiwiZW1vamlzIiwiZW1vamlzRXRhZyIsIm1lc3NhZ2VzIiwibWVzc2FnZXNFdGFnIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJqc29uIiwiZmV0Y2hFbW9qaWJhc2VFdGFncyIsImZldGNoRW1vamlEYXRhIiwiY291bnRyeUZsYWdzU3ViZ3JvdXAiLCJzdWJncm91cHMiLCJmaW5kIiwic3ViZ3JvdXAiLCJmaWx0ZXJlZEdyb3VwcyIsImdyb3VwcyIsImZpbHRlciIsImdyb3VwIiwiZmlsdGVyZWRFbW9qaXMiLCJlbW9qaSIsImNhdGVnb3JpZXMiLCJtYXAiLCJvcmRlciIsIm5hbWUiLCJtZXNzYWdlIiwic2tpblRvbmVzIiwic2tpblRvbmUiLCJjb21wYWN0RW1vamlzIiwiY29tcGFjdEVtb2ppIiwiY2F0ZWdvcnkiLCJ2ZXJzaW9uIiwibGFiZWwiLCJ0YWdzIiwiY291bnRyeUZsYWciLCJlbW9qaURhdGEiLCJsb2NhbFN0b3JhZ2UiLCJkZXRlY3RFbW9qaVN1cHBvcnQiLCJjYW52YXNDb250ZXh0IiwiY2xlYXJSZWN0IiwiZmlsbFN0eWxlIiwiZmlsbFRleHQiLCJwaXhlbHMiLCJnZXRJbWFnZURhdGEiLCJkYXRhIiwicGl4ZWxDb3VudCIsImxlbmd0aCIsIngiLCJ5IiwiTWF0aCIsImZsb29yIiwicGl4ZWwiLCJtZWFzdXJlVGV4dCIsIndpZHRoIiwiZ2V0RW1vamlGb250RmFtaWx5IiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiZGlzcGxheSIsImRhdGFzZXQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjb21wdXRlZEZvbnRGYW1pbHkiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udEZhbWlseSIsInJlbW92ZUNoaWxkIiwiZ2V0RW1vamlTZXNzaW9uTWV0YWRhdGEiLCJ2ZXJzaW9ucyIsIk1hcCIsImhhcyIsInNldCIsImRlc2NlbmRpbmdWZXJzaW9ucyIsImtleXMiLCJzb3J0IiwiYSIsImIiLCJnZXRDb250ZXh0Iiwid2lsbFJlYWRGcmVxdWVudGx5IiwiZW1vamlWZXJzaW9uIiwiY291bnRyeUZsYWdzIiwiZm9udCIsInRleHRCYXNlbGluZSIsImNhbnZhcyIsImhlaWdodCIsInN1cHBvcnRzQ291bnRyeUZsYWdzIiwiaXNTdXBwb3J0ZWQiLCJnZXRFbW9qaURhdGEiLCJlbW9qaWJhc2VMb2NhbGUiLCJzZXNzaW9uTWV0YWRhdGEiLCJzZXNzaW9uU3RvcmFnZSIsImNhY2hlZERhdGEiLCJjYWNoZWRNZXRhZGF0YSIsIm5ld1Nlc3Npb25NZXRhZGF0YSIsImlzU3VwcG9ydGVkVmVyc2lvbiIsImZpbHRlckVtb2ppcyIsInNlYXJjaCIsInNlYXJjaFRleHQiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJzb21lIiwidGFnIiwiZ2VuZXJhdGVFbW9qaVBpY2tlckRhdGEiLCJjb2x1bW5zIiwiY3VycmVudEluZGV4Iiwicm93cyIsImluZGV4ZWRFbW9qaXMiLCJpbmRleCIsImNhdGVnb3JpZXNSb3dDb3VudHMiLCJjYXRlZ29yaWVzUm93SW5kaWNlcyIsImNhdGVnb3JpZXNOYW1lcyIsImNhdGVnb3JpemVkRW1vamlzIiwiY2F0ZWdvcnlSb3dzIiwibmV4dEluZGV4IiwiY291bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/EmojiPicker/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Timestamp.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/Timestamp.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Timestamp: () => (/* binding */ Timestamp)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/capitalize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/capitalize.mjs\");\n/* harmony import */ var _utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/intl.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/intl.mjs\");\n/* harmony import */ var _utils_use_interval_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/use-interval.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-interval.mjs\");\n/* harmony import */ var _utils_use_rerender_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/use-rerender.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-rerender.mjs\");\n/* __next_internal_client_entry_do_not_use__ Timestamp auto */ \n\n\n\n\n\nconst DYNAMIC_DATE_THRESHOLD = 3 * 24 * 60 * 60 * 1e3;\nconst RENDER_INTERVAL = 30 * 1e3;\nconst TIMESTAMP_NAME = \"Timestamp\";\nconst relativeUnits = {\n    seconds: 60,\n    minutes: 60,\n    hours: 24,\n    days: 7,\n    weeks: 4.34524,\n    months: 12\n};\nfunction formatVerboseDate(date, locale) {\n    const formatter = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.dateTimeFormat)(locale, {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\"\n    });\n    return (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__.capitalize)(formatter.format(date));\n}\nfunction formatShortDate(date, locale) {\n    const formatter = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.dateTimeFormat)(locale, {\n        month: \"short\",\n        day: \"numeric\"\n    });\n    return (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__.capitalize)(formatter.format(date));\n}\nconst localesWithBrokenNarrowRelativeFormatting = [\n    \"br\",\n    \"fr\",\n    \"nb\",\n    \"nn\",\n    \"no\",\n    \"ro\",\n    \"sv\"\n];\nfunction formatRelativeDate(date, locale) {\n    let resolvedLocale;\n    if (locale) {\n        resolvedLocale = locale;\n    } else {\n        const formatter2 = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.relativeTimeFormat)();\n        resolvedLocale = formatter2.resolvedOptions().locale;\n    }\n    const isBrokenWhenNarrow = localesWithBrokenNarrowRelativeFormatting.some((locale2)=>resolvedLocale === locale2 || resolvedLocale.startsWith(`${locale2}-`));\n    const formatter = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.relativeTimeFormat)(resolvedLocale, {\n        style: isBrokenWhenNarrow ? \"short\" : \"narrow\",\n        numeric: \"auto\"\n    });\n    let difference = (date.getTime() - Date.now()) / 1e3;\n    if (difference > -relativeUnits.seconds && difference < relativeUnits.seconds) {\n        return formatter.format(0, \"seconds\");\n    }\n    for (const [unit, length] of Object.entries(relativeUnits)){\n        if (Math.abs(difference) < length) {\n            return formatter.format(Math.round(difference), unit);\n        }\n        difference /= length;\n    }\n    return (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__.capitalize)(formatter.format(Math.round(difference), \"years\"));\n}\nfunction formatDynamicDate(date, locale) {\n    return date.getTime() > Date.now() - DYNAMIC_DATE_THRESHOLD ? formatRelativeDate(date, locale) : formatShortDate(date, locale);\n}\nconst Timestamp = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ date, locale, children: renderChildren = formatDynamicDate, title: renderTitle = formatVerboseDate, dateTime, interval = RENDER_INTERVAL, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__.Slot : \"time\";\n    const [rerender, key] = (0,_utils_use_rerender_mjs__WEBPACK_IMPORTED_MODULE_4__.useRerender)();\n    const parsedDate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new Date(date), [\n        date\n    ]);\n    const normalizedDate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>parsedDate.toISOString(), [\n        parsedDate\n    ]);\n    const title = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof renderTitle === \"function\" ? renderTitle(parsedDate, locale) : renderTitle, [\n        renderTitle,\n        parsedDate,\n        key\n    ]);\n    const children = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof renderChildren === \"function\" ? renderChildren(parsedDate, locale) : renderChildren, [\n        renderChildren,\n        parsedDate,\n        key\n    ]);\n    (0,_utils_use_interval_mjs__WEBPACK_IMPORTED_MODULE_5__.useInterval)(rerender, interval);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef,\n        dateTime: dateTime ?? normalizedDate,\n        title\n    }, children);\n});\nif (true) {\n    Timestamp.displayName = TIMESTAMP_NAME;\n}\n //# sourceMappingURL=Timestamp.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/Timestamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/internal/Emoji.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/primitives/internal/Emoji.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emoji: () => (/* binding */ Emoji)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/constants.mjs\");\n\n\n\nconst Emoji = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ emoji, style, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"span\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        role: \"img\",\n        \"aria-label\": emoji,\n        \"data-emoji\": emoji,\n        style: {\n            ...style,\n            fontFamily: _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.EMOJI_FONT_FAMILY,\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            width: \"1em\",\n            whiteSpace: \"nowrap\"\n        },\n        ...props,\n        ref: forwardedRef\n    }, emoji);\n});\n //# sourceMappingURL=Emoji.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9wcmltaXRpdmVzL2ludGVybmFsL0Vtb2ppLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ087QUFDSztBQUV4RCxNQUFNSSxzQkFBUUYsaURBQVVBLENBQ3RCLENBQUMsRUFBRUcsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRSxHQUFHQyxPQUFPLEVBQUVDO0lBQ3BDLE1BQU1DLFlBQVlILFVBQVVQLHNEQUFJQSxHQUFHO0lBQ25DLE9BQU8sYUFBYSxpQkFBR0MsZ0RBQTRCLENBQUNTLFdBQVc7UUFDN0RFLE1BQU07UUFDTixjQUFjUDtRQUNkLGNBQWNBO1FBQ2RDLE9BQU87WUFDTCxHQUFHQSxLQUFLO1lBQ1JPLFlBQVlWLDZEQUFpQkE7WUFDN0JXLFNBQVM7WUFDVEMsWUFBWTtZQUNaQyxnQkFBZ0I7WUFDaEJDLE9BQU87WUFDUEMsWUFBWTtRQUNkO1FBQ0EsR0FBR1YsS0FBSztRQUNSVyxLQUFLVjtJQUNQLEdBQUdKO0FBQ0w7QUFHZSxDQUNqQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3ByaW1pdGl2ZXMvaW50ZXJuYWwvRW1vamkubWpzPzdmNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2xvdCB9IGZyb20gJ0ByYWRpeC11aS9yZWFjdC1zbG90JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRU1PSklfRk9OVF9GQU1JTFkgfSBmcm9tICcuLi8uLi9jb25zdGFudHMubWpzJztcblxuY29uc3QgRW1vamkgPSBmb3J3YXJkUmVmKFxuICAoeyBlbW9qaSwgc3R5bGUsIGFzQ2hpbGQsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGFzQ2hpbGQgPyBTbG90IDogXCJzcGFuXCI7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgcm9sZTogXCJpbWdcIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBlbW9qaSxcbiAgICAgIFwiZGF0YS1lbW9qaVwiOiBlbW9qaSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICBmb250RmFtaWx5OiBFTU9KSV9GT05UX0ZBTUlMWSxcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtZmxleFwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgd2lkdGg6IFwiMWVtXCIsXG4gICAgICAgIHdoaXRlU3BhY2U6IFwibm93cmFwXCJcbiAgICAgIH0sXG4gICAgICAuLi5wcm9wcyxcbiAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgfSwgZW1vamkpO1xuICB9XG4pO1xuXG5leHBvcnQgeyBFbW9qaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlNsb3QiLCJSZWFjdF9fZGVmYXVsdCIsImZvcndhcmRSZWYiLCJFTU9KSV9GT05UX0ZBTUlMWSIsIkVtb2ppIiwiZW1vamkiLCJzdHlsZSIsImFzQ2hpbGQiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsIkNvbXBvbmVudCIsImNyZWF0ZUVsZW1lbnQiLCJyb2xlIiwiZm9udEZhbWlseSIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJ3aWR0aCIsIndoaXRlU3BhY2UiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/primitives/internal/Emoji.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-formatting.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-formatting.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withAutoFormatting: () => (/* binding */ withAutoFormatting)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/get-character.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-character.mjs\");\n/* harmony import */ var _utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/get-match-range.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-match-range.mjs\");\n/* harmony import */ var _utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/is-empty-string.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty-string.mjs\");\n/* harmony import */ var _utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/is-selection-collapsed.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-selection-collapsed.mjs\");\n\n\n\n\n\nconst formatters = [\n    {\n        type: \"mark\",\n        mark: \"bold\",\n        character: \"*\"\n    },\n    {\n        type: \"mark\",\n        mark: \"italic\",\n        character: \"_\"\n    },\n    {\n        type: \"mark\",\n        mark: \"strikethrough\",\n        character: \"~\"\n    },\n    {\n        type: \"mark\",\n        mark: \"code\",\n        character: \"`\"\n    }\n];\nconst markFormattingCharacters = formatters.filter((formatter)=>formatter.type === \"mark\").map((formatter)=>formatter.character);\nfunction formatMark(editor, text, formatter) {\n    if (text !== formatter.character) {\n        return false;\n    }\n    const match = (0,_utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_0__.getMatchRange)(editor, editor.selection, [\n        formatter.character\n    ]);\n    if (!match || slate__WEBPACK_IMPORTED_MODULE_1__.Range.isCollapsed(match)) {\n        return false;\n    }\n    const formattingCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, match);\n    if (!formattingCharacter || formattingCharacter.text !== formatter.character) {\n        return false;\n    }\n    const beforeCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, formattingCharacter.range);\n    if (beforeCharacter && !markFormattingCharacters.includes(beforeCharacter.text) && !(0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_3__.isEmptyString)(beforeCharacter.text)) {\n        return false;\n    }\n    const matchText = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.string(editor, match);\n    if (matchText.trim() !== matchText) {\n        return false;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.select(editor, match);\n    editor.addMark(formatter.mark, true);\n    slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.collapse(editor, {\n        edge: \"end\"\n    });\n    editor.removeMark(formatter.mark);\n    slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.delete(editor, {\n        at: formattingCharacter.range\n    });\n    return true;\n}\nfunction withAutoFormatting(editor) {\n    const { insertText } = editor;\n    editor.insertText = (text, options)=>{\n        if (!(0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_4__.isSelectionCollapsed)(editor.selection)) {\n            return insertText(text, options);\n        }\n        let shouldInsertText = true;\n        for (const formatter of formatters){\n            if (formatter.type === \"mark\") {\n                if (formatMark(editor, text, formatter)) {\n                    shouldInsertText = false;\n                }\n            }\n        }\n        if (shouldInsertText) {\n            insertText(text, options);\n        }\n    };\n    return editor;\n}\n //# sourceMappingURL=auto-formatting.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS9wbHVnaW5zL2F1dG8tZm9ybWF0dGluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtEO0FBQ2M7QUFDSDtBQUNBO0FBQ2M7QUFFM0UsTUFBTU8sYUFBYTtJQUNqQjtRQUNFQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsV0FBVztJQUNiO0lBQ0E7UUFDRUYsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFdBQVc7SUFDYjtJQUNBO1FBQ0VGLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxXQUFXO0lBQ2I7SUFDQTtRQUNFRixNQUFNO1FBQ05DLE1BQU07UUFDTkMsV0FBVztJQUNiO0NBQ0Q7QUFDRCxNQUFNQywyQkFBMkJKLFdBQVdLLE1BQU0sQ0FBQyxDQUFDQyxZQUFjQSxVQUFVTCxJQUFJLEtBQUssUUFBUU0sR0FBRyxDQUFDLENBQUNELFlBQWNBLFVBQVVILFNBQVM7QUFDbkksU0FBU0ssV0FBV0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVKLFNBQVM7SUFDekMsSUFBSUksU0FBU0osVUFBVUgsU0FBUyxFQUFFO1FBQ2hDLE9BQU87SUFDVDtJQUNBLE1BQU1RLFFBQVFkLHlFQUFhQSxDQUFDWSxRQUFRQSxPQUFPRyxTQUFTLEVBQUU7UUFBQ04sVUFBVUgsU0FBUztLQUFDO0lBQzNFLElBQUksQ0FBQ1EsU0FBU2xCLHdDQUFLQSxDQUFDb0IsV0FBVyxDQUFDRixRQUFRO1FBQ3RDLE9BQU87SUFDVDtJQUNBLE1BQU1HLHNCQUFzQmxCLDRFQUFrQkEsQ0FBQ2EsUUFBUUU7SUFDdkQsSUFBSSxDQUFDRyx1QkFBdUJBLG9CQUFvQkosSUFBSSxLQUFLSixVQUFVSCxTQUFTLEVBQUU7UUFDNUUsT0FBTztJQUNUO0lBQ0EsTUFBTVksa0JBQWtCbkIsNEVBQWtCQSxDQUFDYSxRQUFRSyxvQkFBb0JFLEtBQUs7SUFDNUUsSUFBSUQsbUJBQW1CLENBQUNYLHlCQUF5QmEsUUFBUSxDQUFDRixnQkFBZ0JMLElBQUksS0FBSyxDQUFDWix5RUFBYUEsQ0FBQ2lCLGdCQUFnQkwsSUFBSSxHQUFHO1FBQ3ZILE9BQU87SUFDVDtJQUNBLE1BQU1RLFlBQVl4Qix5Q0FBTUEsQ0FBQ3lCLE1BQU0sQ0FBQ1YsUUFBUUU7SUFDeEMsSUFBSU8sVUFBVUUsSUFBSSxPQUFPRixXQUFXO1FBQ2xDLE9BQU87SUFDVDtJQUNBdkIsNkNBQVVBLENBQUMwQixNQUFNLENBQUNaLFFBQVFFO0lBQzFCRixPQUFPYSxPQUFPLENBQUNoQixVQUFVSixJQUFJLEVBQUU7SUFDL0JQLDZDQUFVQSxDQUFDNEIsUUFBUSxDQUFDZCxRQUFRO1FBQUVlLE1BQU07SUFBTTtJQUMxQ2YsT0FBT2dCLFVBQVUsQ0FBQ25CLFVBQVVKLElBQUk7SUFDaENQLDZDQUFVQSxDQUFDK0IsTUFBTSxDQUFDakIsUUFBUTtRQUN4QmtCLElBQUliLG9CQUFvQkUsS0FBSztJQUMvQjtJQUNBLE9BQU87QUFDVDtBQUNBLFNBQVNZLG1CQUFtQm5CLE1BQU07SUFDaEMsTUFBTSxFQUFFb0IsVUFBVSxFQUFFLEdBQUdwQjtJQUN2QkEsT0FBT29CLFVBQVUsR0FBRyxDQUFDbkIsTUFBTW9CO1FBQ3pCLElBQUksQ0FBQy9CLHVGQUFvQkEsQ0FBQ1UsT0FBT0csU0FBUyxHQUFHO1lBQzNDLE9BQU9pQixXQUFXbkIsTUFBTW9CO1FBQzFCO1FBQ0EsSUFBSUMsbUJBQW1CO1FBQ3ZCLEtBQUssTUFBTXpCLGFBQWFOLFdBQVk7WUFDbEMsSUFBSU0sVUFBVUwsSUFBSSxLQUFLLFFBQVE7Z0JBQzdCLElBQUlPLFdBQVdDLFFBQVFDLE1BQU1KLFlBQVk7b0JBQ3ZDeUIsbUJBQW1CO2dCQUNyQjtZQUNGO1FBQ0Y7UUFDQSxJQUFJQSxrQkFBa0I7WUFDcEJGLFdBQVduQixNQUFNb0I7UUFDbkI7SUFDRjtJQUNBLE9BQU9yQjtBQUNUO0FBRThCLENBQzlCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3Qvc2xhdGUvcGx1Z2lucy9hdXRvLWZvcm1hdHRpbmcubWpzP2Q1YzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmFuZ2UsIEVkaXRvciwgVHJhbnNmb3JtcyB9IGZyb20gJ3NsYXRlJztcbmltcG9ydCB7IGdldENoYXJhY3RlckJlZm9yZSB9IGZyb20gJy4uL3V0aWxzL2dldC1jaGFyYWN0ZXIubWpzJztcbmltcG9ydCB7IGdldE1hdGNoUmFuZ2UgfSBmcm9tICcuLi91dGlscy9nZXQtbWF0Y2gtcmFuZ2UubWpzJztcbmltcG9ydCB7IGlzRW1wdHlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9pcy1lbXB0eS1zdHJpbmcubWpzJztcbmltcG9ydCB7IGlzU2VsZWN0aW9uQ29sbGFwc2VkIH0gZnJvbSAnLi4vdXRpbHMvaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5tanMnO1xuXG5jb25zdCBmb3JtYXR0ZXJzID0gW1xuICB7XG4gICAgdHlwZTogXCJtYXJrXCIsXG4gICAgbWFyazogXCJib2xkXCIsXG4gICAgY2hhcmFjdGVyOiBcIipcIlxuICB9LFxuICB7XG4gICAgdHlwZTogXCJtYXJrXCIsXG4gICAgbWFyazogXCJpdGFsaWNcIixcbiAgICBjaGFyYWN0ZXI6IFwiX1wiXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBcIm1hcmtcIixcbiAgICBtYXJrOiBcInN0cmlrZXRocm91Z2hcIixcbiAgICBjaGFyYWN0ZXI6IFwiflwiXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBcIm1hcmtcIixcbiAgICBtYXJrOiBcImNvZGVcIixcbiAgICBjaGFyYWN0ZXI6IFwiYFwiXG4gIH1cbl07XG5jb25zdCBtYXJrRm9ybWF0dGluZ0NoYXJhY3RlcnMgPSBmb3JtYXR0ZXJzLmZpbHRlcigoZm9ybWF0dGVyKSA9PiBmb3JtYXR0ZXIudHlwZSA9PT0gXCJtYXJrXCIpLm1hcCgoZm9ybWF0dGVyKSA9PiBmb3JtYXR0ZXIuY2hhcmFjdGVyKTtcbmZ1bmN0aW9uIGZvcm1hdE1hcmsoZWRpdG9yLCB0ZXh0LCBmb3JtYXR0ZXIpIHtcbiAgaWYgKHRleHQgIT09IGZvcm1hdHRlci5jaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWF0Y2ggPSBnZXRNYXRjaFJhbmdlKGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbiwgW2Zvcm1hdHRlci5jaGFyYWN0ZXJdKTtcbiAgaWYgKCFtYXRjaCB8fCBSYW5nZS5pc0NvbGxhcHNlZChtYXRjaCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgZm9ybWF0dGluZ0NoYXJhY3RlciA9IGdldENoYXJhY3RlckJlZm9yZShlZGl0b3IsIG1hdGNoKTtcbiAgaWYgKCFmb3JtYXR0aW5nQ2hhcmFjdGVyIHx8IGZvcm1hdHRpbmdDaGFyYWN0ZXIudGV4dCAhPT0gZm9ybWF0dGVyLmNoYXJhY3Rlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBiZWZvcmVDaGFyYWN0ZXIgPSBnZXRDaGFyYWN0ZXJCZWZvcmUoZWRpdG9yLCBmb3JtYXR0aW5nQ2hhcmFjdGVyLnJhbmdlKTtcbiAgaWYgKGJlZm9yZUNoYXJhY3RlciAmJiAhbWFya0Zvcm1hdHRpbmdDaGFyYWN0ZXJzLmluY2x1ZGVzKGJlZm9yZUNoYXJhY3Rlci50ZXh0KSAmJiAhaXNFbXB0eVN0cmluZyhiZWZvcmVDaGFyYWN0ZXIudGV4dCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWF0Y2hUZXh0ID0gRWRpdG9yLnN0cmluZyhlZGl0b3IsIG1hdGNoKTtcbiAgaWYgKG1hdGNoVGV4dC50cmltKCkgIT09IG1hdGNoVGV4dCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIG1hdGNoKTtcbiAgZWRpdG9yLmFkZE1hcmsoZm9ybWF0dGVyLm1hcmssIHRydWUpO1xuICBUcmFuc2Zvcm1zLmNvbGxhcHNlKGVkaXRvciwgeyBlZGdlOiBcImVuZFwiIH0pO1xuICBlZGl0b3IucmVtb3ZlTWFyayhmb3JtYXR0ZXIubWFyayk7XG4gIFRyYW5zZm9ybXMuZGVsZXRlKGVkaXRvciwge1xuICAgIGF0OiBmb3JtYXR0aW5nQ2hhcmFjdGVyLnJhbmdlXG4gIH0pO1xuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHdpdGhBdXRvRm9ybWF0dGluZyhlZGl0b3IpIHtcbiAgY29uc3QgeyBpbnNlcnRUZXh0IH0gPSBlZGl0b3I7XG4gIGVkaXRvci5pbnNlcnRUZXh0ID0gKHRleHQsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIWlzU2VsZWN0aW9uQ29sbGFwc2VkKGVkaXRvci5zZWxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gaW5zZXJ0VGV4dCh0ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGV0IHNob3VsZEluc2VydFRleHQgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgZm9ybWF0dGVyIG9mIGZvcm1hdHRlcnMpIHtcbiAgICAgIGlmIChmb3JtYXR0ZXIudHlwZSA9PT0gXCJtYXJrXCIpIHtcbiAgICAgICAgaWYgKGZvcm1hdE1hcmsoZWRpdG9yLCB0ZXh0LCBmb3JtYXR0ZXIpKSB7XG4gICAgICAgICAgc2hvdWxkSW5zZXJ0VGV4dCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzaG91bGRJbnNlcnRUZXh0KSB7XG4gICAgICBpbnNlcnRUZXh0KHRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGVkaXRvcjtcbn1cblxuZXhwb3J0IHsgd2l0aEF1dG9Gb3JtYXR0aW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRvLWZvcm1hdHRpbmcubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJhbmdlIiwiRWRpdG9yIiwiVHJhbnNmb3JtcyIsImdldENoYXJhY3RlckJlZm9yZSIsImdldE1hdGNoUmFuZ2UiLCJpc0VtcHR5U3RyaW5nIiwiaXNTZWxlY3Rpb25Db2xsYXBzZWQiLCJmb3JtYXR0ZXJzIiwidHlwZSIsIm1hcmsiLCJjaGFyYWN0ZXIiLCJtYXJrRm9ybWF0dGluZ0NoYXJhY3RlcnMiLCJmaWx0ZXIiLCJmb3JtYXR0ZXIiLCJtYXAiLCJmb3JtYXRNYXJrIiwiZWRpdG9yIiwidGV4dCIsIm1hdGNoIiwic2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJmb3JtYXR0aW5nQ2hhcmFjdGVyIiwiYmVmb3JlQ2hhcmFjdGVyIiwicmFuZ2UiLCJpbmNsdWRlcyIsIm1hdGNoVGV4dCIsInN0cmluZyIsInRyaW0iLCJzZWxlY3QiLCJhZGRNYXJrIiwiY29sbGFwc2UiLCJlZGdlIiwicmVtb3ZlTWFyayIsImRlbGV0ZSIsImF0Iiwid2l0aEF1dG9Gb3JtYXR0aW5nIiwiaW5zZXJ0VGV4dCIsIm9wdGlvbnMiLCJzaG91bGRJbnNlcnRUZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-formatting.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-links.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-links.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isComposerBodyAutoLink: () => (/* binding */ isComposerBodyAutoLink),\n/* harmony export */   withAutoLinks: () => (/* binding */ withAutoLinks)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\nfunction withAutoLinks(editor) {\n    const { isInline, normalizeNode, deleteBackward } = editor;\n    editor.isInline = (element)=>{\n        return element.type === \"auto-link\" ? true : isInline(element);\n    };\n    editor.normalizeNode = (entry)=>{\n        const [node, path] = entry;\n        if (slate__WEBPACK_IMPORTED_MODULE_0__.Text.isText(node)) {\n            const parentNode = slate__WEBPACK_IMPORTED_MODULE_0__.Node.parent(editor, path);\n            if (isComposerBodyAutoLink(parentNode)) {\n                const parentPath = slate__WEBPACK_IMPORTED_MODULE_0__.Path.parent(path);\n                handleLinkEdit(editor, [\n                    parentNode,\n                    parentPath\n                ]);\n            } else {\n                handleLinkCreate(editor, [\n                    node,\n                    path\n                ]);\n                handleNeighbours(editor, [\n                    node,\n                    path\n                ]);\n            }\n        }\n        normalizeNode(entry);\n    };\n    editor.deleteBackward = (unit)=>{\n        deleteBackward(unit);\n        const { selection } = editor;\n        if (!selection) return;\n        if (!slate__WEBPACK_IMPORTED_MODULE_0__.Range.isCollapsed(selection)) return;\n        const [match] = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.nodes(editor, {\n            at: selection,\n            match: isComposerBodyAutoLink,\n            mode: \"lowest\"\n        });\n        if (!match) return;\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n            match: isComposerBodyAutoLink\n        });\n    };\n    return editor;\n}\nfunction isComposerBodyAutoLink(node) {\n    return slate__WEBPACK_IMPORTED_MODULE_0__.Element.isElement(node) && node.type === \"auto-link\";\n}\nconst URL_REGEX = /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9().@:%_+~#?&//=]*)/;\nconst PUNCTUATION_OR_SPACE = /[.,;!?\\s]/;\nconst PERIOD_OR_QUESTION_MARK_FOLLOWED_BY_ALPHANUMERIC = /^[.?][a-zA-Z0-9]+/;\nfunction isSeparator(char) {\n    return PUNCTUATION_OR_SPACE.test(char);\n}\nfunction endsWithSeparator(textContent) {\n    return isSeparator(textContent[textContent.length - 1]);\n}\nfunction startsWithSeparator(textContent) {\n    return isSeparator(textContent[0]);\n}\nfunction endsWithPeriodOrQuestionMark(textContent) {\n    return textContent[textContent.length - 1] === \".\" || textContent[textContent.length - 1] === \"?\";\n}\nfunction isPreviousNodeValid(editor, path) {\n    const entry = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.previous(editor, {\n        at: path\n    });\n    if (!entry) return true;\n    return slate__WEBPACK_IMPORTED_MODULE_0__.Text.isText(entry[0]) && (endsWithSeparator(entry[0].text) || entry[0].text === \"\");\n}\nfunction isNextNodeValid(editor, path) {\n    const entry = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.next(editor, {\n        at: path\n    });\n    if (!entry) return true;\n    return slate__WEBPACK_IMPORTED_MODULE_0__.Text.isText(entry[0]) && (startsWithSeparator(entry[0].text) || entry[0].text === \"\");\n}\nfunction isContentAroundValid(editor, entry, start, end) {\n    const [node, path] = entry;\n    const text = node.text;\n    const contentBeforeIsValid = start > 0 ? isSeparator(text[start - 1]) : isPreviousNodeValid(editor, path);\n    const contentAfterIsValid = end < text.length ? isSeparator(text[end]) : isNextNodeValid(editor, path);\n    return contentBeforeIsValid && contentAfterIsValid;\n}\nconst handleLinkEdit = (editor, entry)=>{\n    const [node, path] = entry;\n    const children = slate__WEBPACK_IMPORTED_MODULE_0__.Node.children(editor, path);\n    for (const [child] of children){\n        if (slate__WEBPACK_IMPORTED_MODULE_0__.Text.isText(child)) continue;\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        return;\n    }\n    const text = slate__WEBPACK_IMPORTED_MODULE_0__.Node.string(node);\n    const match = URL_REGEX.exec(text);\n    if (!match || match[0] !== text) {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        return;\n    }\n    if (endsWithPeriodOrQuestionMark(text)) {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        const textBeforePeriod = text.slice(0, text.length - 1);\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.wrapNodes(editor, {\n            type: \"auto-link\",\n            url: textBeforePeriod,\n            children: []\n        }, {\n            at: {\n                anchor: {\n                    path,\n                    offset: 0\n                },\n                focus: {\n                    path,\n                    offset: textBeforePeriod.length\n                }\n            },\n            split: true\n        });\n        return;\n    }\n    if (!isPreviousNodeValid(editor, path) || !isNextNodeValid(editor, path)) {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n            at: path\n        });\n        return;\n    }\n    if (node.url !== text) {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.setNodes(editor, {\n            url: match[0]\n        }, {\n            at: path\n        });\n        return;\n    }\n};\nconst handleLinkCreate = (editor, entry)=>{\n    const [node, path] = entry;\n    const match = URL_REGEX.exec(node.text);\n    if (!match) return;\n    const start = match.index;\n    const end = start + match[0].length;\n    if (!isContentAroundValid(editor, entry, start, end)) return;\n    slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.wrapNodes(editor, {\n        type: \"auto-link\",\n        url: match[0],\n        children: []\n    }, {\n        at: {\n            anchor: {\n                path,\n                offset: start\n            },\n            focus: {\n                path,\n                offset: end\n            }\n        },\n        split: true\n    });\n    return;\n};\nconst handleNeighbours = (editor, entry)=>{\n    const [node, path] = entry;\n    const text = node.text;\n    const previousSibling = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.previous(editor, {\n        at: path\n    });\n    if (previousSibling && isComposerBodyAutoLink(previousSibling[0])) {\n        if (PERIOD_OR_QUESTION_MARK_FOLLOWED_BY_ALPHANUMERIC.test(text)) {\n            slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n                at: previousSibling[1]\n            });\n            slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.mergeNodes(editor, {\n                at: path\n            });\n            return;\n        }\n        if (!startsWithSeparator(text)) {\n            slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n                at: previousSibling[1]\n            });\n            return;\n        }\n    }\n    const nextSibling = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.next(editor, {\n        at: path\n    });\n    if (nextSibling && isComposerBodyAutoLink(nextSibling[0]) && !endsWithSeparator(text)) {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Transforms.unwrapNodes(editor, {\n            at: nextSibling[1]\n        });\n        return;\n    }\n};\n //# sourceMappingURL=auto-links.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/auto-links.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/empty-clear-formatting.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/plugins/empty-clear-formatting.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withEmptyClearFormatting: () => (/* binding */ withEmptyClearFormatting)\n/* harmony export */ });\n/* harmony import */ var _utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-empty.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty.mjs\");\n/* harmony import */ var _utils_marks_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/marks.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/marks.mjs\");\n\n\nfunction withEmptyClearFormatting(editor) {\n    const { onChange } = editor;\n    editor.onChange = (options)=>{\n        if ((0,_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(editor, editor.children)) {\n            (0,_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_1__.removeMarks)(editor);\n        }\n        onChange(options);\n    };\n    return editor;\n}\n //# sourceMappingURL=empty-clear-formatting.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS9wbHVnaW5zL2VtcHR5LWNsZWFyLWZvcm1hdHRpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNDO0FBRWpELFNBQVNFLHlCQUF5QkMsTUFBTTtJQUN0QyxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRDtJQUNyQkEsT0FBT0MsUUFBUSxHQUFHLENBQUNDO1FBQ2pCLElBQUlMLDREQUFPQSxDQUFDRyxRQUFRQSxPQUFPRyxRQUFRLEdBQUc7WUFDcENMLDZEQUFXQSxDQUFDRTtRQUNkO1FBQ0FDLFNBQVNDO0lBQ1g7SUFDQSxPQUFPRjtBQUNUO0FBRW9DLENBQ3BDLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3Qvc2xhdGUvcGx1Z2lucy9lbXB0eS1jbGVhci1mb3JtYXR0aW5nLm1qcz9jODA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICcuLi91dGlscy9pcy1lbXB0eS5tanMnO1xuaW1wb3J0IHsgcmVtb3ZlTWFya3MgfSBmcm9tICcuLi91dGlscy9tYXJrcy5tanMnO1xuXG5mdW5jdGlvbiB3aXRoRW1wdHlDbGVhckZvcm1hdHRpbmcoZWRpdG9yKSB7XG4gIGNvbnN0IHsgb25DaGFuZ2UgfSA9IGVkaXRvcjtcbiAgZWRpdG9yLm9uQ2hhbmdlID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAoaXNFbXB0eShlZGl0b3IsIGVkaXRvci5jaGlsZHJlbikpIHtcbiAgICAgIHJlbW92ZU1hcmtzKGVkaXRvcik7XG4gICAgfVxuICAgIG9uQ2hhbmdlKG9wdGlvbnMpO1xuICB9O1xuICByZXR1cm4gZWRpdG9yO1xufVxuXG5leHBvcnQgeyB3aXRoRW1wdHlDbGVhckZvcm1hdHRpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LWNsZWFyLWZvcm1hdHRpbmcubWpzLm1hcFxuIl0sIm5hbWVzIjpbImlzRW1wdHkiLCJyZW1vdmVNYXJrcyIsIndpdGhFbXB0eUNsZWFyRm9ybWF0dGluZyIsImVkaXRvciIsIm9uQ2hhbmdlIiwib3B0aW9ucyIsImNoaWxkcmVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/empty-clear-formatting.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MENTION_CHARACTER: () => (/* binding */ MENTION_CHARACTER),\n/* harmony export */   getMentionDraftAtSelection: () => (/* binding */ getMentionDraftAtSelection),\n/* harmony export */   insertMention: () => (/* binding */ insertMention),\n/* harmony export */   insertMentionCharacter: () => (/* binding */ insertMentionCharacter),\n/* harmony export */   isComposerBodyMention: () => (/* binding */ isComposerBodyMention),\n/* harmony export */   withMentions: () => (/* binding */ withMentions)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/get-character.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-character.mjs\");\n/* harmony import */ var _utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/get-match-range.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-match-range.mjs\");\n/* harmony import */ var _utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/is-empty-string.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty-string.mjs\");\n/* harmony import */ var _utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-selection-collapsed.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-selection-collapsed.mjs\");\n\n\n\n\n\nconst MENTION_CHARACTER = \"@\";\nfunction getMentionDraftAtSelection(editor) {\n    const { selection } = editor;\n    if (!(0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(selection)) {\n        return;\n    }\n    const match = (0,_utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_1__.getMatchRange)(editor, selection, [\n        MENTION_CHARACTER\n    ]);\n    if (!match) {\n        return;\n    }\n    const mentionCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, match);\n    if (!mentionCharacter || mentionCharacter.text !== MENTION_CHARACTER) {\n        return;\n    }\n    return {\n        range: slate__WEBPACK_IMPORTED_MODULE_3__.Editor.range(editor, mentionCharacter.range, slate__WEBPACK_IMPORTED_MODULE_3__.Range.end(match)),\n        text: slate__WEBPACK_IMPORTED_MODULE_3__.Editor.string(editor, match)\n    };\n}\nfunction isComposerBodyMention(node) {\n    return slate__WEBPACK_IMPORTED_MODULE_3__.Element.isElement(node) && node.type === \"mention\";\n}\nfunction insertMention(editor, userId) {\n    const mention = {\n        type: \"mention\",\n        id: userId,\n        children: [\n            {\n                text: \"\"\n            }\n        ]\n    };\n    slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.insertNodes(editor, mention);\n    slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.move(editor);\n    const afterCharacter = editor.selection ? (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterAfter)(editor, editor.selection) : void 0;\n    if (!afterCharacter || afterCharacter.void) {\n        slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.insertText(editor, \" \");\n    } else if ((0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyString)(afterCharacter.text)) {\n        slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.move(editor);\n    }\n}\nfunction insertMentionCharacter(editor) {\n    if (!editor.selection) {\n        return;\n    }\n    const beforeCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, editor.selection, {\n        filterVoids: true\n    });\n    const afterCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterAfter)(editor, editor.selection, {\n        filterVoids: true\n    });\n    const shouldInsertSpaceBefore = beforeCharacter && !(0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyString)(beforeCharacter.text);\n    const shouldInsertSpaceAfter = afterCharacter && !(0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyString)(afterCharacter.text);\n    if ((0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(editor.selection)) {\n        const text = (shouldInsertSpaceBefore ? \" \" : \"\") + MENTION_CHARACTER + (shouldInsertSpaceAfter ? \" \" : \"\");\n        editor.insertText(text);\n        if (shouldInsertSpaceAfter) {\n            slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.move(editor, {\n                distance: 1,\n                unit: \"character\",\n                reverse: true\n            });\n        }\n    } else {\n        const beforeText = (shouldInsertSpaceBefore ? \" \" : \"\") + MENTION_CHARACTER;\n        editor.insertText(beforeText, {\n            at: slate__WEBPACK_IMPORTED_MODULE_3__.Range.start(editor.selection)\n        });\n        if (shouldInsertSpaceAfter) {\n            editor.insertText(\" \", {\n                at: slate__WEBPACK_IMPORTED_MODULE_3__.Range.end(editor.selection)\n            });\n        }\n        slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.collapse(editor, {\n            edge: \"end\"\n        });\n    }\n}\nfunction withMentions(editor) {\n    const { isInline, isVoid, markableVoid, deleteBackward } = editor;\n    editor.isInline = (element)=>{\n        return isComposerBodyMention(element) || isInline(element);\n    };\n    editor.isVoid = (element)=>{\n        return isComposerBodyMention(element) || isVoid(element);\n    };\n    editor.markableVoid = (element)=>{\n        return isComposerBodyMention(element) || markableVoid(element);\n    };\n    editor.deleteBackward = (unit)=>{\n        const { selection } = editor;\n        if ((0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(selection)) {\n            const [mention] = slate__WEBPACK_IMPORTED_MODULE_3__.Editor.nodes(editor, {\n                at: unit === \"character\" ? slate__WEBPACK_IMPORTED_MODULE_3__.Editor.before(editor, selection, {\n                    unit: \"character\"\n                }) : selection,\n                match: isComposerBodyMention\n            });\n            deleteBackward(unit);\n            if (mention) {\n                slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.insertText(editor, MENTION_CHARACTER);\n            }\n        } else {\n            deleteBackward(unit);\n        }\n    };\n    return editor;\n}\n //# sourceMappingURL=mentions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/plugins/mentions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-character.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/get-character.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCharacterAfter: () => (/* binding */ getCharacterAfter),\n/* harmony export */   getCharacterBefore: () => (/* binding */ getCharacterBefore)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\nfunction getCharacterBefore(editor, at, options = {}) {\n    const { filterVoids } = options;\n    const before = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.before(editor, at, {\n        unit: \"character\",\n        voids: filterVoids\n    });\n    if (before) {\n        const range = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.range(editor, before, slate__WEBPACK_IMPORTED_MODULE_0__.Range.isRange(at) ? slate__WEBPACK_IMPORTED_MODULE_0__.Range.start(at) : at);\n        const text = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.string(editor, range);\n        return {\n            range,\n            text,\n            void: text.length === 0\n        };\n    }\n    return;\n}\nfunction getCharacterAfter(editor, at, options = {}) {\n    const { filterVoids } = options;\n    const after = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.after(editor, at, {\n        unit: \"character\",\n        voids: filterVoids\n    });\n    if (after) {\n        const range = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.range(editor, after, slate__WEBPACK_IMPORTED_MODULE_0__.Range.isRange(at) ? slate__WEBPACK_IMPORTED_MODULE_0__.Range.end(at) : at);\n        const text = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.string(editor, range);\n        return {\n            range,\n            text,\n            void: text.length === 0\n        };\n    }\n    return;\n}\n //# sourceMappingURL=get-character.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9nZXQtY2hhcmFjdGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFFdEMsU0FBU0UsbUJBQW1CQyxNQUFNLEVBQUVDLEVBQUUsRUFBRUMsVUFBVSxDQUFDLENBQUM7SUFDbEQsTUFBTSxFQUFFQyxXQUFXLEVBQUUsR0FBR0Q7SUFDeEIsTUFBTUUsU0FBU1AseUNBQU1BLENBQUNPLE1BQU0sQ0FBQ0osUUFBUUMsSUFBSTtRQUN2Q0ksTUFBTTtRQUNOQyxPQUFPSDtJQUNUO0lBQ0EsSUFBSUMsUUFBUTtRQUNWLE1BQU1HLFFBQVFWLHlDQUFNQSxDQUFDVSxLQUFLLENBQ3hCUCxRQUNBSSxRQUNBTix3Q0FBS0EsQ0FBQ1UsT0FBTyxDQUFDUCxNQUFNSCx3Q0FBS0EsQ0FBQ1csS0FBSyxDQUFDUixNQUFNQTtRQUV4QyxNQUFNUyxPQUFPYix5Q0FBTUEsQ0FBQ2MsTUFBTSxDQUFDWCxRQUFRTztRQUNuQyxPQUFPO1lBQ0xBO1lBQ0FHO1lBQ0FFLE1BQU1GLEtBQUtHLE1BQU0sS0FBSztRQUN4QjtJQUNGO0lBQ0E7QUFDRjtBQUNBLFNBQVNDLGtCQUFrQmQsTUFBTSxFQUFFQyxFQUFFLEVBQUVDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sRUFBRUMsV0FBVyxFQUFFLEdBQUdEO0lBQ3hCLE1BQU1hLFFBQVFsQix5Q0FBTUEsQ0FBQ2tCLEtBQUssQ0FBQ2YsUUFBUUMsSUFBSTtRQUNyQ0ksTUFBTTtRQUNOQyxPQUFPSDtJQUNUO0lBQ0EsSUFBSVksT0FBTztRQUNULE1BQU1SLFFBQVFWLHlDQUFNQSxDQUFDVSxLQUFLLENBQ3hCUCxRQUNBZSxPQUNBakIsd0NBQUtBLENBQUNVLE9BQU8sQ0FBQ1AsTUFBTUgsd0NBQUtBLENBQUNrQixHQUFHLENBQUNmLE1BQU1BO1FBRXRDLE1BQU1TLE9BQU9iLHlDQUFNQSxDQUFDYyxNQUFNLENBQUNYLFFBQVFPO1FBQ25DLE9BQU87WUFDTEE7WUFDQUc7WUFDQUUsTUFBTUYsS0FBS0csTUFBTSxLQUFLO1FBQ3hCO0lBQ0Y7SUFDQTtBQUNGO0FBRWlELENBQ2pELDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3Qvc2xhdGUvdXRpbHMvZ2V0LWNoYXJhY3Rlci5tanM/YjlkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3IsIFJhbmdlIH0gZnJvbSAnc2xhdGUnO1xuXG5mdW5jdGlvbiBnZXRDaGFyYWN0ZXJCZWZvcmUoZWRpdG9yLCBhdCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgZmlsdGVyVm9pZHMgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGJlZm9yZSA9IEVkaXRvci5iZWZvcmUoZWRpdG9yLCBhdCwge1xuICAgIHVuaXQ6IFwiY2hhcmFjdGVyXCIsXG4gICAgdm9pZHM6IGZpbHRlclZvaWRzXG4gIH0pO1xuICBpZiAoYmVmb3JlKSB7XG4gICAgY29uc3QgcmFuZ2UgPSBFZGl0b3IucmFuZ2UoXG4gICAgICBlZGl0b3IsXG4gICAgICBiZWZvcmUsXG4gICAgICBSYW5nZS5pc1JhbmdlKGF0KSA/IFJhbmdlLnN0YXJ0KGF0KSA6IGF0XG4gICAgKTtcbiAgICBjb25zdCB0ZXh0ID0gRWRpdG9yLnN0cmluZyhlZGl0b3IsIHJhbmdlKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2UsXG4gICAgICB0ZXh0LFxuICAgICAgdm9pZDogdGV4dC5sZW5ndGggPT09IDBcbiAgICB9O1xuICB9XG4gIHJldHVybjtcbn1cbmZ1bmN0aW9uIGdldENoYXJhY3RlckFmdGVyKGVkaXRvciwgYXQsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7IGZpbHRlclZvaWRzIH0gPSBvcHRpb25zO1xuICBjb25zdCBhZnRlciA9IEVkaXRvci5hZnRlcihlZGl0b3IsIGF0LCB7XG4gICAgdW5pdDogXCJjaGFyYWN0ZXJcIixcbiAgICB2b2lkczogZmlsdGVyVm9pZHNcbiAgfSk7XG4gIGlmIChhZnRlcikge1xuICAgIGNvbnN0IHJhbmdlID0gRWRpdG9yLnJhbmdlKFxuICAgICAgZWRpdG9yLFxuICAgICAgYWZ0ZXIsXG4gICAgICBSYW5nZS5pc1JhbmdlKGF0KSA/IFJhbmdlLmVuZChhdCkgOiBhdFxuICAgICk7XG4gICAgY29uc3QgdGV4dCA9IEVkaXRvci5zdHJpbmcoZWRpdG9yLCByYW5nZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJhbmdlLFxuICAgICAgdGV4dCxcbiAgICAgIHZvaWQ6IHRleHQubGVuZ3RoID09PSAwXG4gICAgfTtcbiAgfVxuICByZXR1cm47XG59XG5cbmV4cG9ydCB7IGdldENoYXJhY3RlckFmdGVyLCBnZXRDaGFyYWN0ZXJCZWZvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1jaGFyYWN0ZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkVkaXRvciIsIlJhbmdlIiwiZ2V0Q2hhcmFjdGVyQmVmb3JlIiwiZWRpdG9yIiwiYXQiLCJvcHRpb25zIiwiZmlsdGVyVm9pZHMiLCJiZWZvcmUiLCJ1bml0Iiwidm9pZHMiLCJyYW5nZSIsImlzUmFuZ2UiLCJzdGFydCIsInRleHQiLCJzdHJpbmciLCJ2b2lkIiwibGVuZ3RoIiwiZ2V0Q2hhcmFjdGVyQWZ0ZXIiLCJhZnRlciIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-character.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-dom-range.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/get-dom-range.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDOMRange: () => (/* binding */ getDOMRange)\n/* harmony export */ });\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n\nfunction getDOMRange(editor, range) {\n    try {\n        return slate_react__WEBPACK_IMPORTED_MODULE_0__.ReactEditor.toDOMRange(editor, range);\n    } catch (error) {\n        return getDOMRange(editor, {\n            anchor: range.anchor,\n            focus: range.anchor\n        });\n    }\n}\n //# sourceMappingURL=get-dom-range.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9nZXQtZG9tLXJhbmdlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUUxQyxTQUFTQyxZQUFZQyxNQUFNLEVBQUVDLEtBQUs7SUFDaEMsSUFBSTtRQUNGLE9BQU9ILG9EQUFXQSxDQUFDSSxVQUFVLENBQUNGLFFBQVFDO0lBQ3hDLEVBQUUsT0FBT0UsT0FBTztRQUNkLE9BQU9KLFlBQVlDLFFBQVE7WUFDekJJLFFBQVFILE1BQU1HLE1BQU07WUFDcEJDLE9BQU9KLE1BQU1HLE1BQU07UUFDckI7SUFDRjtBQUNGO0FBRXVCLENBQ3ZCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3Qvc2xhdGUvdXRpbHMvZ2V0LWRvbS1yYW5nZS5tanM/Y2NhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdEVkaXRvciB9IGZyb20gJ3NsYXRlLXJlYWN0JztcblxuZnVuY3Rpb24gZ2V0RE9NUmFuZ2UoZWRpdG9yLCByYW5nZSkge1xuICB0cnkge1xuICAgIHJldHVybiBSZWFjdEVkaXRvci50b0RPTVJhbmdlKGVkaXRvciwgcmFuZ2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBnZXRET01SYW5nZShlZGl0b3IsIHtcbiAgICAgIGFuY2hvcjogcmFuZ2UuYW5jaG9yLFxuICAgICAgZm9jdXM6IHJhbmdlLmFuY2hvclxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldERPTVJhbmdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtZG9tLXJhbmdlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdEVkaXRvciIsImdldERPTVJhbmdlIiwiZWRpdG9yIiwicmFuZ2UiLCJ0b0RPTVJhbmdlIiwiZXJyb3IiLCJhbmNob3IiLCJmb2N1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-dom-range.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-match-range.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/get-match-range.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMatchRange: () => (/* binding */ getMatchRange)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\nconst defaultOptions = {\n    direction: \"before\"\n};\nfunction getMatchRange(editor, at, terminators = [\n    \" \"\n], options = defaultOptions) {\n    const { include, direction } = {\n        ...defaultOptions,\n        ...options\n    };\n    let [start, end] = slate__WEBPACK_IMPORTED_MODULE_0__.Range.edges(at);\n    let point = start;\n    function move(direction2) {\n        const next = direction2 === \"after\" ? slate__WEBPACK_IMPORTED_MODULE_0__.Editor.after(editor, point, {\n            unit: \"character\"\n        }) : slate__WEBPACK_IMPORTED_MODULE_0__.Editor.before(editor, point, {\n            unit: \"character\"\n        });\n        const nextWord = next && slate__WEBPACK_IMPORTED_MODULE_0__.Editor.string(editor, direction2 === \"after\" ? {\n            anchor: point,\n            focus: next\n        } : {\n            anchor: next,\n            focus: point\n        });\n        const lastWord = nextWord && nextWord[direction2 === \"after\" ? 0 : nextWord.length - 1];\n        if (next && lastWord && !terminators.includes(lastWord)) {\n            point = next;\n            if (point.offset === 0) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n        return true;\n    }\n    if (direction !== \"before\") {\n        point = end;\n        while(move(\"after\"));\n        end = point;\n    }\n    if (direction !== \"after\") {\n        point = start;\n        while(move(\"before\"));\n        start = point;\n    }\n    if (include) {\n        return {\n            anchor: slate__WEBPACK_IMPORTED_MODULE_0__.Editor.before(editor, start, {\n                unit: \"offset\"\n            }) ?? start,\n            focus: slate__WEBPACK_IMPORTED_MODULE_0__.Editor.after(editor, end, {\n                unit: \"offset\"\n            }) ?? end\n        };\n    }\n    return {\n        anchor: start,\n        focus: end\n    };\n}\n //# sourceMappingURL=get-match-range.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9nZXQtbWF0Y2gtcmFuZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBRXRDLE1BQU1FLGlCQUFpQjtJQUNyQkMsV0FBVztBQUNiO0FBQ0EsU0FBU0MsY0FBY0MsTUFBTSxFQUFFQyxFQUFFLEVBQUVDLGNBQWM7SUFBQztDQUFJLEVBQUVDLFVBQVVOLGNBQWM7SUFDOUUsTUFBTSxFQUFFTyxPQUFPLEVBQUVOLFNBQVMsRUFBRSxHQUFHO1FBQUUsR0FBR0QsY0FBYztRQUFFLEdBQUdNLE9BQU87SUFBQztJQUMvRCxJQUFJLENBQUNFLE9BQU9DLElBQUksR0FBR1gsd0NBQUtBLENBQUNZLEtBQUssQ0FBQ047SUFDL0IsSUFBSU8sUUFBUUg7SUFDWixTQUFTSSxLQUFLQyxVQUFVO1FBQ3RCLE1BQU1DLE9BQU9ELGVBQWUsVUFBVWQseUNBQU1BLENBQUNnQixLQUFLLENBQUNaLFFBQVFRLE9BQU87WUFDaEVLLE1BQU07UUFDUixLQUFLakIseUNBQU1BLENBQUNrQixNQUFNLENBQUNkLFFBQVFRLE9BQU87WUFBRUssTUFBTTtRQUFZO1FBQ3RELE1BQU1FLFdBQVdKLFFBQVFmLHlDQUFNQSxDQUFDb0IsTUFBTSxDQUNwQ2hCLFFBQ0FVLGVBQWUsVUFBVTtZQUFFTyxRQUFRVDtZQUFPVSxPQUFPUDtRQUFLLElBQUk7WUFBRU0sUUFBUU47WUFBTU8sT0FBT1Y7UUFBTTtRQUV6RixNQUFNVyxXQUFXSixZQUFZQSxRQUFRLENBQUNMLGVBQWUsVUFBVSxJQUFJSyxTQUFTSyxNQUFNLEdBQUcsRUFBRTtRQUN2RixJQUFJVCxRQUFRUSxZQUFZLENBQUNqQixZQUFZbUIsUUFBUSxDQUFDRixXQUFXO1lBQ3ZEWCxRQUFRRztZQUNSLElBQUlILE1BQU1jLE1BQU0sS0FBSyxHQUFHO2dCQUN0QixPQUFPO1lBQ1Q7UUFDRixPQUFPO1lBQ0wsT0FBTztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBQ0EsSUFBSXhCLGNBQWMsVUFBVTtRQUMxQlUsUUFBUUY7UUFDUixNQUFPRyxLQUFLO1FBRVpILE1BQU1FO0lBQ1I7SUFDQSxJQUFJVixjQUFjLFNBQVM7UUFDekJVLFFBQVFIO1FBQ1IsTUFBT0ksS0FBSztRQUVaSixRQUFRRztJQUNWO0lBQ0EsSUFBSUosU0FBUztRQUNYLE9BQU87WUFDTGEsUUFBUXJCLHlDQUFNQSxDQUFDa0IsTUFBTSxDQUFDZCxRQUFRSyxPQUFPO2dCQUFFUSxNQUFNO1lBQVMsTUFBTVI7WUFDNURhLE9BQU90Qix5Q0FBTUEsQ0FBQ2dCLEtBQUssQ0FBQ1osUUFBUU0sS0FBSztnQkFBRU8sTUFBTTtZQUFTLE1BQU1QO1FBQzFEO0lBQ0Y7SUFDQSxPQUFPO1FBQUVXLFFBQVFaO1FBQU9hLE9BQU9aO0lBQUk7QUFDckM7QUFFeUIsQ0FDekIsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9nZXQtbWF0Y2gtcmFuZ2UubWpzP2YzOTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmFuZ2UsIEVkaXRvciB9IGZyb20gJ3NsYXRlJztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRpcmVjdGlvbjogXCJiZWZvcmVcIlxufTtcbmZ1bmN0aW9uIGdldE1hdGNoUmFuZ2UoZWRpdG9yLCBhdCwgdGVybWluYXRvcnMgPSBbXCIgXCJdLCBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnMpIHtcbiAgY29uc3QgeyBpbmNsdWRlLCBkaXJlY3Rpb24gfSA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgbGV0IFtzdGFydCwgZW5kXSA9IFJhbmdlLmVkZ2VzKGF0KTtcbiAgbGV0IHBvaW50ID0gc3RhcnQ7XG4gIGZ1bmN0aW9uIG1vdmUoZGlyZWN0aW9uMikge1xuICAgIGNvbnN0IG5leHQgPSBkaXJlY3Rpb24yID09PSBcImFmdGVyXCIgPyBFZGl0b3IuYWZ0ZXIoZWRpdG9yLCBwb2ludCwge1xuICAgICAgdW5pdDogXCJjaGFyYWN0ZXJcIlxuICAgIH0pIDogRWRpdG9yLmJlZm9yZShlZGl0b3IsIHBvaW50LCB7IHVuaXQ6IFwiY2hhcmFjdGVyXCIgfSk7XG4gICAgY29uc3QgbmV4dFdvcmQgPSBuZXh0ICYmIEVkaXRvci5zdHJpbmcoXG4gICAgICBlZGl0b3IsXG4gICAgICBkaXJlY3Rpb24yID09PSBcImFmdGVyXCIgPyB7IGFuY2hvcjogcG9pbnQsIGZvY3VzOiBuZXh0IH0gOiB7IGFuY2hvcjogbmV4dCwgZm9jdXM6IHBvaW50IH1cbiAgICApO1xuICAgIGNvbnN0IGxhc3RXb3JkID0gbmV4dFdvcmQgJiYgbmV4dFdvcmRbZGlyZWN0aW9uMiA9PT0gXCJhZnRlclwiID8gMCA6IG5leHRXb3JkLmxlbmd0aCAtIDFdO1xuICAgIGlmIChuZXh0ICYmIGxhc3RXb3JkICYmICF0ZXJtaW5hdG9ycy5pbmNsdWRlcyhsYXN0V29yZCkpIHtcbiAgICAgIHBvaW50ID0gbmV4dDtcbiAgICAgIGlmIChwb2ludC5vZmZzZXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gIT09IFwiYmVmb3JlXCIpIHtcbiAgICBwb2ludCA9IGVuZDtcbiAgICB3aGlsZSAobW92ZShcImFmdGVyXCIpKVxuICAgICAgO1xuICAgIGVuZCA9IHBvaW50O1xuICB9XG4gIGlmIChkaXJlY3Rpb24gIT09IFwiYWZ0ZXJcIikge1xuICAgIHBvaW50ID0gc3RhcnQ7XG4gICAgd2hpbGUgKG1vdmUoXCJiZWZvcmVcIikpXG4gICAgICA7XG4gICAgc3RhcnQgPSBwb2ludDtcbiAgfVxuICBpZiAoaW5jbHVkZSkge1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3I6IEVkaXRvci5iZWZvcmUoZWRpdG9yLCBzdGFydCwgeyB1bml0OiBcIm9mZnNldFwiIH0pID8/IHN0YXJ0LFxuICAgICAgZm9jdXM6IEVkaXRvci5hZnRlcihlZGl0b3IsIGVuZCwgeyB1bml0OiBcIm9mZnNldFwiIH0pID8/IGVuZFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHsgYW5jaG9yOiBzdGFydCwgZm9jdXM6IGVuZCB9O1xufVxuXG5leHBvcnQgeyBnZXRNYXRjaFJhbmdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtbWF0Y2gtcmFuZ2UubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJhbmdlIiwiRWRpdG9yIiwiZGVmYXVsdE9wdGlvbnMiLCJkaXJlY3Rpb24iLCJnZXRNYXRjaFJhbmdlIiwiZWRpdG9yIiwiYXQiLCJ0ZXJtaW5hdG9ycyIsIm9wdGlvbnMiLCJpbmNsdWRlIiwic3RhcnQiLCJlbmQiLCJlZGdlcyIsInBvaW50IiwibW92ZSIsImRpcmVjdGlvbjIiLCJuZXh0IiwiYWZ0ZXIiLCJ1bml0IiwiYmVmb3JlIiwibmV4dFdvcmQiLCJzdHJpbmciLCJhbmNob3IiLCJmb2N1cyIsImxhc3RXb3JkIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJvZmZzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-match-range.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty-string.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty-string.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEmptyString: () => (/* binding */ isEmptyString)\n/* harmony export */ });\nfunction isEmptyString(string) {\n    return !string.trim();\n}\n //# sourceMappingURL=is-empty-string.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9pcy1lbXB0eS1zdHJpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxjQUFjQyxNQUFNO0lBQzNCLE9BQU8sQ0FBQ0EsT0FBT0MsSUFBSTtBQUNyQjtBQUV5QixDQUN6Qiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3NsYXRlL3V0aWxzL2lzLWVtcHR5LXN0cmluZy5tanM/N2FlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0VtcHR5U3RyaW5nKHN0cmluZykge1xuICByZXR1cm4gIXN0cmluZy50cmltKCk7XG59XG5cbmV4cG9ydCB7IGlzRW1wdHlTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWVtcHR5LXN0cmluZy5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNFbXB0eVN0cmluZyIsInN0cmluZyIsInRyaW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty-string.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\nfunction isEmpty(editor, children) {\n    return children.length <= 1 && !slate__WEBPACK_IMPORTED_MODULE_0__.Text.isText(children[0]) && slate__WEBPACK_IMPORTED_MODULE_0__.Editor.isEmpty(editor, children[0]);\n}\n //# sourceMappingURL=is-empty.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9pcy1lbXB0eS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFFckMsU0FBU0UsUUFBUUMsTUFBTSxFQUFFQyxRQUFRO0lBQy9CLE9BQU9BLFNBQVNDLE1BQU0sSUFBSSxLQUFLLENBQUNMLHVDQUFJQSxDQUFDTSxNQUFNLENBQUNGLFFBQVEsQ0FBQyxFQUFFLEtBQUtILHlDQUFNQSxDQUFDQyxPQUFPLENBQUNDLFFBQVFDLFFBQVEsQ0FBQyxFQUFFO0FBQ2hHO0FBRW1CLENBQ25CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3Qvc2xhdGUvdXRpbHMvaXMtZW1wdHkubWpzPzE4YjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dCwgRWRpdG9yIH0gZnJvbSAnc2xhdGUnO1xuXG5mdW5jdGlvbiBpc0VtcHR5KGVkaXRvciwgY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA8PSAxICYmICFUZXh0LmlzVGV4dChjaGlsZHJlblswXSkgJiYgRWRpdG9yLmlzRW1wdHkoZWRpdG9yLCBjaGlsZHJlblswXSk7XG59XG5cbmV4cG9ydCB7IGlzRW1wdHkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWVtcHR5Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJUZXh0IiwiRWRpdG9yIiwiaXNFbXB0eSIsImVkaXRvciIsImNoaWxkcmVuIiwibGVuZ3RoIiwiaXNUZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-empty.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-selection-collapsed.mjs":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/is-selection-collapsed.mjs ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\nfunction isSelectionCollapsed(selection) {\n    return selection !== null && slate__WEBPACK_IMPORTED_MODULE_0__.Range.isCollapsed(selection);\n}\n //# sourceMappingURL=is-selection-collapsed.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9pcy1zZWxlY3Rpb24tY29sbGFwc2VkLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4QjtBQUU5QixTQUFTQyxxQkFBcUJDLFNBQVM7SUFDckMsT0FBT0EsY0FBYyxRQUFRRix3Q0FBS0EsQ0FBQ0csV0FBVyxDQUFDRDtBQUNqRDtBQUVnQyxDQUNoQyxtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3NsYXRlL3V0aWxzL2lzLXNlbGVjdGlvbi1jb2xsYXBzZWQubWpzPzAzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICdzbGF0ZSc7XG5cbmZ1bmN0aW9uIGlzU2VsZWN0aW9uQ29sbGFwc2VkKHNlbGVjdGlvbikge1xuICByZXR1cm4gc2VsZWN0aW9uICE9PSBudWxsICYmIFJhbmdlLmlzQ29sbGFwc2VkKHNlbGVjdGlvbik7XG59XG5cbmV4cG9ydCB7IGlzU2VsZWN0aW9uQ29sbGFwc2VkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy1zZWxlY3Rpb24tY29sbGFwc2VkLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSYW5nZSIsImlzU2VsZWN0aW9uQ29sbGFwc2VkIiwic2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-selection-collapsed.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/marks.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/slate/utils/marks.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   leaveMarkEdge: () => (/* binding */ leaveMarkEdge),\n/* harmony export */   removeMarks: () => (/* binding */ removeMarks),\n/* harmony export */   toggleMark: () => (/* binding */ toggleMark)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _get_character_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-character.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/get-character.mjs\");\n/* harmony import */ var _is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-selection-collapsed.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/is-selection-collapsed.mjs\");\n\n\n\nfunction isMarkActive(editor, format) {\n    const marks = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.marks(editor);\n    return marks ? marks[format] === true : false;\n}\nfunction toggleMark(editor, format) {\n    const isActive = isMarkActive(editor, format);\n    if (isActive) {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Editor.removeMark(editor, format);\n    } else {\n        slate__WEBPACK_IMPORTED_MODULE_0__.Editor.addMark(editor, format, true);\n    }\n}\nfunction removeMarks(editor) {\n    const marks = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.marks(editor);\n    if (marks) {\n        for(const mark in marks){\n            slate__WEBPACK_IMPORTED_MODULE_0__.Editor.removeMark(editor, mark);\n        }\n    }\n}\nfunction leaveMarkEdge(editor, edge) {\n    if ((0,_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(editor.selection)) {\n        const marks = Object.keys(slate__WEBPACK_IMPORTED_MODULE_0__.Editor.marks(editor) ?? {});\n        if (marks.length > 0) {\n            const sibling = edge === \"start\" ? (0,_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, editor.selection) : (0,_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterAfter)(editor, editor.selection);\n            if (!sibling) {\n                removeMarks(editor);\n            }\n        }\n    }\n}\n //# sourceMappingURL=marks.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC9zbGF0ZS91dGlscy9tYXJrcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQjtBQUM2QztBQUNSO0FBRXBFLFNBQVNJLGFBQWFDLE1BQU0sRUFBRUMsTUFBTTtJQUNsQyxNQUFNQyxRQUFRUCx5Q0FBTUEsQ0FBQ08sS0FBSyxDQUFDRjtJQUMzQixPQUFPRSxRQUFRQSxLQUFLLENBQUNELE9BQU8sS0FBSyxPQUFPO0FBQzFDO0FBQ0EsU0FBU0UsV0FBV0gsTUFBTSxFQUFFQyxNQUFNO0lBQ2hDLE1BQU1HLFdBQVdMLGFBQWFDLFFBQVFDO0lBQ3RDLElBQUlHLFVBQVU7UUFDWlQseUNBQU1BLENBQUNVLFVBQVUsQ0FBQ0wsUUFBUUM7SUFDNUIsT0FBTztRQUNMTix5Q0FBTUEsQ0FBQ1csT0FBTyxDQUFDTixRQUFRQyxRQUFRO0lBQ2pDO0FBQ0Y7QUFDQSxTQUFTTSxZQUFZUCxNQUFNO0lBQ3pCLE1BQU1FLFFBQVFQLHlDQUFNQSxDQUFDTyxLQUFLLENBQUNGO0lBQzNCLElBQUlFLE9BQU87UUFDVCxJQUFLLE1BQU1NLFFBQVFOLE1BQU87WUFDeEJQLHlDQUFNQSxDQUFDVSxVQUFVLENBQUNMLFFBQVFRO1FBQzVCO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDLGNBQWNULE1BQU0sRUFBRVUsSUFBSTtJQUNqQyxJQUFJWixpRkFBb0JBLENBQUNFLE9BQU9XLFNBQVMsR0FBRztRQUMxQyxNQUFNVCxRQUFRVSxPQUFPQyxJQUFJLENBQUNsQix5Q0FBTUEsQ0FBQ08sS0FBSyxDQUFDRixXQUFXLENBQUM7UUFDbkQsSUFBSUUsTUFBTVksTUFBTSxHQUFHLEdBQUc7WUFDcEIsTUFBTUMsVUFBVUwsU0FBUyxVQUFVZCxzRUFBa0JBLENBQUNJLFFBQVFBLE9BQU9XLFNBQVMsSUFBSWQscUVBQWlCQSxDQUFDRyxRQUFRQSxPQUFPVyxTQUFTO1lBQzVILElBQUksQ0FBQ0ksU0FBUztnQkFDWlIsWUFBWVA7WUFDZDtRQUNGO0lBQ0Y7QUFDRjtBQUVnRSxDQUNoRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3NsYXRlL3V0aWxzL21hcmtzLm1qcz82OTliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvciB9IGZyb20gJ3NsYXRlJztcbmltcG9ydCB7IGdldENoYXJhY3RlckJlZm9yZSwgZ2V0Q2hhcmFjdGVyQWZ0ZXIgfSBmcm9tICcuL2dldC1jaGFyYWN0ZXIubWpzJztcbmltcG9ydCB7IGlzU2VsZWN0aW9uQ29sbGFwc2VkIH0gZnJvbSAnLi9pcy1zZWxlY3Rpb24tY29sbGFwc2VkLm1qcyc7XG5cbmZ1bmN0aW9uIGlzTWFya0FjdGl2ZShlZGl0b3IsIGZvcm1hdCkge1xuICBjb25zdCBtYXJrcyA9IEVkaXRvci5tYXJrcyhlZGl0b3IpO1xuICByZXR1cm4gbWFya3MgPyBtYXJrc1tmb3JtYXRdID09PSB0cnVlIDogZmFsc2U7XG59XG5mdW5jdGlvbiB0b2dnbGVNYXJrKGVkaXRvciwgZm9ybWF0KSB7XG4gIGNvbnN0IGlzQWN0aXZlID0gaXNNYXJrQWN0aXZlKGVkaXRvciwgZm9ybWF0KTtcbiAgaWYgKGlzQWN0aXZlKSB7XG4gICAgRWRpdG9yLnJlbW92ZU1hcmsoZWRpdG9yLCBmb3JtYXQpO1xuICB9IGVsc2Uge1xuICAgIEVkaXRvci5hZGRNYXJrKGVkaXRvciwgZm9ybWF0LCB0cnVlKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlTWFya3MoZWRpdG9yKSB7XG4gIGNvbnN0IG1hcmtzID0gRWRpdG9yLm1hcmtzKGVkaXRvcik7XG4gIGlmIChtYXJrcykge1xuICAgIGZvciAoY29uc3QgbWFyayBpbiBtYXJrcykge1xuICAgICAgRWRpdG9yLnJlbW92ZU1hcmsoZWRpdG9yLCBtYXJrKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGxlYXZlTWFya0VkZ2UoZWRpdG9yLCBlZGdlKSB7XG4gIGlmIChpc1NlbGVjdGlvbkNvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgIGNvbnN0IG1hcmtzID0gT2JqZWN0LmtleXMoRWRpdG9yLm1hcmtzKGVkaXRvcikgPz8ge30pO1xuICAgIGlmIChtYXJrcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBzaWJsaW5nID0gZWRnZSA9PT0gXCJzdGFydFwiID8gZ2V0Q2hhcmFjdGVyQmVmb3JlKGVkaXRvciwgZWRpdG9yLnNlbGVjdGlvbikgOiBnZXRDaGFyYWN0ZXJBZnRlcihlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24pO1xuICAgICAgaWYgKCFzaWJsaW5nKSB7XG4gICAgICAgIHJlbW92ZU1hcmtzKGVkaXRvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IGlzTWFya0FjdGl2ZSwgbGVhdmVNYXJrRWRnZSwgcmVtb3ZlTWFya3MsIHRvZ2dsZU1hcmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcmtzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJFZGl0b3IiLCJnZXRDaGFyYWN0ZXJCZWZvcmUiLCJnZXRDaGFyYWN0ZXJBZnRlciIsImlzU2VsZWN0aW9uQ29sbGFwc2VkIiwiaXNNYXJrQWN0aXZlIiwiZWRpdG9yIiwiZm9ybWF0IiwibWFya3MiLCJ0b2dnbGVNYXJrIiwiaXNBY3RpdmUiLCJyZW1vdmVNYXJrIiwiYWRkTWFyayIsInJlbW92ZU1hcmtzIiwibWFyayIsImxlYXZlTWFya0VkZ2UiLCJlZGdlIiwic2VsZWN0aW9uIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInNpYmxpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/slate/utils/marks.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/Persist.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/Persist.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Persist: () => (/* binding */ Persist),\n/* harmony export */   useAnimationPersist: () => (/* binding */ useAnimationPersist),\n/* harmony export */   usePersist: () => (/* binding */ usePersist)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _flush_sync_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flush-sync.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/flush-sync.mjs\");\n/* harmony import */ var _use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-layout-effect.mjs\");\n/* __next_internal_client_entry_do_not_use__ Persist,useAnimationPersist,usePersist auto */ \n\n\n\nconst PERSIST_NAME = \"Persist\";\nconst PersistContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction usePersist() {\n    const persistContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PersistContext);\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(persistContext, \"Persist is missing from the React tree.\");\n}\nfunction getChild(children) {\n    const child = Array.isArray(children) ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children) : children;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child) ? child : void 0;\n}\nfunction useAnimationPersist(ref) {\n    const [isPresent, unmount] = usePersist();\n    const previousAnimationName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const unmountAnimationName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n        const element = ref.current;\n        if (!element) {\n            return;\n        }\n        const handleAnimationEnd = (event)=>{\n            if (event.animationName === unmountAnimationName.current) {\n                unmount();\n            }\n            previousAnimationName.current = event.animationName;\n        };\n        element.addEventListener(\"animationcancel\", handleAnimationEnd);\n        element.addEventListener(\"animationend\", handleAnimationEnd);\n        return ()=>{\n            element.removeEventListener(\"animationcancel\", handleAnimationEnd);\n            element.removeEventListener(\"animationend\", handleAnimationEnd);\n        };\n    }, [\n        ref,\n        unmount\n    ]);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n        const element = ref.current;\n        let animationFrameId;\n        if (!element) {\n            return;\n        }\n        if (!isPresent) {\n            animationFrameId = requestAnimationFrame(()=>{\n                const styles = getComputedStyle(element);\n                unmountAnimationName.current = styles.animationName;\n                if (styles.animationName === \"none\" || styles.animationName === previousAnimationName.current || styles.display === \"none\") {\n                    unmount();\n                }\n            });\n        }\n        return ()=>{\n            cancelAnimationFrame(animationFrameId);\n        };\n    }, [\n        isPresent,\n        ref,\n        unmount\n    ]);\n}\nfunction Persist({ children }) {\n    const [isPersisting, setPersisting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const lastPresentChild = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const child = getChild(children);\n    const unmount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        (0,_flush_sync_mjs__WEBPACK_IMPORTED_MODULE_3__.flushSync)(()=>setPersisting(false));\n    }, []);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n        if (child) {\n            setPersisting(true);\n            lastPresentChild.current = child;\n        }\n    }, [\n        child\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PersistContext.Provider, {\n        value: [\n            Boolean(child),\n            unmount\n        ]\n    }, child ?? (isPersisting ? lastPresentChild.current : null));\n}\nif (true) {\n    Persist.displayName = PERSIST_NAME;\n}\n //# sourceMappingURL=Persist.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9QZXJzaXN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OzRGQUNzQztBQUNxRjtBQUM5RTtBQUNhO0FBRTFELE1BQU1XLGVBQWU7QUFDckIsTUFBTUMsK0JBQWlCVixvREFBYUEsQ0FBQztBQUNyQyxTQUFTVztJQUNQLE1BQU1DLGlCQUFpQlgsaURBQVVBLENBQUNTO0lBQ2xDLE9BQU9aLG9EQUFFQSxDQUFDYyxnQkFBZ0I7QUFDNUI7QUFDQSxTQUFTQyxTQUFTQyxRQUFRO0lBQ3hCLE1BQU1DLFFBQVFDLE1BQU1DLE9BQU8sQ0FBQ0gsWUFBWVQsMkNBQVFBLENBQUNhLElBQUksQ0FBQ0osWUFBWUE7SUFDbEUscUJBQU9SLHFEQUFjQSxDQUFDUyxTQUFTQSxRQUFRLEtBQUs7QUFDOUM7QUFDQSxTQUFTSSxvQkFBb0JDLEdBQUc7SUFDOUIsTUFBTSxDQUFDQyxXQUFXQyxRQUFRLEdBQUdYO0lBQzdCLE1BQU1ZLHdCQUF3QnJCLDZDQUFNQSxDQUFDO0lBQ3JDLE1BQU1zQix1QkFBdUJ0Qiw2Q0FBTUEsQ0FBQztJQUNwQ00sdUVBQWVBLENBQUM7UUFDZCxNQUFNaUIsVUFBVUwsSUFBSU0sT0FBTztRQUMzQixJQUFJLENBQUNELFNBQVM7WUFDWjtRQUNGO1FBQ0EsTUFBTUUscUJBQXFCLENBQUNDO1lBQzFCLElBQUlBLE1BQU1DLGFBQWEsS0FBS0wscUJBQXFCRSxPQUFPLEVBQUU7Z0JBQ3hESjtZQUNGO1lBQ0FDLHNCQUFzQkcsT0FBTyxHQUFHRSxNQUFNQyxhQUFhO1FBQ3JEO1FBQ0FKLFFBQVFLLGdCQUFnQixDQUFDLG1CQUFtQkg7UUFDNUNGLFFBQVFLLGdCQUFnQixDQUFDLGdCQUFnQkg7UUFDekMsT0FBTztZQUNMRixRQUFRTSxtQkFBbUIsQ0FBQyxtQkFBbUJKO1lBQy9DRixRQUFRTSxtQkFBbUIsQ0FBQyxnQkFBZ0JKO1FBQzlDO0lBQ0YsR0FBRztRQUFDUDtRQUFLRTtLQUFRO0lBQ2pCZCx1RUFBZUEsQ0FBQztRQUNkLE1BQU1pQixVQUFVTCxJQUFJTSxPQUFPO1FBQzNCLElBQUlNO1FBQ0osSUFBSSxDQUFDUCxTQUFTO1lBQ1o7UUFDRjtRQUNBLElBQUksQ0FBQ0osV0FBVztZQUNkVyxtQkFBbUJDLHNCQUFzQjtnQkFDdkMsTUFBTUMsU0FBU0MsaUJBQWlCVjtnQkFDaENELHFCQUFxQkUsT0FBTyxHQUFHUSxPQUFPTCxhQUFhO2dCQUNuRCxJQUFJSyxPQUFPTCxhQUFhLEtBQUssVUFBVUssT0FBT0wsYUFBYSxLQUFLTixzQkFBc0JHLE9BQU8sSUFBSVEsT0FBT0UsT0FBTyxLQUFLLFFBQVE7b0JBQzFIZDtnQkFDRjtZQUNGO1FBQ0Y7UUFDQSxPQUFPO1lBQ0xlLHFCQUFxQkw7UUFDdkI7SUFDRixHQUFHO1FBQUNYO1FBQVdEO1FBQUtFO0tBQVE7QUFDOUI7QUFDQSxTQUFTZ0IsUUFBUSxFQUFFeEIsUUFBUSxFQUFFO0lBQzNCLE1BQU0sQ0FBQ3lCLGNBQWNDLGNBQWMsR0FBR3JDLCtDQUFRQSxDQUFDO0lBQy9DLE1BQU1zQyxtQkFBbUJ2Qyw2Q0FBTUEsQ0FBQztJQUNoQyxNQUFNYSxRQUFRRixTQUFTQztJQUN2QixNQUFNUSxVQUFVbEIsa0RBQVdBLENBQUM7UUFDMUJHLDBEQUFTQSxDQUFDLElBQU1pQyxjQUFjO0lBQ2hDLEdBQUcsRUFBRTtJQUNMaEMsdUVBQWVBLENBQUM7UUFDZCxJQUFJTyxPQUFPO1lBQ1R5QixjQUFjO1lBQ2RDLGlCQUFpQmYsT0FBTyxHQUFHWDtRQUM3QjtJQUNGLEdBQUc7UUFBQ0E7S0FBTTtJQUNWLE9BQU8sYUFBYSxpQkFBR2hCLGdEQUE0QixDQUFDVyxlQUFlaUMsUUFBUSxFQUFFO1FBQzNFQyxPQUFPO1lBQUNDLFFBQVE5QjtZQUFRTztTQUFRO0lBQ2xDLEdBQUdQLFNBQVV3QixDQUFBQSxlQUFlRSxpQkFBaUJmLE9BQU8sR0FBRyxJQUFHO0FBQzVEO0FBQ0EsSUFBSW9CLElBQXFDLEVBQUU7SUFDekNSLFFBQVFTLFdBQVcsR0FBR3RDO0FBQ3hCO0FBRW9ELENBQ3BELG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvUGVyc2lzdC5tanM/NTFmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgeyBubiB9IGZyb20gJ0BsaXZlYmxvY2tzL2NvcmUnO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCBDaGlsZHJlbiwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmbHVzaFN5bmMgfSBmcm9tICcuL2ZsdXNoLXN5bmMubWpzJztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gJy4vdXNlLWxheW91dC1lZmZlY3QubWpzJztcblxuY29uc3QgUEVSU0lTVF9OQU1FID0gXCJQZXJzaXN0XCI7XG5jb25zdCBQZXJzaXN0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XG5mdW5jdGlvbiB1c2VQZXJzaXN0KCkge1xuICBjb25zdCBwZXJzaXN0Q29udGV4dCA9IHVzZUNvbnRleHQoUGVyc2lzdENvbnRleHQpO1xuICByZXR1cm4gbm4ocGVyc2lzdENvbnRleHQsIFwiUGVyc2lzdCBpcyBtaXNzaW5nIGZyb20gdGhlIFJlYWN0IHRyZWUuXCIpO1xufVxuZnVuY3Rpb24gZ2V0Q2hpbGQoY2hpbGRyZW4pIHtcbiAgY29uc3QgY2hpbGQgPSBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IENoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogY2hpbGRyZW47XG4gIHJldHVybiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBjaGlsZCA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHVzZUFuaW1hdGlvblBlcnNpc3QocmVmKSB7XG4gIGNvbnN0IFtpc1ByZXNlbnQsIHVubW91bnRdID0gdXNlUGVyc2lzdCgpO1xuICBjb25zdCBwcmV2aW91c0FuaW1hdGlvbk5hbWUgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IHVubW91bnRBbmltYXRpb25OYW1lID0gdXNlUmVmKG51bGwpO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSByZWYuY3VycmVudDtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlQW5pbWF0aW9uRW5kID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gdW5tb3VudEFuaW1hdGlvbk5hbWUuY3VycmVudCkge1xuICAgICAgICB1bm1vdW50KCk7XG4gICAgICB9XG4gICAgICBwcmV2aW91c0FuaW1hdGlvbk5hbWUuY3VycmVudCA9IGV2ZW50LmFuaW1hdGlvbk5hbWU7XG4gICAgfTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25jYW5jZWxcIiwgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uY2FuY2VsXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICB9O1xuICB9LCBbcmVmLCB1bm1vdW50XSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50O1xuICAgIGxldCBhbmltYXRpb25GcmFtZUlkO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzUHJlc2VudCkge1xuICAgICAgYW5pbWF0aW9uRnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgICAgIHVubW91bnRBbmltYXRpb25OYW1lLmN1cnJlbnQgPSBzdHlsZXMuYW5pbWF0aW9uTmFtZTtcbiAgICAgICAgaWYgKHN0eWxlcy5hbmltYXRpb25OYW1lID09PSBcIm5vbmVcIiB8fCBzdHlsZXMuYW5pbWF0aW9uTmFtZSA9PT0gcHJldmlvdXNBbmltYXRpb25OYW1lLmN1cnJlbnQgfHwgc3R5bGVzLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgdW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWQpO1xuICAgIH07XG4gIH0sIFtpc1ByZXNlbnQsIHJlZiwgdW5tb3VudF0pO1xufVxuZnVuY3Rpb24gUGVyc2lzdCh7IGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgW2lzUGVyc2lzdGluZywgc2V0UGVyc2lzdGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgbGFzdFByZXNlbnRDaGlsZCA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgY2hpbGQgPSBnZXRDaGlsZChjaGlsZHJlbik7XG4gIGNvbnN0IHVubW91bnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgZmx1c2hTeW5jKCgpID0+IHNldFBlcnNpc3RpbmcoZmFsc2UpKTtcbiAgfSwgW10pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgc2V0UGVyc2lzdGluZyh0cnVlKTtcbiAgICAgIGxhc3RQcmVzZW50Q2hpbGQuY3VycmVudCA9IGNoaWxkO1xuICAgIH1cbiAgfSwgW2NoaWxkXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChQZXJzaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBbQm9vbGVhbihjaGlsZCksIHVubW91bnRdXG4gIH0sIGNoaWxkID8/IChpc1BlcnNpc3RpbmcgPyBsYXN0UHJlc2VudENoaWxkLmN1cnJlbnQgOiBudWxsKSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFBlcnNpc3QuZGlzcGxheU5hbWUgPSBQRVJTSVNUX05BTUU7XG59XG5cbmV4cG9ydCB7IFBlcnNpc3QsIHVzZUFuaW1hdGlvblBlcnNpc3QsIHVzZVBlcnNpc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBlcnNpc3QubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5uIiwiUmVhY3RfX2RlZmF1bHQiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJDaGlsZHJlbiIsImlzVmFsaWRFbGVtZW50IiwiZmx1c2hTeW5jIiwidXNlTGF5b3V0RWZmZWN0IiwiUEVSU0lTVF9OQU1FIiwiUGVyc2lzdENvbnRleHQiLCJ1c2VQZXJzaXN0IiwicGVyc2lzdENvbnRleHQiLCJnZXRDaGlsZCIsImNoaWxkcmVuIiwiY2hpbGQiLCJBcnJheSIsImlzQXJyYXkiLCJvbmx5IiwidXNlQW5pbWF0aW9uUGVyc2lzdCIsInJlZiIsImlzUHJlc2VudCIsInVubW91bnQiLCJwcmV2aW91c0FuaW1hdGlvbk5hbWUiLCJ1bm1vdW50QW5pbWF0aW9uTmFtZSIsImVsZW1lbnQiLCJjdXJyZW50IiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwiZXZlbnQiLCJhbmltYXRpb25OYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhbmltYXRpb25GcmFtZUlkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIlBlcnNpc3QiLCJpc1BlcnNpc3RpbmciLCJzZXRQZXJzaXN0aW5nIiwibGFzdFByZXNlbnRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIiwiQm9vbGVhbiIsInByb2Nlc3MiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/Persist.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/Portal.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/Portal.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Portal: () => (/* binding */ Portal)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ Portal auto */ \n\n\nconst PORTAL_NAME = \"Portal\";\nconst Portal = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ container = document?.body, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__.Slot : \"div\";\n    return container ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        \"data-liveblocks-portal\": \"\",\n        ...props,\n        ref: forwardedRef\n    }), container) : null;\n});\nif (true) {\n    Portal.displayName = PORTAL_NAME;\n}\n //# sourceMappingURL=Portal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9Qb3J0YWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7NERBQzRDO0FBQ087QUFDVjtBQUV6QyxNQUFNSSxjQUFjO0FBQ3BCLE1BQU1DLHVCQUFTSCxpREFBVUEsQ0FDdkIsQ0FBQyxFQUFFSSxZQUFZQyxVQUFVQyxJQUFJLEVBQUVDLE9BQU8sRUFBRSxHQUFHQyxPQUFPLEVBQUVDO0lBQ2xELE1BQU1DLFlBQVlILFVBQVVULHNEQUFJQSxHQUFHO0lBQ25DLE9BQU9NLDBCQUFZSCx1REFBWUEsQ0FDN0IsYUFBYSxpQkFBR0YsZ0RBQTRCLENBQUNXLFdBQVc7UUFDdEQsMEJBQTBCO1FBQzFCLEdBQUdGLEtBQUs7UUFDUkksS0FBS0g7SUFDUCxJQUNBTCxhQUNFO0FBQ047QUFFRixJQUFJUyxJQUFxQyxFQUFFO0lBQ3pDVixPQUFPVyxXQUFXLEdBQUdaO0FBQ3ZCO0FBRWtCLENBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvUG9ydGFsLm1qcz85ZDZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IFNsb3QgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xvdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbSc7XG5cbmNvbnN0IFBPUlRBTF9OQU1FID0gXCJQb3J0YWxcIjtcbmNvbnN0IFBvcnRhbCA9IGZvcndhcmRSZWYoXG4gICh7IGNvbnRhaW5lciA9IGRvY3VtZW50Py5ib2R5LCBhc0NoaWxkLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgICBjb25zdCBDb21wb25lbnQgPSBhc0NoaWxkID8gU2xvdCA6IFwiZGl2XCI7XG4gICAgcmV0dXJuIGNvbnRhaW5lciA/IGNyZWF0ZVBvcnRhbChcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICBcImRhdGEtbGl2ZWJsb2Nrcy1wb3J0YWxcIjogXCJcIixcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICB9KSxcbiAgICAgIGNvbnRhaW5lclxuICAgICkgOiBudWxsO1xuICB9XG4pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBQb3J0YWwuZGlzcGxheU5hbWUgPSBQT1JUQUxfTkFNRTtcbn1cblxuZXhwb3J0IHsgUG9ydGFsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3J0YWwubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlNsb3QiLCJSZWFjdF9fZGVmYXVsdCIsImZvcndhcmRSZWYiLCJjcmVhdGVQb3J0YWwiLCJQT1JUQUxfTkFNRSIsIlBvcnRhbCIsImNvbnRhaW5lciIsImRvY3VtZW50IiwiYm9keSIsImFzQ2hpbGQiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsIkNvbXBvbmVudCIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJwcm9jZXNzIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/Portal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/capitalize.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/capitalize.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalize: () => (/* binding */ capitalize)\n/* harmony export */ });\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n //# sourceMappingURL=capitalize.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9jYXBpdGFsaXplLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsV0FBV0MsTUFBTTtJQUN4QixPQUFPQSxPQUFPQyxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLRixPQUFPRyxLQUFLLENBQUM7QUFDdkQ7QUFFc0IsQ0FDdEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9jYXBpdGFsaXplLm1qcz9hMzBkIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbmV4cG9ydCB7IGNhcGl0YWxpemUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcGl0YWxpemUubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNhcGl0YWxpemUiLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/capitalize.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/chunk.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/chunk.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunk: () => (/* binding */ chunk)\n/* harmony export */ });\nfunction chunk(array, size) {\n    const chunks = [];\n    for(let i = 0, j = array.length; i < j; i += size){\n        chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n}\n //# sourceMappingURL=chunk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9jaHVuay5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLE1BQU1DLEtBQUssRUFBRUMsSUFBSTtJQUN4QixNQUFNQyxTQUFTLEVBQUU7SUFDakIsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLElBQUlKLE1BQU1LLE1BQU0sRUFBRUYsSUFBSUMsR0FBR0QsS0FBS0YsS0FBTTtRQUNsREMsT0FBT0ksSUFBSSxDQUFDTixNQUFNTyxLQUFLLENBQUNKLEdBQUdBLElBQUlGO0lBQ2pDO0lBQ0EsT0FBT0M7QUFDVDtBQUVpQixDQUNqQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL2NodW5rLm1qcz9lYzlkIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplKSB7XG4gIGNvbnN0IGNodW5rcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkgKz0gc2l6ZSkge1xuICAgIGNodW5rcy5wdXNoKGFycmF5LnNsaWNlKGksIGkgKyBzaXplKSk7XG4gIH1cbiAgcmV0dXJuIGNodW5rcztcbn1cblxuZXhwb3J0IHsgY2h1bmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjaHVuayIsImFycmF5Iiwic2l6ZSIsImNodW5rcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/chunk.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/clamp.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/clamp.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: () => (/* binding */ clamp)\n/* harmony export */ });\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n //# sourceMappingURL=clamp.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9jbGFtcC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLE1BQU1DLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQzVCLE9BQU9DLEtBQUtGLEdBQUcsQ0FBQ0UsS0FBS0QsR0FBRyxDQUFDRixPQUFPQyxNQUFNQztBQUN4QztBQUVpQixDQUNqQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL2NsYW1wLm1qcz82ODEyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIG1pbiksIG1heCk7XG59XG5cbmV4cG9ydCB7IGNsYW1wIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFtcC5tanMubWFwXG4iXSwibmFtZXMiOlsiY2xhbXAiLCJ2YWx1ZSIsIm1pbiIsIm1heCIsIk1hdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/clamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classNames: () => (/* binding */ classNames)\n/* harmony export */ });\nfunction classNames(...args) {\n    return args.filter((arg)=>typeof arg === \"string\" || typeof arg === \"number\").join(\" \");\n}\n //# sourceMappingURL=class-names.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9jbGFzcy1uYW1lcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFdBQVcsR0FBR0MsSUFBSTtJQUN6QixPQUFPQSxLQUFLQyxNQUFNLENBQUMsQ0FBQ0MsTUFBUSxPQUFPQSxRQUFRLFlBQVksT0FBT0EsUUFBUSxVQUFVQyxJQUFJLENBQUM7QUFDdkY7QUFFc0IsQ0FDdEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9jbGFzcy1uYW1lcy5tanM/MTJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFzc05hbWVzKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MuZmlsdGVyKChhcmcpID0+IHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZyA9PT0gXCJudW1iZXJcIikuam9pbihcIiBcIik7XG59XG5cbmV4cG9ydCB7IGNsYXNzTmFtZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsYXNzLW5hbWVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjbGFzc05hbWVzIiwiYXJncyIsImZpbHRlciIsImFyZyIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/class-names.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/exists.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/exists.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exists: () => (/* binding */ exists)\n/* harmony export */ });\nfunction exists(input) {\n    return input !== null && input !== void 0;\n}\n //# sourceMappingURL=exists.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9leGlzdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxPQUFPQyxLQUFLO0lBQ25CLE9BQU9BLFVBQVUsUUFBUUEsVUFBVSxLQUFLO0FBQzFDO0FBRWtCLENBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvZXhpc3RzLm1qcz9lZTJlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGV4aXN0cyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgIT09IHZvaWQgMDtcbn1cblxuZXhwb3J0IHsgZXhpc3RzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGlzdHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImV4aXN0cyIsImlucHV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/exists.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/flush-sync.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/flush-sync.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flushSync: () => (/* binding */ flushSync)\n/* harmony export */ });\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\nconst useReactFlushSync = react_dom__WEBPACK_IMPORTED_MODULE_0__[\"flushSync\".toString()];\nfunction flushSyncFallback(fn) {\n    return fn();\n}\nconst flushSync = useReactFlushSync ?? flushSyncFallback;\n //# sourceMappingURL=flush-sync.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9mbHVzaC1zeW5jLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpQztBQUVqQyxNQUFNQyxvQkFBb0JELHNDQUFRLENBQUMsWUFBWUUsUUFBUSxHQUFHO0FBQzFELFNBQVNDLGtCQUFrQkMsRUFBRTtJQUMzQixPQUFPQTtBQUNUO0FBQ0EsTUFBTUMsWUFBWUoscUJBQXFCRTtBQUVsQixDQUNyQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL2ZsdXNoLXN5bmMubWpzP2MzYzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbmNvbnN0IHVzZVJlYWN0Rmx1c2hTeW5jID0gUmVhY3RET01bXCJmbHVzaFN5bmNcIi50b1N0cmluZygpXTtcbmZ1bmN0aW9uIGZsdXNoU3luY0ZhbGxiYWNrKGZuKSB7XG4gIHJldHVybiBmbigpO1xufVxuY29uc3QgZmx1c2hTeW5jID0gdXNlUmVhY3RGbHVzaFN5bmMgPz8gZmx1c2hTeW5jRmFsbGJhY2s7XG5cbmV4cG9ydCB7IGZsdXNoU3luYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmx1c2gtc3luYy5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RET00iLCJ1c2VSZWFjdEZsdXNoU3luYyIsInRvU3RyaW5nIiwiZmx1c2hTeW5jRmFsbGJhY2siLCJmbiIsImZsdXNoU3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/flush-sync.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/get-initials.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/get-initials.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInitials: () => (/* binding */ getInitials)\n/* harmony export */ });\nfunction getInitials(name) {\n    return name.trim().split(\" \").reduce((initials, name2, index, array)=>{\n        if (index === 0 || index === array.length - 1) {\n            initials += name2.charAt(0).toLocaleUpperCase();\n        }\n        return initials;\n    }, \"\");\n}\n //# sourceMappingURL=get-initials.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9nZXQtaW5pdGlhbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxZQUFZQyxJQUFJO0lBQ3ZCLE9BQU9BLEtBQUtDLElBQUksR0FBR0MsS0FBSyxDQUFDLEtBQUtDLE1BQU0sQ0FBQyxDQUFDQyxVQUFVQyxPQUFPQyxPQUFPQztRQUM1RCxJQUFJRCxVQUFVLEtBQUtBLFVBQVVDLE1BQU1DLE1BQU0sR0FBRyxHQUFHO1lBQzdDSixZQUFZQyxNQUFNSSxNQUFNLENBQUMsR0FBR0MsaUJBQWlCO1FBQy9DO1FBQ0EsT0FBT047SUFDVCxHQUFHO0FBQ0w7QUFFdUIsQ0FDdkIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9nZXQtaW5pdGlhbHMubWpzPzI2OGQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0SW5pdGlhbHMobmFtZSkge1xuICByZXR1cm4gbmFtZS50cmltKCkuc3BsaXQoXCIgXCIpLnJlZHVjZSgoaW5pdGlhbHMsIG5hbWUyLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IDAgfHwgaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIGluaXRpYWxzICs9IG5hbWUyLmNoYXJBdCgwKS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbHM7XG4gIH0sIFwiXCIpO1xufVxuXG5leHBvcnQgeyBnZXRJbml0aWFscyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWluaXRpYWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRJbml0aWFscyIsIm5hbWUiLCJ0cmltIiwic3BsaXQiLCJyZWR1Y2UiLCJpbml0aWFscyIsIm5hbWUyIiwiaW5kZXgiLCJhcnJheSIsImxlbmd0aCIsImNoYXJBdCIsInRvTG9jYWxlVXBwZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/get-initials.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/intl.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/intl.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dateTimeFormat: () => (/* binding */ dateTimeFormat),\n/* harmony export */   listFormat: () => (/* binding */ listFormat),\n/* harmony export */   relativeTimeFormat: () => (/* binding */ relativeTimeFormat)\n/* harmony export */ });\n/* harmony import */ var _memoize_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memoize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/memoize.mjs\");\n\nconst dateTimeFormat = (0,_memoize_mjs__WEBPACK_IMPORTED_MODULE_0__.memoize)((...args)=>{\n    return new Intl.DateTimeFormat(...args);\n});\nconst relativeTimeFormat = (0,_memoize_mjs__WEBPACK_IMPORTED_MODULE_0__.memoize)((...args)=>{\n    return new Intl.RelativeTimeFormat(...args);\n});\nconst listFormat = (0,_memoize_mjs__WEBPACK_IMPORTED_MODULE_0__.memoize)((...args)=>{\n    return new Intl.ListFormat(...args);\n});\n //# sourceMappingURL=intl.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9pbnRsLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdDO0FBRXhDLE1BQU1DLGlCQUFpQkQscURBQU9BLENBQzVCLENBQUMsR0FBR0U7SUFDRixPQUFPLElBQUlDLEtBQUtDLGNBQWMsSUFBSUY7QUFDcEM7QUFFRixNQUFNRyxxQkFBcUJMLHFEQUFPQSxDQUNoQyxDQUFDLEdBQUdFO0lBQ0YsT0FBTyxJQUFJQyxLQUFLRyxrQkFBa0IsSUFBSUo7QUFDeEM7QUFFRixNQUFNSyxhQUFhUCxxREFBT0EsQ0FDeEIsQ0FBQyxHQUFHRTtJQUNGLE9BQU8sSUFBSUMsS0FBS0ssVUFBVSxJQUFJTjtBQUNoQztBQUd3RCxDQUMxRCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL2ludGwubWpzPzU4MjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJy4vbWVtb2l6ZS5tanMnO1xuXG5jb25zdCBkYXRlVGltZUZvcm1hdCA9IG1lbW9pemUoXG4gICguLi5hcmdzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KC4uLmFyZ3MpO1xuICB9XG4pO1xuY29uc3QgcmVsYXRpdmVUaW1lRm9ybWF0ID0gbWVtb2l6ZShcbiAgKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KC4uLmFyZ3MpO1xuICB9XG4pO1xuY29uc3QgbGlzdEZvcm1hdCA9IG1lbW9pemUoXG4gICguLi5hcmdzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBJbnRsLkxpc3RGb3JtYXQoLi4uYXJncyk7XG4gIH1cbik7XG5cbmV4cG9ydCB7IGRhdGVUaW1lRm9ybWF0LCBsaXN0Rm9ybWF0LCByZWxhdGl2ZVRpbWVGb3JtYXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGwubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lbW9pemUiLCJkYXRlVGltZUZvcm1hdCIsImFyZ3MiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZWxhdGl2ZVRpbWVGb3JtYXQiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJsaXN0Rm9ybWF0IiwiTGlzdEZvcm1hdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/intl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-apple.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/is-apple.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApple: () => (/* binding */ isApple)\n/* harmony export */ });\nconst APPLE_REGEX = /Mac|iPod|iPhone|iPad/;\nfunction isApple() {\n    return  false && 0;\n}\n //# sourceMappingURL=is-apple.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9pcy1hcHBsZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGNBQWM7QUFDcEIsU0FBU0M7SUFDUCxPQUFPLE1BQTZCLElBQUlELENBQTJDO0FBQ3JGO0FBRW1CLENBQ25CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvaXMtYXBwbGUubWpzPzE0NzAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVBQTEVfUkVHRVggPSAvTWFjfGlQb2R8aVBob25lfGlQYWQvO1xuZnVuY3Rpb24gaXNBcHBsZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgQVBQTEVfUkVHRVgudGVzdCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKTtcbn1cblxuZXhwb3J0IHsgaXNBcHBsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtYXBwbGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQUExFX1JFR0VYIiwiaXNBcHBsZSIsInRlc3QiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-apple.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-key.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/is-key.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKey: () => (/* binding */ isKey)\n/* harmony export */ });\n/* harmony import */ var _is_apple_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-apple.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-apple.mjs\");\n\nconst MODIFIERS = {\n    alt: ()=>\"altKey\",\n    ctrl: ()=>\"ctrlKey\",\n    meta: ()=>\"metaKey\",\n    mod: ()=>(0,_is_apple_mjs__WEBPACK_IMPORTED_MODULE_0__.isApple)() ? \"metaKey\" : \"ctrlKey\",\n    shift: ()=>\"shiftKey\"\n};\nfunction isKey(event, key, modifiers = {}) {\n    if (event.key !== key) {\n        return false;\n    }\n    const explicitModifiers = Object.entries(modifiers).filter(([, value])=>typeof value === \"boolean\");\n    return explicitModifiers.every(([modifier, value])=>{\n        const property = MODIFIERS[modifier]();\n        return event[property] === value;\n    });\n}\n //# sourceMappingURL=is-key.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9pcy1rZXkubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRXpDLE1BQU1DLFlBQVk7SUFDaEJDLEtBQUssSUFBTTtJQUNYQyxNQUFNLElBQU07SUFDWkMsTUFBTSxJQUFNO0lBQ1pDLEtBQUssSUFBTUwsc0RBQU9BLEtBQUssWUFBWTtJQUNuQ00sT0FBTyxJQUFNO0FBQ2Y7QUFDQSxTQUFTQyxNQUFNQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsSUFBSUYsTUFBTUMsR0FBRyxLQUFLQSxLQUFLO1FBQ3JCLE9BQU87SUFDVDtJQUNBLE1BQU1FLG9CQUFvQkMsT0FBT0MsT0FBTyxDQUFDSCxXQUFXSSxNQUFNLENBQ3hELENBQUMsR0FBR0MsTUFBTSxHQUFLLE9BQU9BLFVBQVU7SUFFbEMsT0FBT0osa0JBQWtCSyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxVQUFVRixNQUFNO1FBQy9DLE1BQU1HLFdBQVdqQixTQUFTLENBQUNnQixTQUFTO1FBQ3BDLE9BQU9ULEtBQUssQ0FBQ1UsU0FBUyxLQUFLSDtJQUM3QjtBQUNGO0FBRWlCLENBQ2pCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvaXMta2V5Lm1qcz81ZWFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXBwbGUgfSBmcm9tICcuL2lzLWFwcGxlLm1qcyc7XG5cbmNvbnN0IE1PRElGSUVSUyA9IHtcbiAgYWx0OiAoKSA9PiBcImFsdEtleVwiLFxuICBjdHJsOiAoKSA9PiBcImN0cmxLZXlcIixcbiAgbWV0YTogKCkgPT4gXCJtZXRhS2V5XCIsXG4gIG1vZDogKCkgPT4gaXNBcHBsZSgpID8gXCJtZXRhS2V5XCIgOiBcImN0cmxLZXlcIixcbiAgc2hpZnQ6ICgpID0+IFwic2hpZnRLZXlcIlxufTtcbmZ1bmN0aW9uIGlzS2V5KGV2ZW50LCBrZXksIG1vZGlmaWVycyA9IHt9KSB7XG4gIGlmIChldmVudC5rZXkgIT09IGtleSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBleHBsaWNpdE1vZGlmaWVycyA9IE9iamVjdC5lbnRyaWVzKG1vZGlmaWVycykuZmlsdGVyKFxuICAgIChbLCB2YWx1ZV0pID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCJcbiAgKTtcbiAgcmV0dXJuIGV4cGxpY2l0TW9kaWZpZXJzLmV2ZXJ5KChbbW9kaWZpZXIsIHZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5ID0gTU9ESUZJRVJTW21vZGlmaWVyXSgpO1xuICAgIHJldHVybiBldmVudFtwcm9wZXJ0eV0gPT09IHZhbHVlO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgaXNLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWtleS5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNBcHBsZSIsIk1PRElGSUVSUyIsImFsdCIsImN0cmwiLCJtZXRhIiwibW9kIiwic2hpZnQiLCJpc0tleSIsImV2ZW50Iiwia2V5IiwibW9kaWZpZXJzIiwiZXhwbGljaXRNb2RpZmllcnMiLCJPYmplY3QiLCJlbnRyaWVzIiwiZmlsdGVyIiwidmFsdWUiLCJldmVyeSIsIm1vZGlmaWVyIiwicHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/is-key.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/memoize.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/memoize.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoize: () => (/* binding */ memoize)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n\nfunction memoize(fn) {\n    const cache = /* @__PURE__ */ new Map();\n    return (...args)=>{\n        const key = JSON.stringify(args.map((arg)=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.stringify)(arg)));\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = fn(...args);\n        cache.set(key, result);\n        return result;\n    };\n}\n //# sourceMappingURL=memoize.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9tZW1vaXplLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2QztBQUU3QyxTQUFTQyxRQUFRQyxFQUFFO0lBQ2pCLE1BQU1DLFFBQVEsYUFBYSxHQUFHLElBQUlDO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHQztRQUNULE1BQU1DLE1BQU1DLEtBQUtQLFNBQVMsQ0FBQ0ssS0FBS0csR0FBRyxDQUFDLENBQUNDLE1BQVFULDJEQUFTQSxDQUFDUztRQUN2RCxJQUFJTixNQUFNTyxHQUFHLENBQUNKLE1BQU07WUFDbEIsT0FBT0gsTUFBTVEsR0FBRyxDQUFDTDtRQUNuQjtRQUNBLE1BQU1NLFNBQVNWLE1BQU1HO1FBQ3JCRixNQUFNVSxHQUFHLENBQUNQLEtBQUtNO1FBQ2YsT0FBT0E7SUFDVDtBQUNGO0FBRW1CLENBQ25CLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvbWVtb2l6ZS5tanM/MjA3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICdAbGl2ZWJsb2Nrcy9jb3JlJztcblxuZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KGFyZ3MubWFwKChhcmcpID0+IHN0cmluZ2lmeShhcmcpKSk7XG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGZuKC4uLmFyZ3MpO1xuICAgIGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IHsgbWVtb2l6ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtb2l6ZS5tanMubWFwXG4iXSwibmFtZXMiOlsic3RyaW5naWZ5IiwibWVtb2l6ZSIsImZuIiwiY2FjaGUiLCJNYXAiLCJhcmdzIiwia2V5IiwiSlNPTiIsIm1hcCIsImFyZyIsImhhcyIsImdldCIsInJlc3VsdCIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/memoize.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/request-idle-callback.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/request-idle-callback.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelIdleCallback: () => (/* binding */ cancelIdleCallback),\n/* harmony export */   requestIdleCallback: () => (/* binding */ requestIdleCallback)\n/* harmony export */ });\nconst IDLE_CALLBACK_FALLBACK_TIMEOUT = 100;\nfunction requestIdleCallbackFallback(callback, options) {\n    return setTimeout(callback, Math.min(options?.timeout ?? Infinity, IDLE_CALLBACK_FALLBACK_TIMEOUT));\n}\nconst requestIdleCallback = ( null) ?? requestIdleCallbackFallback;\nconst cancelIdleCallback = ( null) ?? clearTimeout;\n //# sourceMappingURL=request-idle-callback.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9yZXF1ZXN0LWlkbGUtY2FsbGJhY2subWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsaUNBQWlDO0FBQ3ZDLFNBQVNDLDRCQUE0QkMsUUFBUSxFQUFFQyxPQUFPO0lBQ3BELE9BQU9DLFdBQ0xGLFVBQ0FHLEtBQUtDLEdBQUcsQ0FBQ0gsU0FBU0ksV0FBV0MsVUFBVVI7QUFFM0M7QUFDQSxNQUFNUyxzQkFBc0IsQ0FBQyxLQUFnRSxLQUFNUjtBQUNuRyxNQUFNVSxxQkFBcUIsQ0FBQyxLQUErRCxLQUFNQztBQUU5QyxDQUNuRCxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL3JlcXVlc3QtaWRsZS1jYWxsYmFjay5tanM/NmQ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBJRExFX0NBTExCQUNLX0ZBTExCQUNLX1RJTUVPVVQgPSAxMDA7XG5mdW5jdGlvbiByZXF1ZXN0SWRsZUNhbGxiYWNrRmFsbGJhY2soY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoXG4gICAgY2FsbGJhY2ssXG4gICAgTWF0aC5taW4ob3B0aW9ucz8udGltZW91dCA/PyBJbmZpbml0eSwgSURMRV9DQUxMQkFDS19GQUxMQkFDS19USU1FT1VUKVxuICApO1xufVxuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgOiBudWxsKSA/PyByZXF1ZXN0SWRsZUNhbGxiYWNrRmFsbGJhY2s7XG5jb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2sgOiBudWxsKSA/PyBjbGVhclRpbWVvdXQ7XG5cbmV4cG9ydCB7IGNhbmNlbElkbGVDYWxsYmFjaywgcmVxdWVzdElkbGVDYWxsYmFjayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJJRExFX0NBTExCQUNLX0ZBTExCQUNLX1RJTUVPVVQiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrRmFsbGJhY2siLCJjYWxsYmFjayIsIm9wdGlvbnMiLCJzZXRUaW1lb3V0IiwiTWF0aCIsIm1pbiIsInRpbWVvdXQiLCJJbmZpbml0eSIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJjbGVhclRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/request-idle-callback.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/request-submit.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/request-submit.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestSubmit: () => (/* binding */ requestSubmit)\n/* harmony export */ });\nfunction requestSubmit(form, submitter) {\n    if (typeof form.requestSubmit === \"function\") {\n        return form.requestSubmit(submitter);\n    }\n    if (submitter) {\n        submitter.click();\n    } else {\n        submitter = document.createElement(\"input\");\n        submitter.type = \"submit\";\n        submitter.hidden = true;\n        form.appendChild(submitter);\n        submitter.click();\n        form.removeChild(submitter);\n    }\n}\n //# sourceMappingURL=request-submit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy9yZXF1ZXN0LXN1Ym1pdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGNBQWNDLElBQUksRUFBRUMsU0FBUztJQUNwQyxJQUFJLE9BQU9ELEtBQUtELGFBQWEsS0FBSyxZQUFZO1FBQzVDLE9BQU9DLEtBQUtELGFBQWEsQ0FBQ0U7SUFDNUI7SUFDQSxJQUFJQSxXQUFXO1FBQ2JBLFVBQVVDLEtBQUs7SUFDakIsT0FBTztRQUNMRCxZQUFZRSxTQUFTQyxhQUFhLENBQUM7UUFDbkNILFVBQVVJLElBQUksR0FBRztRQUNqQkosVUFBVUssTUFBTSxHQUFHO1FBQ25CTixLQUFLTyxXQUFXLENBQUNOO1FBQ2pCQSxVQUFVQyxLQUFLO1FBQ2ZGLEtBQUtRLFdBQVcsQ0FBQ1A7SUFDbkI7QUFDRjtBQUV5QixDQUN6QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL3JlcXVlc3Qtc3VibWl0Lm1qcz9hNmQ4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlcXVlc3RTdWJtaXQoZm9ybSwgc3VibWl0dGVyKSB7XG4gIGlmICh0eXBlb2YgZm9ybS5yZXF1ZXN0U3VibWl0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZm9ybS5yZXF1ZXN0U3VibWl0KHN1Ym1pdHRlcik7XG4gIH1cbiAgaWYgKHN1Ym1pdHRlcikge1xuICAgIHN1Ym1pdHRlci5jbGljaygpO1xuICB9IGVsc2Uge1xuICAgIHN1Ym1pdHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBzdWJtaXR0ZXIudHlwZSA9IFwic3VibWl0XCI7XG4gICAgc3VibWl0dGVyLmhpZGRlbiA9IHRydWU7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXR0ZXIpO1xuICAgIHN1Ym1pdHRlci5jbGljaygpO1xuICAgIGZvcm0ucmVtb3ZlQ2hpbGQoc3VibWl0dGVyKTtcbiAgfVxufVxuXG5leHBvcnQgeyByZXF1ZXN0U3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LXN1Ym1pdC5tanMubWFwXG4iXSwibmFtZXMiOlsicmVxdWVzdFN1Ym1pdCIsImZvcm0iLCJzdWJtaXR0ZXIiLCJjbGljayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJoaWRkZW4iLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/request-submit.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-controllable-state.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-controllable-state.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useControllableState: () => (/* binding */ useControllableState)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useControllableState(value, onChange, defaultValue) {\n    const [uncontrolledValue, setUncontrolledValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue);\n    const isControlled = value !== void 0;\n    const wasControlled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(isControlled);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && wasControlled.current !== isControlled) {\n            _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.console.warn(`A component is changing from ${wasControlled ? \"controlled\" : \"uncontrolled\"} to ${isControlled ? \"controlled\" : \"uncontrolled\"}.`);\n        }\n        wasControlled.current = isControlled;\n    }, [\n        isControlled\n    ]);\n    const currentValue = isControlled ? value : uncontrolledValue;\n    const setValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value2)=>{\n        if (isControlled) {\n            return onChange?.(value2);\n        } else {\n            setUncontrolledValue(value2);\n            return onChange?.(value2);\n        }\n    }, [\n        isControlled,\n        onChange\n    ]);\n    return [\n        currentValue,\n        setValue\n    ];\n}\n //# sourceMappingURL=use-controllable-state.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtY29udHJvbGxhYmxlLXN0YXRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkM7QUFDc0I7QUFFakUsU0FBU0sscUJBQXFCQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsWUFBWTtJQUN6RCxNQUFNLENBQUNDLG1CQUFtQkMscUJBQXFCLEdBQUdULCtDQUFRQSxDQUFDTztJQUMzRCxNQUFNRyxlQUFlTCxVQUFVLEtBQUs7SUFDcEMsTUFBTU0sZ0JBQWdCViw2Q0FBTUEsQ0FBQ1M7SUFDN0JSLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSVUsS0FBcUMsSUFBSUQsY0FBY0UsT0FBTyxLQUFLSCxjQUFjO1lBQ25GWCxxREFBT0EsQ0FBQ2UsSUFBSSxDQUNWLENBQUMsNkJBQTZCLEVBQUVILGdCQUFnQixlQUFlLGVBQWUsSUFBSSxFQUFFRCxlQUFlLGVBQWUsZUFBZSxDQUFDLENBQUM7UUFFdkk7UUFDQUMsY0FBY0UsT0FBTyxHQUFHSDtJQUMxQixHQUFHO1FBQUNBO0tBQWE7SUFDakIsTUFBTUssZUFBZUwsZUFBZUwsUUFBUUc7SUFDNUMsTUFBTVEsV0FBV2Isa0RBQVdBLENBQzFCLENBQUNjO1FBQ0MsSUFBSVAsY0FBYztZQUNoQixPQUFPSixXQUFXVztRQUNwQixPQUFPO1lBQ0xSLHFCQUFxQlE7WUFDckIsT0FBT1gsV0FBV1c7UUFDcEI7SUFDRixHQUNBO1FBQUNQO1FBQWNKO0tBQVM7SUFFMUIsT0FBTztRQUFDUztRQUFjQztLQUFTO0FBQ2pDO0FBRWdDLENBQ2hDLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdXNlLWNvbnRyb2xsYWJsZS1zdGF0ZS5tanM/OTU0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zb2xlIH0gZnJvbSAnQGxpdmVibG9ja3MvY29yZSc7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VDb250cm9sbGFibGVTdGF0ZSh2YWx1ZSwgb25DaGFuZ2UsIGRlZmF1bHRWYWx1ZSkge1xuICBjb25zdCBbdW5jb250cm9sbGVkVmFsdWUsIHNldFVuY29udHJvbGxlZFZhbHVlXSA9IHVzZVN0YXRlKGRlZmF1bHRWYWx1ZSk7XG4gIGNvbnN0IGlzQ29udHJvbGxlZCA9IHZhbHVlICE9PSB2b2lkIDA7XG4gIGNvbnN0IHdhc0NvbnRyb2xsZWQgPSB1c2VSZWYoaXNDb250cm9sbGVkKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHdhc0NvbnRyb2xsZWQuY3VycmVudCAhPT0gaXNDb250cm9sbGVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyBmcm9tICR7d2FzQ29udHJvbGxlZCA/IFwiY29udHJvbGxlZFwiIDogXCJ1bmNvbnRyb2xsZWRcIn0gdG8gJHtpc0NvbnRyb2xsZWQgPyBcImNvbnRyb2xsZWRcIiA6IFwidW5jb250cm9sbGVkXCJ9LmBcbiAgICAgICk7XG4gICAgfVxuICAgIHdhc0NvbnRyb2xsZWQuY3VycmVudCA9IGlzQ29udHJvbGxlZDtcbiAgfSwgW2lzQ29udHJvbGxlZF0pO1xuICBjb25zdCBjdXJyZW50VmFsdWUgPSBpc0NvbnRyb2xsZWQgPyB2YWx1ZSA6IHVuY29udHJvbGxlZFZhbHVlO1xuICBjb25zdCBzZXRWYWx1ZSA9IHVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZTIpID0+IHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgcmV0dXJuIG9uQ2hhbmdlPy4odmFsdWUyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFVuY29udHJvbGxlZFZhbHVlKHZhbHVlMik7XG4gICAgICAgIHJldHVybiBvbkNoYW5nZT8uKHZhbHVlMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbaXNDb250cm9sbGVkLCBvbkNoYW5nZV1cbiAgKTtcbiAgcmV0dXJuIFtjdXJyZW50VmFsdWUsIHNldFZhbHVlXTtcbn1cblxuZXhwb3J0IHsgdXNlQ29udHJvbGxhYmxlU3RhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1jb250cm9sbGFibGUtc3RhdGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJ1c2VTdGF0ZSIsInVzZVJlZiIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udHJvbGxhYmxlU3RhdGUiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwiZGVmYXVsdFZhbHVlIiwidW5jb250cm9sbGVkVmFsdWUiLCJzZXRVbmNvbnRyb2xsZWRWYWx1ZSIsImlzQ29udHJvbGxlZCIsIndhc0NvbnRyb2xsZWQiLCJwcm9jZXNzIiwiY3VycmVudCIsIndhcm4iLCJjdXJyZW50VmFsdWUiLCJzZXRWYWx1ZSIsInZhbHVlMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-controllable-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-id.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-id.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useId: () => (/* binding */ useId)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-layout-effect.mjs\");\n\n\nlet isHydrated = false;\nlet id = 0;\nfunction getId() {\n    return ++id;\n}\nconst useReactId = react__WEBPACK_IMPORTED_MODULE_0__[\"useId\".toString()];\nfunction useIncrementalId() {\n    const [id2, setId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isHydrated ? getId : null);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(()=>{\n        if (id2 === null) {\n            setId(getId());\n        }\n    }, [\n        id2\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!isHydrated) {\n            isHydrated = true;\n        }\n    }, []);\n    return String(id2) ?? void 0;\n}\nconst useId = useReactId ?? useIncrementalId;\n //# sourceMappingURL=use-id.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtaWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RDtBQUNGO0FBRTFELElBQUlJLGFBQWE7QUFDakIsSUFBSUMsS0FBSztBQUNULFNBQVNDO0lBQ1AsT0FBTyxFQUFFRDtBQUNYO0FBQ0EsTUFBTUUsYUFBYVAsa0NBQWMsQ0FBQyxRQUFRUSxRQUFRLEdBQUc7QUFDckQsU0FBU0M7SUFDUCxNQUFNLENBQUNDLEtBQUtDLE1BQU0sR0FBR1YsK0NBQVFBLENBQUNHLGFBQWFFLFFBQVE7SUFDbkRILHVFQUFlQSxDQUFDO1FBQ2QsSUFBSU8sUUFBUSxNQUFNO1lBQ2hCQyxNQUFNTDtRQUNSO0lBQ0YsR0FBRztRQUFDSTtLQUFJO0lBQ1JSLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSSxDQUFDRSxZQUFZO1lBQ2ZBLGFBQWE7UUFDZjtJQUNGLEdBQUcsRUFBRTtJQUNMLE9BQU9RLE9BQU9GLFFBQVEsS0FBSztBQUM3QjtBQUNBLE1BQU1HLFFBQVFOLGNBQWNFO0FBRVgsQ0FDakIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtaWQubWpzPzExNTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZS1sYXlvdXQtZWZmZWN0Lm1qcyc7XG5cbmxldCBpc0h5ZHJhdGVkID0gZmFsc2U7XG5sZXQgaWQgPSAwO1xuZnVuY3Rpb24gZ2V0SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuY29uc3QgdXNlUmVhY3RJZCA9IFJlYWN0X19kZWZhdWx0W1widXNlSWRcIi50b1N0cmluZygpXTtcbmZ1bmN0aW9uIHVzZUluY3JlbWVudGFsSWQoKSB7XG4gIGNvbnN0IFtpZDIsIHNldElkXSA9IHVzZVN0YXRlKGlzSHlkcmF0ZWQgPyBnZXRJZCA6IG51bGwpO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpZDIgPT09IG51bGwpIHtcbiAgICAgIHNldElkKGdldElkKCkpO1xuICAgIH1cbiAgfSwgW2lkMl0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNIeWRyYXRlZCkge1xuICAgICAgaXNIeWRyYXRlZCA9IHRydWU7XG4gICAgfVxuICB9LCBbXSk7XG4gIHJldHVybiBTdHJpbmcoaWQyKSA/PyB2b2lkIDA7XG59XG5jb25zdCB1c2VJZCA9IHVzZVJlYWN0SWQgPz8gdXNlSW5jcmVtZW50YWxJZDtcblxuZXhwb3J0IHsgdXNlSWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pZC5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3RfX2RlZmF1bHQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsImlzSHlkcmF0ZWQiLCJpZCIsImdldElkIiwidXNlUmVhY3RJZCIsInRvU3RyaW5nIiwidXNlSW5jcmVtZW50YWxJZCIsImlkMiIsInNldElkIiwiU3RyaW5nIiwidXNlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-id.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIndex: () => (/* binding */ useIndex)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _clamp_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clamp.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/clamp.mjs\");\n/* harmony import */ var _wrap_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrap.mjs */ \"(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/wrap.mjs\");\n\n\n\nconst defaultOptions = {\n    wrap: true\n};\nfunction useIndex(initial, length, options) {\n    const { wrap: shouldWrap } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            ...defaultOptions,\n            ...options\n        };\n    }, [\n        options\n    ]);\n    const transform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>shouldWrap ? _wrap_mjs__WEBPACK_IMPORTED_MODULE_1__.wrap : _clamp_mjs__WEBPACK_IMPORTED_MODULE_2__.clamp, [\n        shouldWrap\n    ]);\n    const [index, setIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initial);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setIndex((index2)=>(0,_clamp_mjs__WEBPACK_IMPORTED_MODULE_2__.clamp)(index2, 0, Math.max(length - 1, 0)));\n    }, [\n        length\n    ]);\n    const previousIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setIndex((index2)=>transform(index2 - 1, 0, Math.max(length, 0)));\n    }, [\n        length,\n        transform\n    ]);\n    const nextIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setIndex((index2)=>transform(index2 + 1, 0, Math.max(length, 0)));\n    }, [\n        length,\n        transform\n    ]);\n    return [\n        index,\n        previousIndex,\n        nextIndex,\n        setIndex\n    ];\n}\n //# sourceMappingURL=use-index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0U7QUFDOUI7QUFDRjtBQUVsQyxNQUFNTSxpQkFBaUI7SUFDckJELE1BQU07QUFDUjtBQUNBLFNBQVNFLFNBQVNDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3hDLE1BQU0sRUFBRUwsTUFBTU0sVUFBVSxFQUFFLEdBQUdYLDhDQUFPQSxDQUFDO1FBQ25DLE9BQU87WUFDTCxHQUFHTSxjQUFjO1lBQ2pCLEdBQUdJLE9BQU87UUFDWjtJQUNGLEdBQUc7UUFBQ0E7S0FBUTtJQUNaLE1BQU1FLFlBQVlaLDhDQUFPQSxDQUFDLElBQU1XLGFBQWFOLDJDQUFJQSxHQUFHRCw2Q0FBS0EsRUFBRTtRQUFDTztLQUFXO0lBQ3ZFLE1BQU0sQ0FBQ0UsT0FBT0MsU0FBUyxHQUFHYiwrQ0FBUUEsQ0FBQ087SUFDbkNOLGdEQUFTQSxDQUFDO1FBQ1JZLFNBQVMsQ0FBQ0MsU0FBV1gsaURBQUtBLENBQUNXLFFBQVEsR0FBR0MsS0FBS0MsR0FBRyxDQUFDUixTQUFTLEdBQUc7SUFDN0QsR0FBRztRQUFDQTtLQUFPO0lBQ1gsTUFBTVMsZ0JBQWdCZixrREFBV0EsQ0FBQztRQUNoQ1csU0FBUyxDQUFDQyxTQUFXSCxVQUFVRyxTQUFTLEdBQUcsR0FBR0MsS0FBS0MsR0FBRyxDQUFDUixRQUFRO0lBQ2pFLEdBQUc7UUFBQ0E7UUFBUUc7S0FBVTtJQUN0QixNQUFNTyxZQUFZaEIsa0RBQVdBLENBQUM7UUFDNUJXLFNBQVMsQ0FBQ0MsU0FBV0gsVUFBVUcsU0FBUyxHQUFHLEdBQUdDLEtBQUtDLEdBQUcsQ0FBQ1IsUUFBUTtJQUNqRSxHQUFHO1FBQUNBO1FBQVFHO0tBQVU7SUFDdEIsT0FBTztRQUFDQztRQUFPSztRQUFlQztRQUFXTDtLQUFTO0FBQ3BEO0FBRW9CLENBQ3BCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdXNlLWluZGV4Lm1qcz81NmM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8sIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi93cmFwLm1qcyc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICB3cmFwOiB0cnVlXG59O1xuZnVuY3Rpb24gdXNlSW5kZXgoaW5pdGlhbCwgbGVuZ3RoLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgd3JhcDogc2hvdWxkV3JhcCB9ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG4gIH0sIFtvcHRpb25zXSk7XG4gIGNvbnN0IHRyYW5zZm9ybSA9IHVzZU1lbW8oKCkgPT4gc2hvdWxkV3JhcCA/IHdyYXAgOiBjbGFtcCwgW3Nob3VsZFdyYXBdKTtcbiAgY29uc3QgW2luZGV4LCBzZXRJbmRleF0gPSB1c2VTdGF0ZShpbml0aWFsKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRJbmRleCgoaW5kZXgyKSA9PiBjbGFtcChpbmRleDIsIDAsIE1hdGgubWF4KGxlbmd0aCAtIDEsIDApKSk7XG4gIH0sIFtsZW5ndGhdKTtcbiAgY29uc3QgcHJldmlvdXNJbmRleCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJbmRleCgoaW5kZXgyKSA9PiB0cmFuc2Zvcm0oaW5kZXgyIC0gMSwgMCwgTWF0aC5tYXgobGVuZ3RoLCAwKSkpO1xuICB9LCBbbGVuZ3RoLCB0cmFuc2Zvcm1dKTtcbiAgY29uc3QgbmV4dEluZGV4ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldEluZGV4KChpbmRleDIpID0+IHRyYW5zZm9ybShpbmRleDIgKyAxLCAwLCBNYXRoLm1heChsZW5ndGgsIDApKSk7XG4gIH0sIFtsZW5ndGgsIHRyYW5zZm9ybV0pO1xuICByZXR1cm4gW2luZGV4LCBwcmV2aW91c0luZGV4LCBuZXh0SW5kZXgsIHNldEluZGV4XTtcbn1cblxuZXhwb3J0IHsgdXNlSW5kZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlQ2FsbGJhY2siLCJjbGFtcCIsIndyYXAiLCJkZWZhdWx0T3B0aW9ucyIsInVzZUluZGV4IiwiaW5pdGlhbCIsImxlbmd0aCIsIm9wdGlvbnMiLCJzaG91bGRXcmFwIiwidHJhbnNmb3JtIiwiaW5kZXgiLCJzZXRJbmRleCIsImluZGV4MiIsIk1hdGgiLCJtYXgiLCJwcmV2aW91c0luZGV4IiwibmV4dEluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-initial.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-initial.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInitial: () => (/* binding */ useInitial)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction useInitial(value) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value instanceof Function ? value() : value).current;\n}\n //# sourceMappingURL=use-initial.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtaW5pdGlhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFFL0IsU0FBU0MsV0FBV0MsS0FBSztJQUN2QixPQUFPRiw2Q0FBTUEsQ0FBQ0UsaUJBQWlCQyxXQUFXRCxVQUFVQSxPQUFPRSxPQUFPO0FBQ3BFO0FBRXNCLENBQ3RCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdXNlLWluaXRpYWwubWpzP2VkNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VJbml0aWFsKHZhbHVlKSB7XG4gIHJldHVybiB1c2VSZWYodmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IHZhbHVlKCkgOiB2YWx1ZSkuY3VycmVudDtcbn1cblxuZXhwb3J0IHsgdXNlSW5pdGlhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWluaXRpYWwubWpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZVJlZiIsInVzZUluaXRpYWwiLCJ2YWx1ZSIsIkZ1bmN0aW9uIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-initial.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-interval.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-interval.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInterval: () => (/* binding */ useInterval)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction useInterval(callback, delay) {\n    const latestCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        latestCallback.current = callback;\n    }, [\n        callback\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!delay && delay !== 0) {\n            return;\n        }\n        const id = setInterval(()=>{\n            if (latestCallback.current() === false) {\n                clearInterval(id);\n            }\n        }, delay);\n        return ()=>clearInterval(id);\n    }, [\n        delay\n    ]);\n}\n //# sourceMappingURL=use-interval.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtaW50ZXJ2YWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBRTFDLFNBQVNFLFlBQVlDLFFBQVEsRUFBRUMsS0FBSztJQUNsQyxNQUFNQyxpQkFBaUJMLDZDQUFNQSxDQUFDRztJQUM5QkYsZ0RBQVNBLENBQUM7UUFDUkksZUFBZUMsT0FBTyxHQUFHSDtJQUMzQixHQUFHO1FBQUNBO0tBQVM7SUFDYkYsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNHLFNBQVNBLFVBQVUsR0FBRztZQUN6QjtRQUNGO1FBQ0EsTUFBTUcsS0FBS0MsWUFBWTtZQUNyQixJQUFJSCxlQUFlQyxPQUFPLE9BQU8sT0FBTztnQkFDdENHLGNBQWNGO1lBQ2hCO1FBQ0YsR0FBR0g7UUFDSCxPQUFPLElBQU1LLGNBQWNGO0lBQzdCLEdBQUc7UUFBQ0g7S0FBTTtBQUNaO0FBRXVCLENBQ3ZCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdXNlLWludGVydmFsLm1qcz83ZTJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VJbnRlcnZhbChjYWxsYmFjaywgZGVsYXkpIHtcbiAgY29uc3QgbGF0ZXN0Q2FsbGJhY2sgPSB1c2VSZWYoY2FsbGJhY2spO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxhdGVzdENhbGxiYWNrLmN1cnJlbnQgPSBjYWxsYmFjaztcbiAgfSwgW2NhbGxiYWNrXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkZWxheSAmJiBkZWxheSAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChsYXRlc3RDYWxsYmFjay5jdXJyZW50KCkgPT09IGZhbHNlKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpZCk7XG4gIH0sIFtkZWxheV0pO1xufVxuXG5leHBvcnQgeyB1c2VJbnRlcnZhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWludGVydmFsLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VJbnRlcnZhbCIsImNhbGxiYWNrIiwiZGVsYXkiLCJsYXRlc3RDYWxsYmFjayIsImN1cnJlbnQiLCJpZCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-interval.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-layout-effect.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-layout-effect.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLayoutEffect: () => (/* binding */ useLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst useLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n //# sourceMappingURL=use-layout-effect.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtbGF5b3V0LWVmZmVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0U7QUFFeEUsTUFBTUEsa0JBQWtCLE1BQTZCLEdBQUdDLENBQWlCQSxHQUFHQyw0Q0FBU0E7QUFFMUQsQ0FDM0IsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtbGF5b3V0LWVmZmVjdC5tanM/NmYwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgYXMgdXNlTGF5b3V0RWZmZWN0JDEsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgdXNlTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHVzZUxheW91dEVmZmVjdCQxIDogdXNlRWZmZWN0O1xuXG5leHBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1sYXlvdXQtZWZmZWN0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QkMSIsInVzZUVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-layout-effect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-refs.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-refs.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useRefs: () => (/* binding */ useRefs)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction applyRef(ref, value) {\n    if (value) {\n        if (typeof ref === \"function\") {\n            ref(value);\n        } else if (ref && \"current\" in ref) {\n            ref.current = value;\n        }\n    }\n}\nfunction mergeRefs(value, ...refs) {\n    for (const ref of refs){\n        applyRef(ref, value);\n    }\n}\nfunction useRefs(...refs) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>mergeRefs(value, ...refs), [\n        refs\n    ]);\n}\n //# sourceMappingURL=use-refs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtcmVmcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFFcEMsU0FBU0MsU0FBU0MsR0FBRyxFQUFFQyxLQUFLO0lBQzFCLElBQUlBLE9BQU87UUFDVCxJQUFJLE9BQU9ELFFBQVEsWUFBWTtZQUM3QkEsSUFBSUM7UUFDTixPQUFPLElBQUlELE9BQU8sYUFBYUEsS0FBSztZQUNsQ0EsSUFBSUUsT0FBTyxHQUFHRDtRQUNoQjtJQUNGO0FBQ0Y7QUFDQSxTQUFTRSxVQUFVRixLQUFLLEVBQUUsR0FBR0csSUFBSTtJQUMvQixLQUFLLE1BQU1KLE9BQU9JLEtBQU07UUFDdEJMLFNBQVNDLEtBQUtDO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTSSxRQUFRLEdBQUdELElBQUk7SUFDdEIsT0FBT04sa0RBQVdBLENBQUMsQ0FBQ0csUUFBVUUsVUFBVUYsVUFBVUcsT0FBTztRQUFDQTtLQUFLO0FBQ2pFO0FBRW1CLENBQ25CLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdXNlLXJlZnMubWpzPzVlYzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIGFwcGx5UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiByZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmVmKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHJlZiAmJiBcImN1cnJlbnRcIiBpbiByZWYpIHtcbiAgICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtZXJnZVJlZnModmFsdWUsIC4uLnJlZnMpIHtcbiAgZm9yIChjb25zdCByZWYgb2YgcmVmcykge1xuICAgIGFwcGx5UmVmKHJlZiwgdmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiB1c2VSZWZzKC4uLnJlZnMpIHtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrKCh2YWx1ZSkgPT4gbWVyZ2VSZWZzKHZhbHVlLCAuLi5yZWZzKSwgW3JlZnNdKTtcbn1cblxuZXhwb3J0IHsgdXNlUmVmcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXJlZnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwiYXBwbHlSZWYiLCJyZWYiLCJ2YWx1ZSIsImN1cnJlbnQiLCJtZXJnZVJlZnMiLCJyZWZzIiwidXNlUmVmcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-refs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-rerender.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-rerender.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useRerender: () => (/* binding */ useRerender)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction useRerender() {\n    const [key, update] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((key2)=>key2 + 1, 0);\n    return [\n        update,\n        key\n    ];\n}\n //# sourceMappingURL=use-rerender.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtcmVyZW5kZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBRW5DLFNBQVNDO0lBQ1AsTUFBTSxDQUFDQyxLQUFLQyxPQUFPLEdBQUdILGlEQUFVQSxDQUM5QixDQUFDSSxPQUFTQSxPQUFPLEdBQ2pCO0lBRUYsT0FBTztRQUFDRDtRQUFRRDtLQUFJO0FBQ3RCO0FBRXVCLENBQ3ZCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdXNlLXJlcmVuZGVyLm1qcz84ZTI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIHVzZVJlcmVuZGVyKCkge1xuICBjb25zdCBba2V5LCB1cGRhdGVdID0gdXNlUmVkdWNlcihcbiAgICAoa2V5MikgPT4ga2V5MiArIDEsXG4gICAgMFxuICApO1xuICByZXR1cm4gW3VwZGF0ZSwga2V5XTtcbn1cblxuZXhwb3J0IHsgdXNlUmVyZW5kZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1yZXJlbmRlci5tanMubWFwXG4iXSwibmFtZXMiOlsidXNlUmVkdWNlciIsInVzZVJlcmVuZGVyIiwia2V5IiwidXBkYXRlIiwia2V5MiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-rerender.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-transition.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/use-transition.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTransition: () => (/* binding */ useTransition)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst useReactTransition = react__WEBPACK_IMPORTED_MODULE_0__[\"useTransition\".toString()];\nfunction useTransitionFallback(transition) {\n    return [\n        false,\n        transition\n    ];\n}\nconst useTransition = useReactTransition ?? useTransitionFallback;\n //# sourceMappingURL=use-transition.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy91c2UtdHJhbnNpdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUM7QUFFbkMsTUFBTUMscUJBQXFCRCxrQ0FBYyxDQUFDLGdCQUFnQkUsUUFBUSxHQUFHO0FBQ3JFLFNBQVNDLHNCQUFzQkMsVUFBVTtJQUN2QyxPQUFPO1FBQUM7UUFBT0E7S0FBVztBQUM1QjtBQUNBLE1BQU1DLGdCQUFnQkosc0JBQXNCRTtBQUVuQixDQUN6QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC1jb21tZW50cy9kaXN0L3V0aWxzL3VzZS10cmFuc2l0aW9uLm1qcz8xODU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHVzZVJlYWN0VHJhbnNpdGlvbiA9IFJlYWN0X19kZWZhdWx0W1widXNlVHJhbnNpdGlvblwiLnRvU3RyaW5nKCldO1xuZnVuY3Rpb24gdXNlVHJhbnNpdGlvbkZhbGxiYWNrKHRyYW5zaXRpb24pIHtcbiAgcmV0dXJuIFtmYWxzZSwgdHJhbnNpdGlvbl07XG59XG5jb25zdCB1c2VUcmFuc2l0aW9uID0gdXNlUmVhY3RUcmFuc2l0aW9uID8/IHVzZVRyYW5zaXRpb25GYWxsYmFjaztcblxuZXhwb3J0IHsgdXNlVHJhbnNpdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXRyYW5zaXRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0X19kZWZhdWx0IiwidXNlUmVhY3RUcmFuc2l0aW9uIiwidG9TdHJpbmciLCJ1c2VUcmFuc2l0aW9uRmFsbGJhY2siLCJ0cmFuc2l0aW9uIiwidXNlVHJhbnNpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/use-transition.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/visually-hidden.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/visually-hidden.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visuallyHidden: () => (/* binding */ visuallyHidden)\n/* harmony export */ });\nconst visuallyHidden = {\n    position: \"absolute\",\n    border: 0,\n    width: 1,\n    height: 1,\n    padding: 0,\n    margin: -1,\n    overflow: \"hidden\",\n    clip: \"rect(0, 0, 0, 0)\",\n    whiteSpace: \"nowrap\",\n    wordWrap: \"normal\"\n};\n //# sourceMappingURL=visually-hidden.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy92aXN1YWxseS1oaWRkZW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxpQkFBaUI7SUFDckJDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLFFBQVE7SUFDUkMsU0FBUztJQUNUQyxRQUFRLENBQUM7SUFDVEMsVUFBVTtJQUNWQyxNQUFNO0lBQ05DLFlBQVk7SUFDWkMsVUFBVTtBQUNaO0FBRTBCLENBQzFCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LWNvbW1lbnRzL2Rpc3QvdXRpbHMvdmlzdWFsbHktaGlkZGVuLm1qcz84OTA3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHZpc3VhbGx5SGlkZGVuID0ge1xuICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICBib3JkZXI6IDAsXG4gIHdpZHRoOiAxLFxuICBoZWlnaHQ6IDEsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogLTEsXG4gIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICBjbGlwOiBcInJlY3QoMCwgMCwgMCwgMClcIixcbiAgd2hpdGVTcGFjZTogXCJub3dyYXBcIixcbiAgd29yZFdyYXA6IFwibm9ybWFsXCJcbn07XG5cbmV4cG9ydCB7IHZpc3VhbGx5SGlkZGVuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aXN1YWxseS1oaWRkZW4ubWpzLm1hcFxuIl0sIm5hbWVzIjpbInZpc3VhbGx5SGlkZGVuIiwicG9zaXRpb24iLCJib3JkZXIiLCJ3aWR0aCIsImhlaWdodCIsInBhZGRpbmciLCJtYXJnaW4iLCJvdmVyZmxvdyIsImNsaXAiLCJ3aGl0ZVNwYWNlIiwid29yZFdyYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/visually-hidden.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/wrap.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-comments/dist/utils/wrap.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\nfunction wrap(value, min, max) {\n    const range = max - min;\n    return range > 0 ? ((value - min) % range + range) % range + min : 0;\n}\n //# sourceMappingURL=wrap.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy93cmFwLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsS0FBS0MsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEdBQUc7SUFDM0IsTUFBTUMsUUFBUUQsTUFBTUQ7SUFDcEIsT0FBT0UsUUFBUSxJQUFJLENBQUMsQ0FBQ0gsUUFBUUMsR0FBRSxJQUFLRSxRQUFRQSxLQUFJLElBQUtBLFFBQVFGLE1BQU07QUFDckU7QUFFZ0IsQ0FDaEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtY29tbWVudHMvZGlzdC91dGlscy93cmFwLm1qcz9mMGQ2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdyYXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluO1xuICByZXR1cm4gcmFuZ2UgPiAwID8gKCh2YWx1ZSAtIG1pbikgJSByYW5nZSArIHJhbmdlKSAlIHJhbmdlICsgbWluIDogMDtcbn1cblxuZXhwb3J0IHsgd3JhcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcC5tanMubWFwXG4iXSwibmFtZXMiOlsid3JhcCIsInZhbHVlIiwibWluIiwibWF4IiwicmFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-comments/dist/utils/wrap.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@liveblocks/react/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientSideSuspense: () => (/* binding */ ClientSideSuspense),\n/* harmony export */   createRoomContext: () => (/* binding */ createRoomContext),\n/* harmony export */   shallow: () => (/* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow),\n/* harmony export */   useRoomContextBundle: () => (/* binding */ useRoomContextBundle)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liveblocks/client */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/nanoid/index.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* __next_internal_client_entry_do_not_use__ ClientSideSuspense,createRoomContext,shallow,useRoomContextBundle auto */ // src/index.ts\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/react\";\nvar PKG_VERSION = \"1.9.7\";\nvar PKG_FORMAT = \"esm\";\n// src/ClientSideSuspense.tsx\n\nfunction ClientSideSuspense(props) {\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setMounted(true);\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: props.fallback\n    }, mounted ? props.children() : props.fallback);\n}\n// src/factory.tsx\n\n\n\n\n// src/comments/CommentsRoom.tsx\n\n\n\n\n// src/comments/errors.ts\nvar CreateThreadError = class extends Error {\n    constructor(cause, context){\n        super(\"Create thread failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"CreateThreadError\";\n    }\n};\nvar EditThreadMetadataError = class extends Error {\n    constructor(cause, context){\n        super(\"Edit thread metadata failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"EditThreadMetadataError\";\n    }\n};\nvar CreateCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Create comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"CreateCommentError\";\n    }\n};\nvar EditCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Edit comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"EditCommentError\";\n    }\n};\nvar DeleteCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Delete comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"DeleteCommentError\";\n    }\n};\nvar AddReactionError = class extends Error {\n    constructor(cause, context){\n        super(\"Add reaction failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"AddReactionError\";\n    }\n};\nvar RemoveReactionError = class extends Error {\n    constructor(cause, context){\n        super(\"Remove reaction failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"RemoveReactionError\";\n    }\n};\n// src/comments/lib/revalidation.ts\n\n// src/comments/lib/use-is-document-visible.ts\n\nfunction useIsDocumentVisible() {\n    const isVisible = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);\n    return isVisible;\n}\nfunction subscribe(onStoreChange) {\n    document.addEventListener(\"visibilitychange\", onStoreChange);\n    return ()=>{\n        document.removeEventListener(\"visibilitychange\", onStoreChange);\n    };\n}\nfunction getSnapshot() {\n    const isDocumentDefined = typeof document !== \"undefined\";\n    return isDocumentDefined ? document.visibilityState === \"visible\" : true;\n}\n// src/comments/lib/use-is-online.ts\n\n\nfunction useIsOnline() {\n    const isOnlineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const subscribe2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((onStoreChange)=>{\n        function handleIsOnline() {\n            isOnlineRef.current = true;\n            onStoreChange();\n        }\n        function handleIsOffline() {\n            isOnlineRef.current = false;\n            onStoreChange();\n        }\n        window.addEventListener(\"online\", handleIsOnline);\n        window.addEventListener(\"offline\", handleIsOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleIsOnline);\n            window.removeEventListener(\"offline\", handleIsOffline);\n        };\n    }, []);\n    const getSnapshot2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return isOnlineRef.current;\n    }, []);\n    const isOnline = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe2, getSnapshot2, getSnapshot2);\n    return isOnline;\n}\n// src/comments/lib/revalidation.ts\nvar DEFAULT_ERROR_RETRY_INTERVAL = 5e3;\nvar DEFAULT_MAX_ERROR_RETRY_COUNT = 5;\nvar DEFAULT_DEDUPING_INTERVAL = 2e3;\nvar timestamp = 0;\nfunction useRevalidateCache(manager, fetcher, options = {}) {\n    const isOnlineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const { dedupingInterval = DEFAULT_DEDUPING_INTERVAL, errorRetryInterval = DEFAULT_ERROR_RETRY_INTERVAL, errorRetryCount = DEFAULT_MAX_ERROR_RETRY_COUNT } = options;\n    const _revalidateCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ shouldDedupe, retryCount = 0 })=>{\n        let startAt;\n        const shouldStartRequest = !manager.getRequest() || !shouldDedupe;\n        function deleteActiveRequest() {\n            const activeRequest = manager.getRequest();\n            if (!activeRequest) return;\n            if (activeRequest.timestamp !== startAt) return;\n            manager.setRequest(void 0);\n        }\n        function handleError() {\n            const timeout = ~~((Math.random() + 0.5) * (1 << (retryCount < 8 ? retryCount : 8))) * errorRetryInterval;\n            if (retryCount > errorRetryCount) return;\n            setTimeout(()=>{\n                void _revalidateCache({\n                    shouldDedupe: false,\n                    retryCount: retryCount + 1\n                });\n            }, timeout);\n        }\n        if (shouldStartRequest) {\n            manager.setRequest({\n                fetcher: fetcher(),\n                timestamp: ++timestamp\n            });\n        }\n        try {\n            let activeRequest = manager.getRequest();\n            if (!activeRequest) return;\n            startAt = activeRequest.timestamp;\n            const newData = await activeRequest.fetcher;\n            if (shouldStartRequest) {\n                setTimeout(deleteActiveRequest, dedupingInterval);\n            }\n            activeRequest = manager.getRequest();\n            if (!activeRequest || activeRequest.timestamp !== startAt) return;\n            const activeMutation = manager.getMutation();\n            if (activeMutation && (activeMutation.startTime > startAt || activeMutation.endTime > startAt || activeMutation.endTime === 0)) {\n                return;\n            }\n            manager.setCache(newData);\n        } catch (err) {\n            deleteActiveRequest();\n            const isVisible = document.visibilityState === \"visible\";\n            const isOnline = isOnlineRef.current;\n            if (shouldStartRequest && isVisible && isOnline) handleError();\n            manager.setError(err);\n        }\n        return;\n    }, [\n        manager,\n        fetcher,\n        dedupingInterval,\n        errorRetryInterval,\n        errorRetryCount\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        function handleIsOnline() {\n            isOnlineRef.current = true;\n        }\n        function handleIsOffline() {\n            isOnlineRef.current = false;\n        }\n        window.addEventListener(\"online\", handleIsOnline);\n        window.addEventListener(\"offline\", handleIsOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleIsOnline);\n            window.removeEventListener(\"offline\", handleIsOffline);\n        };\n    }, []);\n    const revalidateCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ shouldDedupe })=>{\n        return _revalidateCache({\n            shouldDedupe,\n            retryCount: 0\n        });\n    }, [\n        _revalidateCache\n    ]);\n    return revalidateCache;\n}\nfunction useMutate(manager, revalidateCache) {\n    const mutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (data, options)=>{\n        const beforeMutationTimestamp = ++timestamp;\n        manager.setMutation({\n            startTime: beforeMutationTimestamp,\n            endTime: 0\n        });\n        const currentCache = manager.getCache();\n        manager.setCache(options.optimisticData);\n        let error;\n        try {\n            await data;\n        } catch (err) {\n            error = err;\n        }\n        const activeMutation = manager.getMutation();\n        if (activeMutation && beforeMutationTimestamp !== activeMutation.startTime) {\n            if (error) throw error;\n            return;\n        }\n        if (error) {\n            manager.setCache(currentCache);\n        }\n        manager.setMutation({\n            startTime: beforeMutationTimestamp,\n            endTime: ++timestamp\n        });\n        manager.setRequest(void 0);\n        void revalidateCache({\n            shouldDedupe: false\n        });\n        if (error) throw error;\n    }, [\n        manager,\n        revalidateCache\n    ]);\n    return mutate;\n}\n// src/comments/CommentsRoom.tsx\nvar THREAD_ID_PREFIX = \"th\";\nvar COMMENT_ID_PREFIX = \"cm\";\nvar POLLING_INTERVAL_REALTIME = 3e4;\nvar POLLING_INTERVAL = 5e3;\nfunction createCommentsRoom(errorEventSource) {\n    const store = createClientCacheStore();\n    const FetcherContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n    const RoomManagerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n    function getThreads(manager) {\n        const threads = manager.getCache();\n        if (!threads) {\n            throw new Error(\"Cannot update threads or comments before they are loaded.\");\n        }\n        return threads;\n    }\n    function CommentsRoomProvider({ room, children }) {\n        const manager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n            return createRoomRevalidationManager(room.id, {\n                getCache: store.getThreads,\n                setCache: store.setThreads\n            });\n        }, [\n            room.id\n        ]);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>{\n            const options = manager.getRevalidationManagers().filter(([key])=>manager.getReferenceCount(key) > 0).map(([_, manager2])=>manager2.getOptions());\n            const responses = await Promise.all(options.map(async (option)=>{\n                return await room.getThreads(option);\n            }));\n            const threads = Array.from(new Map(responses.flat().map((thread)=>[\n                    thread.id,\n                    thread\n                ])).values());\n            return threads;\n        }, [\n            room,\n            manager\n        ]);\n        const revalidateCache = useRevalidateCache(manager, fetcher);\n        const status = useSyncExternalStore3(room.events.status.subscribe, room.getStatus, room.getStatus);\n        const isOnline = useIsOnline();\n        const isDocumentVisible = useIsDocumentVisible();\n        const refreshInterval = getPollingInterval(isOnline, isDocumentVisible, status === \"connected\");\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            let revalidationTimerId;\n            function scheduleRevalidation() {\n                if (refreshInterval === 0) return;\n                revalidationTimerId = window.setTimeout(()=>{\n                    if (isOnline && isDocumentVisible && !manager.getError() && manager.getTotalReferenceCount() > 0) {\n                        void revalidateCache({\n                            shouldDedupe: true\n                        }).then(scheduleRevalidation);\n                        return;\n                    }\n                    scheduleRevalidation();\n                }, refreshInterval);\n            }\n            scheduleRevalidation();\n            return ()=>{\n                window.clearTimeout(revalidationTimerId);\n            };\n        }, [\n            revalidateCache,\n            refreshInterval,\n            isOnline,\n            isDocumentVisible,\n            manager\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            function handleIsOnline() {\n                if (isDocumentVisible) {\n                    void revalidateCache({\n                        shouldDedupe: true\n                    });\n                }\n            }\n            window.addEventListener(\"online\", handleIsOnline);\n            return ()=>{\n                window.removeEventListener(\"online\", handleIsOnline);\n            };\n        }, [\n            revalidateCache,\n            isDocumentVisible\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            function handleVisibilityChange() {\n                const isVisible = document.visibilityState === \"visible\";\n                if (isVisible && isOnline) {\n                    void revalidateCache({\n                        shouldDedupe: true\n                    });\n                }\n            }\n            document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n            return ()=>{\n                document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            };\n        }, [\n            revalidateCache,\n            isOnline\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            const unsubscribe = room.events.comments.subscribe(()=>{\n                void revalidateCache({\n                    shouldDedupe: false\n                });\n            });\n            return ()=>{\n                unsubscribe();\n            };\n        }, [\n            room,\n            revalidateCache\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FetcherContext.Provider, {\n            value: fetcher\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomManagerContext.Provider, {\n            value: manager\n        }, children));\n    }\n    function useRoomManager() {\n        const manager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RoomManagerContext);\n        if (manager === null) {\n            throw new Error(\"CommentsRoomProvider is missing from the React tree.\");\n        }\n        return manager;\n    }\n    function getUseThreadsRevalidationManager(options, roomManager) {\n        const key = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options);\n        const revalidationManager = roomManager.getRevalidationManager(key);\n        if (!revalidationManager) {\n            const useThreadsRevalidationManager = createUseThreadsRevalidationManager(options, roomManager);\n            roomManager.setRevalidationmanager(key, useThreadsRevalidationManager);\n            return useThreadsRevalidationManager;\n        }\n        return revalidationManager;\n    }\n    function useThreadsFetcher() {\n        const fetcher = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FetcherContext);\n        if (fetcher === null) {\n            throw new Error(\"CommentsRoomProvider is missing from the React tree.\");\n        }\n        return fetcher;\n    }\n    function useThreads(room, options = {\n        query: {\n            metadata: {}\n        }\n    }) {\n        const key = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options), [\n            options\n        ]);\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            return room.getThreads(options);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps -- The missing dependency is `options` but `key` and `normalized` are analogous, so we only include `key` as dependency. This helps minimize the number of re-renders as `options` can change on each render\n        [\n            key,\n            room\n        ]);\n        const revalidateCache = useRevalidateCache(useThreadsRevalidationManager, fetcher);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            void revalidateCache({\n                shouldDedupe: true\n            });\n        }, [\n            revalidateCache\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            manager.incrementReferenceCount(key);\n            return ()=>{\n                manager.decrementReferenceCount(key);\n            };\n        }, [\n            manager,\n            key\n        ]);\n        const cache = _useThreads(room, options);\n        return cache;\n    }\n    function useThreadsSuspense(room, options = {\n        query: {\n            metadata: {}\n        }\n    }) {\n        const key = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options), [\n            options\n        ]);\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            return room.getThreads(options);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps -- The missing dependency is `options` but `key` and `normalized` are analogous, so we only include `key` as dependency. This helps minimize the number of re-renders as `options` can change on each render\n        [\n            key,\n            room\n        ]);\n        const revalidateCache = useRevalidateCache(useThreadsRevalidationManager, fetcher);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            void revalidateCache({\n                shouldDedupe: true\n            });\n        }, [\n            revalidateCache\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            manager.incrementReferenceCount(key);\n            return ()=>{\n                manager.decrementReferenceCount(key);\n            };\n        }, [\n            manager,\n            key\n        ]);\n        const cache = _useThreads(room, options);\n        if (cache.error) {\n            throw cache.error;\n        }\n        if (cache.isLoading || !cache.threads) {\n            throw revalidateCache({\n                shouldDedupe: true\n            });\n        }\n        return {\n            isLoading: false,\n            threads: cache.threads,\n            error: cache.error\n        };\n    }\n    function _useThreads(room, options) {\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(store.subscribe, ()=>store.getThreads(), ()=>store.getThreads(), (state)=>{\n            const isLoading = useThreadsRevalidationManager.getIsLoading();\n            if (isLoading) {\n                return {\n                    isLoading: true\n                };\n            }\n            const options2 = useThreadsRevalidationManager.getOptions();\n            const error = useThreadsRevalidationManager.getError();\n            const filtered = state.filter((thread)=>{\n                if (thread.roomId !== room.id) return false;\n                const query = options2.query ?? {};\n                for(const key in query.metadata){\n                    if (thread.metadata[key] !== query.metadata[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n            return {\n                isLoading: false,\n                threads: filtered,\n                error\n            };\n        });\n    }\n    function useEditThreadMetadata(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const editThreadMetadata = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options)=>{\n            const threadId = options.threadId;\n            const metadata = \"metadata\" in options ? options.metadata : {};\n            const threads = getThreads(manager);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    metadata: {\n                        ...thread.metadata,\n                        ...metadata\n                    }\n                } : thread);\n            mutate(room.editThreadMetadata({\n                metadata,\n                threadId\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new EditThreadMetadataError(error, {\n                    roomId: room.id,\n                    threadId,\n                    metadata\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return editThreadMetadata;\n    }\n    function useCreateThread(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options)=>{\n            const body = options.body;\n            const metadata = \"metadata\" in options ? options.metadata : {};\n            const threads = getThreads(manager);\n            const threadId = createThreadId();\n            const commentId = createCommentId();\n            const now = /* @__PURE__ */ new Date();\n            const newComment = {\n                id: commentId,\n                threadId,\n                roomId: room.id,\n                createdAt: now,\n                type: \"comment\",\n                userId: getCurrentUserId(room),\n                body,\n                reactions: []\n            };\n            const newThread = {\n                id: threadId,\n                type: \"thread\",\n                createdAt: now,\n                roomId: room.id,\n                metadata,\n                comments: [\n                    newComment\n                ]\n            };\n            mutate(room.createThread({\n                threadId,\n                commentId,\n                body,\n                metadata\n            }), {\n                optimisticData: [\n                    ...threads,\n                    newThread\n                ]\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new CreateThreadError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body,\n                    metadata\n                }));\n            });\n            return newThread;\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createThread;\n    }\n    function useCreateComment(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, body })=>{\n            const threads = getThreads(manager);\n            const commentId = createCommentId();\n            const now = /* @__PURE__ */ new Date();\n            const comment = {\n                id: commentId,\n                threadId,\n                roomId: room.id,\n                type: \"comment\",\n                createdAt: now,\n                userId: getCurrentUserId(room),\n                body,\n                reactions: []\n            };\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: [\n                        ...thread.comments,\n                        comment\n                    ]\n                } : thread);\n            mutate(room.createComment({\n                threadId,\n                commentId,\n                body\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new CreateCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body\n                }));\n            });\n            return comment;\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    function useEditComment(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const editComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId, body })=>{\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>comment.id === commentId ? {\n                            ...comment,\n                            editedAt: now,\n                            body\n                        } : comment)\n                } : thread);\n            mutate(room.editComment({\n                threadId,\n                commentId,\n                body\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new EditCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return editComment;\n    }\n    function useDeleteComment(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const deleteComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId })=>{\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const newThreads = [];\n            for (const thread of threads){\n                if (thread.id === threadId) {\n                    const newThread = {\n                        ...thread,\n                        comments: thread.comments.map((comment)=>comment.id === commentId ? {\n                                ...comment,\n                                deletedAt: now,\n                                body: void 0\n                            } : comment)\n                    };\n                    if (newThread.comments.some((comment)=>comment.deletedAt === void 0)) {\n                        newThreads.push(newThread);\n                    }\n                } else {\n                    newThreads.push(thread);\n                }\n            }\n            mutate(room.deleteComment({\n                threadId,\n                commentId\n            }), {\n                optimisticData: newThreads\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new DeleteCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return deleteComment;\n    }\n    function useAddReaction(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId, emoji })=>{\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const userId = getCurrentUserId(room);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>{\n                        if (comment.id !== commentId) {\n                            return comment;\n                        }\n                        let reactions;\n                        if (comment.reactions.some((reaction)=>reaction.emoji === emoji)) {\n                            reactions = comment.reactions.map((reaction)=>reaction.emoji === emoji ? {\n                                    ...reaction,\n                                    users: [\n                                        ...reaction.users,\n                                        {\n                                            id: userId\n                                        }\n                                    ]\n                                } : reaction);\n                        } else {\n                            reactions = [\n                                ...comment.reactions,\n                                {\n                                    emoji,\n                                    createdAt: now,\n                                    users: [\n                                        {\n                                            id: userId\n                                        }\n                                    ]\n                                }\n                            ];\n                        }\n                        return {\n                            ...comment,\n                            reactions\n                        };\n                    })\n                } : thread);\n            mutate(room.addReaction({\n                threadId,\n                commentId,\n                emoji\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new AddReactionError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    emoji\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    function useRemoveReaction(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId, emoji })=>{\n            const threads = getThreads(manager);\n            const userId = getCurrentUserId(room);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>{\n                        if (comment.id !== commentId) {\n                            return comment;\n                        }\n                        const reactionIndex = comment.reactions.findIndex((reaction)=>reaction.emoji === emoji);\n                        let reactions = comment.reactions;\n                        if (reactionIndex >= 0 && comment.reactions[reactionIndex].users.some((user)=>user.id === userId)) {\n                            if (comment.reactions[reactionIndex].users.length <= 1) {\n                                reactions = [\n                                    ...comment.reactions\n                                ];\n                                reactions.splice(reactionIndex, 1);\n                            } else {\n                                reactions[reactionIndex] = {\n                                    ...reactions[reactionIndex],\n                                    users: reactions[reactionIndex].users.filter((user)=>user.id !== userId)\n                                };\n                            }\n                        }\n                        return {\n                            ...comment,\n                            reactions\n                        };\n                    })\n                } : thread);\n            mutate(room.removeReaction({\n                threadId,\n                commentId,\n                emoji\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new RemoveReactionError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    emoji\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    return {\n        CommentsRoomProvider,\n        useThreads,\n        useThreadsSuspense,\n        useEditThreadMetadata,\n        useCreateThread,\n        useCreateComment,\n        useEditComment,\n        useDeleteComment,\n        useAddReaction,\n        useRemoveReaction\n    };\n}\nfunction createOptimisticId(prefix) {\n    return `${prefix}_${(0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)()}`;\n}\nfunction createThreadId() {\n    return createOptimisticId(THREAD_ID_PREFIX);\n}\nfunction createCommentId() {\n    return createOptimisticId(COMMENT_ID_PREFIX);\n}\nfunction getCurrentUserId(room) {\n    const self = room.getSelf();\n    if (self === null || self.id === void 0) {\n        return \"anonymous\";\n    } else {\n        return self.id;\n    }\n}\nfunction handleCommentsApiError(err) {\n    const message = `Request failed with status ${err.status}: ${err.message}`;\n    if (err.details?.error === \"FORBIDDEN\") {\n        const detailedMessage = [\n            message,\n            err.details.suggestion,\n            err.details.docs\n        ].filter(Boolean).join(\"\\n\");\n        console.error(detailedMessage);\n    }\n    return new Error(message);\n}\nfunction createRoomRevalidationManager(roomId, { getCache, setCache }) {\n    let request;\n    let error;\n    let mutation;\n    const revalidationManagerByOptions = /* @__PURE__ */ new Map();\n    const referenceCountByOptions = /* @__PURE__ */ new Map();\n    return {\n        // Cache\n        getCache () {\n            const threads = getCache();\n            const filtered = threads.filter((thread)=>thread.roomId === roomId);\n            return filtered;\n        },\n        setCache (value) {\n            for (const key of revalidationManagerByOptions.keys()){\n                if (referenceCountByOptions.get(key) === 0) {\n                    revalidationManagerByOptions.delete(key);\n                    referenceCountByOptions.delete(key);\n                }\n            }\n            const sorted = value.sort((a, b)=>new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n            const threads = getCache();\n            const newThreads = threads.filter((thread)=>thread.roomId !== roomId).concat(sorted);\n            setCache(newThreads);\n        },\n        // Request\n        getRequest () {\n            return request;\n        },\n        setRequest (value) {\n            request = value;\n        },\n        // Error\n        getError () {\n            return error;\n        },\n        setError (err) {\n            error = err;\n        },\n        // Mutation\n        getMutation () {\n            return mutation;\n        },\n        setMutation (info) {\n            mutation = info;\n        },\n        getRevalidationManagers () {\n            return Array.from(revalidationManagerByOptions.entries());\n        },\n        getRevalidationManager (key) {\n            return revalidationManagerByOptions.get(key);\n        },\n        setRevalidationmanager (key, manager) {\n            revalidationManagerByOptions.set(key, manager);\n        },\n        getTotalReferenceCount () {\n            return Array.from(referenceCountByOptions.values()).reduce((acc, count)=>acc + count, 0);\n        },\n        incrementReferenceCount (key) {\n            const count = referenceCountByOptions.get(key) ?? 0;\n            referenceCountByOptions.set(key, count + 1);\n        },\n        decrementReferenceCount (key) {\n            const count = referenceCountByOptions.get(key) ?? 0;\n            referenceCountByOptions.set(key, count - 1);\n        },\n        getReferenceCount (key) {\n            return referenceCountByOptions.get(key) ?? 0;\n        }\n    };\n}\nfunction createClientCacheStore() {\n    let threads = [];\n    const threadsEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n    return {\n        getThreads () {\n            return threads;\n        },\n        setThreads (value) {\n            threads = value;\n            threadsEventSource.notify(threads);\n        },\n        subscribe (callback) {\n            return threadsEventSource.subscribe(callback);\n        }\n    };\n}\nfunction createUseThreadsRevalidationManager(options, manager) {\n    let isLoading = true;\n    let request;\n    let error;\n    return {\n        // Cache\n        getCache () {\n            return void 0;\n        },\n        setCache (value) {\n            const cache = new Map((manager.getCache() ?? []).map((thread)=>[\n                    thread.id,\n                    thread\n                ]));\n            for (const thread of value){\n                cache.set(thread.id, thread);\n            }\n            manager.setCache(Array.from(cache.values()));\n            isLoading = false;\n        },\n        // Request\n        getRequest () {\n            return request;\n        },\n        setRequest (value) {\n            request = value;\n        },\n        // Error\n        getError () {\n            return error;\n        },\n        setError (err) {\n            error = err;\n            isLoading = false;\n            const cache = manager.getCache();\n            manager.setCache(cache);\n        },\n        // Mutation\n        getMutation () {\n            return void 0;\n        },\n        setMutation (_) {\n            return;\n        },\n        getOptions () {\n            return options;\n        },\n        getIsLoading () {\n            return isLoading;\n        },\n        setIsLoading (value) {\n            isLoading = value;\n        }\n    };\n}\nfunction getPollingInterval(isBrowserOnline, isDocumentVisible, isRoomConnected) {\n    if (!isBrowserOnline || !isDocumentVisible) return;\n    if (isRoomConnected) return POLLING_INTERVAL_REALTIME;\n    return POLLING_INTERVAL;\n}\n// src/comments/lib/use-debounce.ts\n\nvar DEFAULT_DELAY = 500;\nfunction useDebounce(value, delay = DEFAULT_DELAY) {\n    const timeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const [debouncedValue, setDebouncedValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (delay === false) {\n            return;\n        }\n        if (timeout.current === void 0) {\n            setDebouncedValue(value);\n        }\n        timeout.current = window.setTimeout(()=>{\n            setDebouncedValue(value);\n            timeout.current = void 0;\n        }, delay);\n        return ()=>{\n            window.clearTimeout(timeout.current);\n        };\n    }, [\n        value,\n        delay\n    ]);\n    return debouncedValue;\n}\n// src/lib/use-async-cache.ts\n\n\n// src/lib/use-initial.ts\n\nfunction useInitial(value) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value)[0];\n}\n// src/lib/use-async-cache.ts\nvar INITIAL_ASYNC_STATE = {\n    isLoading: false,\n    data: void 0,\n    error: void 0\n};\nvar noop = ()=>{};\nfunction useAsyncCache(cache, key, options) {\n    const frozenOptions = useInitial(options);\n    const cacheItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (key === null || !cache) {\n            return null;\n        }\n        const cacheItem2 = cache.create(key);\n        void cacheItem2.get();\n        return cacheItem2;\n    }, [\n        cache,\n        key\n    ]);\n    const subscribe2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback)=>cacheItem?.subscribe(callback) ?? noop, [\n        cacheItem\n    ]);\n    const getState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>cacheItem?.getState() ?? INITIAL_ASYNC_STATE, [\n        cacheItem\n    ]);\n    const revalidate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>cacheItem?.revalidate(), [\n        cacheItem\n    ]);\n    const state = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe2, getState, getState);\n    const previousData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let data = state.data;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        previousData.current = {\n            key,\n            data: state.data\n        };\n    }, [\n        key,\n        state.data\n    ]);\n    if (!cacheItem) {\n        return {\n            isLoading: false,\n            data: void 0,\n            error: void 0,\n            getState,\n            revalidate\n        };\n    }\n    if (frozenOptions?.suspense) {\n        const error = getState().error;\n        if (error) {\n            throw error;\n        } else if (getState().isLoading) {\n            throw new Promise((resolve)=>{\n                cacheItem.subscribeOnce((state2)=>{\n                    if (!state2.isLoading) {\n                        resolve();\n                    }\n                });\n            });\n        }\n    }\n    if (state.isLoading && frozenOptions?.keepPreviousDataWhileLoading && typeof state.data === \"undefined\" && previousData.current?.key !== key && typeof previousData.current?.data !== \"undefined\") {\n        data = previousData.current.data;\n    }\n    return {\n        isLoading: state.isLoading,\n        data,\n        error: state.error,\n        getState,\n        revalidate\n    };\n}\n// src/lib/use-latest.ts\n\nfunction useLatest(value) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ref.current = value;\n    }, [\n        value\n    ]);\n    return ref;\n}\n// src/lib/use-rerender.ts\n\nfunction useRerender() {\n    const [, update] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(// This implementation works by incrementing a hidden counter value that is\n    // never consumed. Simply incrementing the counter changes the component's\n    // state and, thus, trigger a re-render.\n    (x)=>x + 1, 0);\n    return update;\n}\n// src/factory.tsx\nvar noop2 = ()=>{};\nvar identity = (x)=>x;\nvar missing_unstable_batchedUpdates = (reactVersion, roomId)=>`We noticed you\\u2019re using React ${reactVersion}. Please pass unstable_batchedUpdates at the RoomProvider level until you\\u2019re ready to upgrade to React 18:\n\n    import { unstable_batchedUpdates } from \"react-dom\";  // or \"react-native\"\n\n    <RoomProvider id=${JSON.stringify(roomId)} ... unstable_batchedUpdates={unstable_batchedUpdates}>\n      ...\n    </RoomProvider>\n\nWhy? Please see https://liveblocks.io/docs/platform/troubleshooting#stale-props-zombie-child for more information`;\nvar superfluous_unstable_batchedUpdates = \"You don’t need to pass unstable_batchedUpdates to RoomProvider anymore, since you’re on React 18+ already.\";\nfunction useSyncExternalStore3(s, gs, gss) {\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(s, gs, gss, identity);\n}\nvar STABLE_EMPTY_LIST = Object.freeze([]);\nfunction alwaysEmptyList() {\n    return STABLE_EMPTY_LIST;\n}\nfunction alwaysNull() {\n    return null;\n}\nfunction makeMutationContext(room) {\n    const errmsg = \"This mutation cannot be used until connected to the Liveblocks room\";\n    return {\n        get storage () {\n            const mutableRoot = room.getStorageSnapshot();\n            if (mutableRoot === null) {\n                throw new Error(errmsg);\n            }\n            return mutableRoot;\n        },\n        get self () {\n            const self = room.getSelf();\n            if (self === null) {\n                throw new Error(errmsg);\n            }\n            return self;\n        },\n        get others () {\n            const others = room.getOthers();\n            if (room.getSelf() === null) {\n                throw new Error(errmsg);\n            }\n            return others;\n        },\n        setMyPresence: room.updatePresence\n    };\n}\nvar hasWarnedIfNoResolveUsers = false;\nfunction warnIfNoResolveUsers(usersCache) {\n    if (!hasWarnedIfNoResolveUsers && !usersCache && \"development\" !== \"production\") {\n        console.warn(\"Set the resolveUsers option in createRoomContext to specify user info.\");\n        hasWarnedIfNoResolveUsers = true;\n    }\n}\nvar ContextBundle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nfunction useRoomContextBundle() {\n    const bundle = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ContextBundle);\n    if (bundle === null) {\n        throw new Error(\"RoomProvider is missing from the React tree.\");\n    }\n    return bundle;\n}\nfunction createRoomContext(client, options) {\n    const RoomContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n    const commentsErrorEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n    const { CommentsRoomProvider, ...commentsRoom } = createCommentsRoom(commentsErrorEventSource);\n    function RoomProviderOuter(props) {\n        const [cache] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>/* @__PURE__ */ new Map());\n        const stableEnterRoom = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((roomId, options2)=>{\n            const cached = cache.get(roomId);\n            if (cached) return cached;\n            const rv = client.enterRoom(roomId, options2);\n            const origLeave = rv.leave;\n            rv.leave = ()=>{\n                origLeave();\n                cache.delete(roomId);\n            };\n            cache.set(roomId, rv);\n            return rv;\n        }, [\n            cache\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomProviderInner, {\n            ...props,\n            stableEnterRoom\n        });\n    }\n    function RoomProviderInner(props) {\n        const { id: roomId, stableEnterRoom } = props;\n        if (true) {\n            if (!roomId) {\n                throw new Error(\"RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required\");\n            }\n            if (typeof roomId !== \"string\") {\n                throw new Error(\"RoomProvider id property should be a string.\");\n            }\n            const majorReactVersion = parseInt(react__WEBPACK_IMPORTED_MODULE_0__.version) || 1;\n            const oldReactVersion = majorReactVersion < 18;\n            (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.errorIf)(oldReactVersion && props.unstable_batchedUpdates === void 0, missing_unstable_batchedUpdates(majorReactVersion, roomId));\n            (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.deprecateIf)(!oldReactVersion && props.unstable_batchedUpdates !== void 0, superfluous_unstable_batchedUpdates);\n        }\n        const frozenProps = useInitial({\n            initialPresence: props.initialPresence,\n            initialStorage: props.initialStorage,\n            unstable_batchedUpdates: props.unstable_batchedUpdates,\n            autoConnect: props.autoConnect ?? props.shouldInitiallyConnect ?? \"undefined\" !== \"undefined\"\n        });\n        const [{ room }, setRoomLeavePair] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>stableEnterRoom(roomId, {\n                ...frozenProps,\n                autoConnect: false\n            }));\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const pair = stableEnterRoom(roomId, frozenProps);\n            setRoomLeavePair(pair);\n            const { room: room2, leave } = pair;\n            if (frozenProps.autoConnect) {\n                room2.connect();\n            }\n            return ()=>{\n                leave();\n            };\n        }, [\n            roomId,\n            frozenProps,\n            stableEnterRoom\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, {\n            value: room\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentsRoomProvider, {\n            room\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContextBundle.Provider, {\n            value: internalBundle\n        }, props.children)));\n    }\n    function connectionIdSelector(others) {\n        return others.map((user)=>user.connectionId);\n    }\n    function useRoom() {\n        const room = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n        if (room === null) {\n            throw new Error(\"RoomProvider is missing from the React tree.\");\n        }\n        return room;\n    }\n    function useStatus() {\n        const room = useRoom();\n        const subscribe2 = room.events.status.subscribe;\n        const getSnapshot2 = room.getStatus;\n        const getServerSnapshot = room.getStatus;\n        return useSyncExternalStore3(subscribe2, getSnapshot2, getServerSnapshot);\n    }\n    function useMyPresence() {\n        const room = useRoom();\n        const subscribe2 = room.events.myPresence.subscribe;\n        const getSnapshot2 = room.getPresence;\n        const presence = useSyncExternalStore3(subscribe2, getSnapshot2, getSnapshot2);\n        const setPresence = room.updatePresence;\n        return [\n            presence,\n            setPresence\n        ];\n    }\n    function useUpdateMyPresence() {\n        return useRoom().updatePresence;\n    }\n    function useOthers(selector, isEqual) {\n        const room = useRoom();\n        const subscribe2 = room.events.others.subscribe;\n        const getSnapshot2 = room.getOthers;\n        const getServerSnapshot = alwaysEmptyList;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, selector ?? identity, isEqual);\n    }\n    function useOthersConnectionIds() {\n        return useOthers(connectionIdSelector, _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow);\n    }\n    function useOthersMapped(itemSelector, itemIsEqual) {\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((others)=>others.map((other)=>[\n                    other.connectionId,\n                    itemSelector(other)\n                ]), [\n            itemSelector\n        ]);\n        const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((a, b)=>{\n            const eq = itemIsEqual ?? Object.is;\n            return a.length === b.length && a.every((atuple, index)=>{\n                const btuple = b[index];\n                return atuple[0] === btuple[0] && eq(atuple[1], btuple[1]);\n            });\n        }, [\n            itemIsEqual\n        ]);\n        return useOthers(wrappedSelector, wrappedIsEqual);\n    }\n    const NOT_FOUND = Symbol();\n    function useOther(connectionId, selector, isEqual) {\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((others)=>{\n            const other2 = others.find((other3)=>other3.connectionId === connectionId);\n            return other2 !== void 0 ? selector(other2) : NOT_FOUND;\n        }, [\n            connectionId,\n            selector\n        ]);\n        const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((prev, curr)=>{\n            if (prev === NOT_FOUND || curr === NOT_FOUND) {\n                return prev === curr;\n            }\n            const eq = isEqual ?? Object.is;\n            return eq(prev, curr);\n        }, [\n            isEqual\n        ]);\n        const other = useOthers(wrappedSelector, wrappedIsEqual);\n        if (other === NOT_FOUND) {\n            throw new Error(`No such other user with connection id ${connectionId} exists`);\n        }\n        return other;\n    }\n    function useBroadcastEvent() {\n        const room = useRoom();\n        return react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event, options2 = {\n            shouldQueueEventIfNotReady: false\n        })=>{\n            room.broadcastEvent(event, options2);\n        }, [\n            room\n        ]);\n    }\n    function useOthersListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.others.subscribe((event)=>savedCallback.current(event)), [\n            room,\n            savedCallback\n        ]);\n    }\n    function useLostConnectionListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.lostConnection.subscribe((event)=>savedCallback.current(event)), [\n            room,\n            savedCallback\n        ]);\n    }\n    function useErrorListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.error.subscribe((e)=>savedCallback.current(e)), [\n            room,\n            savedCallback\n        ]);\n    }\n    function useEventListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const listener = (eventData)=>{\n                savedCallback.current(eventData);\n            };\n            return room.events.customEvent.subscribe(listener);\n        }, [\n            room,\n            savedCallback\n        ]);\n    }\n    function useSelf(maybeSelector, isEqual) {\n        const room = useRoom();\n        const subscribe2 = room.events.self.subscribe;\n        const getSnapshot2 = room.getSelf;\n        const selector = maybeSelector ?? identity;\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((me)=>me !== null ? selector(me) : null, [\n            selector\n        ]);\n        const getServerSnapshot = alwaysNull;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, wrappedSelector, isEqual);\n    }\n    function useMutableStorageRoot() {\n        const room = useRoom();\n        const subscribe2 = room.events.storageDidLoad.subscribeOnce;\n        const getSnapshot2 = room.getStorageSnapshot;\n        const getServerSnapshot = alwaysNull;\n        return useSyncExternalStore3(subscribe2, getSnapshot2, getServerSnapshot);\n    }\n    function useStorageRoot() {\n        return [\n            useMutableStorageRoot()\n        ];\n    }\n    function useHistory() {\n        return useRoom().history;\n    }\n    function useUndo() {\n        return useHistory().undo;\n    }\n    function useRedo() {\n        return useHistory().redo;\n    }\n    function useCanUndo() {\n        const room = useRoom();\n        const subscribe2 = room.events.history.subscribe;\n        const canUndo = room.history.canUndo;\n        return useSyncExternalStore3(subscribe2, canUndo, canUndo);\n    }\n    function useCanRedo() {\n        const room = useRoom();\n        const subscribe2 = room.events.history.subscribe;\n        const canRedo = room.history.canRedo;\n        return useSyncExternalStore3(subscribe2, canRedo, canRedo);\n    }\n    function useBatch() {\n        return useRoom().batch;\n    }\n    function useLegacyKey(key) {\n        const room = useRoom();\n        const rootOrNull = useMutableStorageRoot();\n        const rerender = useRerender();\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            if (rootOrNull === null) {\n                return;\n            }\n            const root = rootOrNull;\n            let unsubCurr;\n            let curr = root.get(key);\n            function subscribeToCurr() {\n                unsubCurr = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.isLiveNode)(curr) ? room.subscribe(curr, rerender) : void 0;\n            }\n            function onRootChange() {\n                const newValue = root.get(key);\n                if (newValue !== curr) {\n                    unsubCurr?.();\n                    curr = newValue;\n                    subscribeToCurr();\n                    rerender();\n                }\n            }\n            subscribeToCurr();\n            rerender();\n            const unsubscribeRoot = room.subscribe(root, onRootChange);\n            return ()=>{\n                unsubscribeRoot();\n                unsubCurr?.();\n            };\n        }, [\n            rootOrNull,\n            room,\n            key,\n            rerender\n        ]);\n        if (rootOrNull === null) {\n            return null;\n        } else {\n            return rootOrNull.get(key);\n        }\n    }\n    function useStorage(selector, isEqual) {\n        const room = useRoom();\n        const rootOrNull = useMutableStorageRoot();\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((rootOrNull2)=>rootOrNull2 !== null ? selector(rootOrNull2) : null, [\n            selector\n        ]);\n        const subscribe2 = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>rootOrNull !== null ? room.subscribe(rootOrNull, onStoreChange, {\n                isDeep: true\n            }) : noop2, [\n            room,\n            rootOrNull\n        ]);\n        const getSnapshot2 = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            if (rootOrNull === null) {\n                return null;\n            } else {\n                const root = rootOrNull;\n                const imm = root.toImmutable();\n                return imm;\n            }\n        }, [\n            rootOrNull\n        ]);\n        const getServerSnapshot = alwaysNull;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, wrappedSelector, isEqual);\n    }\n    function ensureNotServerSide() {\n        if (true) {\n            throw new Error(\"You cannot use the Suspense version of this hook on the server side. Make sure to only call them on the client side.\\nFor tips, see https://liveblocks.io/docs/api-reference/liveblocks-react#suspense-avoid-ssr\");\n        }\n    }\n    function useSuspendUntilStorageLoaded() {\n        const room = useRoom();\n        if (room.getStorageSnapshot() !== null) {\n            return;\n        }\n        ensureNotServerSide();\n        throw new Promise((res)=>{\n            room.events.storageDidLoad.subscribeOnce(()=>res());\n        });\n    }\n    function useSuspendUntilPresenceLoaded() {\n        const room = useRoom();\n        if (room.getSelf() !== null) {\n            return;\n        }\n        ensureNotServerSide();\n        throw new Promise((res)=>{\n            room.events.self.subscribeOnce(()=>res());\n            room.events.status.subscribeOnce(()=>res());\n        });\n    }\n    function useMutation(callback, deps) {\n        const room = useRoom();\n        return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n            return (...args)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                room.batch(()=>// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    callback(makeMutationContext(room), ...args));\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            room,\n            ...deps\n        ]);\n    }\n    function useStorageSuspense(selector, isEqual) {\n        useSuspendUntilStorageLoaded();\n        return useStorage(selector, isEqual);\n    }\n    function useSelfSuspense(selector, isEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useSelf(selector, isEqual);\n    }\n    function useOthersSuspense(selector, isEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useOthers(selector, isEqual);\n    }\n    function useOthersConnectionIdsSuspense() {\n        useSuspendUntilPresenceLoaded();\n        return useOthersConnectionIds();\n    }\n    function useOthersMappedSuspense(itemSelector, itemIsEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useOthersMapped(itemSelector, itemIsEqual);\n    }\n    function useOtherSuspense(connectionId, selector, isEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useOther(connectionId, selector, isEqual);\n    }\n    function useLegacyKeySuspense(key) {\n        useSuspendUntilStorageLoaded();\n        return useLegacyKey(key);\n    }\n    function useThreads(options2) {\n        const room = useRoom();\n        return commentsRoom.useThreads(room, options2);\n    }\n    function useThreadsSuspense(options2) {\n        const room = useRoom();\n        return commentsRoom.useThreadsSuspense(room, options2);\n    }\n    function useCreateThread() {\n        const room = useRoom();\n        return commentsRoom.useCreateThread(room);\n    }\n    function useEditThreadMetadata() {\n        const room = useRoom();\n        return commentsRoom.useEditThreadMetadata(room);\n    }\n    function useAddReaction() {\n        const room = useRoom();\n        return commentsRoom.useAddReaction(room);\n    }\n    function useRemoveReaction() {\n        const room = useRoom();\n        return commentsRoom.useRemoveReaction(room);\n    }\n    function useCreateComment() {\n        const room = useRoom();\n        return commentsRoom.useCreateComment(room);\n    }\n    function useEditComment() {\n        const room = useRoom();\n        return commentsRoom.useEditComment(room);\n    }\n    function useDeleteComment() {\n        const room = useRoom();\n        return commentsRoom.useDeleteComment(room);\n    }\n    const { resolveUsers, resolveMentionSuggestions } = options ?? {};\n    const usersCache = resolveUsers ? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createAsyncCache)(async (stringifiedOptions)=>{\n        const users = await resolveUsers(JSON.parse(stringifiedOptions));\n        return users?.[0];\n    }) : void 0;\n    function useUser(userId) {\n        const room = useRoom();\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                userIds: [\n                    userId\n                ],\n                roomId: room.id\n            }), [\n            userId,\n            room.id\n        ]);\n        const state = useAsyncCache(usersCache, resolverKey);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>warnIfNoResolveUsers(usersCache), []);\n        if (state.isLoading) {\n            return {\n                isLoading: true\n            };\n        } else {\n            return {\n                user: state.data,\n                error: state.error,\n                isLoading: false\n            };\n        }\n    }\n    function useUserSuspense(userId) {\n        const room = useRoom();\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                userIds: [\n                    userId\n                ],\n                roomId: room.id\n            }), [\n            userId,\n            room.id\n        ]);\n        const state = useAsyncCache(usersCache, resolverKey, {\n            suspense: true\n        });\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>warnIfNoResolveUsers(usersCache), []);\n        return {\n            user: state.data,\n            isLoading: false\n        };\n    }\n    const mentionSuggestionsCache = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createAsyncCache)(resolveMentionSuggestions ? (stringifiedOptions)=>{\n        return resolveMentionSuggestions(JSON.parse(stringifiedOptions));\n    } : ()=>Promise.resolve([]));\n    function useMentionSuggestions(search) {\n        const room = useRoom();\n        const debouncedSearch = useDebounce(search, 500);\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>debouncedSearch !== void 0 ? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                text: debouncedSearch,\n                roomId: room.id\n            }) : null, [\n            debouncedSearch,\n            room.id\n        ]);\n        const { data } = useAsyncCache(mentionSuggestionsCache, resolverKey, {\n            keepPreviousDataWhileLoading: true\n        });\n        return data;\n    }\n    const bundle = {\n        RoomContext,\n        RoomProvider: RoomProviderOuter,\n        useRoom,\n        useStatus,\n        useBatch,\n        useBroadcastEvent,\n        useOthersListener,\n        useLostConnectionListener,\n        useErrorListener,\n        useEventListener,\n        useHistory,\n        useUndo,\n        useRedo,\n        useCanRedo,\n        useCanUndo,\n        // These are just aliases. The passed-in key will define their return values.\n        useList: useLegacyKey,\n        useMap: useLegacyKey,\n        useObject: useLegacyKey,\n        useStorageRoot,\n        useStorage,\n        useSelf,\n        useMyPresence,\n        useUpdateMyPresence,\n        useOthers,\n        useOthersMapped,\n        useOthersConnectionIds,\n        useOther,\n        useMutation,\n        useThreads,\n        useUser,\n        useCreateThread,\n        useEditThreadMetadata,\n        useCreateComment,\n        useEditComment,\n        useDeleteComment,\n        useAddReaction,\n        useRemoveReaction,\n        suspense: {\n            RoomContext,\n            RoomProvider: RoomProviderOuter,\n            useRoom,\n            useStatus,\n            useBatch,\n            useBroadcastEvent,\n            useOthersListener,\n            useLostConnectionListener,\n            useErrorListener,\n            useEventListener,\n            useHistory,\n            useUndo,\n            useRedo,\n            useCanRedo,\n            useCanUndo,\n            // Legacy hooks\n            useList: useLegacyKeySuspense,\n            useMap: useLegacyKeySuspense,\n            useObject: useLegacyKeySuspense,\n            useStorageRoot,\n            useStorage: useStorageSuspense,\n            useSelf: useSelfSuspense,\n            useMyPresence,\n            useUpdateMyPresence,\n            useOthers: useOthersSuspense,\n            useOthersMapped: useOthersMappedSuspense,\n            useOthersConnectionIds: useOthersConnectionIdsSuspense,\n            useOther: useOtherSuspense,\n            useMutation,\n            useThreads: useThreadsSuspense,\n            useUser: useUserSuspense,\n            useCreateThread,\n            useEditThreadMetadata,\n            useCreateComment,\n            useEditComment,\n            useDeleteComment,\n            useAddReaction,\n            useRemoveReaction\n        }\n    };\n    const internalBundle = {\n        ...bundle,\n        hasResolveMentionSuggestions: resolveMentionSuggestions !== void 0,\n        useMentionSuggestions\n    };\n    return bundle;\n}\n// src/index.ts\n\n(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.detectDupes)(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\n");

/***/ })

};
;