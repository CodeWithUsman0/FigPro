"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nwsapi";
exports.ids = ["vendor-chunks/nwsapi"];
exports.modules = {

/***/ "(ssr)/./node_modules/nwsapi/src/nwsapi.js":
/*!*******************************************!*\
  !*** ./node_modules/nwsapi/src/nwsapi.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n/*\n * Copyright (C) 2007-2023 Diego Perini\n * All rights reserved.\n *\n * nwsapi.js - Fast CSS Selectors API Engine\n *\n * Author: Diego Perini <diego.perini at gmail com>\n * Version: 2.2.7\n * Created: 20070722\n * Release: 20230701\n *\n * License:\n *  http://javascript.nwbox.com/nwsapi/MIT-LICENSE\n * Download:\n *  http://javascript.nwbox.com/nwsapi/nwsapi.js\n */ (function Export(global, factory) {\n    \"use strict\";\n    if (true) {\n        module.exports = factory;\n    } else {}\n})(void 0, function Factory(global, Export) {\n    var version = \"nwsapi-2.2.7\", doc = global.document, root = doc.documentElement, slice = Array.prototype.slice, HSP = \"[\\\\x20\\\\t]\", VSP = \"[\\\\r\\\\n\\\\f]\", WSP = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\", CFG = {\n        // extensions\n        operators: \"[~*^$|]=|=\",\n        combinators: \"[\\\\x20\\\\t>+~](?=[^>+~])\"\n    }, NOT = {\n        // not enclosed in double/single/parens/square\n        double_enc: '(?=(?:[^\"]*[\"][^\"]*[\"])*[^\"]*$)',\n        single_enc: \"(?=(?:[^']*['][^']*['])*[^']*$)\",\n        parens_enc: \"(?![^\\\\x28]*\\\\x29)\",\n        square_enc: \"(?![^\\\\x5b]*\\\\x5d)\"\n    }, REX = {\n        // regular expressions\n        HasEscapes: RegExp(\"\\\\\\\\\"),\n        HexNumbers: RegExp(\"^[0-9a-fA-F]\"),\n        EscOrQuote: RegExp(\"^\\\\\\\\|[\\\\x22\\\\x27]\"),\n        RegExpChar: RegExp(\"(?!\\\\\\\\)[\\\\\\\\^$.,*+?()[\\\\]{}|\\\\/]\", \"g\"),\n        TrimSpaces: RegExp(\"^\" + WSP + \"+|\" + WSP + \"+$|\" + VSP, \"g\"),\n        SplitGroup: RegExp(\"(\\\\([^)]*\\\\)|\\\\[[^[]*\\\\]|\\\\\\\\.|[^,])+\", \"g\"),\n        CommaGroup: RegExp(\"(\\\\s*,\\\\s*)\" + NOT.square_enc + NOT.parens_enc, \"g\"),\n        FixEscapes: RegExp(\"\\\\\\\\([0-9a-fA-F]{1,6}\" + WSP + \"?|.)|([\\\\x22\\\\x27])\", \"g\"),\n        CombineWSP: RegExp(\"[\\\\n\\\\r\\\\f\\\\x20]+\" + NOT.single_enc + NOT.double_enc, \"g\"),\n        TabCharWSP: RegExp(\"(\\\\x20?\\\\t+\\\\x20?)\" + NOT.single_enc + NOT.double_enc, \"g\"),\n        PseudosWSP: RegExp(\"\\\\s+([-+])\\\\s+\" + NOT.square_enc, \"g\")\n    }, STD = {\n        combinator: RegExp(\"\\\\s?([>+~])\\\\s?\", \"g\"),\n        apimethods: RegExp(\"^(?:[a-z]+|\\\\*)\\\\|\", \"i\"),\n        namespaces: RegExp(\"(\\\\*|[a-z]+)\\\\|[-a-z]+\", \"i\")\n    }, GROUPS = {\n        // pseudo-classes requiring parameters\n        linguistic: \"(dir|lang)(?:\\\\x28\\\\s?([-\\\\w]{2,})\\\\s?\\\\x29)\",\n        logicalsel: \"(is|where|matches|not|has)(?:\\\\x28\\\\s?(\\\\[([^\\\\[\\\\]]*)\\\\]|[^()\\\\[\\\\]]*|.*)\\\\s?\\\\x29)\",\n        treestruct: \"(nth(?:-last)?(?:-child|-of-type))(?:\\\\x28\\\\s?(even|odd|(?:[-+]?\\\\d*)(?:n\\\\s?[-+]?\\\\s?\\\\d*)?)\\\\s?\\\\x29)\",\n        // pseudo-classes not requiring parameters\n        locationpc: \"(any-link|link|visited|target)\\\\b\",\n        useraction: \"(hover|active|focus-within|focus)\\\\b\",\n        structural: \"(root|empty|(?:(?:first|last|only)(?:-child|-of-type)))\\\\b\",\n        inputstate: \"(enabled|disabled|read-only|read-write|placeholder-shown|default)\\\\b\",\n        inputvalue: \"(checked|indeterminate|required|optional|valid|invalid|in-range|out-of-range)\\\\b\",\n        // pseudo-classes for parsing only selectors\n        pseudo_nop: \"(autofill|-webkit-autofill)\\\\b\",\n        // pseudo-elements starting with single colon (:)\n        pseudo_sng: \"(after|before|first-letter|first-line)\\\\b\",\n        // pseudo-elements starting with double colon (::)\n        pseudo_dbl: \":(after|before|first-letter|first-line|selection|placeholder|-webkit-[-a-zA-Z0-9]{2,})\\\\b\"\n    }, Patterns = {\n        // pseudo-classes\n        treestruct: RegExp(\"^:(?:\" + GROUPS.treestruct + \")(.*)\", \"i\"),\n        structural: RegExp(\"^:(?:\" + GROUPS.structural + \")(.*)\", \"i\"),\n        linguistic: RegExp(\"^:(?:\" + GROUPS.linguistic + \")(.*)\", \"i\"),\n        useraction: RegExp(\"^:(?:\" + GROUPS.useraction + \")(.*)\", \"i\"),\n        inputstate: RegExp(\"^:(?:\" + GROUPS.inputstate + \")(.*)\", \"i\"),\n        inputvalue: RegExp(\"^:(?:\" + GROUPS.inputvalue + \")(.*)\", \"i\"),\n        locationpc: RegExp(\"^:(?:\" + GROUPS.locationpc + \")(.*)\", \"i\"),\n        logicalsel: RegExp(\"^:(?:\" + GROUPS.logicalsel + \")(.*)\", \"i\"),\n        pseudo_nop: RegExp(\"^:(?:\" + GROUPS.pseudo_nop + \")(.*)\", \"i\"),\n        pseudo_sng: RegExp(\"^:(?:\" + GROUPS.pseudo_sng + \")(.*)\", \"i\"),\n        pseudo_dbl: RegExp(\"^:(?:\" + GROUPS.pseudo_dbl + \")(.*)\", \"i\"),\n        // combinator symbols\n        children: RegExp(\"^\" + WSP + \"?\\\\>\" + WSP + \"?(.*)\"),\n        adjacent: RegExp(\"^\" + WSP + \"?\\\\+\" + WSP + \"?(.*)\"),\n        relative: RegExp(\"^\" + WSP + \"?\\\\~\" + WSP + \"?(.*)\"),\n        ancestor: RegExp(\"^\" + WSP + \"+(.*)\"),\n        // universal & namespace\n        universal: RegExp(\"^\\\\*(.*)\"),\n        namespace: RegExp(\"^(\\\\w+|\\\\*)?\\\\|(.*)\")\n    }, // regexp to aproximate detection of RTL languages (Arabic)\n    RTL = RegExp(\"^[\\\\u0591-\\\\u08ff\\\\ufb1d-\\\\ufdfd\\\\ufe70-\\\\ufefc ]+$\"), // emulate firefox error strings\n    qsNotArgs = \"Not enough arguments\", qsInvalid = \" is not a valid selector\", // detect structural pseudo-classes in selectors\n    reNthElem = RegExp(\"(:nth(?:-last)?-child)\", \"i\"), reNthType = RegExp(\"(:nth(?:-last)?-of-type)\", \"i\"), // placeholder for global regexp\n    reOptimizer, reValidator, // special handling configuration flags\n    Config = {\n        IDS_DUPES: true,\n        NONDIGITS: true,\n        LOGERRORS: true,\n        VERBOSITY: true\n    }, NAMESPACE, QUIRKS_MODE, HTML_DOCUMENT, ATTR_STD_OPS = {\n        \"=\": 1,\n        \"^=\": 1,\n        \"$=\": 1,\n        \"|=\": 1,\n        \"*=\": 1,\n        \"~=\": 1\n    }, HTML_TABLE = {\n        \"accept\": 1,\n        \"accept-charset\": 1,\n        \"align\": 1,\n        \"alink\": 1,\n        \"axis\": 1,\n        \"bgcolor\": 1,\n        \"charset\": 1,\n        \"checked\": 1,\n        \"clear\": 1,\n        \"codetype\": 1,\n        \"color\": 1,\n        \"compact\": 1,\n        \"declare\": 1,\n        \"defer\": 1,\n        \"dir\": 1,\n        \"direction\": 1,\n        \"disabled\": 1,\n        \"enctype\": 1,\n        \"face\": 1,\n        \"frame\": 1,\n        \"hreflang\": 1,\n        \"http-equiv\": 1,\n        \"lang\": 1,\n        \"language\": 1,\n        \"link\": 1,\n        \"media\": 1,\n        \"method\": 1,\n        \"multiple\": 1,\n        \"nohref\": 1,\n        \"noresize\": 1,\n        \"noshade\": 1,\n        \"nowrap\": 1,\n        \"readonly\": 1,\n        \"rel\": 1,\n        \"rev\": 1,\n        \"rules\": 1,\n        \"scope\": 1,\n        \"scrolling\": 1,\n        \"selected\": 1,\n        \"shape\": 1,\n        \"target\": 1,\n        \"text\": 1,\n        \"type\": 1,\n        \"valign\": 1,\n        \"valuetype\": 1,\n        \"vlink\": 1\n    }, Combinators = {}, Selectors = {}, Operators = {\n        \"=\": {\n            p1: \"^\",\n            p2: \"$\",\n            p3: \"true\"\n        },\n        \"^=\": {\n            p1: \"^\",\n            p2: \"\",\n            p3: \"true\"\n        },\n        \"$=\": {\n            p1: \"\",\n            p2: \"$\",\n            p3: \"true\"\n        },\n        \"*=\": {\n            p1: \"\",\n            p2: \"\",\n            p3: \"true\"\n        },\n        \"|=\": {\n            p1: \"^\",\n            p2: \"(-|$)\",\n            p3: \"true\"\n        },\n        \"~=\": {\n            p1: \"(^|\\\\s)\",\n            p2: \"(\\\\s|$)\",\n            p3: \"true\"\n        }\n    }, concatCall = function(nodes, callback) {\n        var i = 0, l = nodes.length, list = Array(l);\n        while(l > i){\n            if (false === callback(list[i] = nodes[i])) break;\n            ++i;\n        }\n        return list;\n    }, concatList = function(list, nodes) {\n        var i = -1, l = nodes.length;\n        while(l--){\n            list[list.length] = nodes[++i];\n        }\n        return list;\n    }, documentOrder = function(a, b) {\n        if (!hasDupes && a === b) {\n            hasDupes = true;\n            return 0;\n        }\n        return a.compareDocumentPosition(b) & 4 ? -1 : 1;\n    }, hasDupes = false, unique = function(nodes) {\n        var i = 0, j = -1, l = nodes.length + 1, list = [];\n        while(--l){\n            if (nodes[i++] === nodes[i]) continue;\n            list[++j] = nodes[i - 1];\n        }\n        hasDupes = false;\n        return list;\n    }, switchContext = function(context, force) {\n        var oldDoc = doc;\n        doc = context.ownerDocument || context;\n        if (force || oldDoc !== doc) {\n            // force a new check for each document change\n            // performed before the next select operation\n            root = doc.documentElement;\n            HTML_DOCUMENT = isHTML(doc);\n            QUIRKS_MODE = HTML_DOCUMENT && doc.compatMode.indexOf(\"CSS\") < 0;\n            NAMESPACE = root && root.namespaceURI;\n            Snapshot.doc = doc;\n            Snapshot.root = root;\n        }\n        return Snapshot.from = context;\n    }, // convert single codepoint to UTF-16 encoding\n    codePointToUTF16 = function(codePoint) {\n        // out of range, use replacement character\n        if (codePoint < 1 || codePoint > 0x10ffff || codePoint > 0xd7ff && codePoint < 0xe000) {\n            return \"\\\\ufffd\";\n        }\n        // javascript strings are UTF-16 encoded\n        if (codePoint < 0x10000) {\n            var lowHex = \"000\" + codePoint.toString(16);\n            return \"\\\\u\" + lowHex.substr(lowHex.length - 4);\n        }\n        // supplementary high + low surrogates\n        return \"\\\\u\" + ((codePoint - 0x10000 >> 0x0a) + 0xd800).toString(16) + \"\\\\u\" + ((codePoint - 0x10000) % 0x400 + 0xdc00).toString(16);\n    }, // convert single codepoint to string\n    stringFromCodePoint = function(codePoint) {\n        // out of range, use replacement character\n        if (codePoint < 1 || codePoint > 0x10ffff || codePoint > 0xd7ff && codePoint < 0xe000) {\n            return \"�\";\n        }\n        if (codePoint < 0x10000) {\n            return String.fromCharCode(codePoint);\n        }\n        return String.fromCodePoint ? String.fromCodePoint(codePoint) : String.fromCharCode((codePoint - 0x10000 >> 0x0a) + 0xd800, (codePoint - 0x10000) % 0x400 + 0xdc00);\n    }, // convert escape sequence in a CSS string or identifier\n    // to javascript string with javascript escape sequences\n    convertEscapes = function(str) {\n        return REX.HasEscapes.test(str) ? str.replace(REX.FixEscapes, function(substring, p1, p2) {\n            // unescaped \" or '\n            return p2 ? \"\\\\\" + p2 : // javascript strings are UTF-16 encoded\n            REX.HexNumbers.test(p1) ? codePointToUTF16(parseInt(p1, 16)) : // \\' \\\"\n            REX.EscOrQuote.test(p1) ? substring : // \\g \\h \\. \\# etc\n            p1;\n        }) : str;\n    }, // convert escape sequence in a CSS string or identifier\n    // to javascript string with characters representations\n    unescapeIdentifier = function(str) {\n        return REX.HasEscapes.test(str) ? str.replace(REX.FixEscapes, function(substring, p1, p2) {\n            // unescaped \" or '\n            return p2 ? p2 : // javascript strings are UTF-16 encoded\n            REX.HexNumbers.test(p1) ? stringFromCodePoint(parseInt(p1, 16)) : // \\' \\\"\n            REX.EscOrQuote.test(p1) ? substring : // \\g \\h \\. \\# etc\n            p1;\n        }) : str;\n    }, method = {\n        \"#\": \"getElementById\",\n        \"*\": \"getElementsByTagName\",\n        \"|\": \"getElementsByTagNameNS\",\n        \".\": \"getElementsByClassName\"\n    }, compat = {\n        \"#\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byId(n, c);\n            };\n        },\n        \"*\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byTag(n, c);\n            };\n        },\n        \"|\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byTag(n, c);\n            };\n        },\n        \".\": function(c, n) {\n            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));\n            return function(e, f) {\n                return byClass(n, c);\n            };\n        }\n    }, // find duplicate ids using iterative walk\n    byIdRaw = function(id, context) {\n        var node = context, nodes = [], next = node.firstElementChild;\n        while(node = next){\n            node.id == id && (nodes[nodes.length] = node);\n            if (next = node.firstElementChild || node.nextElementSibling) continue;\n            while(!next && (node = node.parentElement) && node !== context){\n                next = node.nextElementSibling;\n            }\n        }\n        return nodes;\n    }, // context agnostic getElementById\n    byId = function(id, context) {\n        var e, i, l, nodes, api = method[\"#\"];\n        // duplicates id allowed\n        if (Config.IDS_DUPES === false) {\n            if (api in context) {\n                return (e = context[api](id)) ? [\n                    e\n                ] : none;\n            }\n        } else {\n            if (\"all\" in context) {\n                if (e = context.all[id]) {\n                    if (e.nodeType == 1) return e.getAttribute(\"id\") != id ? [] : [\n                        e\n                    ];\n                    else if (id == \"length\") return (e = context[api](id)) ? [\n                        e\n                    ] : none;\n                    for(i = 0, l = e.length, nodes = []; l > i; ++i){\n                        if (e[i].id == id) nodes[nodes.length] = e[i];\n                    }\n                    return nodes && nodes.length ? nodes : [\n                        nodes\n                    ];\n                } else return none;\n            }\n        }\n        return byIdRaw(id, context);\n    }, // context agnostic getElementsByTagName\n    byTag = function(tag, context) {\n        var e, nodes, api = method[\"*\"];\n        // DOCUMENT_NODE (9) & ELEMENT_NODE (1)\n        if (api in context) {\n            return slice.call(context[api](tag));\n        } else {\n            tag = tag.toLowerCase();\n            // DOCUMENT_FRAGMENT_NODE (11)\n            if (e = context.firstElementChild) {\n                if (!(e.nextElementSibling || tag == \"*\" || e.localName == tag)) {\n                    return slice.call(e[api](tag));\n                } else {\n                    nodes = [];\n                    do {\n                        if (tag == \"*\" || e.localName == tag) nodes[nodes.length] = e;\n                        concatList(nodes, e[api](tag));\n                    }while (e = e.nextElementSibling);\n                }\n            } else nodes = none;\n        }\n        return nodes;\n    }, // context agnostic getElementsByClassName\n    byClass = function(cls, context) {\n        var e, nodes, api = method[\".\"], reCls;\n        // DOCUMENT_NODE (9) & ELEMENT_NODE (1)\n        if (api in context) {\n            return slice.call(context[api](cls));\n        } else {\n            // DOCUMENT_FRAGMENT_NODE (11)\n            if (e = context.firstElementChild) {\n                reCls = RegExp(\"(^|\\\\s)\" + cls + \"(\\\\s|$)\", QUIRKS_MODE ? \"i\" : \"\");\n                if (!(e.nextElementSibling || reCls.test(e.className))) {\n                    return slice.call(e[api](cls));\n                } else {\n                    nodes = [];\n                    do {\n                        if (reCls.test(e.className)) nodes[nodes.length] = e;\n                        concatList(nodes, e[api](cls));\n                    }while (e = e.nextElementSibling);\n                }\n            } else nodes = none;\n        }\n        return nodes;\n    }, // namespace aware hasAttribute\n    // helper for XML/XHTML documents\n    hasAttributeNS = function(e, name) {\n        var i, l, attr = e.getAttributeNames();\n        name = RegExp(\":?\" + name + \"$\", HTML_DOCUMENT ? \"i\" : \"\");\n        for(i = 0, l = attr.length; l > i; ++i){\n            if (name.test(attr[i])) return true;\n        }\n        return false;\n    }, // fast resolver for the :nth-child() and :nth-last-child() pseudo-classes\n    nthElement = function() {\n        var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();\n        return function(element, dir) {\n            // ensure caches are emptied after each run, invoking with dir = 2\n            if (dir == 2) {\n                idx = 0;\n                len = 0;\n                set = 0;\n                nodes.length = 0;\n                parents.length = 0;\n                parent = undefined;\n                return -1;\n            }\n            var e, i, j, k, l;\n            if (parent === element.parentElement) {\n                i = set;\n                j = idx;\n                l = len;\n            } else {\n                l = parents.length;\n                parent = element.parentElement;\n                for(i = -1, j = 0, k = l - 1; l > j; ++j, --k){\n                    if (parents[j] === parent) {\n                        i = j;\n                        break;\n                    }\n                    if (parents[k] === parent) {\n                        i = k;\n                        break;\n                    }\n                }\n                if (i < 0) {\n                    parents[i = l] = parent;\n                    l = 0;\n                    nodes[i] = Array();\n                    e = parent && parent.firstElementChild || element;\n                    while(e){\n                        nodes[i][l] = e;\n                        if (e === element) j = l;\n                        e = e.nextElementSibling;\n                        ++l;\n                    }\n                    set = i;\n                    idx = 0;\n                    len = l;\n                    if (l < 2) return l;\n                } else {\n                    l = nodes[i].length;\n                    set = i;\n                }\n            }\n            if (element !== nodes[i][j] && element !== nodes[i][j = 0]) {\n                for(j = 0, e = nodes[i], k = l - 1; l > j; ++j, --k){\n                    if (e[j] === element) {\n                        break;\n                    }\n                    if (e[k] === element) {\n                        j = k;\n                        break;\n                    }\n                }\n            }\n            idx = j + 1;\n            len = l;\n            return dir ? l - j : idx;\n        };\n    }(), // fast resolver for the :nth-of-type() and :nth-last-of-type() pseudo-classes\n    nthOfType = function() {\n        var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();\n        return function(element, dir) {\n            // ensure caches are emptied after each run, invoking with dir = 2\n            if (dir == 2) {\n                idx = 0;\n                len = 0;\n                set = 0;\n                nodes.length = 0;\n                parents.length = 0;\n                parent = undefined;\n                return -1;\n            }\n            var e, i, j, k, l, name = element.localName;\n            if (nodes[set] && nodes[set][name] && parent === element.parentElement) {\n                i = set;\n                j = idx;\n                l = len;\n            } else {\n                l = parents.length;\n                parent = element.parentElement;\n                for(i = -1, j = 0, k = l - 1; l > j; ++j, --k){\n                    if (parents[j] === parent) {\n                        i = j;\n                        break;\n                    }\n                    if (parents[k] === parent) {\n                        i = k;\n                        break;\n                    }\n                }\n                if (i < 0 || !nodes[i][name]) {\n                    parents[i = l] = parent;\n                    nodes[i] || (nodes[i] = Object());\n                    l = 0;\n                    nodes[i][name] = Array();\n                    e = parent && parent.firstElementChild || element;\n                    while(e){\n                        if (e === element) j = l;\n                        if (e.localName == name) {\n                            nodes[i][name][l] = e;\n                            ++l;\n                        }\n                        e = e.nextElementSibling;\n                    }\n                    set = i;\n                    idx = j;\n                    len = l;\n                    if (l < 2) return l;\n                } else {\n                    l = nodes[i][name].length;\n                    set = i;\n                }\n            }\n            if (element !== nodes[i][name][j] && element !== nodes[i][name][j = 0]) {\n                for(j = 0, e = nodes[i][name], k = l - 1; l > j; ++j, --k){\n                    if (e[j] === element) {\n                        break;\n                    }\n                    if (e[k] === element) {\n                        j = k;\n                        break;\n                    }\n                }\n            }\n            idx = j + 1;\n            len = l;\n            return dir ? l - j : idx;\n        };\n    }(), // check if the document type is HTML\n    isHTML = function(node) {\n        var doc = node.ownerDocument || node;\n        return doc.nodeType == 9 && // contentType not in IE <= 11\n        \"contentType\" in doc ? doc.contentType.indexOf(\"/html\") > 0 : doc.createElement(\"DiV\").localName == \"div\";\n    }, // configure the engine to use special handling\n    configure = function(option, clear) {\n        if (typeof option == \"string\") {\n            return !!Config[option];\n        }\n        if (typeof option != \"object\") {\n            return Config;\n        }\n        for(var i in option){\n            Config[i] = !!option[i];\n        }\n        // clear lambda cache\n        if (clear) {\n            matchResolvers = {};\n            selectResolvers = {};\n        }\n        setIdentifierSyntax();\n        return true;\n    }, // centralized error and exceptions handling\n    emit = function(message, proto) {\n        var err;\n        if (Config.VERBOSITY) {\n            if (proto) {\n                err = new proto(message);\n            } else {\n                err = new global.DOMException(message, \"SyntaxError\");\n            }\n            throw err;\n        }\n        if (Config.LOGERRORS && console && console.log) {\n            console.log(message);\n        }\n    }, // execute the engine initialization code\n    initialize = function(doc) {\n        setIdentifierSyntax();\n        lastContext = switchContext(doc, true);\n    }, // build validation regexps used by the engine\n    setIdentifierSyntax = function() {\n        //\n        // NOTE: SPECIAL CASES IN CSS SYNTAX PARSING RULES\n        //\n        // The <EOF-token> https://drafts.csswg.org/css-syntax/#typedef-eof-token\n        // allow mangled|unclosed selector syntax at the end of selectors strings\n        //\n        // Literal equivalent hex representations of the characters: \" ' ` ] )\n        //\n        //     \\\\x22 = \" - double quotes    \\\\x5b = [ - open square bracket\n        //     \\\\x27 = ' - single quote     \\\\x5d = ] - closed square bracket\n        //     \\\\x60 = ` - back tick        \\\\x28 = ( - open round parens\n        //     \\\\x5c = \\ - back slash       \\\\x29 = ) - closed round parens\n        //\n        // using hex format prevents false matches of opened/closed instances\n        // pairs, coloring breakage and other editors highlightning problems.\n        //\n        var identifier = // doesn't start with a digit\n        (Config.NONDIGITS ? \"(?=[^0-9])\" : \"\") + // can start with double dash\n        \"(?:-{2}\" + // may include ascii chars\n        \"|[a-zA-Z0-9-_]\" + // non-ascii chars\n        \"|[^\\\\x00-\\\\x9f]\" + // escaped chars\n        \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-fA-F]\" + // unicode chars\n        \"|\\\\\\\\[0-9a-fA-F]{1,6}(?:\\\\r\\\\n|\\\\s)?\" + // any escaped chars\n        \"|\\\\\\\\.\" + \")+\", pseudonames = \"[-\\\\w]+\", pseudoparms = \"(?:[-+]?\\\\d*)(?:n\\\\s?[-+]?\\\\s?\\\\d*)\", doublequote = '\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(?:\"|$)', singlequote = \"'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*(?:'|$)\", attrparser = identifier + \"|\" + doublequote + \"|\" + singlequote, attrvalues = \"([\\\\x22\\\\x27]?)((?!\\\\3)*|(?:\\\\\\\\?.)*?)(?:\\\\3|$)\", attributes = \"\\\\[\" + // attribute presence\n        \"(?:\\\\*\\\\|)?\" + WSP + \"?\" + \"(\" + identifier + \"(?::\" + identifier + \")?)\" + WSP + \"?\" + \"(?:\" + \"(\" + CFG.operators + \")\" + WSP + \"?\" + \"(?:\" + attrparser + \")\" + \")?\" + // attribute case sensitivity\n        \"(?:\" + WSP + \"?\\\\b(i))?\" + WSP + \"?\" + \"(?:\\\\]|$)\", attrmatcher = attributes.replace(attrparser, attrvalues), pseudoclass = \"(?:\\\\x28\" + WSP + \"*\" + \"(?:\" + pseudoparms + \"?)?|\" + // universal * &\n        // namespace *|*\n        \"(?:\\\\*|\\\\|)|\" + \"(?:\" + \"(?::\" + pseudonames + \"(?:\\\\x28\" + pseudoparms + \"?(?:\\\\x29|$))?|\" + \")|\" + \"(?:[.#]?\" + identifier + \")|\" + \"(?:\" + attributes + \")\" + \")+|\" + \"(?:\" + WSP + \"?,\" + WSP + \"?)|\" + \"(?:\" + WSP + \"?)|\" + \"(?:\\\\x29|$))*\", standardValidator = \"(?=\" + WSP + \"?[^>+~(){}<>])\" + \"(?:\" + // universal * &\n        // namespace *|*\n        \"(?:\\\\*|\\\\|)|\" + \"(?:[.#]?\" + identifier + \")+|\" + \"(?:\" + attributes + \")+|\" + \"(?:::?\" + pseudonames + pseudoclass + \")|\" + \"(?:\" + WSP + \"?\" + CFG.combinators + WSP + \"?)|\" + \"(?:\" + WSP + \"?,\" + WSP + \"?)|\" + \"(?:\" + WSP + \"?)\" + \")+\";\n        // the following global RE is used to return the\n        // deepest localName in selector strings and then\n        // use it to retrieve all possible matching nodes\n        // that will be filtered by compiled resolvers\n        reOptimizer = RegExp(\"(?:([.:#*]?)\" + \"(\" + identifier + \")\" + \"(?:\" + \":[-\\\\w]+|\" + \"\\\\[[^\\\\]]+(?:\\\\]|$)|\" + \"\\\\x28[^\\\\x29]+(?:\\\\x29|$)\" + \")*)$\");\n        // global\n        reValidator = RegExp(standardValidator, \"g\");\n        Patterns.id = RegExp(\"^#(\" + identifier + \")(.*)\");\n        Patterns.tagName = RegExp(\"^(\" + identifier + \")(.*)\");\n        Patterns.className = RegExp(\"^\\\\.(\" + identifier + \")(.*)\");\n        Patterns.attribute = RegExp(\"^(?:\" + attrmatcher + \")(.*)\");\n    }, F_INIT = '\"use strict\";return function Resolver(c,f,x,r)', S_HEAD = \"var e,n,o,j=r.length-1,k=-1\", M_HEAD = \"var e,n,o\", S_LOOP = \"main:while((e=c[++k]))\", N_LOOP = \"main:while((e=c.item(++k)))\", M_LOOP = \"e=c;\", S_BODY = \"r[++j]=c[k];\", N_BODY = \"r[++j]=c.item(k);\", M_BODY = \"\", S_TAIL = \"continue main;\", M_TAIL = \"r=true;\", S_TEST = \"if(f(c[k])){break main;}\", N_TEST = \"if(f(c.item(k))){break main;}\", M_TEST = \"f(c);\", S_VARS = [], M_VARS = [], // compile groups or single selector strings into\n    // executable functions for matching or selecting\n    compile = function(selector, mode, callback) {\n        var factory, token, head = \"\", loop = \"\", macro = \"\", source = \"\", vars = \"\";\n        // 'mode' can be boolean or null\n        // true = select / false = match\n        // null to use collection.item()\n        switch(mode){\n            case true:\n                if (selectLambdas[selector]) {\n                    return selectLambdas[selector];\n                }\n                macro = S_BODY + (callback ? S_TEST : \"\") + S_TAIL;\n                head = S_HEAD;\n                loop = S_LOOP;\n                break;\n            case false:\n                if (matchLambdas[selector]) {\n                    return matchLambdas[selector];\n                }\n                macro = M_BODY + (callback ? M_TEST : \"\") + M_TAIL;\n                head = M_HEAD;\n                loop = M_LOOP;\n                break;\n            case null:\n                if (selectLambdas[selector]) {\n                    return selectLambdas[selector];\n                }\n                macro = N_BODY + (callback ? N_TEST : \"\") + S_TAIL;\n                head = S_HEAD;\n                loop = N_LOOP;\n                break;\n            default:\n                break;\n        }\n        source = compileSelector(selector, macro, mode, callback);\n        loop += mode || mode === null ? \"{\" + source + \"}\" : source;\n        if (mode || mode === null && selector.includes(\":nth\")) {\n            loop += reNthElem.test(selector) ? \"s.nthElement(null, 2);\" : \"\";\n            loop += reNthType.test(selector) ? \"s.nthOfType(null, 2);\" : \"\";\n        }\n        if (S_VARS[0] || M_VARS[0]) {\n            vars = \",\" + (S_VARS.join(\",\") || M_VARS.join(\",\"));\n            S_VARS.length = 0;\n            M_VARS.length = 0;\n        }\n        factory = Function(\"s\", F_INIT + \"{\" + head + vars + \";\" + loop + \"return r;}\")(Snapshot);\n        return mode || mode === null ? selectLambdas[selector] = factory : matchLambdas[selector] = factory;\n    }, // build conditional code to check components of selector strings\n    compileSelector = function(expression, source, mode, callback) {\n        var a, b, n, f, k = 0, name, NS, referenceElement, compat, expr, match, result, status, symbol, test, type, selector = expression, selector_string, vars;\n        // original 'select' or 'match' selector string before normalization\n        selector_string = mode ? lastSelected : lastMatched;\n        // isolate selector combinators/components and normalize whitespace\n        selector = selector.replace(STD.combinator, \"$1\"); //.replace(STD.whitespace, ' ');\n        // javascript needs a label to break\n        // out of the while loops processing\n        selector_recursion_label: while(selector){\n            ++k;\n            // get namespace prefix if present or get first char of selector\n            symbol = STD.apimethods.test(selector) ? \"|\" : selector[0];\n            switch(symbol){\n                // universal resolver\n                case \"*\":\n                    match = selector.match(Patterns.universal);\n                    break;\n                // id resolver\n                case \"#\":\n                    match = selector.match(Patterns.id);\n                    source = \"if((/^\" + match[1] + '$/.test(e.getAttribute(\"id\")))){' + source + \"}\";\n                    break;\n                // class name resolver\n                case \".\":\n                    match = selector.match(Patterns.className);\n                    compat = (QUIRKS_MODE ? \"i\" : \"\") + '.test(e.getAttribute(\"class\"))';\n                    source = \"if((/(^|\\\\s)\" + match[1] + \"(\\\\s|$)/\" + compat + \")){\" + source + \"}\";\n                    break;\n                // tag name resolver\n                case /[_a-z]/i.test(symbol) ? symbol : undefined:\n                    match = selector.match(Patterns.tagName);\n                    source = 'if((e.localName==\"' + match[1] + '\")){' + source + \"}\";\n                    break;\n                // namespace resolver\n                case \"|\":\n                    match = selector.match(Patterns.namespace);\n                    if (match[1] == \"*\") {\n                        source = \"if(true){\" + source + \"}\";\n                    } else if (!match[1]) {\n                        source = \"if((!e.namespaceURI)){\" + source + \"}\";\n                    } else if (typeof match[1] == \"string\" && root.prefix == match[1]) {\n                        source = 'if((e.namespaceURI==\"' + NAMESPACE + '\")){' + source + \"}\";\n                    } else {\n                        emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                    }\n                    break;\n                // attributes resolver\n                case \"[\":\n                    match = selector.match(Patterns.attribute);\n                    NS = match[0].match(STD.namespaces);\n                    name = match[1];\n                    expr = name.split(\":\");\n                    expr = expr.length == 2 ? expr[1] : expr[0];\n                    if (match[2] && !(test = Operators[match[2]])) {\n                        emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                        return \"\";\n                    }\n                    if (match[4] === \"\") {\n                        test = match[2] == \"~=\" ? {\n                            p1: \"^\\\\s\",\n                            p2: \"+$\",\n                            p3: \"true\"\n                        } : match[2] in ATTR_STD_OPS && match[2] != \"~=\" ? {\n                            p1: \"^\",\n                            p2: \"$\",\n                            p3: \"true\"\n                        } : test;\n                    } else if (match[2] == \"~=\" && match[4].includes(\" \")) {\n                        // whitespace separated list but value contains space\n                        source = \"if(false){\" + source + \"}\";\n                        break;\n                    } else if (match[4]) {\n                        match[4] = convertEscapes(match[4]).replace(REX.RegExpChar, \"\\\\$&\");\n                    }\n                    type = match[5] == \"i\" || HTML_DOCUMENT && HTML_TABLE[expr.toLowerCase()] ? \"i\" : \"\";\n                    source = \"if((\" + (!match[2] ? NS ? 's.hasAttributeNS(e,\"' + name + '\")' : 'e.hasAttribute&&e.hasAttribute(\"' + name + '\")' : !match[4] && ATTR_STD_OPS[match[2]] && match[2] != \"~=\" ? 'e.getAttribute&&e.getAttribute(\"' + name + '\")==\"\"' : \"(/\" + test.p1 + match[4] + test.p2 + \"/\" + type + ').test(e.getAttribute&&e.getAttribute(\"' + name + '\"))==' + test.p3) + \")){\" + source + \"}\";\n                    break;\n                // *** General sibling combinator\n                // E ~ F (F relative sibling of E)\n                case \"~\":\n                    match = selector.match(Patterns.relative);\n                    source = \"var N\" + k + \"=e;while(e&&(e=e.previousElementSibling)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** Adjacent sibling combinator\n                // E + F (F adiacent sibling of E)\n                case \"+\":\n                    match = selector.match(Patterns.adjacent);\n                    source = \"var N\" + k + \"=e;if(e&&(e=e.previousElementSibling)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** Descendant combinator\n                // E F (E ancestor of F)\n                case \"\t\":\n                case \" \":\n                    match = selector.match(Patterns.ancestor);\n                    source = \"var N\" + k + \"=e;while(e&&(e=e.parentElement)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** Child combinator\n                // E > F (F children of E)\n                case \">\":\n                    match = selector.match(Patterns.children);\n                    source = \"var N\" + k + \"=e;if(e&&(e=e.parentElement)){\" + source + \"}e=N\" + k + \";\";\n                    break;\n                // *** user supplied combinators extensions\n                case symbol in Combinators ? symbol : undefined:\n                    // for other registered combinators extensions\n                    match[match.length - 1] = \"*\";\n                    source = Combinators[symbol](match) + source;\n                    break;\n                // *** tree-structural pseudo-classes\n                // :root, :empty, :first-child, :last-child, :only-child, :first-of-type, :last-of-type, :only-of-type\n                case \":\":\n                    if (match = selector.match(Patterns.structural)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"root\":\n                                // there can only be one :root element, so exit the loop once found\n                                source = \"if((e===s.root)){\" + source + (mode ? \"break main;\" : \"\") + \"}\";\n                                break;\n                            case \"empty\":\n                                // matches elements that don't contain elements or text nodes\n                                source = \"n=e.firstChild;while(n&&!(/1|3/).test(n.nodeType)){n=n.nextSibling}if(!n){\" + source + \"}\";\n                                break;\n                            // *** child-indexed pseudo-classes\n                            // :first-child, :last-child, :only-child\n                            case \"only-child\":\n                                source = \"if((!e.nextElementSibling&&!e.previousElementSibling)){\" + source + \"}\";\n                                break;\n                            case \"last-child\":\n                                source = \"if((!e.nextElementSibling)){\" + source + \"}\";\n                                break;\n                            case \"first-child\":\n                                source = \"if((!e.previousElementSibling)){\" + source + \"}\";\n                                break;\n                            // *** typed child-indexed pseudo-classes\n                            // :only-of-type, :last-of-type, :first-of-type\n                            case \"only-of-type\":\n                                source = \"o=e.localName;\" + \"n=e;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){\" + \"n=e;while((n=n.previousElementSibling)&&n.localName!=o);}if(!n){\" + source + \"}\";\n                                break;\n                            case \"last-of-type\":\n                                source = \"n=e;o=e.localName;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){\" + source + \"}\";\n                                break;\n                            case \"first-of-type\":\n                                source = \"n=e;o=e.localName;while((n=n.previousElementSibling)&&n.localName!=o);if(!n){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.treestruct)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"nth-child\":\n                            case \"nth-of-type\":\n                            case \"nth-last-child\":\n                            case \"nth-last-of-type\":\n                                expr = /-of-type/i.test(match[1]);\n                                if (match[1] && match[2]) {\n                                    type = /last/i.test(match[1]);\n                                    if (match[2] == \"n\") {\n                                        source = \"if(true){\" + source + \"}\";\n                                        break;\n                                    } else if (match[2] == \"1\") {\n                                        test = type ? \"next\" : \"previous\";\n                                        source = expr ? \"n=e;o=e.localName;\" + \"while((n=n.\" + test + \"ElementSibling)&&n.localName!=o);if(!n){\" + source + \"}\" : \"if(!e.\" + test + \"ElementSibling){\" + source + \"}\";\n                                        break;\n                                    } else if (match[2] == \"even\" || match[2] == \"2n0\" || match[2] == \"2n+0\" || match[2] == \"2n\") {\n                                        test = \"n%2==0\";\n                                    } else if (match[2] == \"odd\" || match[2] == \"2n1\" || match[2] == \"2n+1\") {\n                                        test = \"n%2==1\";\n                                    } else {\n                                        f = /n/i.test(match[2]);\n                                        n = match[2].split(\"n\");\n                                        a = parseInt(n[0], 10) || 0;\n                                        b = parseInt(n[1], 10) || 0;\n                                        if (n[0] == \"-\") {\n                                            a = -1;\n                                        }\n                                        if (n[0] == \"+\") {\n                                            a = +1;\n                                        }\n                                        test = (b ? \"(n\" + (b > 0 ? \"-\" : \"+\") + Math.abs(b) + \")\" : \"n\") + \"%\" + a + \"==0\";\n                                        test = a >= +1 ? f ? \"n>\" + (b - 1) + (Math.abs(a) != 1 ? \"&&\" + test : \"\") : \"n==\" + a : a <= -1 ? f ? \"n<\" + (b + 1) + (Math.abs(a) != 1 ? \"&&\" + test : \"\") : \"n==\" + a : a === 0 ? n[0] ? \"n==\" + b : \"n>\" + (b - 1) : \"false\";\n                                    }\n                                    expr = expr ? \"OfType\" : \"Element\";\n                                    type = type ? \"true\" : \"false\";\n                                    source = \"n=s.nth\" + expr + \"(e,\" + type + \");if((\" + test + \")){\" + source + \"}\";\n                                } else {\n                                    emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                }\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.logicalsel)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"is\":\n                            case \"where\":\n                            case \"matches\":\n                                expr = match[2].replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n                                source = 'if(s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + '\",e)){' + source + \"}\";\n                                break;\n                            case \"not\":\n                                expr = match[2].replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n                                source = 'if(!s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + '\",e)){' + source + \"}\";\n                                break;\n                            case \"has\":\n                                referenceElement = selector_string.split(\":\")[0];\n                                expr = match[2].replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n                                source = 'if(s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + \",\" + referenceElement + '\",e)){' + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.linguistic)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"dir\":\n                                source = \"var p;if((\" + \"(/\" + match[2] + '/i.test(e.dir))||(p=s.ancestor(\"[dir]\", e))&&' + \"(/\" + match[2] + '/i.test(p.dir))||(e.dir==\"\"||e.dir==\"auto\")&&' + \"(\" + (match[2] == \"ltr\" ? \"!\" : \"\") + RTL + \".test(e.textContent)))\" + \"){\" + source + \"};\";\n                                break;\n                            case \"lang\":\n                                expr = \"(?:^|-)\" + match[2] + \"(?:-|$)\";\n                                source = \"var p;if((\" + '(e.isConnected&&(e.lang==\"\"&&(p=s.ancestor(\"[lang]\",e)))&&' + '(p.lang==\"' + match[2] + '\")||/' + expr + \"/i.test(e.lang)))\" + \"){\" + source + \"};\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.locationpc)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"any-link\":\n                                source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\")||e.visited)){' + source + \"}\";\n                                break;\n                            case \"link\":\n                                source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\"))){' + source + \"}\";\n                                break;\n                            case \"visited\":\n                                source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\")&&e.visited)){' + source + \"}\";\n                                break;\n                            case \"target\":\n                                source = \"if(((s.doc.compareDocumentPosition(e)&16)&&s.doc.location.hash&&e.id==s.doc.location.hash.slice(1))){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.useraction)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"hover\":\n                                source = \"hasFocus\" in doc && doc.hasFocus() ? \"if((e===s.doc.hoverElement)){\" + source + \"}\" : source;\n                                break;\n                            case \"active\":\n                                source = \"hasFocus\" in doc && doc.hasFocus() ? \"if((e===s.doc.activeElement)){\" + source + \"}\" : source;\n                                break;\n                            case \"focus\":\n                                source = \"hasFocus\" in doc ? 'if(e.parentElement&&e.parentElement.style.display!=\"none\"&&' + 'e===s.doc.activeElement&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex==\"number\")){' + source + \"}\" : source;\n                                break;\n                            case \"focus-within\":\n                                source = \"hasFocus\" in doc ? \"n=s.doc.activeElement;if(e!==n){while(n&&(n=n.parentElement)){if(e===n)break;}}\" + 'if((e===n&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex==\"number\"))){' + source + \"}\" : source;\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.inputstate)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"enabled\":\n                                source = 'if(((\"form\" in e||/^optgroup$/i.test(e.localName))&&\"disabled\" in e &&e.disabled===false' + \")){\" + source + \"}\";\n                                break;\n                            case \"disabled\":\n                                // https://www.w3.org/TR/html5/forms.html#enabling-and-disabling-form-controls:-the-disabled-attribute\n                                source = 'if(((\"form\" in e||/^optgroup$/i.test(e.localName))&&\"disabled\" in e&&' + '(e.disabled===true||(n=s.ancestor(\"fieldset\",e))&&(n=s.first(\"legend\",n))&&!n.contains(e))' + \")){\" + source + \"}\";\n                                break;\n                            case \"read-only\":\n                                source = \"if((\" + \"(/^textarea$/i.test(e.localName)&&(e.readOnly||e.disabled))||\" + '(\"|password|text|\".includes(\"|\"+e.type+\"|\")&&e.readOnly)' + \")){\" + source + \"}\";\n                                break;\n                            case \"read-write\":\n                                source = \"if((\" + \"((/^textarea$/i.test(e.localName)&&!e.readOnly&&!e.disabled)||\" + '(\"|password|text|\".includes(\"|\"+e.type+\"|\")&&!e.readOnly&&!e.disabled))||' + '(e.hasAttribute(\"contenteditable\")||(s.doc.designMode==\"on\"))' + \")){\" + source + \"}\";\n                                break;\n                            case \"placeholder-shown\":\n                                source = \"if((\" + '(/^input|textarea$/i.test(e.localName))&&e.hasAttribute(\"placeholder\")&&' + '(\"|textarea|password|number|search|email|text|tel|url|\".includes(\"|\"+e.type+\"|\"))&&' + '(!s.match(\":focus\",e))' + \")){\" + source + \"}\";\n                                break;\n                            case \"default\":\n                                source = 'if((\"form\" in e && e.form)){' + \"var x=0;n=[];\" + 'if(e.type==\"image\")n=e.form.getElementsByTagName(\"input\");' + 'if(e.type==\"submit\")n=e.form.elements;' + \"while(n[x]&&e!==n[x]){\" + 'if(n[x].type==\"image\")break;' + 'if(n[x].type==\"submit\")break;' + \"x++;\" + \"}\" + \"}\" + 'if((e.form&&(e===n[x]&&\"|image|submit|\".includes(\"|\"+e.type+\"|\"))||' + \"((/^option$/i.test(e.localName))&&e.defaultSelected)||\" + '((\"|radio|checkbox|\".includes(\"|\"+e.type+\"|\"))&&e.defaultChecked)' + \")){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.inputvalue)) {\n                        match[1] = match[1].toLowerCase();\n                        switch(match[1]){\n                            case \"checked\":\n                                source = \"if((/^input$/i.test(e.localName)&&\" + '(\"|radio|checkbox|\".includes(\"|\"+e.type+\"|\")&&e.checked)||' + \"(/^option$/i.test(e.localName)&&(e.selected||e.checked))\" + \")){\" + source + \"}\";\n                                break;\n                            case \"indeterminate\":\n                                source = 'if((/^progress$/i.test(e.localName)&&!e.hasAttribute(\"value\"))||' + '(/^input$/i.test(e.localName)&&(\"checkbox\"==e.type&&e.indeterminate)||' + '(\"radio\"==e.type&&e.name&&!s.first(\"input[name=\"+e.name+\"]:checked\",e.form))' + \")){\" + source + \"}\";\n                                break;\n                            case \"required\":\n                                source = \"if((/^input|select|textarea$/i.test(e.localName)&&e.required)\" + \"){\" + source + \"}\";\n                                break;\n                            case \"optional\":\n                                source = \"if((/^input|select|textarea$/i.test(e.localName)&&!e.required)\" + \"){\" + source + \"}\";\n                                break;\n                            case \"invalid\":\n                                source = \"if(((\" + \"(/^form$/i.test(e.localName)&&!e.noValidate)||\" + \"(e.willValidate&&!e.formNoValidate))&&!e.checkValidity())||\" + '(/^fieldset$/i.test(e.localName)&&s.first(\":invalid\",e))' + \"){\" + source + \"}\";\n                                break;\n                            case \"valid\":\n                                source = \"if(((\" + \"(/^form$/i.test(e.localName)&&!e.noValidate)||\" + \"(e.willValidate&&!e.formNoValidate))&&e.checkValidity())||\" + '(/^fieldset$/i.test(e.localName)&&s.first(\":valid\",e))' + \"){\" + source + \"}\";\n                                break;\n                            case \"in-range\":\n                                source = \"if((/^input$/i.test(e.localName))&&\" + \"(e.willValidate&&!e.formNoValidate)&&\" + \"(!e.validity.rangeUnderflow&&!e.validity.rangeOverflow)&&\" + '(\"|date|datetime-local|month|number|range|time|week|\".includes(\"|\"+e.type+\"|\"))&&' + '(\"range\"==e.type||e.getAttribute(\"min\")||e.getAttribute(\"max\"))' + \"){\" + source + \"}\";\n                                break;\n                            case \"out-of-range\":\n                                source = \"if((/^input$/i.test(e.localName))&&\" + \"(e.willValidate&&!e.formNoValidate)&&\" + \"(e.validity.rangeUnderflow||e.validity.rangeOverflow)&&\" + '(\"|date|datetime-local|month|number|range|time|week|\".includes(\"|\"+e.type+\"|\"))&&' + '(\"range\"==e.type||e.getAttribute(\"min\")||e.getAttribute(\"max\"))' + \"){\" + source + \"}\";\n                                break;\n                            default:\n                                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                                break;\n                        }\n                    } else if (match = selector.match(Patterns.pseudo_sng)) {\n                        source = 'if(e.element&&e.type.toLowerCase()==\"' + \":\" + match[0].toLowerCase() + '\"){e=e.element;' + source + \"}\";\n                    } else if (match = selector.match(Patterns.pseudo_dbl)) {\n                        source = 'if(e.element&&e.type.toLowerCase()==\"' + match[0].toLowerCase() + '\"){e=e.element;' + source + \"}\";\n                    } else if (match = selector.match(Patterns.pseudo_nop)) {\n                        source = \"if(false){\" + source + \"}\";\n                    } else {\n                        // reset\n                        expr = false;\n                        status = false;\n                        // process registered selector extensions\n                        for(expr in Selectors){\n                            if (match = selector.match(Selectors[expr].Expression)) {\n                                result = Selectors[expr].Callback(match, source, mode, callback);\n                                if (\"match\" in result) {\n                                    match = result.match;\n                                }\n                                vars = result.modvar;\n                                if (mode) {\n                                    // add extra select() vars\n                                    vars && S_VARS.indexOf(vars) < 0 && (S_VARS[S_VARS.length] = vars);\n                                } else {\n                                    // add extra match() vars\n                                    vars && M_VARS.indexOf(vars) < 0 && (M_VARS[M_VARS.length] = vars);\n                                }\n                                // extension source code\n                                source = result.source;\n                                // extension status code\n                                status = result.status;\n                                // break on status error\n                                if (status) {\n                                    break;\n                                }\n                            }\n                        }\n                        if (!status) {\n                            emit(\"unknown pseudo-class selector '\" + selector + \"'\");\n                            return \"\";\n                        }\n                        if (!expr) {\n                            emit(\"unknown token in selector '\" + selector + \"'\");\n                            return \"\";\n                        }\n                    }\n                    break;\n                default:\n                    emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                    break selector_recursion_label;\n            }\n            // end of switch symbol\n            if (!match) {\n                emit(\"'\" + selector_string + \"'\" + qsInvalid);\n                return \"\";\n            }\n            // pop last component\n            selector = match.pop();\n        }\n        // end of while selector\n        return source;\n    }, // replace ':scope' pseudo-class with element references\n    makeref = function(selectors, element) {\n        return selectors.replace(/:scope/ig, element.localName + (element.id ? \"#\" + element.id : \"\") + (element.className ? \".\" + element.classList[0] : \"\"));\n    }, // equivalent of w3c 'closest' method\n    ancestor = function _closest(selectors, element, callback) {\n        if (/:scope/i.test(selectors)) {\n            selectors = makeref(selectors, element);\n        }\n        while(element){\n            if (match(selectors, element, callback)) break;\n            element = element.parentElement;\n        }\n        return element;\n    }, match_assert = function(f, element, callback) {\n        for(var i = 0, l = f.length, r = false; l > i; ++i)f[i](element, callback, null, false) && (r = true);\n        return r;\n    }, match_collect = function(selectors, callback) {\n        for(var i = 0, l = selectors.length, f = []; l > i; ++i)f[i] = compile(selectors[i], false, callback);\n        return {\n            factory: f\n        };\n    }, // equivalent of w3c 'matches' method\n    match = function _matches(selectors, element, callback) {\n        var expressions, parsed;\n        if (element && matchResolvers[selectors]) {\n            return match_assert(matchResolvers[selectors].factory, element, callback);\n        }\n        lastMatched = selectors;\n        // arguments validation\n        if (arguments.length === 0) {\n            emit(qsNotArgs, TypeError);\n            return Config.VERBOSITY ? undefined : false;\n        } else if (arguments[0] === \"\") {\n            emit(\"''\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : false;\n        }\n        // input NULL or UNDEFINED\n        if (typeof selectors != \"string\") {\n            selectors = \"\" + selectors;\n        }\n        if (/:scope/i.test(selectors)) {\n            selectors = makeref(selectors, element);\n        }\n        // normalize input string\n        parsed = selectors.replace(/\\x00|\\\\$/g, \"�\").replace(REX.CombineWSP, \" \").replace(REX.PseudosWSP, \"$1\").replace(REX.TabCharWSP, \"\t\").replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n        // parse, validate and split possible compound selectors\n        if ((expressions = parsed.match(reValidator)) && expressions.join(\"\") == parsed) {\n            expressions = parsed.match(REX.SplitGroup);\n            if (parsed[parsed.length - 1] == \",\") {\n                emit(qsInvalid);\n                return Config.VERBOSITY ? undefined : false;\n            }\n        } else {\n            emit(\"'\" + selectors + \"'\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : false;\n        }\n        matchResolvers[selectors] = match_collect(expressions, callback);\n        return match_assert(matchResolvers[selectors].factory, element, callback);\n    }, // equivalent of w3c 'querySelector' method\n    first = function _querySelector(selectors, context, callback) {\n        if (arguments.length === 0) {\n            emit(qsNotArgs, TypeError);\n        }\n        return select(selectors, context, typeof callback == \"function\" ? function firstMatch(element) {\n            callback(element);\n            return false;\n        } : function firstMatch() {\n            return false;\n        })[0] || null;\n    }, // equivalent of w3c 'querySelectorAll' method\n    select = function _querySelectorAll(selectors, context, callback) {\n        var expressions, nodes = [], parsed, resolver;\n        context || (context = doc);\n        if (selectors) {\n            if (resolver = selectResolvers[selectors]) {\n                if (resolver.context === context && resolver.callback === callback) {\n                    var f = resolver.factory, h = resolver.htmlset, n = resolver.nodeset;\n                    if (n.length > 1) {\n                        for(var i = 0, l = n.length, list; l > i; ++i){\n                            list = compat[n[i][0]](context, n[i].slice(1))();\n                            if (f[i] !== null) {\n                                f[i](list, callback, context, nodes);\n                            } else {\n                                nodes = nodes.concat(list);\n                            }\n                        }\n                        if (l > 1 && nodes.length > 1) {\n                            nodes.sort(documentOrder);\n                            hasDupes && (nodes = unique(nodes));\n                        }\n                    } else {\n                        if (f[0]) {\n                            nodes = f[0](h[0](), callback, context, nodes);\n                        } else {\n                            nodes = h[0]();\n                        }\n                    }\n                    return typeof callback == \"function\" ? concatCall(nodes, callback) : nodes;\n                }\n            }\n        }\n        lastSelected = selectors;\n        // arguments validation\n        if (arguments.length === 0) {\n            emit(qsNotArgs, TypeError);\n            return Config.VERBOSITY ? undefined : none;\n        } else if (arguments[0] === \"\") {\n            emit(\"''\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : none;\n        } else if (lastContext !== context) {\n            lastContext = switchContext(context);\n        }\n        // input NULL or UNDEFINED\n        if (typeof selectors != \"string\") {\n            selectors = \"\" + selectors;\n        }\n        if (/:scope/i.test(selectors)) {\n            selectors = makeref(selectors, context);\n        }\n        // normalize input string\n        parsed = selectors.replace(/\\x00|\\\\$/g, \"�\").replace(REX.CombineWSP, \" \").replace(REX.PseudosWSP, \"$1\").replace(REX.TabCharWSP, \"\t\").replace(REX.CommaGroup, \",\").replace(REX.TrimSpaces, \"\");\n        // parse, validate and split possible compound selectors\n        if ((expressions = parsed.match(reValidator)) && expressions.join(\"\") == parsed) {\n            expressions = parsed.match(REX.SplitGroup);\n            if (parsed[parsed.length - 1] == \",\") {\n                emit(qsInvalid);\n                return Config.VERBOSITY ? undefined : false;\n            }\n        } else {\n            emit(\"'\" + selectors + \"'\" + qsInvalid);\n            return Config.VERBOSITY ? undefined : false;\n        }\n        // save/reuse factory and closure collection\n        selectResolvers[selectors] = collect(expressions, context, callback);\n        nodes = selectResolvers[selectors].results;\n        return typeof callback == \"function\" ? concatCall(nodes, callback) : nodes;\n    }, // optimize selectors avoiding duplicated checks\n    optimize = function(selector, token) {\n        var index = token.index, length = token[1].length + token[2].length;\n        return selector.slice(0, index) + (\" >+~\".indexOf(selector.charAt(index - 1)) > -1 ? \":[\".indexOf(selector.charAt(index + length + 1)) > -1 ? \"*\" : \"\" : \"\") + selector.slice(index + length - (token[1] == \"*\" ? 1 : 0));\n    }, // prepare factory resolvers and closure collections\n    collect = function(selectors, context, callback) {\n        var i, l, seen = {}, token = [\n            \"\",\n            \"*\",\n            \"*\"\n        ], optimized = selectors, factory = [], htmlset = [], nodeset = [], results = [], type;\n        for(i = 0, l = selectors.length; l > i; ++i){\n            if (!seen[selectors[i]] && (seen[selectors[i]] = true)) {\n                type = selectors[i].match(reOptimizer);\n                if (type && type[1] != \":\" && (token = type)) {\n                    token[1] || (token[1] = \"*\");\n                    optimized[i] = optimize(optimized[i], token);\n                } else {\n                    token = [\n                        \"\",\n                        \"*\",\n                        \"*\"\n                    ];\n                }\n            }\n            nodeset[i] = token[1] + token[2];\n            htmlset[i] = compat[token[1]](context, token[2]);\n            factory[i] = compile(optimized[i], true, null);\n            factory[i] ? factory[i](htmlset[i](), callback, context, results) : results.concat(htmlset[i]());\n        }\n        if (l > 1) {\n            results.sort(documentOrder);\n            hasDupes && (results = unique(results));\n        }\n        return {\n            callback: callback,\n            context: context,\n            factory: factory,\n            htmlset: htmlset,\n            nodeset: nodeset,\n            results: results\n        };\n    }, // QSA placeholders to native references\n    _closest, _matches, _querySelector, _querySelectorAll, // overrides QSA methods (only for browsers)\n    install = function(all) {\n        // save references\n        _closest = Element.prototype.closest;\n        _matches = Element.prototype.matches;\n        _querySelector = Document.prototype.querySelector;\n        _querySelectorAll = Document.prototype.querySelectorAll;\n        function parseQSArgs() {\n            var method = arguments[arguments.length - 1];\n            return arguments.length < 2 ? method.apply(this, []) : arguments.length < 3 ? method.apply(this, [\n                arguments[0],\n                this\n            ]) : method.apply(this, [\n                arguments[0],\n                this,\n                typeof arguments[1] == \"function\" ? arguments[1] : undefined\n            ]);\n        }\n        Element.prototype.closest = function closest() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(ancestor));\n        };\n        Element.prototype.matches = function matches() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(match));\n        };\n        Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = function querySelector() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(first));\n        };\n        Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = function querySelectorAll() {\n            return parseQSArgs.apply(this, [].slice.call(arguments).concat(select));\n        };\n        if (all) {\n            document.addEventListener(\"load\", function(e) {\n                var c, d, r, s, t = e.target;\n                if (/iframe/i.test(t.localName)) {\n                    c = \"(\" + Export + \")(this, \" + Factory + \");\";\n                    d = t.contentDocument;\n                    s = d.createElement(\"script\");\n                    s.textContent = c + \"NW.Dom.install()\";\n                    r = d.documentElement;\n                    r.removeChild(r.insertBefore(s, r.firstChild));\n                }\n            }, true);\n        }\n    }, // restore QSA methods (only for browsers)\n    uninstall = function() {\n        // restore references\n        if (_closest) {\n            Element.prototype.closest = _closest;\n        }\n        if (_matches) {\n            Element.prototype.matches = _matches;\n        }\n        if (_querySelector) {\n            Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = _querySelector;\n        }\n        if (_querySelectorAll) {\n            Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = _querySelectorAll;\n        }\n    }, // empty set\n    none = Array(), // context\n    lastContext, // selector\n    lastMatched, lastSelected, // cached lambdas\n    matchLambdas = {}, selectLambdas = {}, // cached resolvers\n    matchResolvers = {}, selectResolvers = {}, // passed to resolvers\n    Snapshot = {\n        doc: doc,\n        from: doc,\n        root: root,\n        byTag: byTag,\n        first: first,\n        match: match,\n        ancestor: ancestor,\n        nthOfType: nthOfType,\n        nthElement: nthElement,\n        hasAttributeNS: hasAttributeNS\n    }, // public exported methods/objects\n    Dom = {\n        // exported cache objects\n        lastMatched: lastMatched,\n        lastSelected: lastSelected,\n        matchLambdas: matchLambdas,\n        selectLambdas: selectLambdas,\n        matchResolvers: matchResolvers,\n        selectResolvers: selectResolvers,\n        // exported compiler macros\n        CFG: CFG,\n        M_BODY: M_BODY,\n        S_BODY: S_BODY,\n        M_TEST: M_TEST,\n        S_TEST: S_TEST,\n        // exported engine methods\n        byId: byId,\n        byTag: byTag,\n        byClass: byClass,\n        match: match,\n        first: first,\n        select: select,\n        closest: ancestor,\n        compile: compile,\n        configure: configure,\n        emit: emit,\n        Config: Config,\n        Snapshot: Snapshot,\n        Version: version,\n        install: install,\n        uninstall: uninstall,\n        Operators: Operators,\n        Selectors: Selectors,\n        // register a new selector combinator symbol and its related function resolver\n        registerCombinator: function(combinator, resolver) {\n            var i = 0, l = combinator.length, symbol;\n            for(; l > i; ++i){\n                if (combinator[i] != \"=\") {\n                    symbol = combinator[i];\n                    break;\n                }\n            }\n            if (CFG.combinators.indexOf(symbol) < 0) {\n                CFG.combinators = CFG.combinators.replace(\"](\", symbol + \"](\");\n                CFG.combinators = CFG.combinators.replace(\"])\", symbol + \"])\");\n                Combinators[combinator] = resolver;\n                setIdentifierSyntax();\n            } else {\n                console.warn(\"Warning: the '\" + combinator + \"' combinator is already registered.\");\n            }\n        },\n        // register a new attribute operator symbol and its related function resolver\n        registerOperator: function(operator, resolver) {\n            var i = 0, l = operator.length, symbol;\n            for(; l > i; ++i){\n                if (operator[i] != \"=\") {\n                    symbol = operator[i];\n                    break;\n                }\n            }\n            if (CFG.operators.indexOf(symbol) < 0 && !Operators[operator]) {\n                CFG.operators = CFG.operators.replace(\"]=\", symbol + \"]=\");\n                Operators[operator] = resolver;\n                setIdentifierSyntax();\n            } else {\n                console.warn(\"Warning: the '\" + operator + \"' operator is already registered.\");\n            }\n        },\n        // register a new selector symbol and its related function resolver\n        registerSelector: function(name, rexp, func) {\n            Selectors[name] || (Selectors[name] = {\n                Expression: rexp,\n                Callback: func\n            });\n        }\n    };\n    initialize(doc);\n    return Dom;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1FBQ25FQyxrQkFDRSxTQUFTMUosSUFBSSxFQUFFMkosSUFBSSxFQUFFQyxJQUFJO1lBQ3ZCeE8sU0FBUyxDQUFDNEUsS0FBSyxJQUFLNUUsQ0FBQUEsU0FBUyxDQUFDNEUsS0FBSyxHQUFHO2dCQUNwQzhGLFlBQVk2RDtnQkFDWjVELFVBQVU2RDtZQUNaO1FBQ0Y7SUFFSjtJQUVBOUgsV0FBV2xMO0lBRVgsT0FBT0g7QUFFVCIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL253c2FwaS9zcmMvbndzYXBpLmpzP2IzYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoQykgMjAwNy0yMDIzIERpZWdvIFBlcmluaVxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBud3NhcGkuanMgLSBGYXN0IENTUyBTZWxlY3RvcnMgQVBJIEVuZ2luZVxuICpcbiAqIEF1dGhvcjogRGllZ28gUGVyaW5pIDxkaWVnby5wZXJpbmkgYXQgZ21haWwgY29tPlxuICogVmVyc2lvbjogMi4yLjdcbiAqIENyZWF0ZWQ6IDIwMDcwNzIyXG4gKiBSZWxlYXNlOiAyMDIzMDcwMVxuICpcbiAqIExpY2Vuc2U6XG4gKiAgaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL253c2FwaS9NSVQtTElDRU5TRVxuICogRG93bmxvYWQ6XG4gKiAgaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL253c2FwaS9ud3NhcGkuanNcbiAqL1xuXG4oZnVuY3Rpb24gRXhwb3J0KGdsb2JhbCwgZmFjdG9yeSkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWwuTlcgfHwgKGdsb2JhbC5OVyA9IHsgfSk7XG4gICAgZ2xvYmFsLk5XLkRvbSA9IGZhY3RvcnkoZ2xvYmFsLCBFeHBvcnQpO1xuICB9XG5cbn0pKHRoaXMsIGZ1bmN0aW9uIEZhY3RvcnkoZ2xvYmFsLCBFeHBvcnQpIHtcblxuICB2YXIgdmVyc2lvbiA9ICdud3NhcGktMi4yLjcnLFxuXG4gIGRvYyA9IGdsb2JhbC5kb2N1bWVudCxcbiAgcm9vdCA9IGRvYy5kb2N1bWVudEVsZW1lbnQsXG4gIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuXG4gIEhTUCA9ICdbXFxcXHgyMFxcXFx0XScsXG4gIFZTUCA9ICdbXFxcXHJcXFxcblxcXFxmXScsXG4gIFdTUCA9ICdbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXScsXG5cbiAgQ0ZHID0ge1xuICAgIC8vIGV4dGVuc2lvbnNcbiAgICBvcGVyYXRvcnM6ICdbfipeJHxdPXw9JyxcbiAgICBjb21iaW5hdG9yczogJ1tcXFxceDIwXFxcXHQ+K35dKD89W14+K35dKSdcbiAgfSxcblxuICBOT1QgPSB7XG4gICAgLy8gbm90IGVuY2xvc2VkIGluIGRvdWJsZS9zaW5nbGUvcGFyZW5zL3NxdWFyZVxuICAgIGRvdWJsZV9lbmM6ICcoPz0oPzpbXlwiXSpbXCJdW15cIl0qW1wiXSkqW15cIl0qJCknLFxuICAgIHNpbmdsZV9lbmM6IFwiKD89KD86W14nXSpbJ11bXiddKlsnXSkqW14nXSokKVwiLFxuICAgIHBhcmVuc19lbmM6ICcoPyFbXlxcXFx4MjhdKlxcXFx4MjkpJyxcbiAgICBzcXVhcmVfZW5jOiAnKD8hW15cXFxceDViXSpcXFxceDVkKSdcbiAgfSxcblxuICBSRVggPSB7XG4gICAgLy8gcmVndWxhciBleHByZXNzaW9uc1xuICAgIEhhc0VzY2FwZXM6IFJlZ0V4cCgnXFxcXFxcXFwnKSxcbiAgICBIZXhOdW1iZXJzOiBSZWdFeHAoJ15bMC05YS1mQS1GXScpLFxuICAgIEVzY09yUXVvdGU6IFJlZ0V4cCgnXlxcXFxcXFxcfFtcXFxceDIyXFxcXHgyN10nKSxcbiAgICBSZWdFeHBDaGFyOiBSZWdFeHAoJyg/IVxcXFxcXFxcKVtcXFxcXFxcXF4kLiwqKz8oKVtcXFxcXXt9fFxcXFwvXScsICdnJyksXG4gICAgVHJpbVNwYWNlczogUmVnRXhwKCdeJyArIFdTUCArICcrfCcgKyBXU1AgKyAnKyR8JyArIFZTUCwgJ2cnKSxcbiAgICBTcGxpdEdyb3VwOiBSZWdFeHAoJyhcXFxcKFteKV0qXFxcXCl8XFxcXFtbXltdKlxcXFxdfFxcXFxcXFxcLnxbXixdKSsnLCAnZycpLFxuICAgIENvbW1hR3JvdXA6IFJlZ0V4cCgnKFxcXFxzKixcXFxccyopJyArIE5PVC5zcXVhcmVfZW5jICsgTk9ULnBhcmVuc19lbmMsICdnJyksXG4gICAgRml4RXNjYXBlczogUmVnRXhwKCdcXFxcXFxcXChbMC05YS1mQS1GXXsxLDZ9JyArIFdTUCArICc/fC4pfChbXFxcXHgyMlxcXFx4MjddKScsICdnJyksXG4gICAgQ29tYmluZVdTUDogUmVnRXhwKCdbXFxcXG5cXFxcclxcXFxmXFxcXHgyMF0rJyArIE5PVC5zaW5nbGVfZW5jICsgTk9ULmRvdWJsZV9lbmMsICdnJyksXG4gICAgVGFiQ2hhcldTUDogUmVnRXhwKCcoXFxcXHgyMD9cXFxcdCtcXFxceDIwPyknICsgTk9ULnNpbmdsZV9lbmMgKyBOT1QuZG91YmxlX2VuYywgJ2cnKSxcbiAgICBQc2V1ZG9zV1NQOiBSZWdFeHAoJ1xcXFxzKyhbLStdKVxcXFxzKycgKyBOT1Quc3F1YXJlX2VuYywgJ2cnKVxuICB9LFxuXG4gIFNURCA9IHtcbiAgICBjb21iaW5hdG9yOiBSZWdFeHAoJ1xcXFxzPyhbPit+XSlcXFxccz8nLCAnZycpLFxuICAgIGFwaW1ldGhvZHM6IFJlZ0V4cCgnXig/OlthLXpdK3xcXFxcKilcXFxcfCcsICdpJyksXG4gICAgbmFtZXNwYWNlczogUmVnRXhwKCcoXFxcXCp8W2Etel0rKVxcXFx8Wy1hLXpdKycsICdpJylcbiAgfSxcblxuICBHUk9VUFMgPSB7XG4gICAgLy8gcHNldWRvLWNsYXNzZXMgcmVxdWlyaW5nIHBhcmFtZXRlcnNcbiAgICBsaW5ndWlzdGljOiAnKGRpcnxsYW5nKSg/OlxcXFx4MjhcXFxccz8oWy1cXFxcd117Mix9KVxcXFxzP1xcXFx4MjkpJyxcbiAgICBsb2dpY2Fsc2VsOiAnKGlzfHdoZXJlfG1hdGNoZXN8bm90fGhhcykoPzpcXFxceDI4XFxcXHM/KFxcXFxbKFteXFxcXFtcXFxcXV0qKVxcXFxdfFteKClcXFxcW1xcXFxdXSp8LiopXFxcXHM/XFxcXHgyOSknLFxuICAgIHRyZWVzdHJ1Y3Q6ICcobnRoKD86LWxhc3QpPyg/Oi1jaGlsZHwtb2YtdHlwZSkpKD86XFxcXHgyOFxcXFxzPyhldmVufG9kZHwoPzpbLStdP1xcXFxkKikoPzpuXFxcXHM/Wy0rXT9cXFxccz9cXFxcZCopPylcXFxccz9cXFxceDI5KScsXG4gICAgLy8gcHNldWRvLWNsYXNzZXMgbm90IHJlcXVpcmluZyBwYXJhbWV0ZXJzXG4gICAgbG9jYXRpb25wYzogJyhhbnktbGlua3xsaW5rfHZpc2l0ZWR8dGFyZ2V0KVxcXFxiJyxcbiAgICB1c2VyYWN0aW9uOiAnKGhvdmVyfGFjdGl2ZXxmb2N1cy13aXRoaW58Zm9jdXMpXFxcXGInLFxuICAgIHN0cnVjdHVyYWw6ICcocm9vdHxlbXB0eXwoPzooPzpmaXJzdHxsYXN0fG9ubHkpKD86LWNoaWxkfC1vZi10eXBlKSkpXFxcXGInLFxuICAgIGlucHV0c3RhdGU6ICcoZW5hYmxlZHxkaXNhYmxlZHxyZWFkLW9ubHl8cmVhZC13cml0ZXxwbGFjZWhvbGRlci1zaG93bnxkZWZhdWx0KVxcXFxiJyxcbiAgICBpbnB1dHZhbHVlOiAnKGNoZWNrZWR8aW5kZXRlcm1pbmF0ZXxyZXF1aXJlZHxvcHRpb25hbHx2YWxpZHxpbnZhbGlkfGluLXJhbmdlfG91dC1vZi1yYW5nZSlcXFxcYicsXG4gICAgLy8gcHNldWRvLWNsYXNzZXMgZm9yIHBhcnNpbmcgb25seSBzZWxlY3RvcnNcbiAgICBwc2V1ZG9fbm9wOiAnKGF1dG9maWxsfC13ZWJraXQtYXV0b2ZpbGwpXFxcXGInLFxuICAgIC8vIHBzZXVkby1lbGVtZW50cyBzdGFydGluZyB3aXRoIHNpbmdsZSBjb2xvbiAoOilcbiAgICBwc2V1ZG9fc25nOiAnKGFmdGVyfGJlZm9yZXxmaXJzdC1sZXR0ZXJ8Zmlyc3QtbGluZSlcXFxcYicsXG4gICAgLy8gcHNldWRvLWVsZW1lbnRzIHN0YXJ0aW5nIHdpdGggZG91YmxlIGNvbG9uICg6OilcbiAgICBwc2V1ZG9fZGJsOiAnOihhZnRlcnxiZWZvcmV8Zmlyc3QtbGV0dGVyfGZpcnN0LWxpbmV8c2VsZWN0aW9ufHBsYWNlaG9sZGVyfC13ZWJraXQtWy1hLXpBLVowLTldezIsfSlcXFxcYidcbiAgfSxcblxuICBQYXR0ZXJucyA9IHtcbiAgICAvLyBwc2V1ZG8tY2xhc3Nlc1xuICAgIHRyZWVzdHJ1Y3Q6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLnRyZWVzdHJ1Y3QgKyAnKSguKiknLCAnaScpLFxuICAgIHN0cnVjdHVyYWw6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLnN0cnVjdHVyYWwgKyAnKSguKiknLCAnaScpLFxuICAgIGxpbmd1aXN0aWM6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLmxpbmd1aXN0aWMgKyAnKSguKiknLCAnaScpLFxuICAgIHVzZXJhY3Rpb246IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLnVzZXJhY3Rpb24gKyAnKSguKiknLCAnaScpLFxuICAgIGlucHV0c3RhdGU6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLmlucHV0c3RhdGUgKyAnKSguKiknLCAnaScpLFxuICAgIGlucHV0dmFsdWU6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLmlucHV0dmFsdWUgKyAnKSguKiknLCAnaScpLFxuICAgIGxvY2F0aW9ucGM6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLmxvY2F0aW9ucGMgKyAnKSguKiknLCAnaScpLFxuICAgIGxvZ2ljYWxzZWw6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLmxvZ2ljYWxzZWwgKyAnKSguKiknLCAnaScpLFxuICAgIHBzZXVkb19ub3A6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLnBzZXVkb19ub3AgKyAnKSguKiknLCAnaScpLFxuICAgIHBzZXVkb19zbmc6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLnBzZXVkb19zbmcgKyAnKSguKiknLCAnaScpLFxuICAgIHBzZXVkb19kYmw6IFJlZ0V4cCgnXjooPzonICsgR1JPVVBTLnBzZXVkb19kYmwgKyAnKSguKiknLCAnaScpLFxuICAgIC8vIGNvbWJpbmF0b3Igc3ltYm9sc1xuICAgIGNoaWxkcmVuOiBSZWdFeHAoJ14nICsgV1NQICsgJz9cXFxcPicgKyBXU1AgKyAnPyguKiknKSxcbiAgICBhZGphY2VudDogUmVnRXhwKCdeJyArIFdTUCArICc/XFxcXCsnICsgV1NQICsgJz8oLiopJyksXG4gICAgcmVsYXRpdmU6IFJlZ0V4cCgnXicgKyBXU1AgKyAnP1xcXFx+JyArIFdTUCArICc/KC4qKScpLFxuICAgIGFuY2VzdG9yOiBSZWdFeHAoJ14nICsgV1NQICsgJysoLiopJyksXG4gICAvLyB1bml2ZXJzYWwgJiBuYW1lc3BhY2VcbiAgIHVuaXZlcnNhbDogUmVnRXhwKCdeXFxcXCooLiopJyksXG4gICBuYW1lc3BhY2U6IFJlZ0V4cCgnXihcXFxcdyt8XFxcXCopP1xcXFx8KC4qKScpXG4gIH0sXG5cbiAgLy8gcmVnZXhwIHRvIGFwcm94aW1hdGUgZGV0ZWN0aW9uIG9mIFJUTCBsYW5ndWFnZXMgKEFyYWJpYylcbiAgUlRMID0gUmVnRXhwKCdeW1xcXFx1MDU5MS1cXFxcdTA4ZmZcXFxcdWZiMWQtXFxcXHVmZGZkXFxcXHVmZTcwLVxcXFx1ZmVmYyBdKyQnKSxcblxuICAvLyBlbXVsYXRlIGZpcmVmb3ggZXJyb3Igc3RyaW5nc1xuICBxc05vdEFyZ3MgPSAnTm90IGVub3VnaCBhcmd1bWVudHMnLFxuICBxc0ludmFsaWQgPSAnIGlzIG5vdCBhIHZhbGlkIHNlbGVjdG9yJyxcblxuICAvLyBkZXRlY3Qgc3RydWN0dXJhbCBwc2V1ZG8tY2xhc3NlcyBpbiBzZWxlY3RvcnNcbiAgcmVOdGhFbGVtID0gUmVnRXhwKCcoOm50aCg/Oi1sYXN0KT8tY2hpbGQpJywgJ2knKSxcbiAgcmVOdGhUeXBlID0gUmVnRXhwKCcoOm50aCg/Oi1sYXN0KT8tb2YtdHlwZSknLCAnaScpLFxuXG4gIC8vIHBsYWNlaG9sZGVyIGZvciBnbG9iYWwgcmVnZXhwXG4gIHJlT3B0aW1pemVyLFxuICByZVZhbGlkYXRvcixcblxuICAvLyBzcGVjaWFsIGhhbmRsaW5nIGNvbmZpZ3VyYXRpb24gZmxhZ3NcbiAgQ29uZmlnID0ge1xuICAgIElEU19EVVBFUzogdHJ1ZSxcbiAgICBOT05ESUdJVFM6IHRydWUsXG4gICAgTE9HRVJST1JTOiB0cnVlLFxuICAgIFZFUkJPU0lUWTogdHJ1ZVxuICB9LFxuXG4gIE5BTUVTUEFDRSxcbiAgUVVJUktTX01PREUsXG4gIEhUTUxfRE9DVU1FTlQsXG5cbiAgQVRUUl9TVERfT1BTID0ge1xuICAgICc9JzogMSwgJ149JzogMSwgJyQ9JzogMSwgJ3w9JzogMSwgJyo9JzogMSwgJ349JzogMVxuICB9LFxuXG4gIEhUTUxfVEFCTEUgPSB7XG4gICAgJ2FjY2VwdCc6IDEsICdhY2NlcHQtY2hhcnNldCc6IDEsICdhbGlnbic6IDEsICdhbGluayc6IDEsICdheGlzJzogMSxcbiAgICAnYmdjb2xvcic6IDEsICdjaGFyc2V0JzogMSwgJ2NoZWNrZWQnOiAxLCAnY2xlYXInOiAxLCAnY29kZXR5cGUnOiAxLCAnY29sb3InOiAxLFxuICAgICdjb21wYWN0JzogMSwgJ2RlY2xhcmUnOiAxLCAnZGVmZXInOiAxLCAnZGlyJzogMSwgJ2RpcmVjdGlvbic6IDEsICdkaXNhYmxlZCc6IDEsXG4gICAgJ2VuY3R5cGUnOiAxLCAnZmFjZSc6IDEsICdmcmFtZSc6IDEsICdocmVmbGFuZyc6IDEsICdodHRwLWVxdWl2JzogMSwgJ2xhbmcnOiAxLFxuICAgICdsYW5ndWFnZSc6IDEsICdsaW5rJzogMSwgJ21lZGlhJzogMSwgJ21ldGhvZCc6IDEsICdtdWx0aXBsZSc6IDEsICdub2hyZWYnOiAxLFxuICAgICdub3Jlc2l6ZSc6IDEsICdub3NoYWRlJzogMSwgJ25vd3JhcCc6IDEsICdyZWFkb25seSc6IDEsICdyZWwnOiAxLCAncmV2JzogMSxcbiAgICAncnVsZXMnOiAxLCAnc2NvcGUnOiAxLCAnc2Nyb2xsaW5nJzogMSwgJ3NlbGVjdGVkJzogMSwgJ3NoYXBlJzogMSwgJ3RhcmdldCc6IDEsXG4gICAgJ3RleHQnOiAxLCAndHlwZSc6IDEsICd2YWxpZ24nOiAxLCAndmFsdWV0eXBlJzogMSwgJ3ZsaW5rJzogMVxuICB9LFxuXG4gIENvbWJpbmF0b3JzID0geyB9LFxuXG4gIFNlbGVjdG9ycyA9IHsgfSxcblxuICBPcGVyYXRvcnMgPSB7XG4gICAgICc9JzogeyBwMTogJ14nLFxuICAgICAgICAgICAgcDI6ICckJyxcbiAgICAgICAgICAgIHAzOiAndHJ1ZScgfSxcbiAgICAnXj0nOiB7IHAxOiAnXicsXG4gICAgICAgICAgICBwMjogJycsXG4gICAgICAgICAgICBwMzogJ3RydWUnIH0sXG4gICAgJyQ9JzogeyBwMTogJycsXG4gICAgICAgICAgICBwMjogJyQnLFxuICAgICAgICAgICAgcDM6ICd0cnVlJyB9LFxuICAgICcqPSc6IHsgcDE6ICcnLFxuICAgICAgICAgICAgcDI6ICcnLFxuICAgICAgICAgICAgcDM6ICd0cnVlJyB9LFxuICAgICd8PSc6IHsgcDE6ICdeJyxcbiAgICAgICAgICAgIHAyOiAnKC18JCknLFxuICAgICAgICAgICAgcDM6ICd0cnVlJyB9LFxuICAgICd+PSc6IHsgcDE6ICcoXnxcXFxccyknLFxuICAgICAgICAgICAgcDI6ICcoXFxcXHN8JCknLFxuICAgICAgICAgICAgcDM6ICd0cnVlJyB9XG4gIH0sXG5cbiAgY29uY2F0Q2FsbCA9XG4gICAgZnVuY3Rpb24obm9kZXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGgsIGxpc3QgPSBBcnJheShsKTtcbiAgICAgIHdoaWxlIChsID4gaSkge1xuICAgICAgICBpZiAoZmFsc2UgPT09IGNhbGxiYWNrKGxpc3RbaV0gPSBub2Rlc1tpXSkpIGJyZWFrO1xuICAgICAgICArK2k7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuXG4gIGNvbmNhdExpc3QgPVxuICAgIGZ1bmN0aW9uKGxpc3QsIG5vZGVzKSB7XG4gICAgICB2YXIgaSA9IC0xLCBsID0gbm9kZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGwtLSkgeyBsaXN0W2xpc3QubGVuZ3RoXSA9IG5vZGVzWysraV07IH1cbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH0sXG5cbiAgZG9jdW1lbnRPcmRlciA9XG4gICAgZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKCFoYXNEdXBlcyAmJiBhID09PSBiKSB7XG4gICAgICAgIGhhc0R1cGVzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIDQgPyAtMSA6IDE7XG4gICAgfSxcblxuICBoYXNEdXBlcyA9IGZhbHNlLFxuXG4gIHVuaXF1ZSA9XG4gICAgZnVuY3Rpb24obm9kZXMpIHtcbiAgICAgIHZhciBpID0gMCwgaiA9IC0xLCBsID0gbm9kZXMubGVuZ3RoICsgMSwgbGlzdCA9IFsgXTtcbiAgICAgIHdoaWxlICgtLWwpIHtcbiAgICAgICAgaWYgKG5vZGVzW2krK10gPT09IG5vZGVzW2ldKSBjb250aW51ZTtcbiAgICAgICAgbGlzdFsrK2pdID0gbm9kZXNbaSAtIDFdO1xuICAgICAgfVxuICAgICAgaGFzRHVwZXMgPSBmYWxzZTtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH0sXG5cbiAgc3dpdGNoQ29udGV4dCA9XG4gICAgZnVuY3Rpb24oY29udGV4dCwgZm9yY2UpIHtcbiAgICAgIHZhciBvbGREb2MgPSBkb2M7XG4gICAgICBkb2MgPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dDtcbiAgICAgIGlmIChmb3JjZSB8fCBvbGREb2MgIT09IGRvYykge1xuICAgICAgICAvLyBmb3JjZSBhIG5ldyBjaGVjayBmb3IgZWFjaCBkb2N1bWVudCBjaGFuZ2VcbiAgICAgICAgLy8gcGVyZm9ybWVkIGJlZm9yZSB0aGUgbmV4dCBzZWxlY3Qgb3BlcmF0aW9uXG4gICAgICAgIHJvb3QgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICBIVE1MX0RPQ1VNRU5UID0gaXNIVE1MKGRvYyk7XG4gICAgICAgIFFVSVJLU19NT0RFID0gSFRNTF9ET0NVTUVOVCAmJlxuICAgICAgICAgIGRvYy5jb21wYXRNb2RlLmluZGV4T2YoJ0NTUycpIDwgMDtcbiAgICAgICAgTkFNRVNQQUNFID0gcm9vdCAmJiByb290Lm5hbWVzcGFjZVVSSTtcbiAgICAgICAgU25hcHNob3QuZG9jID0gZG9jO1xuICAgICAgICBTbmFwc2hvdC5yb290ID0gcm9vdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoU25hcHNob3QuZnJvbSA9IGNvbnRleHQpO1xuICAgIH0sXG5cbiAgLy8gY29udmVydCBzaW5nbGUgY29kZXBvaW50IHRvIFVURi0xNiBlbmNvZGluZ1xuICBjb2RlUG9pbnRUb1VURjE2ID1cbiAgICBmdW5jdGlvbihjb2RlUG9pbnQpIHtcbiAgICAgIC8vIG91dCBvZiByYW5nZSwgdXNlIHJlcGxhY2VtZW50IGNoYXJhY3RlclxuICAgICAgaWYgKGNvZGVQb2ludCA8IDEgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYgfHxcbiAgICAgICAgKGNvZGVQb2ludCA+IDB4ZDdmZiAmJiBjb2RlUG9pbnQgPCAweGUwMDApKSB7XG4gICAgICAgIHJldHVybiAnXFxcXHVmZmZkJztcbiAgICAgIH1cbiAgICAgIC8vIGphdmFzY3JpcHQgc3RyaW5ncyBhcmUgVVRGLTE2IGVuY29kZWRcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICAgIHZhciBsb3dIZXggPSAnMDAwJyArIGNvZGVQb2ludC50b1N0cmluZygxNik7XG4gICAgICAgIHJldHVybiAnXFxcXHUnICsgbG93SGV4LnN1YnN0cihsb3dIZXgubGVuZ3RoIC0gNCk7XG4gICAgICB9XG4gICAgICAvLyBzdXBwbGVtZW50YXJ5IGhpZ2ggKyBsb3cgc3Vycm9nYXRlc1xuICAgICAgcmV0dXJuICdcXFxcdScgKyAoKChjb2RlUG9pbnQgLSAweDEwMDAwKSA+PiAweDBhKSArIDB4ZDgwMCkudG9TdHJpbmcoMTYpICtcbiAgICAgICAgICAgICAnXFxcXHUnICsgKCgoY29kZVBvaW50IC0gMHgxMDAwMCkgJSAweDQwMCkgKyAweGRjMDApLnRvU3RyaW5nKDE2KTtcbiAgICB9LFxuXG4gIC8vIGNvbnZlcnQgc2luZ2xlIGNvZGVwb2ludCB0byBzdHJpbmdcbiAgc3RyaW5nRnJvbUNvZGVQb2ludCA9XG4gICAgZnVuY3Rpb24oY29kZVBvaW50KSB7XG4gICAgICAvLyBvdXQgb2YgcmFuZ2UsIHVzZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAxIHx8IGNvZGVQb2ludCA+IDB4MTBmZmZmIHx8XG4gICAgICAgIChjb2RlUG9pbnQgPiAweGQ3ZmYgJiYgY29kZVBvaW50IDwgMHhlMDAwKSkge1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCA/XG4gICAgICAgIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVQb2ludCkgOlxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICgoY29kZVBvaW50IC0gMHgxMDAwMCkgPj4gMHgwYSkgKyAweGQ4MDAsXG4gICAgICAgICAgKChjb2RlUG9pbnQgLSAweDEwMDAwKSAlIDB4NDAwKSArIDB4ZGMwMCk7XG4gICAgfSxcblxuICAvLyBjb252ZXJ0IGVzY2FwZSBzZXF1ZW5jZSBpbiBhIENTUyBzdHJpbmcgb3IgaWRlbnRpZmllclxuICAvLyB0byBqYXZhc2NyaXB0IHN0cmluZyB3aXRoIGphdmFzY3JpcHQgZXNjYXBlIHNlcXVlbmNlc1xuICBjb252ZXJ0RXNjYXBlcyA9XG4gICAgZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gUkVYLkhhc0VzY2FwZXMudGVzdChzdHIpID9cbiAgICAgICAgc3RyLnJlcGxhY2UoUkVYLkZpeEVzY2FwZXMsXG4gICAgICAgICAgZnVuY3Rpb24oc3Vic3RyaW5nLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIC8vIHVuZXNjYXBlZCBcIiBvciAnXG4gICAgICAgICAgICByZXR1cm4gcDIgPyAnXFxcXCcgKyBwMiA6XG4gICAgICAgICAgICAgIC8vIGphdmFzY3JpcHQgc3RyaW5ncyBhcmUgVVRGLTE2IGVuY29kZWRcbiAgICAgICAgICAgICAgUkVYLkhleE51bWJlcnMudGVzdChwMSkgPyBjb2RlUG9pbnRUb1VURjE2KHBhcnNlSW50KHAxLCAxNikpIDpcbiAgICAgICAgICAgICAgLy8gXFwnIFxcXCJcbiAgICAgICAgICAgICAgUkVYLkVzY09yUXVvdGUudGVzdChwMSkgPyBzdWJzdHJpbmcgOlxuICAgICAgICAgICAgICAvLyBcXGcgXFxoIFxcLiBcXCMgZXRjXG4gICAgICAgICAgICAgIHAxO1xuICAgICAgICAgIH1cbiAgICAgICAgKSA6IHN0cjtcbiAgICB9LFxuXG4gIC8vIGNvbnZlcnQgZXNjYXBlIHNlcXVlbmNlIGluIGEgQ1NTIHN0cmluZyBvciBpZGVudGlmaWVyXG4gIC8vIHRvIGphdmFzY3JpcHQgc3RyaW5nIHdpdGggY2hhcmFjdGVycyByZXByZXNlbnRhdGlvbnNcbiAgdW5lc2NhcGVJZGVudGlmaWVyID1cbiAgICBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiBSRVguSGFzRXNjYXBlcy50ZXN0KHN0cikgP1xuICAgICAgICBzdHIucmVwbGFjZShSRVguRml4RXNjYXBlcyxcbiAgICAgICAgICBmdW5jdGlvbihzdWJzdHJpbmcsIHAxLCBwMikge1xuICAgICAgICAgICAgLy8gdW5lc2NhcGVkIFwiIG9yICdcbiAgICAgICAgICAgIHJldHVybiBwMiA/IHAyIDpcbiAgICAgICAgICAgICAgLy8gamF2YXNjcmlwdCBzdHJpbmdzIGFyZSBVVEYtMTYgZW5jb2RlZFxuICAgICAgICAgICAgICBSRVguSGV4TnVtYmVycy50ZXN0KHAxKSA/IHN0cmluZ0Zyb21Db2RlUG9pbnQocGFyc2VJbnQocDEsIDE2KSkgOlxuICAgICAgICAgICAgICAvLyBcXCcgXFxcIlxuICAgICAgICAgICAgICBSRVguRXNjT3JRdW90ZS50ZXN0KHAxKSA/IHN1YnN0cmluZyA6XG4gICAgICAgICAgICAgIC8vIFxcZyBcXGggXFwuIFxcIyBldGNcbiAgICAgICAgICAgICAgcDE7XG4gICAgICAgICAgfVxuICAgICAgICApIDogc3RyO1xuICAgIH0sXG5cbiAgbWV0aG9kID0ge1xuICAgICcjJzogJ2dldEVsZW1lbnRCeUlkJyxcbiAgICAnKic6ICdnZXRFbGVtZW50c0J5VGFnTmFtZScsXG4gICAgJ3wnOiAnZ2V0RWxlbWVudHNCeVRhZ05hbWVOUycsXG4gICAgJy4nOiAnZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSdcbiAgICB9LFxuXG4gIGNvbXBhdCA9IHtcbiAgICAnIyc6IGZ1bmN0aW9uKGMsIG4pIHsgUkVYLkhhc0VzY2FwZXMudGVzdChuKSAmJiAobiA9IHVuZXNjYXBlSWRlbnRpZmllcihuKSk7IHJldHVybiBmdW5jdGlvbihlLCBmKSB7IHJldHVybiBieUlkKG4sIGMpOyB9OyB9LFxuICAgICcqJzogZnVuY3Rpb24oYywgbikgeyBSRVguSGFzRXNjYXBlcy50ZXN0KG4pICYmIChuID0gdW5lc2NhcGVJZGVudGlmaWVyKG4pKTsgcmV0dXJuIGZ1bmN0aW9uKGUsIGYpIHsgcmV0dXJuIGJ5VGFnKG4sIGMpOyB9OyB9LFxuICAgICd8JzogZnVuY3Rpb24oYywgbikgeyBSRVguSGFzRXNjYXBlcy50ZXN0KG4pICYmIChuID0gdW5lc2NhcGVJZGVudGlmaWVyKG4pKTsgcmV0dXJuIGZ1bmN0aW9uKGUsIGYpIHsgcmV0dXJuIGJ5VGFnKG4sIGMpOyB9OyB9LFxuICAgICcuJzogZnVuY3Rpb24oYywgbikgeyBSRVguSGFzRXNjYXBlcy50ZXN0KG4pICYmIChuID0gdW5lc2NhcGVJZGVudGlmaWVyKG4pKTsgcmV0dXJuIGZ1bmN0aW9uKGUsIGYpIHsgcmV0dXJuIGJ5Q2xhc3MobiwgYyk7IH07IH1cbiAgICB9LFxuXG4gIC8vIGZpbmQgZHVwbGljYXRlIGlkcyB1c2luZyBpdGVyYXRpdmUgd2Fsa1xuICBieUlkUmF3ID1cbiAgICBmdW5jdGlvbihpZCwgY29udGV4dCkge1xuICAgICAgdmFyIG5vZGUgPSBjb250ZXh0LCBub2RlcyA9IFsgXSwgbmV4dCA9IG5vZGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICB3aGlsZSAoKG5vZGUgPSBuZXh0KSkge1xuICAgICAgICBub2RlLmlkID09IGlkICYmIChub2Rlc1tub2Rlcy5sZW5ndGhdID0gbm9kZSk7XG4gICAgICAgIGlmICgobmV4dCA9IG5vZGUuZmlyc3RFbGVtZW50Q2hpbGQgfHwgbm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpKSBjb250aW51ZTtcbiAgICAgICAgd2hpbGUgKCFuZXh0ICYmIChub2RlID0gbm9kZS5wYXJlbnRFbGVtZW50KSAmJiBub2RlICE9PSBjb250ZXh0KSB7XG4gICAgICAgICAgbmV4dCA9IG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfSxcblxuICAvLyBjb250ZXh0IGFnbm9zdGljIGdldEVsZW1lbnRCeUlkXG4gIGJ5SWQgPVxuICAgIGZ1bmN0aW9uKGlkLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZSwgaSwgbCwgbm9kZXMsIGFwaSA9IG1ldGhvZFsnIyddO1xuXG4gICAgICAvLyBkdXBsaWNhdGVzIGlkIGFsbG93ZWRcbiAgICAgIGlmIChDb25maWcuSURTX0RVUEVTID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoYXBpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4gKGUgPSBjb250ZXh0W2FwaV0oaWQpKSA/IFsgZSBdIDogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCdhbGwnIGluIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoKGUgPSBjb250ZXh0LmFsbFtpZF0pKSB7XG4gICAgICAgICAgICBpZiAoZS5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZS5nZXRBdHRyaWJ1dGUoJ2lkJykgIT0gaWQgPyBbIF0gOiBbIGUgXTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlkID09ICdsZW5ndGgnKSByZXR1cm4gKGUgPSBjb250ZXh0W2FwaV0oaWQpKSA/IFsgZSBdIDogbm9uZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBlLmxlbmd0aCwgbm9kZXMgPSBbIF07IGwgPiBpOyArK2kpIHtcbiAgICAgICAgICAgICAgaWYgKGVbaV0uaWQgPT0gaWQpIG5vZGVzW25vZGVzLmxlbmd0aF0gPSBlW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzICYmIG5vZGVzLmxlbmd0aCA/IG5vZGVzIDogWyBub2RlcyBdO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnlJZFJhdyhpZCwgY29udGV4dCk7XG4gICAgfSxcblxuICAvLyBjb250ZXh0IGFnbm9zdGljIGdldEVsZW1lbnRzQnlUYWdOYW1lXG4gIGJ5VGFnID1cbiAgICBmdW5jdGlvbih0YWcsIGNvbnRleHQpIHtcbiAgICAgIHZhciBlLCBub2RlcywgYXBpID0gbWV0aG9kWycqJ107XG4gICAgICAvLyBET0NVTUVOVF9OT0RFICg5KSAmIEVMRU1FTlRfTk9ERSAoMSlcbiAgICAgIGlmIChhcGkgaW4gY29udGV4dCkge1xuICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChjb250ZXh0W2FwaV0odGFnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy8gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSAoMTEpXG4gICAgICAgIGlmICgoZSA9IGNvbnRleHQuZmlyc3RFbGVtZW50Q2hpbGQpKSB7XG4gICAgICAgICAgaWYgKCEoZS5uZXh0RWxlbWVudFNpYmxpbmcgfHwgdGFnID09ICcqJyB8fCBlLmxvY2FsTmFtZSA9PSB0YWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChlW2FwaV0odGFnKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVzID0gWyBdO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBpZiAodGFnID09ICcqJyB8fCBlLmxvY2FsTmFtZSA9PSB0YWcpIG5vZGVzW25vZGVzLmxlbmd0aF0gPSBlO1xuICAgICAgICAgICAgICBjb25jYXRMaXN0KG5vZGVzLCBlW2FwaV0odGFnKSk7XG4gICAgICAgICAgICB9IHdoaWxlICgoZSA9IGUubmV4dEVsZW1lbnRTaWJsaW5nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Ugbm9kZXMgPSBub25lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH0sXG5cbiAgLy8gY29udGV4dCBhZ25vc3RpYyBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lXG4gIGJ5Q2xhc3MgPVxuICAgIGZ1bmN0aW9uKGNscywgY29udGV4dCkge1xuICAgICAgdmFyIGUsIG5vZGVzLCBhcGkgPSBtZXRob2RbJy4nXSwgcmVDbHM7XG4gICAgICAvLyBET0NVTUVOVF9OT0RFICg5KSAmIEVMRU1FTlRfTk9ERSAoMSlcbiAgICAgIGlmIChhcGkgaW4gY29udGV4dCkge1xuICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChjb250ZXh0W2FwaV0oY2xzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBET0NVTUVOVF9GUkFHTUVOVF9OT0RFICgxMSlcbiAgICAgICAgaWYgKChlID0gY29udGV4dC5maXJzdEVsZW1lbnRDaGlsZCkpIHtcbiAgICAgICAgICByZUNscyA9IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNscyArICcoXFxcXHN8JCknLCBRVUlSS1NfTU9ERSA/ICdpJyA6ICcnKTtcbiAgICAgICAgICBpZiAoIShlLm5leHRFbGVtZW50U2libGluZyB8fCByZUNscy50ZXN0KGUuY2xhc3NOYW1lKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzbGljZS5jYWxsKGVbYXBpXShjbHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZXMgPSBbIF07XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGlmIChyZUNscy50ZXN0KGUuY2xhc3NOYW1lKSkgbm9kZXNbbm9kZXMubGVuZ3RoXSA9IGU7XG4gICAgICAgICAgICAgIGNvbmNhdExpc3Qobm9kZXMsIGVbYXBpXShjbHMpKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKChlID0gZS5uZXh0RWxlbWVudFNpYmxpbmcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBub2RlcyA9IG5vbmU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfSxcblxuICAvLyBuYW1lc3BhY2UgYXdhcmUgaGFzQXR0cmlidXRlXG4gIC8vIGhlbHBlciBmb3IgWE1ML1hIVE1MIGRvY3VtZW50c1xuICBoYXNBdHRyaWJ1dGVOUyA9XG4gICAgZnVuY3Rpb24oZSwgbmFtZSkge1xuICAgICAgdmFyIGksIGwsIGF0dHIgPSBlLmdldEF0dHJpYnV0ZU5hbWVzKCk7XG4gICAgICBuYW1lID0gUmVnRXhwKCc6PycgKyBuYW1lICsgJyQnLCBIVE1MX0RPQ1VNRU5UID8gJ2knIDogJycpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGF0dHIubGVuZ3RoOyBsID4gaTsgKytpKSB7XG4gICAgICAgIGlmIChuYW1lLnRlc3QoYXR0cltpXSkpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgLy8gZmFzdCByZXNvbHZlciBmb3IgdGhlIDpudGgtY2hpbGQoKSBhbmQgOm50aC1sYXN0LWNoaWxkKCkgcHNldWRvLWNsYXNzZXNcbiAgbnRoRWxlbWVudCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgaWR4ID0gMCwgbGVuID0gMCwgc2V0ID0gMCwgcGFyZW50ID0gdW5kZWZpbmVkLCBwYXJlbnRzID0gQXJyYXkoKSwgbm9kZXMgPSBBcnJheSgpO1xuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBkaXIpIHtcbiAgICAgIC8vIGVuc3VyZSBjYWNoZXMgYXJlIGVtcHRpZWQgYWZ0ZXIgZWFjaCBydW4sIGludm9raW5nIHdpdGggZGlyID0gMlxuICAgICAgaWYgKGRpciA9PSAyKSB7XG4gICAgICAgIGlkeCA9IDA7IGxlbiA9IDA7IHNldCA9IDA7IG5vZGVzLmxlbmd0aCA9IDA7XG4gICAgICAgIHBhcmVudHMubGVuZ3RoID0gMDsgcGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgZSwgaSwgaiwgaywgbDtcbiAgICAgIGlmIChwYXJlbnQgPT09IGVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBpID0gc2V0OyBqID0gaWR4OyBsID0gbGVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbCA9IHBhcmVudHMubGVuZ3RoO1xuICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGZvciAoaSA9IC0xLCBqID0gMCwgayA9IGwgLSAxOyBsID4gajsgKytqLCAtLWspIHtcbiAgICAgICAgICBpZiAocGFyZW50c1tqXSA9PT0gcGFyZW50KSB7IGkgPSBqOyBicmVhazsgfVxuICAgICAgICAgIGlmIChwYXJlbnRzW2tdID09PSBwYXJlbnQpIHsgaSA9IGs7IGJyZWFrOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgcGFyZW50c1tpID0gbF0gPSBwYXJlbnQ7XG4gICAgICAgICAgbCA9IDA7IG5vZGVzW2ldID0gQXJyYXkoKTtcbiAgICAgICAgICBlID0gcGFyZW50ICYmIHBhcmVudC5maXJzdEVsZW1lbnRDaGlsZCB8fCBlbGVtZW50O1xuICAgICAgICAgIHdoaWxlIChlKSB7IG5vZGVzW2ldW2xdID0gZTsgaWYgKGUgPT09IGVsZW1lbnQpIGogPSBsOyBlID0gZS5uZXh0RWxlbWVudFNpYmxpbmc7ICsrbDsgfVxuICAgICAgICAgIHNldCA9IGk7IGlkeCA9IDA7IGxlbiA9IGw7XG4gICAgICAgICAgaWYgKGwgPCAyKSByZXR1cm4gbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsID0gbm9kZXNbaV0ubGVuZ3RoO1xuICAgICAgICAgIHNldCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50ICE9PSBub2Rlc1tpXVtqXSAmJiBlbGVtZW50ICE9PSBub2Rlc1tpXVtqID0gMF0pIHtcbiAgICAgICAgZm9yIChqID0gMCwgZSA9IG5vZGVzW2ldLCBrID0gbCAtIDE7IGwgPiBqOyArK2osIC0taykge1xuICAgICAgICAgIGlmIChlW2pdID09PSBlbGVtZW50KSB7IGJyZWFrOyB9XG4gICAgICAgICAgaWYgKGVba10gPT09IGVsZW1lbnQpIHsgaiA9IGs7IGJyZWFrOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlkeCA9IGogKyAxOyBsZW4gPSBsO1xuICAgICAgcmV0dXJuIGRpciA/IGwgLSBqIDogaWR4O1xuICAgIH07XG4gIH0pKCksXG5cbiAgLy8gZmFzdCByZXNvbHZlciBmb3IgdGhlIDpudGgtb2YtdHlwZSgpIGFuZCA6bnRoLWxhc3Qtb2YtdHlwZSgpIHBzZXVkby1jbGFzc2VzXG4gIG50aE9mVHlwZSA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgaWR4ID0gMCwgbGVuID0gMCwgc2V0ID0gMCwgcGFyZW50ID0gdW5kZWZpbmVkLCBwYXJlbnRzID0gQXJyYXkoKSwgbm9kZXMgPSBBcnJheSgpO1xuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBkaXIpIHtcbiAgICAgIC8vIGVuc3VyZSBjYWNoZXMgYXJlIGVtcHRpZWQgYWZ0ZXIgZWFjaCBydW4sIGludm9raW5nIHdpdGggZGlyID0gMlxuICAgICAgaWYgKGRpciA9PSAyKSB7XG4gICAgICAgIGlkeCA9IDA7IGxlbiA9IDA7IHNldCA9IDA7IG5vZGVzLmxlbmd0aCA9IDA7XG4gICAgICAgIHBhcmVudHMubGVuZ3RoID0gMDsgcGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgZSwgaSwgaiwgaywgbCwgbmFtZSA9IGVsZW1lbnQubG9jYWxOYW1lO1xuICAgICAgaWYgKG5vZGVzW3NldF0gJiYgbm9kZXNbc2V0XVtuYW1lXSAmJiBwYXJlbnQgPT09IGVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICBpID0gc2V0OyBqID0gaWR4OyBsID0gbGVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbCA9IHBhcmVudHMubGVuZ3RoO1xuICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGZvciAoaSA9IC0xLCBqID0gMCwgayA9IGwgLSAxOyBsID4gajsgKytqLCAtLWspIHtcbiAgICAgICAgICBpZiAocGFyZW50c1tqXSA9PT0gcGFyZW50KSB7IGkgPSBqOyBicmVhazsgfVxuICAgICAgICAgIGlmIChwYXJlbnRzW2tdID09PSBwYXJlbnQpIHsgaSA9IGs7IGJyZWFrOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCAwIHx8ICFub2Rlc1tpXVtuYW1lXSkge1xuICAgICAgICAgIHBhcmVudHNbaSA9IGxdID0gcGFyZW50O1xuICAgICAgICAgIG5vZGVzW2ldIHx8IChub2Rlc1tpXSA9IE9iamVjdCgpKTtcbiAgICAgICAgICBsID0gMDsgbm9kZXNbaV1bbmFtZV0gPSBBcnJheSgpO1xuICAgICAgICAgIGUgPSBwYXJlbnQgJiYgcGFyZW50LmZpcnN0RWxlbWVudENoaWxkIHx8IGVsZW1lbnQ7XG4gICAgICAgICAgd2hpbGUgKGUpIHsgaWYgKGUgPT09IGVsZW1lbnQpIGogPSBsOyBpZiAoZS5sb2NhbE5hbWUgPT0gbmFtZSkgeyBub2Rlc1tpXVtuYW1lXVtsXSA9IGU7ICsrbDsgfSBlID0gZS5uZXh0RWxlbWVudFNpYmxpbmc7IH1cbiAgICAgICAgICBzZXQgPSBpOyBpZHggPSBqOyBsZW4gPSBsO1xuICAgICAgICAgIGlmIChsIDwgMikgcmV0dXJuIGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbCA9IG5vZGVzW2ldW25hbWVdLmxlbmd0aDtcbiAgICAgICAgICBzZXQgPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudCAhPT0gbm9kZXNbaV1bbmFtZV1bal0gJiYgZWxlbWVudCAhPT0gbm9kZXNbaV1bbmFtZV1baiA9IDBdKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGUgPSBub2Rlc1tpXVtuYW1lXSwgayA9IGwgLSAxOyBsID4gajsgKytqLCAtLWspIHtcbiAgICAgICAgICBpZiAoZVtqXSA9PT0gZWxlbWVudCkgeyBicmVhazsgfVxuICAgICAgICAgIGlmIChlW2tdID09PSBlbGVtZW50KSB7IGogPSBrOyBicmVhazsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZHggPSBqICsgMTsgbGVuID0gbDtcbiAgICAgIHJldHVybiBkaXIgPyBsIC0gaiA6IGlkeDtcbiAgICB9O1xuICB9KSgpLFxuXG4gIC8vIGNoZWNrIGlmIHRoZSBkb2N1bWVudCB0eXBlIGlzIEhUTUxcbiAgaXNIVE1MID1cbiAgICBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGU7XG4gICAgICByZXR1cm4gZG9jLm5vZGVUeXBlID09IDkgJiZcbiAgICAgICAgLy8gY29udGVudFR5cGUgbm90IGluIElFIDw9IDExXG4gICAgICAgICdjb250ZW50VHlwZScgaW4gZG9jID9cbiAgICAgICAgICBkb2MuY29udGVudFR5cGUuaW5kZXhPZignL2h0bWwnKSA+IDAgOlxuICAgICAgICAgIGRvYy5jcmVhdGVFbGVtZW50KCdEaVYnKS5sb2NhbE5hbWUgPT0gJ2Rpdic7XG4gICAgfSxcblxuICAvLyBjb25maWd1cmUgdGhlIGVuZ2luZSB0byB1c2Ugc3BlY2lhbCBoYW5kbGluZ1xuICBjb25maWd1cmUgPVxuICAgIGZ1bmN0aW9uKG9wdGlvbiwgY2xlYXIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSB7IHJldHVybiAhIUNvbmZpZ1tvcHRpb25dOyB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiAhPSAnb2JqZWN0JykgeyByZXR1cm4gQ29uZmlnOyB9XG4gICAgICBmb3IgKHZhciBpIGluIG9wdGlvbikge1xuICAgICAgICBDb25maWdbaV0gPSAhIW9wdGlvbltpXTtcbiAgICAgIH1cbiAgICAgIC8vIGNsZWFyIGxhbWJkYSBjYWNoZVxuICAgICAgaWYgKGNsZWFyKSB7XG4gICAgICAgIG1hdGNoUmVzb2x2ZXJzID0geyB9O1xuICAgICAgICBzZWxlY3RSZXNvbHZlcnMgPSB7IH07XG4gICAgICB9XG4gICAgICBzZXRJZGVudGlmaWVyU3ludGF4KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gIC8vIGNlbnRyYWxpemVkIGVycm9yIGFuZCBleGNlcHRpb25zIGhhbmRsaW5nXG4gIGVtaXQgPVxuICAgIGZ1bmN0aW9uKG1lc3NhZ2UsIHByb3RvKSB7XG4gICAgICB2YXIgZXJyO1xuICAgICAgaWYgKENvbmZpZy5WRVJCT1NJVFkpIHtcbiAgICAgICAgaWYgKHByb3RvKSB7XG4gICAgICAgICAgZXJyID0gbmV3IHByb3RvKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVyciA9IG5ldyBnbG9iYWwuRE9NRXhjZXB0aW9uKG1lc3NhZ2UsICdTeW50YXhFcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICAgIGlmIChDb25maWcuTE9HRVJST1JTICYmIGNvbnNvbGUgJiYgY29uc29sZS5sb2cpIHtcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAvLyBleGVjdXRlIHRoZSBlbmdpbmUgaW5pdGlhbGl6YXRpb24gY29kZVxuICBpbml0aWFsaXplID1cbiAgICBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHNldElkZW50aWZpZXJTeW50YXgoKTtcbiAgICAgIGxhc3RDb250ZXh0ID0gc3dpdGNoQ29udGV4dChkb2MsIHRydWUpO1xuICAgIH0sXG5cbiAgLy8gYnVpbGQgdmFsaWRhdGlvbiByZWdleHBzIHVzZWQgYnkgdGhlIGVuZ2luZVxuICBzZXRJZGVudGlmaWVyU3ludGF4ID1cbiAgICBmdW5jdGlvbigpIHtcblxuICAgICAgLy9cbiAgICAgIC8vIE5PVEU6IFNQRUNJQUwgQ0FTRVMgSU4gQ1NTIFNZTlRBWCBQQVJTSU5HIFJVTEVTXG4gICAgICAvL1xuICAgICAgLy8gVGhlIDxFT0YtdG9rZW4+IGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc3ludGF4LyN0eXBlZGVmLWVvZi10b2tlblxuICAgICAgLy8gYWxsb3cgbWFuZ2xlZHx1bmNsb3NlZCBzZWxlY3RvciBzeW50YXggYXQgdGhlIGVuZCBvZiBzZWxlY3RvcnMgc3RyaW5nc1xuICAgICAgLy9cbiAgICAgIC8vIExpdGVyYWwgZXF1aXZhbGVudCBoZXggcmVwcmVzZW50YXRpb25zIG9mIHRoZSBjaGFyYWN0ZXJzOiBcIiAnIGAgXSApXG4gICAgICAvL1xuICAgICAgLy8gICAgIFxcXFx4MjIgPSBcIiAtIGRvdWJsZSBxdW90ZXMgICAgXFxcXHg1YiA9IFsgLSBvcGVuIHNxdWFyZSBicmFja2V0XG4gICAgICAvLyAgICAgXFxcXHgyNyA9ICcgLSBzaW5nbGUgcXVvdGUgICAgIFxcXFx4NWQgPSBdIC0gY2xvc2VkIHNxdWFyZSBicmFja2V0XG4gICAgICAvLyAgICAgXFxcXHg2MCA9IGAgLSBiYWNrIHRpY2sgICAgICAgIFxcXFx4MjggPSAoIC0gb3BlbiByb3VuZCBwYXJlbnNcbiAgICAgIC8vICAgICBcXFxceDVjID0gXFwgLSBiYWNrIHNsYXNoICAgICAgIFxcXFx4MjkgPSApIC0gY2xvc2VkIHJvdW5kIHBhcmVuc1xuICAgICAgLy9cbiAgICAgIC8vIHVzaW5nIGhleCBmb3JtYXQgcHJldmVudHMgZmFsc2UgbWF0Y2hlcyBvZiBvcGVuZWQvY2xvc2VkIGluc3RhbmNlc1xuICAgICAgLy8gcGFpcnMsIGNvbG9yaW5nIGJyZWFrYWdlIGFuZCBvdGhlciBlZGl0b3JzIGhpZ2hsaWdodG5pbmcgcHJvYmxlbXMuXG4gICAgICAvL1xuXG4gICAgICB2YXIgaWRlbnRpZmllciA9XG4gICAgICAgIC8vIGRvZXNuJ3Qgc3RhcnQgd2l0aCBhIGRpZ2l0XG4gICAgICAgIChDb25maWcuTk9ORElHSVRTID8gJyg/PVteMC05XSknIDogJycpICtcbiAgICAgICAgLy8gY2FuIHN0YXJ0IHdpdGggZG91YmxlIGRhc2hcbiAgICAgICAgJyg/Oi17Mn0nICtcbiAgICAgICAgICAvLyBtYXkgaW5jbHVkZSBhc2NpaSBjaGFyc1xuICAgICAgICAgICd8W2EtekEtWjAtOS1fXScgK1xuICAgICAgICAgIC8vIG5vbi1hc2NpaSBjaGFyc1xuICAgICAgICAgICd8W15cXFxceDAwLVxcXFx4OWZdJyArXG4gICAgICAgICAgLy8gZXNjYXBlZCBjaGFyc1xuICAgICAgICAgICd8XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZjAtOWEtZkEtRl0nICtcbiAgICAgICAgICAvLyB1bmljb2RlIGNoYXJzXG4gICAgICAgICAgJ3xcXFxcXFxcXFswLTlhLWZBLUZdezEsNn0oPzpcXFxcclxcXFxufFxcXFxzKT8nICtcbiAgICAgICAgICAvLyBhbnkgZXNjYXBlZCBjaGFyc1xuICAgICAgICAgICd8XFxcXFxcXFwuJyArXG4gICAgICAgICcpKycsXG5cbiAgICAgIHBzZXVkb25hbWVzID0gJ1stXFxcXHddKycsXG4gICAgICBwc2V1ZG9wYXJtcyA9ICcoPzpbLStdP1xcXFxkKikoPzpuXFxcXHM/Wy0rXT9cXFxccz9cXFxcZCopJyxcbiAgICAgIGRvdWJsZXF1b3RlID0gJ1wiW15cIlxcXFxcXFxcXSooPzpcXFxcXFxcXC5bXlwiXFxcXFxcXFxdKikqKD86XCJ8JCknLFxuICAgICAgc2luZ2xlcXVvdGUgPSBcIidbXidcXFxcXFxcXF0qKD86XFxcXFxcXFwuW14nXFxcXFxcXFxdKikqKD86J3wkKVwiLFxuXG4gICAgICBhdHRycGFyc2VyID0gaWRlbnRpZmllciArICd8JyArIGRvdWJsZXF1b3RlICsgJ3wnICsgc2luZ2xlcXVvdGUsXG5cbiAgICAgIGF0dHJ2YWx1ZXMgPSAnKFtcXFxceDIyXFxcXHgyN10/KSgoPyFcXFxcMykqfCg/OlxcXFxcXFxcPy4pKj8pKD86XFxcXDN8JCknLFxuXG4gICAgICBhdHRyaWJ1dGVzID1cbiAgICAgICAgJ1xcXFxbJyArXG4gICAgICAgICAgLy8gYXR0cmlidXRlIHByZXNlbmNlXG4gICAgICAgICAgJyg/OlxcXFwqXFxcXHwpPycgK1xuICAgICAgICAgIFdTUCArICc/JyArXG4gICAgICAgICAgJygnICsgaWRlbnRpZmllciArICcoPzo6JyArIGlkZW50aWZpZXIgKyAnKT8pJyArXG4gICAgICAgICAgV1NQICsgJz8nICtcbiAgICAgICAgICAnKD86JyArXG4gICAgICAgICAgICAnKCcgKyBDRkcub3BlcmF0b3JzICsgJyknICsgV1NQICsgJz8nICtcbiAgICAgICAgICAgICcoPzonICsgYXR0cnBhcnNlciArICcpJyArXG4gICAgICAgICAgJyk/JyArXG4gICAgICAgICAgLy8gYXR0cmlidXRlIGNhc2Ugc2Vuc2l0aXZpdHlcbiAgICAgICAgICAnKD86JyArIFdTUCArICc/XFxcXGIoaSkpPycgKyBXU1AgKyAnPycgK1xuICAgICAgICAnKD86XFxcXF18JCknLFxuXG4gICAgICBhdHRybWF0Y2hlciA9IGF0dHJpYnV0ZXMucmVwbGFjZShhdHRycGFyc2VyLCBhdHRydmFsdWVzKSxcblxuICAgICAgcHNldWRvY2xhc3MgPVxuICAgICAgICAnKD86XFxcXHgyOCcgKyBXU1AgKyAnKicgK1xuICAgICAgICAgICcoPzonICsgcHNldWRvcGFybXMgKyAnPyk/fCcgK1xuICAgICAgICAgIC8vIHVuaXZlcnNhbCAqICZcbiAgICAgICAgICAvLyBuYW1lc3BhY2UgKnwqXG4gICAgICAgICAgJyg/OlxcXFwqfFxcXFx8KXwnICtcbiAgICAgICAgICAnKD86JyArXG4gICAgICAgICAgICAnKD86OicgKyBwc2V1ZG9uYW1lcyArXG4gICAgICAgICAgICAnKD86XFxcXHgyOCcgKyBwc2V1ZG9wYXJtcyArICc/KD86XFxcXHgyOXwkKSk/fCcgK1xuICAgICAgICAgICcpfCcgK1xuICAgICAgICAgICcoPzpbLiNdPycgKyBpZGVudGlmaWVyICsgJyl8JyArXG4gICAgICAgICAgJyg/OicgKyBhdHRyaWJ1dGVzICsgJyknICtcbiAgICAgICAgICAnKSt8JyArXG4gICAgICAgICAgJyg/OicgKyBXU1AgKyAnPywnICsgV1NQICsgJz8pfCcgK1xuICAgICAgICAgICcoPzonICsgV1NQICsgJz8pfCcgK1xuICAgICAgICAgICcoPzpcXFxceDI5fCQpKSonLFxuXG4gICAgICBzdGFuZGFyZFZhbGlkYXRvciA9XG4gICAgICAgICcoPz0nICsgV1NQICsgJz9bXj4rfigpe308Pl0pJyArXG4gICAgICAgICcoPzonICtcbiAgICAgICAgICAvLyB1bml2ZXJzYWwgKiAmXG4gICAgICAgICAgLy8gbmFtZXNwYWNlICp8KlxuICAgICAgICAgICcoPzpcXFxcKnxcXFxcfCl8JyArXG4gICAgICAgICAgJyg/OlsuI10/JyArIGlkZW50aWZpZXIgKyAnKSt8JyArXG4gICAgICAgICAgJyg/OicgKyBhdHRyaWJ1dGVzICsgJykrfCcgK1xuICAgICAgICAgICcoPzo6Oj8nICsgcHNldWRvbmFtZXMgKyBwc2V1ZG9jbGFzcyArICcpfCcgK1xuICAgICAgICAgICcoPzonICsgV1NQICsgJz8nICsgQ0ZHLmNvbWJpbmF0b3JzICsgV1NQICsgJz8pfCcgK1xuICAgICAgICAgICcoPzonICsgV1NQICsgJz8sJyArIFdTUCArICc/KXwnICtcbiAgICAgICAgICAnKD86JyArIFdTUCArICc/KScgK1xuICAgICAgICAnKSsnO1xuXG4gICAgICAvLyB0aGUgZm9sbG93aW5nIGdsb2JhbCBSRSBpcyB1c2VkIHRvIHJldHVybiB0aGVcbiAgICAgIC8vIGRlZXBlc3QgbG9jYWxOYW1lIGluIHNlbGVjdG9yIHN0cmluZ3MgYW5kIHRoZW5cbiAgICAgIC8vIHVzZSBpdCB0byByZXRyaWV2ZSBhbGwgcG9zc2libGUgbWF0Y2hpbmcgbm9kZXNcbiAgICAgIC8vIHRoYXQgd2lsbCBiZSBmaWx0ZXJlZCBieSBjb21waWxlZCByZXNvbHZlcnNcbiAgICAgIHJlT3B0aW1pemVyID0gUmVnRXhwKFxuICAgICAgICAnKD86KFsuOiMqXT8pJyArXG4gICAgICAgICcoJyArIGlkZW50aWZpZXIgKyAnKScgK1xuICAgICAgICAnKD86JyArXG4gICAgICAgICAgJzpbLVxcXFx3XSt8JyArXG4gICAgICAgICAgJ1xcXFxbW15cXFxcXV0rKD86XFxcXF18JCl8JyArXG4gICAgICAgICAgJ1xcXFx4MjhbXlxcXFx4MjldKyg/OlxcXFx4Mjl8JCknICtcbiAgICAgICAgJykqKSQnKTtcblxuICAgICAgLy8gZ2xvYmFsXG4gICAgICByZVZhbGlkYXRvciA9IFJlZ0V4cChzdGFuZGFyZFZhbGlkYXRvciwgJ2cnKTtcblxuICAgICAgUGF0dGVybnMuaWQgPSBSZWdFeHAoJ14jKCcgKyBpZGVudGlmaWVyICsgJykoLiopJyk7XG4gICAgICBQYXR0ZXJucy50YWdOYW1lID0gUmVnRXhwKCdeKCcgKyBpZGVudGlmaWVyICsgJykoLiopJyk7XG4gICAgICBQYXR0ZXJucy5jbGFzc05hbWUgPSBSZWdFeHAoJ15cXFxcLignICsgaWRlbnRpZmllciArICcpKC4qKScpO1xuICAgICAgUGF0dGVybnMuYXR0cmlidXRlID0gUmVnRXhwKCdeKD86JyArIGF0dHJtYXRjaGVyICsgJykoLiopJyk7XG4gICAgfSxcblxuICBGX0lOSVQgPSAnXCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uIFJlc29sdmVyKGMsZix4LHIpJyxcblxuICBTX0hFQUQgPSAndmFyIGUsbixvLGo9ci5sZW5ndGgtMSxrPS0xJyxcbiAgTV9IRUFEID0gJ3ZhciBlLG4sbycsXG5cbiAgU19MT09QID0gJ21haW46d2hpbGUoKGU9Y1srK2tdKSknLFxuICBOX0xPT1AgPSAnbWFpbjp3aGlsZSgoZT1jLml0ZW0oKytrKSkpJyxcbiAgTV9MT09QID0gJ2U9YzsnLFxuXG4gIFNfQk9EWSA9ICdyWysral09Y1trXTsnLFxuICBOX0JPRFkgPSAnclsrK2pdPWMuaXRlbShrKTsnLFxuICBNX0JPRFkgPSAnJyxcblxuICBTX1RBSUwgPSAnY29udGludWUgbWFpbjsnLFxuICBNX1RBSUwgPSAncj10cnVlOycsXG5cbiAgU19URVNUID0gJ2lmKGYoY1trXSkpe2JyZWFrIG1haW47fScsXG4gIE5fVEVTVCA9ICdpZihmKGMuaXRlbShrKSkpe2JyZWFrIG1haW47fScsXG4gIE1fVEVTVCA9ICdmKGMpOycsXG5cbiAgU19WQVJTID0gWyBdLFxuICBNX1ZBUlMgPSBbIF0sXG5cbiAgLy8gY29tcGlsZSBncm91cHMgb3Igc2luZ2xlIHNlbGVjdG9yIHN0cmluZ3MgaW50b1xuICAvLyBleGVjdXRhYmxlIGZ1bmN0aW9ucyBmb3IgbWF0Y2hpbmcgb3Igc2VsZWN0aW5nXG4gIGNvbXBpbGUgPVxuICAgIGZ1bmN0aW9uKHNlbGVjdG9yLCBtb2RlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGZhY3RvcnksIHRva2VuLCBoZWFkID0gJycsIGxvb3AgPSAnJywgbWFjcm8gPSAnJywgc291cmNlID0gJycsIHZhcnMgPSAnJztcblxuICAgICAgLy8gJ21vZGUnIGNhbiBiZSBib29sZWFuIG9yIG51bGxcbiAgICAgIC8vIHRydWUgPSBzZWxlY3QgLyBmYWxzZSA9IG1hdGNoXG4gICAgICAvLyBudWxsIHRvIHVzZSBjb2xsZWN0aW9uLml0ZW0oKVxuICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICBpZiAoc2VsZWN0TGFtYmRhc1tzZWxlY3Rvcl0pIHsgcmV0dXJuIHNlbGVjdExhbWJkYXNbc2VsZWN0b3JdOyB9XG4gICAgICAgICAgbWFjcm8gPSBTX0JPRFkgKyAoY2FsbGJhY2sgPyBTX1RFU1QgOiAnJykgKyBTX1RBSUw7XG4gICAgICAgICAgaGVhZCA9IFNfSEVBRDtcbiAgICAgICAgICBsb29wID0gU19MT09QO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgIGlmIChtYXRjaExhbWJkYXNbc2VsZWN0b3JdKSB7IHJldHVybiBtYXRjaExhbWJkYXNbc2VsZWN0b3JdOyB9XG4gICAgICAgICAgbWFjcm8gPSBNX0JPRFkgKyAoY2FsbGJhY2sgPyBNX1RFU1QgOiAnJykgKyBNX1RBSUw7XG4gICAgICAgICAgaGVhZCA9IE1fSEVBRDtcbiAgICAgICAgICBsb29wID0gTV9MT09QO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgaWYgKHNlbGVjdExhbWJkYXNbc2VsZWN0b3JdKSB7IHJldHVybiBzZWxlY3RMYW1iZGFzW3NlbGVjdG9yXTsgfVxuICAgICAgICAgIG1hY3JvID0gTl9CT0RZICsgKGNhbGxiYWNrID8gTl9URVNUIDogJycpICsgU19UQUlMO1xuICAgICAgICAgIGhlYWQgPSBTX0hFQUQ7XG4gICAgICAgICAgbG9vcCA9IE5fTE9PUDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc291cmNlID0gY29tcGlsZVNlbGVjdG9yKHNlbGVjdG9yLCBtYWNybywgbW9kZSwgY2FsbGJhY2spO1xuXG4gICAgICBsb29wICs9IG1vZGUgfHwgbW9kZSA9PT0gbnVsbCA/ICd7JyArIHNvdXJjZSArICd9JyA6IHNvdXJjZTtcblxuICAgICAgaWYgKG1vZGUgfHwgbW9kZSA9PT0gbnVsbCAmJiBzZWxlY3Rvci5pbmNsdWRlcygnOm50aCcpKSB7XG4gICAgICAgIGxvb3AgKz0gcmVOdGhFbGVtLnRlc3Qoc2VsZWN0b3IpID8gJ3MubnRoRWxlbWVudChudWxsLCAyKTsnIDogJyc7XG4gICAgICAgIGxvb3AgKz0gcmVOdGhUeXBlLnRlc3Qoc2VsZWN0b3IpID8gJ3MubnRoT2ZUeXBlKG51bGwsIDIpOycgOiAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKFNfVkFSU1swXSB8fCBNX1ZBUlNbMF0pIHtcbiAgICAgICAgdmFycyA9ICcsJyArIChTX1ZBUlMuam9pbignLCcpIHx8IE1fVkFSUy5qb2luKCcsJykpO1xuICAgICAgICBTX1ZBUlMubGVuZ3RoID0gMDtcbiAgICAgICAgTV9WQVJTLmxlbmd0aCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZhY3RvcnkgPSBGdW5jdGlvbigncycsIEZfSU5JVCArICd7JyArIGhlYWQgKyB2YXJzICsgJzsnICsgbG9vcCArICdyZXR1cm4gcjt9JykoU25hcHNob3QpO1xuXG4gICAgICByZXR1cm4gbW9kZSB8fCBtb2RlID09PSBudWxsID8gKHNlbGVjdExhbWJkYXNbc2VsZWN0b3JdID0gZmFjdG9yeSkgOiAobWF0Y2hMYW1iZGFzW3NlbGVjdG9yXSA9IGZhY3RvcnkpO1xuICAgIH0sXG5cbiAgLy8gYnVpbGQgY29uZGl0aW9uYWwgY29kZSB0byBjaGVjayBjb21wb25lbnRzIG9mIHNlbGVjdG9yIHN0cmluZ3NcbiAgY29tcGlsZVNlbGVjdG9yID1cbiAgICBmdW5jdGlvbihleHByZXNzaW9uLCBzb3VyY2UsIG1vZGUsIGNhbGxiYWNrKSB7XG5cbiAgICAgIHZhciBhLCBiLCBuLCBmLCBrID0gMCwgbmFtZSwgTlMsIHJlZmVyZW5jZUVsZW1lbnQsXG4gICAgICBjb21wYXQsIGV4cHIsIG1hdGNoLCByZXN1bHQsIHN0YXR1cywgc3ltYm9sLCB0ZXN0LFxuICAgICAgdHlwZSwgc2VsZWN0b3IgPSBleHByZXNzaW9uLCBzZWxlY3Rvcl9zdHJpbmcsIHZhcnM7XG5cbiAgICAgIC8vIG9yaWdpbmFsICdzZWxlY3QnIG9yICdtYXRjaCcgc2VsZWN0b3Igc3RyaW5nIGJlZm9yZSBub3JtYWxpemF0aW9uXG4gICAgICBzZWxlY3Rvcl9zdHJpbmcgPSBtb2RlID8gbGFzdFNlbGVjdGVkIDogbGFzdE1hdGNoZWQ7XG5cbiAgICAgIC8vIGlzb2xhdGUgc2VsZWN0b3IgY29tYmluYXRvcnMvY29tcG9uZW50cyBhbmQgbm9ybWFsaXplIHdoaXRlc3BhY2VcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShTVEQuY29tYmluYXRvciwgJyQxJyk7Ly8ucmVwbGFjZShTVEQud2hpdGVzcGFjZSwgJyAnKTtcblxuICAgICAgLy8gamF2YXNjcmlwdCBuZWVkcyBhIGxhYmVsIHRvIGJyZWFrXG4gICAgICAvLyBvdXQgb2YgdGhlIHdoaWxlIGxvb3BzIHByb2Nlc3NpbmdcbiAgICAgIHNlbGVjdG9yX3JlY3Vyc2lvbl9sYWJlbDpcblxuICAgICAgd2hpbGUgKHNlbGVjdG9yKSB7XG5cbiAgICAgICAgKytrO1xuXG4gICAgICAgIC8vIGdldCBuYW1lc3BhY2UgcHJlZml4IGlmIHByZXNlbnQgb3IgZ2V0IGZpcnN0IGNoYXIgb2Ygc2VsZWN0b3JcbiAgICAgICAgc3ltYm9sID0gU1RELmFwaW1ldGhvZHMudGVzdChzZWxlY3RvcikgPyAnfCcgOiBzZWxlY3RvclswXTtcblxuICAgICAgICBzd2l0Y2ggKHN5bWJvbCkge1xuXG4gICAgICAgICAgLy8gdW5pdmVyc2FsIHJlc29sdmVyXG4gICAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICBtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLnVuaXZlcnNhbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIGlkIHJlc29sdmVyXG4gICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICBtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLmlkKTtcbiAgICAgICAgICAgIHNvdXJjZSA9ICdpZigoL14nICsgbWF0Y2hbMV0gKyAnJC8udGVzdChlLmdldEF0dHJpYnV0ZShcImlkXCIpKSkpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIGNsYXNzIG5hbWUgcmVzb2x2ZXJcbiAgICAgICAgICBjYXNlICcuJzpcbiAgICAgICAgICAgIG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMuY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIGNvbXBhdCA9IChRVUlSS1NfTU9ERSA/ICdpJyA6ICcnKSArICcudGVzdChlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpKSc7XG4gICAgICAgICAgICBzb3VyY2UgPSAnaWYoKC8oXnxcXFxccyknICsgbWF0Y2hbMV0gKyAnKFxcXFxzfCQpLycgKyBjb21wYXQgKyAnKSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgLy8gdGFnIG5hbWUgcmVzb2x2ZXJcbiAgICAgICAgICBjYXNlICgvW19hLXpdL2kudGVzdChzeW1ib2wpID8gc3ltYm9sIDogdW5kZWZpbmVkKTpcbiAgICAgICAgICAgIG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMudGFnTmFtZSk7XG4gICAgICAgICAgICBzb3VyY2UgPSAnaWYoKGUubG9jYWxOYW1lPT1cIicgKyBtYXRjaFsxXSArICdcIikpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIG5hbWVzcGFjZSByZXNvbHZlclxuICAgICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICAgICAgbWF0Y2ggPSBzZWxlY3Rvci5tYXRjaChQYXR0ZXJucy5uYW1lc3BhY2UpO1xuICAgICAgICAgICAgaWYgKG1hdGNoWzFdID09ICcqJykge1xuICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYodHJ1ZSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9ICdpZigoIWUubmFtZXNwYWNlVVJJKSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1hdGNoWzFdID09ICdzdHJpbmcnICYmIHJvb3QucHJlZml4ID09IG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9ICdpZigoZS5uYW1lc3BhY2VVUkk9PVwiJyArIE5BTUVTUEFDRSArICdcIikpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbWl0KCdcXCcnICsgc2VsZWN0b3Jfc3RyaW5nICsgJ1xcJycgKyBxc0ludmFsaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyBhdHRyaWJ1dGVzIHJlc29sdmVyXG4gICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICBtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLmF0dHJpYnV0ZSk7XG4gICAgICAgICAgICBOUyA9IG1hdGNoWzBdLm1hdGNoKFNURC5uYW1lc3BhY2VzKTtcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGV4cHIgPSBuYW1lLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICBleHByID0gZXhwci5sZW5ndGggPT0gMiA/IGV4cHJbMV0gOiBleHByWzBdO1xuICAgICAgICAgICAgaWYgKG1hdGNoWzJdICYmICEodGVzdCA9IE9wZXJhdG9yc1ttYXRjaFsyXV0pKSB7XG4gICAgICAgICAgICAgIGVtaXQoJ1xcJycgKyBzZWxlY3Rvcl9zdHJpbmcgKyAnXFwnJyArIHFzSW52YWxpZCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgdGVzdCA9IG1hdGNoWzJdID09ICd+PScgP1xuICAgICAgICAgICAgICAgIHsgcDE6ICdeXFxcXHMnLCBwMjogJyskJywgcDM6ICd0cnVlJyB9IDpcbiAgICAgICAgICAgICAgICAgIG1hdGNoWzJdIGluIEFUVFJfU1REX09QUyAmJiBtYXRjaFsyXSAhPSAnfj0nID9cbiAgICAgICAgICAgICAgICB7IHAxOiAnXicsICAgIHAyOiAnJCcsICBwMzogJ3RydWUnIH0gOiB0ZXN0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFsyXSA9PSAnfj0nICYmIG1hdGNoWzRdLmluY2x1ZGVzKCcgJykpIHtcbiAgICAgICAgICAgICAgLy8gd2hpdGVzcGFjZSBzZXBhcmF0ZWQgbGlzdCBidXQgdmFsdWUgY29udGFpbnMgc3BhY2VcbiAgICAgICAgICAgICAgc291cmNlID0gJ2lmKGZhbHNlKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgbWF0Y2hbNF0gPSBjb252ZXJ0RXNjYXBlcyhtYXRjaFs0XSkucmVwbGFjZShSRVguUmVnRXhwQ2hhciwgJ1xcXFwkJicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZSA9IG1hdGNoWzVdID09ICdpJyB8fCAoSFRNTF9ET0NVTUVOVCAmJiBIVE1MX1RBQkxFW2V4cHIudG9Mb3dlckNhc2UoKV0pID8gJ2knIDogJyc7XG4gICAgICAgICAgICBzb3VyY2UgPSAnaWYoKCcgK1xuICAgICAgICAgICAgICAoIW1hdGNoWzJdID8gKE5TID8gJ3MuaGFzQXR0cmlidXRlTlMoZSxcIicgKyBuYW1lICsgJ1wiKScgOiAnZS5oYXNBdHRyaWJ1dGUmJmUuaGFzQXR0cmlidXRlKFwiJyArIG5hbWUgKyAnXCIpJykgOlxuICAgICAgICAgICAgICAhbWF0Y2hbNF0gJiYgQVRUUl9TVERfT1BTW21hdGNoWzJdXSAmJiBtYXRjaFsyXSAhPSAnfj0nID8gJ2UuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcIicgKyBuYW1lICsgJ1wiKT09XCJcIicgOlxuICAgICAgICAgICAgICAnKC8nICsgdGVzdC5wMSArIG1hdGNoWzRdICsgdGVzdC5wMiArICcvJyArIHR5cGUgKyAnKS50ZXN0KGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcIicgKyBuYW1lICsgJ1wiKSk9PScgKyB0ZXN0LnAzKSArXG4gICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyAqKiogR2VuZXJhbCBzaWJsaW5nIGNvbWJpbmF0b3JcbiAgICAgICAgICAvLyBFIH4gRiAoRiByZWxhdGl2ZSBzaWJsaW5nIG9mIEUpXG4gICAgICAgICAgY2FzZSAnfic6XG4gICAgICAgICAgICBtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLnJlbGF0aXZlKTtcbiAgICAgICAgICAgIHNvdXJjZSA9ICd2YXIgTicgKyBrICsgJz1lO3doaWxlKGUmJihlPWUucHJldmlvdXNFbGVtZW50U2libGluZykpeycgKyBzb3VyY2UgKyAnfWU9TicgKyBrICsgJzsnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gKioqIEFkamFjZW50IHNpYmxpbmcgY29tYmluYXRvclxuICAgICAgICAgIC8vIEUgKyBGIChGIGFkaWFjZW50IHNpYmxpbmcgb2YgRSlcbiAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMuYWRqYWNlbnQpO1xuICAgICAgICAgICAgc291cmNlID0gJ3ZhciBOJyArIGsgKyAnPWU7aWYoZSYmKGU9ZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSl7JyArIHNvdXJjZSArICd9ZT1OJyArIGsgKyAnOyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyAqKiogRGVzY2VuZGFudCBjb21iaW5hdG9yXG4gICAgICAgICAgLy8gRSBGIChFIGFuY2VzdG9yIG9mIEYpXG4gICAgICAgICAgY2FzZSAnXFx4MDknOlxuICAgICAgICAgIGNhc2UgJ1xceDIwJzpcbiAgICAgICAgICAgIG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMuYW5jZXN0b3IpO1xuICAgICAgICAgICAgc291cmNlID0gJ3ZhciBOJyArIGsgKyAnPWU7d2hpbGUoZSYmKGU9ZS5wYXJlbnRFbGVtZW50KSl7JyArIHNvdXJjZSArICd9ZT1OJyArIGsgKyAnOyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyAqKiogQ2hpbGQgY29tYmluYXRvclxuICAgICAgICAgIC8vIEUgPiBGIChGIGNoaWxkcmVuIG9mIEUpXG4gICAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICBtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIHNvdXJjZSA9ICd2YXIgTicgKyBrICsgJz1lO2lmKGUmJihlPWUucGFyZW50RWxlbWVudCkpeycgKyBzb3VyY2UgKyAnfWU9TicgKyBrICsgJzsnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvLyAqKiogdXNlciBzdXBwbGllZCBjb21iaW5hdG9ycyBleHRlbnNpb25zXG4gICAgICAgICAgY2FzZSAoc3ltYm9sIGluIENvbWJpbmF0b3JzID8gc3ltYm9sIDogdW5kZWZpbmVkKTpcbiAgICAgICAgICAgIC8vIGZvciBvdGhlciByZWdpc3RlcmVkIGNvbWJpbmF0b3JzIGV4dGVuc2lvbnNcbiAgICAgICAgICAgIG1hdGNoW21hdGNoLmxlbmd0aCAtIDFdID0gJyonO1xuICAgICAgICAgICAgc291cmNlID0gQ29tYmluYXRvcnNbc3ltYm9sXShtYXRjaCkgKyBzb3VyY2U7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vICoqKiB0cmVlLXN0cnVjdHVyYWwgcHNldWRvLWNsYXNzZXNcbiAgICAgICAgICAvLyA6cm9vdCwgOmVtcHR5LCA6Zmlyc3QtY2hpbGQsIDpsYXN0LWNoaWxkLCA6b25seS1jaGlsZCwgOmZpcnN0LW9mLXR5cGUsIDpsYXN0LW9mLXR5cGUsIDpvbmx5LW9mLXR5cGVcbiAgICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgIGlmICgobWF0Y2ggPSBzZWxlY3Rvci5tYXRjaChQYXR0ZXJucy5zdHJ1Y3R1cmFsKSkpIHtcbiAgICAgICAgICAgICAgbWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncm9vdCc6XG4gICAgICAgICAgICAgICAgICAvLyB0aGVyZSBjYW4gb25seSBiZSBvbmUgOnJvb3QgZWxlbWVudCwgc28gZXhpdCB0aGUgbG9vcCBvbmNlIGZvdW5kXG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoKGU9PT1zLnJvb3QpKXsnICsgc291cmNlICsgKG1vZGUgPyAnYnJlYWsgbWFpbjsnIDogJycpICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZW1wdHknOlxuICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hlcyBlbGVtZW50cyB0aGF0IGRvbid0IGNvbnRhaW4gZWxlbWVudHMgb3IgdGV4dCBub2Rlc1xuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ249ZS5maXJzdENoaWxkO3doaWxlKG4mJiEoLzF8My8pLnRlc3Qobi5ub2RlVHlwZSkpe249bi5uZXh0U2libGluZ31pZighbil7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgLy8gKioqIGNoaWxkLWluZGV4ZWQgcHNldWRvLWNsYXNzZXNcbiAgICAgICAgICAgICAgICAvLyA6Zmlyc3QtY2hpbGQsIDpsYXN0LWNoaWxkLCA6b25seS1jaGlsZFxuICAgICAgICAgICAgICAgIGNhc2UgJ29ubHktY2hpbGQnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ2lmKCghZS5uZXh0RWxlbWVudFNpYmxpbmcmJiFlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGFzdC1jaGlsZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoKCFlLm5leHRFbGVtZW50U2libGluZykpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmaXJzdC1jaGlsZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoKCFlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvLyAqKiogdHlwZWQgY2hpbGQtaW5kZXhlZCBwc2V1ZG8tY2xhc3Nlc1xuICAgICAgICAgICAgICAgIC8vIDpvbmx5LW9mLXR5cGUsIDpsYXN0LW9mLXR5cGUsIDpmaXJzdC1vZi10eXBlXG4gICAgICAgICAgICAgICAgY2FzZSAnb25seS1vZi10eXBlJzpcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9ICdvPWUubG9jYWxOYW1lOycgK1xuICAgICAgICAgICAgICAgICAgICAnbj1lO3doaWxlKChuPW4ubmV4dEVsZW1lbnRTaWJsaW5nKSYmbi5sb2NhbE5hbWUhPW8pO2lmKCFuKXsnICtcbiAgICAgICAgICAgICAgICAgICAgJ249ZTt3aGlsZSgobj1uLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpJiZuLmxvY2FsTmFtZSE9byk7fWlmKCFuKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGFzdC1vZi10eXBlJzpcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9ICduPWU7bz1lLmxvY2FsTmFtZTt3aGlsZSgobj1uLm5leHRFbGVtZW50U2libGluZykmJm4ubG9jYWxOYW1lIT1vKTtpZighbil7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpcnN0LW9mLXR5cGUnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ249ZTtvPWUubG9jYWxOYW1lO3doaWxlKChuPW4ucHJldmlvdXNFbGVtZW50U2libGluZykmJm4ubG9jYWxOYW1lIT1vKTtpZighbil7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBlbWl0KCdcXCcnICsgc2VsZWN0b3Jfc3RyaW5nICsgJ1xcJycgKyBxc0ludmFsaWQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gKioqIGNoaWxkLWluZGV4ZWQgJiB0eXBlZCBjaGlsZC1pbmRleGVkIHBzZXVkby1jbGFzc2VzXG4gICAgICAgICAgICAvLyA6bnRoLWNoaWxkLCA6bnRoLW9mLXR5cGUsIDpudGgtbGFzdC1jaGlsZCwgOm50aC1sYXN0LW9mLXR5cGVcbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLnRyZWVzdHJ1Y3QpKSkge1xuICAgICAgICAgICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdudGgtY2hpbGQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ250aC1vZi10eXBlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdudGgtbGFzdC1jaGlsZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbnRoLWxhc3Qtb2YtdHlwZSc6XG4gICAgICAgICAgICAgICAgICBleHByID0gLy1vZi10eXBlL2kudGVzdChtYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMV0gJiYgbWF0Y2hbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IC9sYXN0L2kudGVzdChtYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSA9PSAnbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYodHJ1ZSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFsyXSA9PSAnMScpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdHlwZSA/ICduZXh0JyA6ICdwcmV2aW91cyc7XG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlID0gZXhwciA/ICduPWU7bz1lLmxvY2FsTmFtZTsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aGlsZSgobj1uLicgKyB0ZXN0ICsgJ0VsZW1lbnRTaWJsaW5nKSYmbi5sb2NhbE5hbWUhPW8pO2lmKCFuKXsnICsgc291cmNlICsgJ30nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICdpZighZS4nICsgdGVzdCArICdFbGVtZW50U2libGluZyl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFsyXSA9PSAnZXZlbicgfHwgbWF0Y2hbMl0gPT0gJzJuMCcgfHwgbWF0Y2hbMl0gPT0gJzJuKzAnIHx8IG1hdGNoWzJdID09ICcybicpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gJ24lMj09MCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMl0gPT0gJ29kZCcgIHx8IG1hdGNoWzJdID09ICcybjEnIHx8IG1hdGNoWzJdID09ICcybisxJykge1xuICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSAnbiUyPT0xJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBmID0gL24vaS50ZXN0KG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICBuID0gbWF0Y2hbMl0uc3BsaXQoJ24nKTtcbiAgICAgICAgICAgICAgICAgICAgICBhID0gcGFyc2VJbnQoblswXSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IHBhcnNlSW50KG5bMV0sIDEwKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChuWzBdID09ICctJykgeyBhID0gLTE7IH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoblswXSA9PSAnKycpIHsgYSA9ICsxOyB9XG4gICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IChiID8gJyhuJyArIChiID4gMCA/ICctJyA6ICcrJykgKyBNYXRoLmFicyhiKSArICcpJyA6ICduJykgKyAnJScgKyBhICsgJz09MCcgO1xuICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPVxuICAgICAgICAgICAgICAgICAgICAgICAgYSA+PSArMSA/IChmID8gJ24+JyArIChiIC0gMSkgKyAoTWF0aC5hYnMoYSkgIT0gMSA/ICcmJicgKyB0ZXN0IDogJycpIDogJ249PScgKyBhKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBhIDw9IC0xID8gKGYgPyAnbjwnICsgKGIgKyAxKSArIChNYXRoLmFicyhhKSAhPSAxID8gJyYmJyArIHRlc3QgOiAnJykgOiAnbj09JyArIGEpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPT09IDAgPyAoblswXSA/ICduPT0nICsgYiA6ICduPicgKyAoYiAtIDEpKSA6ICdmYWxzZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXhwciA9IGV4cHIgPyAnT2ZUeXBlJyA6ICdFbGVtZW50JztcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnbj1zLm50aCcgKyBleHByICsgJyhlLCcgKyB0eXBlICsgJyk7aWYoKCcgKyB0ZXN0ICsgJykpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbWl0KCdcXCcnICsgc2VsZWN0b3Jfc3RyaW5nICsgJ1xcJycgKyBxc0ludmFsaWQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGVtaXQoJ1xcJycgKyBzZWxlY3Rvcl9zdHJpbmcgKyAnXFwnJyArIHFzSW52YWxpZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAqKiogbG9naWNhbCBjb21iaW5hdGlvbiBwc2V1ZG8tY2xhc3Nlc1xuICAgICAgICAgICAgLy8gOmlzKCBzMSwgWyBzMiwgLi4uIF0pLCA6bm90KCBzMSwgWyBzMiwgLi4uIF0pXG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSBzZWxlY3Rvci5tYXRjaChQYXR0ZXJucy5sb2dpY2Fsc2VsKSkpIHtcbiAgICAgICAgICAgICAgbWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaXMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3doZXJlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtYXRjaGVzJzpcbiAgICAgICAgICAgICAgICAgIGV4cHIgPSBtYXRjaFsyXS5yZXBsYWNlKFJFWC5Db21tYUdyb3VwLCAnLCcpLnJlcGxhY2UoUkVYLlRyaW1TcGFjZXMsICcnKTtcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9ICdpZihzLm1hdGNoKFwiJyArIGV4cHIucmVwbGFjZSgvXFx4MjIvZywgJ1xcXFxcIicpICsgJ1wiLGUpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbm90JzpcbiAgICAgICAgICAgICAgICAgIGV4cHIgPSBtYXRjaFsyXS5yZXBsYWNlKFJFWC5Db21tYUdyb3VwLCAnLCcpLnJlcGxhY2UoUkVYLlRyaW1TcGFjZXMsICcnKTtcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9ICdpZighcy5tYXRjaChcIicgKyBleHByLnJlcGxhY2UoL1xceDIyL2csICdcXFxcXCInKSArICdcIixlKSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hhcyc6XG4gICAgICAgICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gc2VsZWN0b3Jfc3RyaW5nLnNwbGl0KCc6JylbMF07XG4gICAgICAgICAgICAgICAgICBleHByID0gbWF0Y2hbMl0ucmVwbGFjZShSRVguQ29tbWFHcm91cCwgJywnKS5yZXBsYWNlKFJFWC5UcmltU3BhY2VzLCAnJyk7XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYocy5tYXRjaChcIicgKyBleHByLnJlcGxhY2UoL1xceDIyL2csICdcXFxcXCInKSArICcsJyArIHJlZmVyZW5jZUVsZW1lbnQgKyAnXCIsZSkpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgZW1pdCgnXFwnJyArIHNlbGVjdG9yX3N0cmluZyArICdcXCcnICsgcXNJbnZhbGlkKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vICoqKiBsaW5ndWlzdGljIHBzZXVkby1jbGFzc2VzXG4gICAgICAgICAgICAvLyA6ZGlyKCBsdHIgLyBydGwgKSwgOmxhbmcoIGVuIClcbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLmxpbmd1aXN0aWMpKSkge1xuICAgICAgICAgICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkaXInOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ3ZhciBwO2lmKCgnICtcbiAgICAgICAgICAgICAgICAgICAgJygvJyArIG1hdGNoWzJdICsgJy9pLnRlc3QoZS5kaXIpKXx8KHA9cy5hbmNlc3RvcihcIltkaXJdXCIsIGUpKSYmJyArXG4gICAgICAgICAgICAgICAgICAgICcoLycgKyBtYXRjaFsyXSArICcvaS50ZXN0KHAuZGlyKSl8fChlLmRpcj09XCJcInx8ZS5kaXI9PVwiYXV0b1wiKSYmJyArXG4gICAgICAgICAgICAgICAgICAgICcoJyArIChtYXRjaFsyXSA9PSAnbHRyJyA/ICchJzonJykrIFJUTCArJy50ZXN0KGUudGV4dENvbnRlbnQpKSknICtcbiAgICAgICAgICAgICAgICAgICAgJyl7JyArIHNvdXJjZSArICd9Oyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICAgICAgICAgIGV4cHIgPSAnKD86XnwtKScgKyBtYXRjaFsyXSArICcoPzotfCQpJztcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9ICd2YXIgcDtpZigoJyArXG4gICAgICAgICAgICAgICAgICAgICcoZS5pc0Nvbm5lY3RlZCYmKGUubGFuZz09XCJcIiYmKHA9cy5hbmNlc3RvcihcIltsYW5nXVwiLGUpKSkmJicgK1xuICAgICAgICAgICAgICAgICAgICAnKHAubGFuZz09XCInICsgbWF0Y2hbMl0gKyAnXCIpfHwvJysgZXhwciArJy9pLnRlc3QoZS5sYW5nKSkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpeycgKyBzb3VyY2UgKyAnfTsnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGVtaXQoJ1xcJycgKyBzZWxlY3Rvcl9zdHJpbmcgKyAnXFwnJyArIHFzSW52YWxpZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAqKiogbG9jYXRpb24gcHNldWRvLWNsYXNzZXNcbiAgICAgICAgICAgIC8vIDphbnktbGluaywgOmxpbmssIDp2aXNpdGVkLCA6dGFyZ2V0XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSBzZWxlY3Rvci5tYXRjaChQYXR0ZXJucy5sb2NhdGlvbnBjKSkpIHtcbiAgICAgICAgICAgICAgbWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYW55LWxpbmsnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ2lmKCgvXmF8YXJlYSQvaS50ZXN0KGUubG9jYWxOYW1lKSYmZS5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpfHxlLnZpc2l0ZWQpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGluayc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoKC9eYXxhcmVhJC9pLnRlc3QoZS5sb2NhbE5hbWUpJiZlLmhhc0F0dHJpYnV0ZShcImhyZWZcIikpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlzaXRlZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoKC9eYXxhcmVhJC9pLnRlc3QoZS5sb2NhbE5hbWUpJiZlLmhhc0F0dHJpYnV0ZShcImhyZWZcIikmJmUudmlzaXRlZCkpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0YXJnZXQnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ2lmKCgocy5kb2MuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSkmMTYpJiZzLmRvYy5sb2NhdGlvbi5oYXNoJiZlLmlkPT1zLmRvYy5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpKSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBlbWl0KCdcXCcnICsgc2VsZWN0b3Jfc3RyaW5nICsgJ1xcJycgKyBxc0ludmFsaWQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gKioqIHVzZXIgYWN0aW9ucyBwc2V1ZG8tY2xhc3Nlc1xuICAgICAgICAgICAgLy8gOmhvdmVyLCA6YWN0aXZlLCA6Zm9jdXMsIDpmb2N1cy13aXRoaW5cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLnVzZXJhY3Rpb24pKSkge1xuICAgICAgICAgICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdob3Zlcic6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaGFzRm9jdXMnIGluIGRvYyAmJiBkb2MuaGFzRm9jdXMoKSA/XG4gICAgICAgICAgICAgICAgICAgICdpZigoZT09PXMuZG9jLmhvdmVyRWxlbWVudCkpeycgKyBzb3VyY2UgKyAnfScgOiBzb3VyY2U7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhY3RpdmUnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ2hhc0ZvY3VzJyBpbiBkb2MgJiYgZG9jLmhhc0ZvY3VzKCkgP1xuICAgICAgICAgICAgICAgICAgICAnaWYoKGU9PT1zLmRvYy5hY3RpdmVFbGVtZW50KSl7JyArIHNvdXJjZSArICd9JyA6IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9ICdoYXNGb2N1cycgaW4gZG9jID9cbiAgICAgICAgICAgICAgICAgICAgJ2lmKGUucGFyZW50RWxlbWVudCYmZS5wYXJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkhPVwibm9uZVwiJiYnICtcbiAgICAgICAgICAgICAgICAgICAgJ2U9PT1zLmRvYy5hY3RpdmVFbGVtZW50JiZzLmRvYy5oYXNGb2N1cygpJiYoZS50eXBlfHxlLmhyZWZ8fHR5cGVvZiBlLnRhYkluZGV4PT1cIm51bWJlclwiKSl7JyArIHNvdXJjZSArICd9JyA6IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZvY3VzLXdpdGhpbic6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaGFzRm9jdXMnIGluIGRvYyA/XG4gICAgICAgICAgICAgICAgICAgICduPXMuZG9jLmFjdGl2ZUVsZW1lbnQ7aWYoZSE9PW4pe3doaWxlKG4mJihuPW4ucGFyZW50RWxlbWVudCkpe2lmKGU9PT1uKWJyZWFrO319JyArXG4gICAgICAgICAgICAgICAgICAgICdpZigoZT09PW4mJnMuZG9jLmhhc0ZvY3VzKCkmJihlLnR5cGV8fGUuaHJlZnx8dHlwZW9mIGUudGFiSW5kZXg9PVwibnVtYmVyXCIpKSl7JyArIHNvdXJjZSArICd9JyA6IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBlbWl0KCdcXCcnICsgc2VsZWN0b3Jfc3RyaW5nICsgJ1xcJycgKyBxc0ludmFsaWQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gKioqIHVzZXIgaW50ZXJmYWNlIGFuZCBmb3JtIHBzZXVkby1jbGFzc2VzXG4gICAgICAgICAgICAvLyA6ZW5hYmxlZCwgOmRpc2FibGVkLCA6cmVhZC1vbmx5LCA6cmVhZC13cml0ZSwgOnBsYWNlaG9sZGVyLXNob3duLCA6ZGVmYXVsdFxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMuaW5wdXRzdGF0ZSkpKSB7XG4gICAgICAgICAgICAgIG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgc3dpdGNoIChtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VuYWJsZWQnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ2lmKCgoXCJmb3JtXCIgaW4gZXx8L15vcHRncm91cCQvaS50ZXN0KGUubG9jYWxOYW1lKSkmJlwiZGlzYWJsZWRcIiBpbiBlICYmZS5kaXNhYmxlZD09PWZhbHNlJyArXG4gICAgICAgICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzYWJsZWQnOlxuICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjZW5hYmxpbmctYW5kLWRpc2FibGluZy1mb3JtLWNvbnRyb2xzOi10aGUtZGlzYWJsZWQtYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoKChcImZvcm1cIiBpbiBlfHwvXm9wdGdyb3VwJC9pLnRlc3QoZS5sb2NhbE5hbWUpKSYmXCJkaXNhYmxlZFwiIGluIGUmJicgK1xuICAgICAgICAgICAgICAgICAgICAnKGUuZGlzYWJsZWQ9PT10cnVlfHwobj1zLmFuY2VzdG9yKFwiZmllbGRzZXRcIixlKSkmJihuPXMuZmlyc3QoXCJsZWdlbmRcIixuKSkmJiFuLmNvbnRhaW5zKGUpKScgK1xuICAgICAgICAgICAgICAgICAgICAnKSl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlYWQtb25seSc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoL150ZXh0YXJlYSQvaS50ZXN0KGUubG9jYWxOYW1lKSYmKGUucmVhZE9ubHl8fGUuZGlzYWJsZWQpKXx8JyArXG4gICAgICAgICAgICAgICAgICAgICAgJyhcInxwYXNzd29yZHx0ZXh0fFwiLmluY2x1ZGVzKFwifFwiK2UudHlwZStcInxcIikmJmUucmVhZE9ubHkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVhZC13cml0ZSc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoKC9edGV4dGFyZWEkL2kudGVzdChlLmxvY2FsTmFtZSkmJiFlLnJlYWRPbmx5JiYhZS5kaXNhYmxlZCl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoXCJ8cGFzc3dvcmR8dGV4dHxcIi5pbmNsdWRlcyhcInxcIitlLnR5cGUrXCJ8XCIpJiYhZS5yZWFkT25seSYmIWUuZGlzYWJsZWQpKXx8JyArXG4gICAgICAgICAgICAgICAgICAgICAgJyhlLmhhc0F0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKXx8KHMuZG9jLmRlc2lnbk1vZGU9PVwib25cIikpJyArXG4gICAgICAgICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncGxhY2Vob2xkZXItc2hvd24nOlxuICAgICAgICAgICAgICAgICAgc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgJ2lmKCgnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKC9eaW5wdXR8dGV4dGFyZWEkL2kudGVzdChlLmxvY2FsTmFtZSkpJiZlLmhhc0F0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpJiYnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKFwifHRleHRhcmVhfHBhc3N3b3JkfG51bWJlcnxzZWFyY2h8ZW1haWx8dGV4dHx0ZWx8dXJsfFwiLmluY2x1ZGVzKFwifFwiK2UudHlwZStcInxcIikpJiYnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKCFzLm1hdGNoKFwiOmZvY3VzXCIsZSkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGVmYXVsdCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKFwiZm9ybVwiIGluIGUgJiYgZS5mb3JtKSl7JyArXG4gICAgICAgICAgICAgICAgICAgICAgJ3ZhciB4PTA7bj1bXTsnICtcbiAgICAgICAgICAgICAgICAgICAgICAnaWYoZS50eXBlPT1cImltYWdlXCIpbj1lLmZvcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKTsnICtcbiAgICAgICAgICAgICAgICAgICAgICAnaWYoZS50eXBlPT1cInN1Ym1pdFwiKW49ZS5mb3JtLmVsZW1lbnRzOycgK1xuICAgICAgICAgICAgICAgICAgICAgICd3aGlsZShuW3hdJiZlIT09blt4XSl7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnaWYoblt4XS50eXBlPT1cImltYWdlXCIpYnJlYWs7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnaWYoblt4XS50eXBlPT1cInN1Ym1pdFwiKWJyZWFrOycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3grKzsnICtcbiAgICAgICAgICAgICAgICAgICAgICAnfScgK1xuICAgICAgICAgICAgICAgICAgICAnfScgK1xuICAgICAgICAgICAgICAgICAgICAnaWYoKGUuZm9ybSYmKGU9PT1uW3hdJiZcInxpbWFnZXxzdWJtaXR8XCIuaW5jbHVkZXMoXCJ8XCIrZS50eXBlK1wifFwiKSl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoKC9eb3B0aW9uJC9pLnRlc3QoZS5sb2NhbE5hbWUpKSYmZS5kZWZhdWx0U2VsZWN0ZWQpfHwnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKChcInxyYWRpb3xjaGVja2JveHxcIi5pbmNsdWRlcyhcInxcIitlLnR5cGUrXCJ8XCIpKSYmZS5kZWZhdWx0Q2hlY2tlZCknICtcbiAgICAgICAgICAgICAgICAgICAgJykpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgZW1pdCgnXFwnJyArIHNlbGVjdG9yX3N0cmluZyArICdcXCcnICsgcXNJbnZhbGlkKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vICoqKiBpbnB1dCBwc2V1ZG8tY2xhc3NlcyAoZm9yIGZvcm0gdmFsaWRhdGlvbilcbiAgICAgICAgICAgIC8vIDpjaGVja2VkLCA6aW5kZXRlcm1pbmF0ZSwgOnZhbGlkLCA6aW52YWxpZCwgOmluLXJhbmdlLCA6b3V0LW9mLXJhbmdlLCA6cmVxdWlyZWQsIDpvcHRpb25hbFxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMuaW5wdXR2YWx1ZSkpKSB7XG4gICAgICAgICAgICAgIG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgc3dpdGNoIChtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrZWQnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gJ2lmKCgvXmlucHV0JC9pLnRlc3QoZS5sb2NhbE5hbWUpJiYnICtcbiAgICAgICAgICAgICAgICAgICAgJyhcInxyYWRpb3xjaGVja2JveHxcIi5pbmNsdWRlcyhcInxcIitlLnR5cGUrXCJ8XCIpJiZlLmNoZWNrZWQpfHwnICtcbiAgICAgICAgICAgICAgICAgICAgJygvXm9wdGlvbiQvaS50ZXN0KGUubG9jYWxOYW1lKSYmKGUuc2VsZWN0ZWR8fGUuY2hlY2tlZCkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5kZXRlcm1pbmF0ZSc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKC9ecHJvZ3Jlc3MkL2kudGVzdChlLmxvY2FsTmFtZSkmJiFlLmhhc0F0dHJpYnV0ZShcInZhbHVlXCIpKXx8JyArXG4gICAgICAgICAgICAgICAgICAgICAgJygvXmlucHV0JC9pLnRlc3QoZS5sb2NhbE5hbWUpJiYoXCJjaGVja2JveFwiPT1lLnR5cGUmJmUuaW5kZXRlcm1pbmF0ZSl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoXCJyYWRpb1wiPT1lLnR5cGUmJmUubmFtZSYmIXMuZmlyc3QoXCJpbnB1dFtuYW1lPVwiK2UubmFtZStcIl06Y2hlY2tlZFwiLGUuZm9ybSkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVxdWlyZWQnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgJ2lmKCgvXmlucHV0fHNlbGVjdHx0ZXh0YXJlYSQvaS50ZXN0KGUubG9jYWxOYW1lKSYmZS5yZXF1aXJlZCknICtcbiAgICAgICAgICAgICAgICAgICAgJyl7JyArIHNvdXJjZSArICd9JztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ29wdGlvbmFsJzpcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICdpZigoL15pbnB1dHxzZWxlY3R8dGV4dGFyZWEkL2kudGVzdChlLmxvY2FsTmFtZSkmJiFlLnJlcXVpcmVkKScgK1xuICAgICAgICAgICAgICAgICAgICAnKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW52YWxpZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKCgnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKC9eZm9ybSQvaS50ZXN0KGUubG9jYWxOYW1lKSYmIWUubm9WYWxpZGF0ZSl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoZS53aWxsVmFsaWRhdGUmJiFlLmZvcm1Ob1ZhbGlkYXRlKSkmJiFlLmNoZWNrVmFsaWRpdHkoKSl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoL15maWVsZHNldCQvaS50ZXN0KGUubG9jYWxOYW1lKSYmcy5maXJzdChcIjppbnZhbGlkXCIsZSkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd2YWxpZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKCgnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKC9eZm9ybSQvaS50ZXN0KGUubG9jYWxOYW1lKSYmIWUubm9WYWxpZGF0ZSl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAgICcoZS53aWxsVmFsaWRhdGUmJiFlLmZvcm1Ob1ZhbGlkYXRlKSkmJmUuY2hlY2tWYWxpZGl0eSgpKXx8JyArXG4gICAgICAgICAgICAgICAgICAgICAgJygvXmZpZWxkc2V0JC9pLnRlc3QoZS5sb2NhbE5hbWUpJiZzLmZpcnN0KFwiOnZhbGlkXCIsZSkpJyArXG4gICAgICAgICAgICAgICAgICAgICcpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbi1yYW5nZSc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPVxuICAgICAgICAgICAgICAgICAgICAnaWYoKC9eaW5wdXQkL2kudGVzdChlLmxvY2FsTmFtZSkpJiYnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKGUud2lsbFZhbGlkYXRlJiYhZS5mb3JtTm9WYWxpZGF0ZSkmJicgK1xuICAgICAgICAgICAgICAgICAgICAgICcoIWUudmFsaWRpdHkucmFuZ2VVbmRlcmZsb3cmJiFlLnZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpJiYnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKFwifGRhdGV8ZGF0ZXRpbWUtbG9jYWx8bW9udGh8bnVtYmVyfHJhbmdlfHRpbWV8d2Vla3xcIi5pbmNsdWRlcyhcInxcIitlLnR5cGUrXCJ8XCIpKSYmJyArXG4gICAgICAgICAgICAgICAgICAgICAgJyhcInJhbmdlXCI9PWUudHlwZXx8ZS5nZXRBdHRyaWJ1dGUoXCJtaW5cIil8fGUuZ2V0QXR0cmlidXRlKFwibWF4XCIpKScgK1xuICAgICAgICAgICAgICAgICAgICAnKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnb3V0LW9mLXJhbmdlJzpcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICdpZigoL15pbnB1dCQvaS50ZXN0KGUubG9jYWxOYW1lKSkmJicgK1xuICAgICAgICAgICAgICAgICAgICAgICcoZS53aWxsVmFsaWRhdGUmJiFlLmZvcm1Ob1ZhbGlkYXRlKSYmJyArXG4gICAgICAgICAgICAgICAgICAgICAgJyhlLnZhbGlkaXR5LnJhbmdlVW5kZXJmbG93fHxlLnZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpJiYnICtcbiAgICAgICAgICAgICAgICAgICAgICAnKFwifGRhdGV8ZGF0ZXRpbWUtbG9jYWx8bW9udGh8bnVtYmVyfHJhbmdlfHRpbWV8d2Vla3xcIi5pbmNsdWRlcyhcInxcIitlLnR5cGUrXCJ8XCIpKSYmJyArXG4gICAgICAgICAgICAgICAgICAgICAgJyhcInJhbmdlXCI9PWUudHlwZXx8ZS5nZXRBdHRyaWJ1dGUoXCJtaW5cIil8fGUuZ2V0QXR0cmlidXRlKFwibWF4XCIpKScgK1xuICAgICAgICAgICAgICAgICAgICAnKXsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGVtaXQoJ1xcJycgKyBzZWxlY3Rvcl9zdHJpbmcgKyAnXFwnJyArIHFzSW52YWxpZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhbGxvdyBwc2V1ZG8tZWxlbWVudHMgc3RhcnRpbmcgd2l0aCBzaW5nbGUgY29sb24gKDopXG4gICAgICAgICAgICAvLyA6YWZ0ZXIsIDpiZWZvcmUsIDpmaXJzdC1sZXR0ZXIsIDpmaXJzdC1saW5lXG4gICAgICAgICAgICAvLyBhc3NlcnQ6IGUudHlwZSBpcyBpbiBkb3VibGUtY29sb24gZm9ybWF0LCBsaWtlIDo6YWZ0ZXJcbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLnBzZXVkb19zbmcpKSkge1xuICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoZS5lbGVtZW50JiZlLnR5cGUudG9Mb3dlckNhc2UoKT09XCInICtcbiAgICAgICAgICAgICAgICAnOicgKyBtYXRjaFswXS50b0xvd2VyQ2FzZSgpICsgJ1wiKXtlPWUuZWxlbWVudDsnICsgc291cmNlICsgJ30nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhbGxvdyBwc2V1ZG8tZWxlbWVudHMgc3RhcnRpbmcgd2l0aCBkb3VibGUgY29sb24gKDo6KVxuICAgICAgICAgICAgLy8gOjphZnRlciwgOjpiZWZvcmUsIDo6bWFya2VyLCA6OnBsYWNlaG9sZGVyLCA6OmluYWN0aXZlLXNlbGVjdGlvbiwgOjpzZWxlY3Rpb24sIDo6LXdlYmtpdC08Zm9vLWJhcj5cbiAgICAgICAgICAgIC8vIGFzc2VydDogZS50eXBlIGlzIGluIGRvdWJsZS1jb2xvbiBmb3JtYXQsIGxpa2UgOjphZnRlclxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gc2VsZWN0b3IubWF0Y2goUGF0dGVybnMucHNldWRvX2RibCkpKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9ICdpZihlLmVsZW1lbnQmJmUudHlwZS50b0xvd2VyQ2FzZSgpPT1cIicgK1xuICAgICAgICAgICAgICAgIG1hdGNoWzBdLnRvTG93ZXJDYXNlKCkgKyAnXCIpe2U9ZS5lbGVtZW50OycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyIGZvciBwYXJzZWQgb25seSBuby1vcCBzZWxlY3RvcnNcbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHNlbGVjdG9yLm1hdGNoKFBhdHRlcm5zLnBzZXVkb19ub3ApKSkge1xuICAgICAgICAgICAgICBzb3VyY2UgPSAnaWYoZmFsc2UpeycgKyBzb3VyY2UgKyAnfSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgIC8vIHJlc2V0XG4gICAgICAgICAgICAgIGV4cHIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgc3RhdHVzID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgLy8gcHJvY2VzcyByZWdpc3RlcmVkIHNlbGVjdG9yIGV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgZm9yIChleHByIGluIFNlbGVjdG9ycykge1xuICAgICAgICAgICAgICAgIGlmICgobWF0Y2ggPSBzZWxlY3Rvci5tYXRjaChTZWxlY3RvcnNbZXhwcl0uRXhwcmVzc2lvbikpKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBTZWxlY3RvcnNbZXhwcl0uQ2FsbGJhY2sobWF0Y2gsIHNvdXJjZSwgbW9kZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgaWYgKCdtYXRjaCcgaW4gcmVzdWx0KSB7IG1hdGNoID0gcmVzdWx0Lm1hdGNoOyB9XG4gICAgICAgICAgICAgICAgICB2YXJzID0gcmVzdWx0Lm1vZHZhcjtcbiAgICAgICAgICAgICAgICAgIGlmIChtb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBhZGQgZXh0cmEgc2VsZWN0KCkgdmFyc1xuICAgICAgICAgICAgICAgICAgICAgdmFycyAmJiBTX1ZBUlMuaW5kZXhPZih2YXJzKSA8IDAgJiYgKFNfVkFSU1tTX1ZBUlMubGVuZ3RoXSA9IHZhcnMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBleHRyYSBtYXRjaCgpIHZhcnNcbiAgICAgICAgICAgICAgICAgICAgIHZhcnMgJiYgTV9WQVJTLmluZGV4T2YodmFycykgPCAwICYmIChNX1ZBUlNbTV9WQVJTLmxlbmd0aF0gPSB2YXJzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvbiBzb3VyY2UgY29kZVxuICAgICAgICAgICAgICAgICAgc291cmNlID0gcmVzdWx0LnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvbiBzdGF0dXMgY29kZVxuICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgICAgICAgICAgICAgICAgIC8vIGJyZWFrIG9uIHN0YXR1cyBlcnJvclxuICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cykgeyBicmVhazsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgZW1pdCgndW5rbm93biBwc2V1ZG8tY2xhc3Mgc2VsZWN0b3IgXFwnJyArIHNlbGVjdG9yICsgJ1xcJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghZXhwcikge1xuICAgICAgICAgICAgICAgIGVtaXQoJ3Vua25vd24gdG9rZW4gaW4gc2VsZWN0b3IgXFwnJyArIHNlbGVjdG9yICsgJ1xcJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGVtaXQoJ1xcJycgKyBzZWxlY3Rvcl9zdHJpbmcgKyAnXFwnJyArIHFzSW52YWxpZCk7XG4gICAgICAgICAgYnJlYWsgc2VsZWN0b3JfcmVjdXJzaW9uX2xhYmVsO1xuXG4gICAgICAgIH1cbiAgICAgICAgLy8gZW5kIG9mIHN3aXRjaCBzeW1ib2xcblxuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgZW1pdCgnXFwnJyArIHNlbGVjdG9yX3N0cmluZyArICdcXCcnICsgcXNJbnZhbGlkKTtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwb3AgbGFzdCBjb21wb25lbnRcbiAgICAgICAgc2VsZWN0b3IgPSBtYXRjaC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIC8vIGVuZCBvZiB3aGlsZSBzZWxlY3RvclxuXG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0sXG5cbiAgLy8gcmVwbGFjZSAnOnNjb3BlJyBwc2V1ZG8tY2xhc3Mgd2l0aCBlbGVtZW50IHJlZmVyZW5jZXNcbiAgbWFrZXJlZiA9XG4gICAgZnVuY3Rpb24oc2VsZWN0b3JzLCBlbGVtZW50KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JzLnJlcGxhY2UoLzpzY29wZS9pZyxcbiAgICAgICAgZWxlbWVudC5sb2NhbE5hbWUgK1xuICAgICAgICAoZWxlbWVudC5pZCA/ICcjJyArIGVsZW1lbnQuaWQgOiAnJykgK1xuICAgICAgICAoZWxlbWVudC5jbGFzc05hbWUgPyAnLicgKyBlbGVtZW50LmNsYXNzTGlzdFswXSA6ICcnKSk7XG4gICAgfSxcblxuICAvLyBlcXVpdmFsZW50IG9mIHczYyAnY2xvc2VzdCcgbWV0aG9kXG4gIGFuY2VzdG9yID1cbiAgICBmdW5jdGlvbiBfY2xvc2VzdChzZWxlY3RvcnMsIGVsZW1lbnQsIGNhbGxiYWNrKSB7XG5cbiAgICAgIGlmICgoLzpzY29wZS9pKS50ZXN0KHNlbGVjdG9ycykpIHtcbiAgICAgICAgc2VsZWN0b3JzID0gbWFrZXJlZihzZWxlY3RvcnMsIGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoZWxlbWVudCkge1xuICAgICAgICBpZiAobWF0Y2goc2VsZWN0b3JzLCBlbGVtZW50LCBjYWxsYmFjaykpIGJyZWFrO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfSxcblxuICBtYXRjaF9hc3NlcnQgPVxuICAgIGZ1bmN0aW9uKGYsIGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGYubGVuZ3RoLCByID0gZmFsc2U7IGwgPiBpOyArK2kpXG4gICAgICAgIGZbaV0oZWxlbWVudCwgY2FsbGJhY2ssIG51bGwsIGZhbHNlKSAmJiAociA9IHRydWUpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfSxcblxuICBtYXRjaF9jb2xsZWN0ID1cbiAgICBmdW5jdGlvbihzZWxlY3RvcnMsIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNlbGVjdG9ycy5sZW5ndGgsIGYgPSBbIF07IGwgPiBpOyArK2kpXG4gICAgICAgIGZbaV0gPSBjb21waWxlKHNlbGVjdG9yc1tpXSwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7IGZhY3Rvcnk6IGYgfTtcbiAgICB9LFxuXG4gIC8vIGVxdWl2YWxlbnQgb2YgdzNjICdtYXRjaGVzJyBtZXRob2RcbiAgbWF0Y2ggPVxuICAgIGZ1bmN0aW9uIF9tYXRjaGVzKHNlbGVjdG9ycywgZWxlbWVudCwgY2FsbGJhY2spIHtcblxuICAgICAgdmFyIGV4cHJlc3Npb25zLCBwYXJzZWQ7XG5cbiAgICAgIGlmIChlbGVtZW50ICYmIG1hdGNoUmVzb2x2ZXJzW3NlbGVjdG9yc10pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoX2Fzc2VydChtYXRjaFJlc29sdmVyc1tzZWxlY3RvcnNdLmZhY3RvcnksIGVsZW1lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgbGFzdE1hdGNoZWQgPSBzZWxlY3RvcnM7XG5cbiAgICAgIC8vIGFyZ3VtZW50cyB2YWxpZGF0aW9uXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBlbWl0KHFzTm90QXJncywgVHlwZUVycm9yKTtcbiAgICAgICAgcmV0dXJuIENvbmZpZy5WRVJCT1NJVFkgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzWzBdID09PSAnJykge1xuICAgICAgICBlbWl0KCdcXCdcXCcnICsgcXNJbnZhbGlkKTtcbiAgICAgICAgcmV0dXJuIENvbmZpZy5WRVJCT1NJVFkgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gaW5wdXQgTlVMTCBvciBVTkRFRklORURcbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3JzICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlbGVjdG9ycyA9ICcnICsgc2VsZWN0b3JzO1xuICAgICAgfVxuXG4gICAgICBpZiAoKC86c2NvcGUvaSkudGVzdChzZWxlY3RvcnMpKSB7XG4gICAgICAgIHNlbGVjdG9ycyA9IG1ha2VyZWYoc2VsZWN0b3JzLCBlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gbm9ybWFsaXplIGlucHV0IHN0cmluZ1xuICAgICAgcGFyc2VkID0gc2VsZWN0b3JzLlxuICAgICAgICByZXBsYWNlKC9cXHgwMHxcXFxcJC9nLCAnXFx1ZmZmZCcpLlxuICAgICAgICByZXBsYWNlKFJFWC5Db21iaW5lV1NQLCAnXFx4MjAnKS5cbiAgICAgICAgcmVwbGFjZShSRVguUHNldWRvc1dTUCwgJyQxJykuXG4gICAgICAgIHJlcGxhY2UoUkVYLlRhYkNoYXJXU1AsICdcXHQnKS5cbiAgICAgICAgcmVwbGFjZShSRVguQ29tbWFHcm91cCwgJywnKS5cbiAgICAgICAgcmVwbGFjZShSRVguVHJpbVNwYWNlcywgJycpO1xuXG4gICAgICAvLyBwYXJzZSwgdmFsaWRhdGUgYW5kIHNwbGl0IHBvc3NpYmxlIGNvbXBvdW5kIHNlbGVjdG9yc1xuICAgICAgaWYgKChleHByZXNzaW9ucyA9IHBhcnNlZC5tYXRjaChyZVZhbGlkYXRvcikpICYmIGV4cHJlc3Npb25zLmpvaW4oJycpID09IHBhcnNlZCkge1xuICAgICAgICBleHByZXNzaW9ucyA9IHBhcnNlZC5tYXRjaChSRVguU3BsaXRHcm91cCk7XG4gICAgICAgIGlmIChwYXJzZWRbcGFyc2VkLmxlbmd0aCAtIDFdID09ICcsJykge1xuICAgICAgICAgIGVtaXQocXNJbnZhbGlkKTtcbiAgICAgICAgICByZXR1cm4gQ29uZmlnLlZFUkJPU0lUWSA/IHVuZGVmaW5lZCA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCdcXCcnICsgc2VsZWN0b3JzICsgJ1xcJycgKyBxc0ludmFsaWQpO1xuICAgICAgICByZXR1cm4gQ29uZmlnLlZFUkJPU0lUWSA/IHVuZGVmaW5lZCA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBtYXRjaFJlc29sdmVyc1tzZWxlY3RvcnNdID0gbWF0Y2hfY29sbGVjdChleHByZXNzaW9ucywgY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gbWF0Y2hfYXNzZXJ0KG1hdGNoUmVzb2x2ZXJzW3NlbGVjdG9yc10uZmFjdG9yeSwgZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgLy8gZXF1aXZhbGVudCBvZiB3M2MgJ3F1ZXJ5U2VsZWN0b3InIG1ldGhvZFxuICBmaXJzdCA9XG4gICAgZnVuY3Rpb24gX3F1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLCBjb250ZXh0LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZW1pdChxc05vdEFyZ3MsIFR5cGVFcnJvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0KHNlbGVjdG9ycywgY29udGV4dCxcbiAgICAgICAgdHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicgP1xuICAgICAgICBmdW5jdGlvbiBmaXJzdE1hdGNoKGVsZW1lbnQpIHtcbiAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbiBmaXJzdE1hdGNoKCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgKVswXSB8fCBudWxsO1xuICAgIH0sXG5cbiAgLy8gZXF1aXZhbGVudCBvZiB3M2MgJ3F1ZXJ5U2VsZWN0b3JBbGwnIG1ldGhvZFxuICBzZWxlY3QgPVxuICAgIGZ1bmN0aW9uIF9xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9ycywgY29udGV4dCwgY2FsbGJhY2spIHtcblxuICAgICAgdmFyIGV4cHJlc3Npb25zLCBub2RlcyA9IFsgXSwgcGFyc2VkLCByZXNvbHZlcjtcblxuICAgICAgY29udGV4dCB8fCAoY29udGV4dCA9IGRvYyk7XG5cbiAgICAgIGlmIChzZWxlY3RvcnMpIHtcbiAgICAgICAgaWYgKChyZXNvbHZlciA9IHNlbGVjdFJlc29sdmVyc1tzZWxlY3RvcnNdKSkge1xuICAgICAgICAgIGlmIChyZXNvbHZlci5jb250ZXh0ID09PSBjb250ZXh0ICYmIHJlc29sdmVyLmNhbGxiYWNrID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGYgPSByZXNvbHZlci5mYWN0b3J5LCBoID0gcmVzb2x2ZXIuaHRtbHNldCwgbiA9IHJlc29sdmVyLm5vZGVzZXQ7XG4gICAgICAgICAgICBpZiAobi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbi5sZW5ndGgsIGxpc3Q7IGwgPiBpOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsaXN0ID0gY29tcGF0W25baV1bMF1dKGNvbnRleHQsIG5baV0uc2xpY2UoMSkpKCk7XG4gICAgICAgICAgICAgICAgaWYgKGZbaV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGZbaV0obGlzdCwgY2FsbGJhY2ssIGNvbnRleHQsIG5vZGVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbm9kZXMgPSBub2Rlcy5jb25jYXQobGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChsID4gMSAmJiBub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMuc29ydChkb2N1bWVudE9yZGVyKTtcbiAgICAgICAgICAgICAgICBoYXNEdXBlcyAmJiAobm9kZXMgPSB1bmlxdWUobm9kZXMpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGZbMF0pIHtcbiAgICAgICAgICAgICAgICBub2RlcyA9IGZbMF0oaFswXSgpLCBjYWxsYmFjaywgY29udGV4dCwgbm9kZXMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGVzID0gaFswXSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICBjb25jYXRDYWxsKG5vZGVzLCBjYWxsYmFjaykgOiBub2RlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGFzdFNlbGVjdGVkID0gc2VsZWN0b3JzO1xuXG4gICAgICAvLyBhcmd1bWVudHMgdmFsaWRhdGlvblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZW1pdChxc05vdEFyZ3MsIFR5cGVFcnJvcik7XG4gICAgICAgIHJldHVybiBDb25maWcuVkVSQk9TSVRZID8gdW5kZWZpbmVkIDogbm9uZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzWzBdID09PSAnJykge1xuICAgICAgICBlbWl0KCdcXCdcXCcnICsgcXNJbnZhbGlkKTtcbiAgICAgICAgcmV0dXJuIENvbmZpZy5WRVJCT1NJVFkgPyB1bmRlZmluZWQgOiBub25lO1xuICAgICAgfSBlbHNlIGlmIChsYXN0Q29udGV4dCAhPT0gY29udGV4dCkge1xuICAgICAgICBsYXN0Q29udGV4dCA9IHN3aXRjaENvbnRleHQoY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlucHV0IE5VTEwgb3IgVU5ERUZJTkVEXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPSAnc3RyaW5nJykge1xuICAgICAgICBzZWxlY3RvcnMgPSAnJyArIHNlbGVjdG9ycztcbiAgICAgIH1cblxuICAgICAgaWYgKCgvOnNjb3BlL2kpLnRlc3Qoc2VsZWN0b3JzKSkge1xuICAgICAgICBzZWxlY3RvcnMgPSBtYWtlcmVmKHNlbGVjdG9ycywgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIG5vcm1hbGl6ZSBpbnB1dCBzdHJpbmdcbiAgICAgIHBhcnNlZCA9IHNlbGVjdG9ycy5cbiAgICAgICAgcmVwbGFjZSgvXFx4MDB8XFxcXCQvZywgJ1xcdWZmZmQnKS5cbiAgICAgICAgcmVwbGFjZShSRVguQ29tYmluZVdTUCwgJ1xceDIwJykuXG4gICAgICAgIHJlcGxhY2UoUkVYLlBzZXVkb3NXU1AsICckMScpLlxuICAgICAgICByZXBsYWNlKFJFWC5UYWJDaGFyV1NQLCAnXFx0JykuXG4gICAgICAgIHJlcGxhY2UoUkVYLkNvbW1hR3JvdXAsICcsJykuXG4gICAgICAgIHJlcGxhY2UoUkVYLlRyaW1TcGFjZXMsICcnKTtcblxuICAgICAgLy8gcGFyc2UsIHZhbGlkYXRlIGFuZCBzcGxpdCBwb3NzaWJsZSBjb21wb3VuZCBzZWxlY3RvcnNcbiAgICAgIGlmICgoZXhwcmVzc2lvbnMgPSBwYXJzZWQubWF0Y2gocmVWYWxpZGF0b3IpKSAmJiBleHByZXNzaW9ucy5qb2luKCcnKSA9PSBwYXJzZWQpIHtcbiAgICAgICAgZXhwcmVzc2lvbnMgPSBwYXJzZWQubWF0Y2goUkVYLlNwbGl0R3JvdXApO1xuICAgICAgICBpZiAocGFyc2VkW3BhcnNlZC5sZW5ndGggLSAxXSA9PSAnLCcpIHtcbiAgICAgICAgICBlbWl0KHFzSW52YWxpZCk7XG4gICAgICAgICAgcmV0dXJuIENvbmZpZy5WRVJCT1NJVFkgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnXFwnJyArIHNlbGVjdG9ycyArICdcXCcnICsgcXNJbnZhbGlkKTtcbiAgICAgICAgcmV0dXJuIENvbmZpZy5WRVJCT1NJVFkgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2F2ZS9yZXVzZSBmYWN0b3J5IGFuZCBjbG9zdXJlIGNvbGxlY3Rpb25cbiAgICAgIHNlbGVjdFJlc29sdmVyc1tzZWxlY3RvcnNdID0gY29sbGVjdChleHByZXNzaW9ucywgY29udGV4dCwgY2FsbGJhY2spO1xuXG4gICAgICBub2RlcyA9IHNlbGVjdFJlc29sdmVyc1tzZWxlY3RvcnNdLnJlc3VsdHM7XG5cbiAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIGNvbmNhdENhbGwobm9kZXMsIGNhbGxiYWNrKSA6IG5vZGVzO1xuICAgIH0sXG5cbiAgLy8gb3B0aW1pemUgc2VsZWN0b3JzIGF2b2lkaW5nIGR1cGxpY2F0ZWQgY2hlY2tzXG4gIG9wdGltaXplID1cbiAgICBmdW5jdGlvbihzZWxlY3RvciwgdG9rZW4pIHtcbiAgICAgIHZhciBpbmRleCA9IHRva2VuLmluZGV4LFxuICAgICAgbGVuZ3RoID0gdG9rZW5bMV0ubGVuZ3RoICsgdG9rZW5bMl0ubGVuZ3RoO1xuICAgICAgcmV0dXJuIHNlbGVjdG9yLnNsaWNlKDAsIGluZGV4KSArXG4gICAgICAgICgnID4rficuaW5kZXhPZihzZWxlY3Rvci5jaGFyQXQoaW5kZXggLSAxKSkgPiAtMSA/XG4gICAgICAgICAgKCc6WycuaW5kZXhPZihzZWxlY3Rvci5jaGFyQXQoaW5kZXggKyBsZW5ndGggKyAxKSkgPiAtMSA/XG4gICAgICAgICAgJyonIDogJycpIDogJycpICsgc2VsZWN0b3Iuc2xpY2UoaW5kZXggKyBsZW5ndGggLSAodG9rZW5bMV0gPT0gJyonID8gMSA6IDApKTtcbiAgICB9LFxuXG4gIC8vIHByZXBhcmUgZmFjdG9yeSByZXNvbHZlcnMgYW5kIGNsb3N1cmUgY29sbGVjdGlvbnNcbiAgY29sbGVjdCA9XG4gICAgZnVuY3Rpb24oc2VsZWN0b3JzLCBjb250ZXh0LCBjYWxsYmFjaykge1xuXG4gICAgICB2YXIgaSwgbCwgc2VlbiA9IHsgfSwgdG9rZW4gPSBbJycsICcqJywgJyonXSwgb3B0aW1pemVkID0gc2VsZWN0b3JzLFxuICAgICAgZmFjdG9yeSA9IFsgXSwgaHRtbHNldCA9IFsgXSwgbm9kZXNldCA9IFsgXSwgcmVzdWx0cyA9IFsgXSwgdHlwZTtcblxuICAgICAgZm9yIChpID0gMCwgbCA9IHNlbGVjdG9ycy5sZW5ndGg7IGwgPiBpOyArK2kpIHtcblxuICAgICAgICBpZiAoIXNlZW5bc2VsZWN0b3JzW2ldXSAmJiAoc2VlbltzZWxlY3RvcnNbaV1dID0gdHJ1ZSkpIHtcbiAgICAgICAgICB0eXBlID0gc2VsZWN0b3JzW2ldLm1hdGNoKHJlT3B0aW1pemVyKTtcbiAgICAgICAgICBpZiAodHlwZSAmJiB0eXBlWzFdICE9ICc6JyAmJiAodG9rZW4gPSB0eXBlKSkge1xuICAgICAgICAgICAgdG9rZW5bMV0gfHwgKHRva2VuWzFdID0gJyonKTtcbiAgICAgICAgICAgIG9wdGltaXplZFtpXSA9IG9wdGltaXplKG9wdGltaXplZFtpXSwgdG9rZW4pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2tlbiA9IFsnJywgJyonLCAnKiddO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVzZXRbaV0gPSB0b2tlblsxXSArIHRva2VuWzJdO1xuICAgICAgICBodG1sc2V0W2ldID0gY29tcGF0W3Rva2VuWzFdXShjb250ZXh0LCB0b2tlblsyXSk7XG4gICAgICAgIGZhY3RvcnlbaV0gPSBjb21waWxlKG9wdGltaXplZFtpXSwgdHJ1ZSwgbnVsbCk7XG5cbiAgICAgICAgZmFjdG9yeVtpXSA/XG4gICAgICAgICAgZmFjdG9yeVtpXShodG1sc2V0W2ldKCksIGNhbGxiYWNrLCBjb250ZXh0LCByZXN1bHRzKSA6XG4gICAgICAgICAgcmVzdWx0cy5jb25jYXQoaHRtbHNldFtpXSgpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGwgPiAxKSB7XG4gICAgICAgIHJlc3VsdHMuc29ydChkb2N1bWVudE9yZGVyKTtcbiAgICAgICAgaGFzRHVwZXMgJiYgKHJlc3VsdHMgPSB1bmlxdWUocmVzdWx0cykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIGZhY3Rvcnk6IGZhY3RvcnksXG4gICAgICAgIGh0bWxzZXQ6IGh0bWxzZXQsXG4gICAgICAgIG5vZGVzZXQ6IG5vZGVzZXQsXG4gICAgICAgIHJlc3VsdHM6IHJlc3VsdHNcbiAgICAgIH07XG5cbiAgICB9LFxuXG4gIC8vIFFTQSBwbGFjZWhvbGRlcnMgdG8gbmF0aXZlIHJlZmVyZW5jZXNcbiAgX2Nsb3Nlc3QsIF9tYXRjaGVzLCBfcXVlcnlTZWxlY3RvciwgX3F1ZXJ5U2VsZWN0b3JBbGwsXG5cbiAgLy8gb3ZlcnJpZGVzIFFTQSBtZXRob2RzIChvbmx5IGZvciBicm93c2VycylcbiAgaW5zdGFsbCA9XG4gICAgZnVuY3Rpb24oYWxsKSB7XG4gICAgICAvLyBzYXZlIHJlZmVyZW5jZXNcbiAgICAgIF9jbG9zZXN0ID0gRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdDtcbiAgICAgIF9tYXRjaGVzID0gRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcztcbiAgICAgIF9xdWVyeVNlbGVjdG9yID0gRG9jdW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I7XG4gICAgICBfcXVlcnlTZWxlY3RvckFsbCA9IERvY3VtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO1xuXG4gICAgICBmdW5jdGlvbiBwYXJzZVFTQXJncygpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA8IDIgP1xuICAgICAgICAgICAgbWV0aG9kLmFwcGx5KHRoaXMsIFsgXSkgOlxuICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPCAzID9cbiAgICAgICAgICAgIG1ldGhvZC5hcHBseSh0aGlzLCBbIGFyZ3VtZW50c1swXSwgdGhpcyBdKSA6XG4gICAgICAgICAgICBtZXRob2QuYXBwbHkodGhpcywgWyBhcmd1bWVudHNbMF0sIHRoaXMsXG4gICAgICAgICAgICAgIHR5cGVvZiBhcmd1bWVudHNbMV0gPT0gJ2Z1bmN0aW9uJyA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCBdKSk7XG4gICAgICB9XG5cbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPVxuICAgICAgICBmdW5jdGlvbiBjbG9zZXN0KCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVFTQXJncy5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykuY29uY2F0KGFuY2VzdG9yKSk7XG4gICAgICAgIH07XG5cbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPVxuICAgICAgICBmdW5jdGlvbiBtYXRjaGVzKCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVFTQXJncy5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykuY29uY2F0KG1hdGNoKSk7XG4gICAgICAgIH07XG5cbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IgPVxuICAgICAgRG9jdW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IgPVxuICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvciA9XG4gICAgICAgIGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlUVNBcmdzLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5jb25jYXQoZmlyc3QpKTtcbiAgICAgICAgfTtcblxuICAgICAgRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCA9XG4gICAgICBEb2N1bWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCA9XG4gICAgICBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsID1cbiAgICAgICAgZnVuY3Rpb24gcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VRU0FyZ3MuYXBwbHkodGhpcywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLmNvbmNhdChzZWxlY3QpKTtcbiAgICAgICAgfTtcblxuICAgICAgaWYgKGFsbCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciBjLCBkLCByLCBzLCB0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgaWYgKC9pZnJhbWUvaS50ZXN0KHQubG9jYWxOYW1lKSkge1xuICAgICAgICAgICAgYyA9ICcoJyArIEV4cG9ydCArICcpKHRoaXMsICcgKyBGYWN0b3J5ICsgJyk7JzsgZCA9IHQuY29udGVudERvY3VtZW50O1xuICAgICAgICAgICAgcyA9IGQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IHMudGV4dENvbnRlbnQgPSBjICsgJ05XLkRvbS5pbnN0YWxsKCknO1xuICAgICAgICAgICAgciA9IGQuZG9jdW1lbnRFbGVtZW50OyByLnJlbW92ZUNoaWxkKHIuaW5zZXJ0QmVmb3JlKHMsIHIuZmlyc3RDaGlsZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gIC8vIHJlc3RvcmUgUVNBIG1ldGhvZHMgKG9ubHkgZm9yIGJyb3dzZXJzKVxuICB1bmluc3RhbGwgPVxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gcmVzdG9yZSByZWZlcmVuY2VzXG4gICAgICBpZiAoX2Nsb3Nlc3QpIHsgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IF9jbG9zZXN0OyB9XG4gICAgICBpZiAoX21hdGNoZXMpIHsgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IF9tYXRjaGVzOyB9XG4gICAgICBpZiAoX3F1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvciA9XG4gICAgICAgIERvY3VtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yID1cbiAgICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvciA9IF9xdWVyeVNlbGVjdG9yO1xuICAgICAgfVxuICAgICAgaWYgKF9xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwgPVxuICAgICAgICBEb2N1bWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCA9XG4gICAgICAgIERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwgPSBfcXVlcnlTZWxlY3RvckFsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gIC8vIGVtcHR5IHNldFxuICBub25lID0gQXJyYXkoKSxcblxuICAvLyBjb250ZXh0XG4gIGxhc3RDb250ZXh0LFxuXG4gIC8vIHNlbGVjdG9yXG4gIGxhc3RNYXRjaGVkLFxuICBsYXN0U2VsZWN0ZWQsXG5cbiAgLy8gY2FjaGVkIGxhbWJkYXNcbiAgbWF0Y2hMYW1iZGFzID0geyB9LFxuICBzZWxlY3RMYW1iZGFzID0geyB9LFxuXG4gIC8vIGNhY2hlZCByZXNvbHZlcnNcbiAgbWF0Y2hSZXNvbHZlcnMgPSB7IH0sXG4gIHNlbGVjdFJlc29sdmVycyA9IHsgfSxcblxuICAvLyBwYXNzZWQgdG8gcmVzb2x2ZXJzXG4gIFNuYXBzaG90ID0ge1xuXG4gICAgZG9jOiBkb2MsXG4gICAgZnJvbTogZG9jLFxuICAgIHJvb3Q6IHJvb3QsXG5cbiAgICBieVRhZzogYnlUYWcsXG5cbiAgICBmaXJzdDogZmlyc3QsXG4gICAgbWF0Y2g6IG1hdGNoLFxuXG4gICAgYW5jZXN0b3I6IGFuY2VzdG9yLFxuXG4gICAgbnRoT2ZUeXBlOiBudGhPZlR5cGUsXG4gICAgbnRoRWxlbWVudDogbnRoRWxlbWVudCxcblxuICAgIGhhc0F0dHJpYnV0ZU5TOiBoYXNBdHRyaWJ1dGVOU1xuICB9LFxuXG4gIC8vIHB1YmxpYyBleHBvcnRlZCBtZXRob2RzL29iamVjdHNcbiAgRG9tID0ge1xuXG4gICAgLy8gZXhwb3J0ZWQgY2FjaGUgb2JqZWN0c1xuXG4gICAgbGFzdE1hdGNoZWQ6IGxhc3RNYXRjaGVkLFxuICAgIGxhc3RTZWxlY3RlZDogbGFzdFNlbGVjdGVkLFxuXG4gICAgbWF0Y2hMYW1iZGFzOiBtYXRjaExhbWJkYXMsXG4gICAgc2VsZWN0TGFtYmRhczogc2VsZWN0TGFtYmRhcyxcblxuICAgIG1hdGNoUmVzb2x2ZXJzOiBtYXRjaFJlc29sdmVycyxcbiAgICBzZWxlY3RSZXNvbHZlcnM6IHNlbGVjdFJlc29sdmVycyxcblxuICAgIC8vIGV4cG9ydGVkIGNvbXBpbGVyIG1hY3Jvc1xuXG4gICAgQ0ZHOiBDRkcsXG5cbiAgICBNX0JPRFk6IE1fQk9EWSxcbiAgICBTX0JPRFk6IFNfQk9EWSxcbiAgICBNX1RFU1Q6IE1fVEVTVCxcbiAgICBTX1RFU1Q6IFNfVEVTVCxcblxuICAgIC8vIGV4cG9ydGVkIGVuZ2luZSBtZXRob2RzXG5cbiAgICBieUlkOiBieUlkLFxuICAgIGJ5VGFnOiBieVRhZyxcbiAgICBieUNsYXNzOiBieUNsYXNzLFxuXG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGZpcnN0OiBmaXJzdCxcbiAgICBzZWxlY3Q6IHNlbGVjdCxcbiAgICBjbG9zZXN0OiBhbmNlc3RvcixcblxuICAgIGNvbXBpbGU6IGNvbXBpbGUsXG4gICAgY29uZmlndXJlOiBjb25maWd1cmUsXG5cbiAgICBlbWl0OiBlbWl0LFxuICAgIENvbmZpZzogQ29uZmlnLFxuICAgIFNuYXBzaG90OiBTbmFwc2hvdCxcblxuICAgIFZlcnNpb246IHZlcnNpb24sXG5cbiAgICBpbnN0YWxsOiBpbnN0YWxsLFxuICAgIHVuaW5zdGFsbDogdW5pbnN0YWxsLFxuXG4gICAgT3BlcmF0b3JzOiBPcGVyYXRvcnMsXG4gICAgU2VsZWN0b3JzOiBTZWxlY3RvcnMsXG5cbiAgICAvLyByZWdpc3RlciBhIG5ldyBzZWxlY3RvciBjb21iaW5hdG9yIHN5bWJvbCBhbmQgaXRzIHJlbGF0ZWQgZnVuY3Rpb24gcmVzb2x2ZXJcbiAgICByZWdpc3RlckNvbWJpbmF0b3I6XG4gICAgICBmdW5jdGlvbihjb21iaW5hdG9yLCByZXNvbHZlcikge1xuICAgICAgICB2YXIgaSA9IDAsIGwgPSBjb21iaW5hdG9yLmxlbmd0aCwgc3ltYm9sO1xuICAgICAgICBmb3IgKDsgbCA+IGk7ICsraSkge1xuICAgICAgICAgIGlmIChjb21iaW5hdG9yW2ldICE9ICc9Jykge1xuICAgICAgICAgICAgc3ltYm9sID0gY29tYmluYXRvcltpXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoQ0ZHLmNvbWJpbmF0b3JzLmluZGV4T2Yoc3ltYm9sKSA8IDApIHtcbiAgICAgICAgICBDRkcuY29tYmluYXRvcnMgPSBDRkcuY29tYmluYXRvcnMucmVwbGFjZSgnXSgnLCBzeW1ib2wgKyAnXSgnKTtcbiAgICAgICAgICBDRkcuY29tYmluYXRvcnMgPSBDRkcuY29tYmluYXRvcnMucmVwbGFjZSgnXSknLCBzeW1ib2wgKyAnXSknKTtcbiAgICAgICAgICBDb21iaW5hdG9yc1tjb21iaW5hdG9yXSA9IHJlc29sdmVyO1xuICAgICAgICAgIHNldElkZW50aWZpZXJTeW50YXgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHRoZSBcXCcnICsgY29tYmluYXRvciArICdcXCcgY29tYmluYXRvciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQuJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAvLyByZWdpc3RlciBhIG5ldyBhdHRyaWJ1dGUgb3BlcmF0b3Igc3ltYm9sIGFuZCBpdHMgcmVsYXRlZCBmdW5jdGlvbiByZXNvbHZlclxuICAgIHJlZ2lzdGVyT3BlcmF0b3I6XG4gICAgICBmdW5jdGlvbihvcGVyYXRvciwgcmVzb2x2ZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBsID0gb3BlcmF0b3IubGVuZ3RoLCBzeW1ib2w7XG4gICAgICAgIGZvciAoOyBsID4gaTsgKytpKSB7XG4gICAgICAgICAgaWYgKG9wZXJhdG9yW2ldICE9ICc9Jykge1xuICAgICAgICAgICAgc3ltYm9sID0gb3BlcmF0b3JbaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENGRy5vcGVyYXRvcnMuaW5kZXhPZihzeW1ib2wpIDwgMCAmJiAhT3BlcmF0b3JzW29wZXJhdG9yXSkge1xuICAgICAgICAgIENGRy5vcGVyYXRvcnMgPSBDRkcub3BlcmF0b3JzLnJlcGxhY2UoJ109Jywgc3ltYm9sICsgJ109Jyk7XG4gICAgICAgICAgT3BlcmF0b3JzW29wZXJhdG9yXSA9IHJlc29sdmVyO1xuICAgICAgICAgIHNldElkZW50aWZpZXJTeW50YXgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHRoZSBcXCcnICsgb3BlcmF0b3IgKyAnXFwnIG9wZXJhdG9yIGlzIGFscmVhZHkgcmVnaXN0ZXJlZC4nKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgIC8vIHJlZ2lzdGVyIGEgbmV3IHNlbGVjdG9yIHN5bWJvbCBhbmQgaXRzIHJlbGF0ZWQgZnVuY3Rpb24gcmVzb2x2ZXJcbiAgICByZWdpc3RlclNlbGVjdG9yOlxuICAgICAgZnVuY3Rpb24obmFtZSwgcmV4cCwgZnVuYykge1xuICAgICAgICBTZWxlY3RvcnNbbmFtZV0gfHwgKFNlbGVjdG9yc1tuYW1lXSA9IHtcbiAgICAgICAgICBFeHByZXNzaW9uOiByZXhwLFxuICAgICAgICAgIENhbGxiYWNrOiBmdW5jXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gIH07XG5cbiAgaW5pdGlhbGl6ZShkb2MpO1xuXG4gIHJldHVybiBEb207XG5cbn0pO1xuIl0sIm5hbWVzIjpbIkV4cG9ydCIsImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lIiwiTlciLCJEb20iLCJGYWN0b3J5IiwidmVyc2lvbiIsImRvYyIsImRvY3VtZW50Iiwicm9vdCIsImRvY3VtZW50RWxlbWVudCIsInNsaWNlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJIU1AiLCJWU1AiLCJXU1AiLCJDRkciLCJvcGVyYXRvcnMiLCJjb21iaW5hdG9ycyIsIk5PVCIsImRvdWJsZV9lbmMiLCJzaW5nbGVfZW5jIiwicGFyZW5zX2VuYyIsInNxdWFyZV9lbmMiLCJSRVgiLCJIYXNFc2NhcGVzIiwiUmVnRXhwIiwiSGV4TnVtYmVycyIsIkVzY09yUXVvdGUiLCJSZWdFeHBDaGFyIiwiVHJpbVNwYWNlcyIsIlNwbGl0R3JvdXAiLCJDb21tYUdyb3VwIiwiRml4RXNjYXBlcyIsIkNvbWJpbmVXU1AiLCJUYWJDaGFyV1NQIiwiUHNldWRvc1dTUCIsIlNURCIsImNvbWJpbmF0b3IiLCJhcGltZXRob2RzIiwibmFtZXNwYWNlcyIsIkdST1VQUyIsImxpbmd1aXN0aWMiLCJsb2dpY2Fsc2VsIiwidHJlZXN0cnVjdCIsImxvY2F0aW9ucGMiLCJ1c2VyYWN0aW9uIiwic3RydWN0dXJhbCIsImlucHV0c3RhdGUiLCJpbnB1dHZhbHVlIiwicHNldWRvX25vcCIsInBzZXVkb19zbmciLCJwc2V1ZG9fZGJsIiwiUGF0dGVybnMiLCJjaGlsZHJlbiIsImFkamFjZW50IiwicmVsYXRpdmUiLCJhbmNlc3RvciIsInVuaXZlcnNhbCIsIm5hbWVzcGFjZSIsIlJUTCIsInFzTm90QXJncyIsInFzSW52YWxpZCIsInJlTnRoRWxlbSIsInJlTnRoVHlwZSIsInJlT3B0aW1pemVyIiwicmVWYWxpZGF0b3IiLCJDb25maWciLCJJRFNfRFVQRVMiLCJOT05ESUdJVFMiLCJMT0dFUlJPUlMiLCJWRVJCT1NJVFkiLCJOQU1FU1BBQ0UiLCJRVUlSS1NfTU9ERSIsIkhUTUxfRE9DVU1FTlQiLCJBVFRSX1NURF9PUFMiLCJIVE1MX1RBQkxFIiwiQ29tYmluYXRvcnMiLCJTZWxlY3RvcnMiLCJPcGVyYXRvcnMiLCJwMSIsInAyIiwicDMiLCJjb25jYXRDYWxsIiwibm9kZXMiLCJjYWxsYmFjayIsImkiLCJsIiwibGVuZ3RoIiwibGlzdCIsImNvbmNhdExpc3QiLCJkb2N1bWVudE9yZGVyIiwiYSIsImIiLCJoYXNEdXBlcyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwidW5pcXVlIiwiaiIsInN3aXRjaENvbnRleHQiLCJjb250ZXh0IiwiZm9yY2UiLCJvbGREb2MiLCJvd25lckRvY3VtZW50IiwiaXNIVE1MIiwiY29tcGF0TW9kZSIsImluZGV4T2YiLCJuYW1lc3BhY2VVUkkiLCJTbmFwc2hvdCIsImZyb20iLCJjb2RlUG9pbnRUb1VURjE2IiwiY29kZVBvaW50IiwibG93SGV4IiwidG9TdHJpbmciLCJzdWJzdHIiLCJzdHJpbmdGcm9tQ29kZVBvaW50IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZnJvbUNvZGVQb2ludCIsImNvbnZlcnRFc2NhcGVzIiwic3RyIiwidGVzdCIsInJlcGxhY2UiLCJzdWJzdHJpbmciLCJwYXJzZUludCIsInVuZXNjYXBlSWRlbnRpZmllciIsIm1ldGhvZCIsImNvbXBhdCIsImMiLCJuIiwiZSIsImYiLCJieUlkIiwiYnlUYWciLCJieUNsYXNzIiwiYnlJZFJhdyIsImlkIiwibm9kZSIsIm5leHQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIm5leHRFbGVtZW50U2libGluZyIsInBhcmVudEVsZW1lbnQiLCJhcGkiLCJub25lIiwiYWxsIiwibm9kZVR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJ0YWciLCJjYWxsIiwidG9Mb3dlckNhc2UiLCJsb2NhbE5hbWUiLCJjbHMiLCJyZUNscyIsImNsYXNzTmFtZSIsImhhc0F0dHJpYnV0ZU5TIiwibmFtZSIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsIm50aEVsZW1lbnQiLCJpZHgiLCJsZW4iLCJzZXQiLCJwYXJlbnQiLCJ1bmRlZmluZWQiLCJwYXJlbnRzIiwiZWxlbWVudCIsImRpciIsImsiLCJudGhPZlR5cGUiLCJPYmplY3QiLCJjb250ZW50VHlwZSIsImNyZWF0ZUVsZW1lbnQiLCJjb25maWd1cmUiLCJvcHRpb24iLCJjbGVhciIsIm1hdGNoUmVzb2x2ZXJzIiwic2VsZWN0UmVzb2x2ZXJzIiwic2V0SWRlbnRpZmllclN5bnRheCIsImVtaXQiLCJtZXNzYWdlIiwicHJvdG8iLCJlcnIiLCJET01FeGNlcHRpb24iLCJjb25zb2xlIiwibG9nIiwiaW5pdGlhbGl6ZSIsImxhc3RDb250ZXh0IiwiaWRlbnRpZmllciIsInBzZXVkb25hbWVzIiwicHNldWRvcGFybXMiLCJkb3VibGVxdW90ZSIsInNpbmdsZXF1b3RlIiwiYXR0cnBhcnNlciIsImF0dHJ2YWx1ZXMiLCJhdHRyaWJ1dGVzIiwiYXR0cm1hdGNoZXIiLCJwc2V1ZG9jbGFzcyIsInN0YW5kYXJkVmFsaWRhdG9yIiwidGFnTmFtZSIsImF0dHJpYnV0ZSIsIkZfSU5JVCIsIlNfSEVBRCIsIk1fSEVBRCIsIlNfTE9PUCIsIk5fTE9PUCIsIk1fTE9PUCIsIlNfQk9EWSIsIk5fQk9EWSIsIk1fQk9EWSIsIlNfVEFJTCIsIk1fVEFJTCIsIlNfVEVTVCIsIk5fVEVTVCIsIk1fVEVTVCIsIlNfVkFSUyIsIk1fVkFSUyIsImNvbXBpbGUiLCJzZWxlY3RvciIsIm1vZGUiLCJ0b2tlbiIsImhlYWQiLCJsb29wIiwibWFjcm8iLCJzb3VyY2UiLCJ2YXJzIiwic2VsZWN0TGFtYmRhcyIsIm1hdGNoTGFtYmRhcyIsImNvbXBpbGVTZWxlY3RvciIsImluY2x1ZGVzIiwiam9pbiIsIkZ1bmN0aW9uIiwiZXhwcmVzc2lvbiIsIk5TIiwicmVmZXJlbmNlRWxlbWVudCIsImV4cHIiLCJtYXRjaCIsInJlc3VsdCIsInN0YXR1cyIsInN5bWJvbCIsInR5cGUiLCJzZWxlY3Rvcl9zdHJpbmciLCJsYXN0U2VsZWN0ZWQiLCJsYXN0TWF0Y2hlZCIsInNlbGVjdG9yX3JlY3Vyc2lvbl9sYWJlbCIsInByZWZpeCIsInNwbGl0IiwiTWF0aCIsImFicyIsImhhc0ZvY3VzIiwiRXhwcmVzc2lvbiIsIkNhbGxiYWNrIiwibW9kdmFyIiwicG9wIiwibWFrZXJlZiIsInNlbGVjdG9ycyIsImNsYXNzTGlzdCIsIl9jbG9zZXN0IiwibWF0Y2hfYXNzZXJ0IiwiciIsIm1hdGNoX2NvbGxlY3QiLCJfbWF0Y2hlcyIsImV4cHJlc3Npb25zIiwicGFyc2VkIiwiYXJndW1lbnRzIiwiVHlwZUVycm9yIiwiZmlyc3QiLCJfcXVlcnlTZWxlY3RvciIsInNlbGVjdCIsImZpcnN0TWF0Y2giLCJfcXVlcnlTZWxlY3RvckFsbCIsInJlc29sdmVyIiwiaCIsImh0bWxzZXQiLCJub2Rlc2V0IiwiY29uY2F0Iiwic29ydCIsImNvbGxlY3QiLCJyZXN1bHRzIiwib3B0aW1pemUiLCJpbmRleCIsImNoYXJBdCIsInNlZW4iLCJvcHRpbWl6ZWQiLCJpbnN0YWxsIiwiRWxlbWVudCIsImNsb3Nlc3QiLCJtYXRjaGVzIiwiRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInBhcnNlUVNBcmdzIiwiYXBwbHkiLCJEb2N1bWVudEZyYWdtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImQiLCJzIiwidCIsInRhcmdldCIsImNvbnRlbnREb2N1bWVudCIsInRleHRDb250ZW50IiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwidW5pbnN0YWxsIiwiVmVyc2lvbiIsInJlZ2lzdGVyQ29tYmluYXRvciIsIndhcm4iLCJyZWdpc3Rlck9wZXJhdG9yIiwib3BlcmF0b3IiLCJyZWdpc3RlclNlbGVjdG9yIiwicmV4cCIsImZ1bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nwsapi/src/nwsapi.js\n");

/***/ })

};
;