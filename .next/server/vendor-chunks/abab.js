"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/abab";
exports.ids = ["vendor-chunks/abab"];
exports.modules = {

/***/ "(ssr)/./node_modules/abab/index.js":
/*!************************************!*\
  !*** ./node_modules/abab/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst atob = __webpack_require__(/*! ./lib/atob */ \"(ssr)/./node_modules/abab/lib/atob.js\");\nconst btoa = __webpack_require__(/*! ./lib/btoa */ \"(ssr)/./node_modules/abab/lib/btoa.js\");\nmodule.exports = {\n    atob,\n    btoa\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJhYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDLHlEQUFZO0FBQ2pDLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDLHlEQUFZO0FBRWpDRSxPQUFPQyxPQUFPLEdBQUc7SUFDZko7SUFDQUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RpZ21hLy4vbm9kZV9tb2R1bGVzL2FiYWIvaW5kZXguanM/NjdkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgYXRvYiA9IHJlcXVpcmUoXCIuL2xpYi9hdG9iXCIpO1xuY29uc3QgYnRvYSA9IHJlcXVpcmUoXCIuL2xpYi9idG9hXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXRvYixcbiAgYnRvYVxufTtcbiJdLCJuYW1lcyI6WyJhdG9iIiwicmVxdWlyZSIsImJ0b2EiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abab/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/abab/lib/atob.js":
/*!***************************************!*\
  !*** ./node_modules/abab/lib/atob.js ***!
  \***************************************/
/***/ ((module) => {

eval("\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */ function atob(data) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    // Web IDL requires DOMStrings to just be converted using ECMAScript\n    // ToString, which in our case amounts to using a template literal.\n    data = `${data}`;\n    // \"Remove all ASCII whitespace from data.\"\n    data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n    // \"If data's length divides by 4 leaving no remainder, then: if data ends\n    // with one or two U+003D (=) code points, then remove them from data.\"\n    if (data.length % 4 === 0) {\n        data = data.replace(/==?$/, \"\");\n    }\n    // \"If data's length divides by 4 leaving a remainder of 1, then return\n    // failure.\"\n    //\n    // \"If data contains a code point that is not one of\n    //\n    // U+002B (+)\n    // U+002F (/)\n    // ASCII alphanumeric\n    //\n    // then return failure.\"\n    if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n        return null;\n    }\n    // \"Let output be an empty byte sequence.\"\n    let output = \"\";\n    // \"Let buffer be an empty buffer that can have bits appended to it.\"\n    //\n    // We append bits via left-shift and or.  accumulatedBits is used to track\n    // when we've gotten to 24 bits.\n    let buffer = 0;\n    let accumulatedBits = 0;\n    // \"Let position be a position variable for data, initially pointing at the\n    // start of data.\"\n    //\n    // \"While position does not point past the end of data:\"\n    for(let i = 0; i < data.length; i++){\n        // \"Find the code point pointed to by position in the second column of\n        // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n        // the first cell of the same row.\n        //\n        // \"Append to buffer the six bits corresponding to n, most significant bit\n        // first.\"\n        //\n        // atobLookup() implements the table from RFC 4648.\n        buffer <<= 6;\n        buffer |= atobLookup(data[i]);\n        accumulatedBits += 6;\n        // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n        // big-endian numbers. Append three bytes with values equal to those\n        // numbers to output, in the same order, and then empty buffer.\"\n        if (accumulatedBits === 24) {\n            output += String.fromCharCode((buffer & 0xff0000) >> 16);\n            output += String.fromCharCode((buffer & 0xff00) >> 8);\n            output += String.fromCharCode(buffer & 0xff);\n            buffer = accumulatedBits = 0;\n        }\n    // \"Advance position by 1.\"\n    }\n    // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n    // 12 bits, then discard the last four and interpret the remaining eight as\n    // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n    // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n    // the one or two bytes with values equal to those one or two numbers to\n    // output, in the same order.\"\n    if (accumulatedBits === 12) {\n        buffer >>= 4;\n        output += String.fromCharCode(buffer);\n    } else if (accumulatedBits === 18) {\n        buffer >>= 2;\n        output += String.fromCharCode((buffer & 0xff00) >> 8);\n        output += String.fromCharCode(buffer & 0xff);\n    }\n    // \"Return output.\"\n    return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */ const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction atobLookup(chr) {\n    const index = keystr.indexOf(chr);\n    // Throw exception if character is not in the lookup string; should not be hit in tests\n    return index < 0 ? undefined : index;\n}\nmodule.exports = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJhYi9saWIvYXRvYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Q0FHQyxHQUNELFNBQVNBLEtBQUtDLElBQUk7SUFDaEIsSUFBSUMsVUFBVUMsTUFBTSxLQUFLLEdBQUc7UUFDMUIsTUFBTSxJQUFJQyxVQUFVO0lBQ3RCO0lBRUEsb0VBQW9FO0lBQ3BFLG1FQUFtRTtJQUNuRUgsT0FBTyxDQUFDLEVBQUVBLEtBQUssQ0FBQztJQUNoQiwyQ0FBMkM7SUFDM0NBLE9BQU9BLEtBQUtJLE9BQU8sQ0FBQyxnQkFBZ0I7SUFDcEMsMEVBQTBFO0lBQzFFLHVFQUF1RTtJQUN2RSxJQUFJSixLQUFLRSxNQUFNLEdBQUcsTUFBTSxHQUFHO1FBQ3pCRixPQUFPQSxLQUFLSSxPQUFPLENBQUMsUUFBUTtJQUM5QjtJQUNBLHVFQUF1RTtJQUN2RSxZQUFZO0lBQ1osRUFBRTtJQUNGLG9EQUFvRDtJQUNwRCxFQUFFO0lBQ0YsYUFBYTtJQUNiLGFBQWE7SUFDYixxQkFBcUI7SUFDckIsRUFBRTtJQUNGLHdCQUF3QjtJQUN4QixJQUFJSixLQUFLRSxNQUFNLEdBQUcsTUFBTSxLQUFLLGlCQUFpQkcsSUFBSSxDQUFDTCxPQUFPO1FBQ3hELE9BQU87SUFDVDtJQUNBLDBDQUEwQztJQUMxQyxJQUFJTSxTQUFTO0lBQ2IscUVBQXFFO0lBQ3JFLEVBQUU7SUFDRiwwRUFBMEU7SUFDMUUsZ0NBQWdDO0lBQ2hDLElBQUlDLFNBQVM7SUFDYixJQUFJQyxrQkFBa0I7SUFDdEIsMkVBQTJFO0lBQzNFLGtCQUFrQjtJQUNsQixFQUFFO0lBQ0Ysd0RBQXdEO0lBQ3hELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJVCxLQUFLRSxNQUFNLEVBQUVPLElBQUs7UUFDcEMsc0VBQXNFO1FBQ3RFLDBFQUEwRTtRQUMxRSxrQ0FBa0M7UUFDbEMsRUFBRTtRQUNGLDBFQUEwRTtRQUMxRSxVQUFVO1FBQ1YsRUFBRTtRQUNGLG1EQUFtRDtRQUNuREYsV0FBVztRQUNYQSxVQUFVRyxXQUFXVixJQUFJLENBQUNTLEVBQUU7UUFDNUJELG1CQUFtQjtRQUNuQixvRUFBb0U7UUFDcEUsb0VBQW9FO1FBQ3BFLGdFQUFnRTtRQUNoRSxJQUFJQSxvQkFBb0IsSUFBSTtZQUMxQkYsVUFBVUssT0FBT0MsWUFBWSxDQUFDLENBQUNMLFNBQVMsUUFBTyxLQUFNO1lBQ3JERCxVQUFVSyxPQUFPQyxZQUFZLENBQUMsQ0FBQ0wsU0FBUyxNQUFLLEtBQU07WUFDbkRELFVBQVVLLE9BQU9DLFlBQVksQ0FBQ0wsU0FBUztZQUN2Q0EsU0FBU0Msa0JBQWtCO1FBQzdCO0lBQ0EsMkJBQTJCO0lBQzdCO0lBQ0EsNEVBQTRFO0lBQzVFLDJFQUEyRTtJQUMzRSw0RUFBNEU7SUFDNUUsNkVBQTZFO0lBQzdFLHdFQUF3RTtJQUN4RSw4QkFBOEI7SUFDOUIsSUFBSUEsb0JBQW9CLElBQUk7UUFDMUJELFdBQVc7UUFDWEQsVUFBVUssT0FBT0MsWUFBWSxDQUFDTDtJQUNoQyxPQUFPLElBQUlDLG9CQUFvQixJQUFJO1FBQ2pDRCxXQUFXO1FBQ1hELFVBQVVLLE9BQU9DLFlBQVksQ0FBQyxDQUFDTCxTQUFTLE1BQUssS0FBTTtRQUNuREQsVUFBVUssT0FBT0MsWUFBWSxDQUFDTCxTQUFTO0lBQ3pDO0lBQ0EsbUJBQW1CO0lBQ25CLE9BQU9EO0FBQ1Q7QUFDQTs7O0NBR0MsR0FFRCxNQUFNTyxTQUNKO0FBRUYsU0FBU0gsV0FBV0ksR0FBRztJQUNyQixNQUFNQyxRQUFRRixPQUFPRyxPQUFPLENBQUNGO0lBQzdCLHVGQUF1RjtJQUN2RixPQUFPQyxRQUFRLElBQUlFLFlBQVlGO0FBQ2pDO0FBRUFHLE9BQU9DLE9BQU8sR0FBR3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvYWJhYi9saWIvYXRvYi5qcz81NDU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIGF0b2IoKSBhY2NvcmRpbmcgdG8gdGhlIEhUTUwgYW5kIEluZnJhIHNwZWNzLCBleGNlcHQgdGhhdFxuICogaW5zdGVhZCBvZiB0aHJvd2luZyBJTlZBTElEX0NIQVJBQ1RFUl9FUlIgd2UgcmV0dXJuIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGF0b2IoZGF0YSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICB9XG5cbiAgLy8gV2ViIElETCByZXF1aXJlcyBET01TdHJpbmdzIHRvIGp1c3QgYmUgY29udmVydGVkIHVzaW5nIEVDTUFTY3JpcHRcbiAgLy8gVG9TdHJpbmcsIHdoaWNoIGluIG91ciBjYXNlIGFtb3VudHMgdG8gdXNpbmcgYSB0ZW1wbGF0ZSBsaXRlcmFsLlxuICBkYXRhID0gYCR7ZGF0YX1gO1xuICAvLyBcIlJlbW92ZSBhbGwgQVNDSUkgd2hpdGVzcGFjZSBmcm9tIGRhdGEuXCJcbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvWyBcXHRcXG5cXGZcXHJdL2csIFwiXCIpO1xuICAvLyBcIklmIGRhdGEncyBsZW5ndGggZGl2aWRlcyBieSA0IGxlYXZpbmcgbm8gcmVtYWluZGVyLCB0aGVuOiBpZiBkYXRhIGVuZHNcbiAgLy8gd2l0aCBvbmUgb3IgdHdvIFUrMDAzRCAoPSkgY29kZSBwb2ludHMsIHRoZW4gcmVtb3ZlIHRoZW0gZnJvbSBkYXRhLlwiXG4gIGlmIChkYXRhLmxlbmd0aCAlIDQgPT09IDApIHtcbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC89PT8kLywgXCJcIik7XG4gIH1cbiAgLy8gXCJJZiBkYXRhJ3MgbGVuZ3RoIGRpdmlkZXMgYnkgNCBsZWF2aW5nIGEgcmVtYWluZGVyIG9mIDEsIHRoZW4gcmV0dXJuXG4gIC8vIGZhaWx1cmUuXCJcbiAgLy9cbiAgLy8gXCJJZiBkYXRhIGNvbnRhaW5zIGEgY29kZSBwb2ludCB0aGF0IGlzIG5vdCBvbmUgb2ZcbiAgLy9cbiAgLy8gVSswMDJCICgrKVxuICAvLyBVKzAwMkYgKC8pXG4gIC8vIEFTQ0lJIGFscGhhbnVtZXJpY1xuICAvL1xuICAvLyB0aGVuIHJldHVybiBmYWlsdXJlLlwiXG4gIGlmIChkYXRhLmxlbmd0aCAlIDQgPT09IDEgfHwgL1teKy8wLTlBLVphLXpdLy50ZXN0KGRhdGEpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gXCJMZXQgb3V0cHV0IGJlIGFuIGVtcHR5IGJ5dGUgc2VxdWVuY2UuXCJcbiAgbGV0IG91dHB1dCA9IFwiXCI7XG4gIC8vIFwiTGV0IGJ1ZmZlciBiZSBhbiBlbXB0eSBidWZmZXIgdGhhdCBjYW4gaGF2ZSBiaXRzIGFwcGVuZGVkIHRvIGl0LlwiXG4gIC8vXG4gIC8vIFdlIGFwcGVuZCBiaXRzIHZpYSBsZWZ0LXNoaWZ0IGFuZCBvci4gIGFjY3VtdWxhdGVkQml0cyBpcyB1c2VkIHRvIHRyYWNrXG4gIC8vIHdoZW4gd2UndmUgZ290dGVuIHRvIDI0IGJpdHMuXG4gIGxldCBidWZmZXIgPSAwO1xuICBsZXQgYWNjdW11bGF0ZWRCaXRzID0gMDtcbiAgLy8gXCJMZXQgcG9zaXRpb24gYmUgYSBwb3NpdGlvbiB2YXJpYWJsZSBmb3IgZGF0YSwgaW5pdGlhbGx5IHBvaW50aW5nIGF0IHRoZVxuICAvLyBzdGFydCBvZiBkYXRhLlwiXG4gIC8vXG4gIC8vIFwiV2hpbGUgcG9zaXRpb24gZG9lcyBub3QgcG9pbnQgcGFzdCB0aGUgZW5kIG9mIGRhdGE6XCJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gXCJGaW5kIHRoZSBjb2RlIHBvaW50IHBvaW50ZWQgdG8gYnkgcG9zaXRpb24gaW4gdGhlIHNlY29uZCBjb2x1bW4gb2ZcbiAgICAvLyBUYWJsZSAxOiBUaGUgQmFzZSA2NCBBbHBoYWJldCBvZiBSRkMgNDY0OC4gTGV0IG4gYmUgdGhlIG51bWJlciBnaXZlbiBpblxuICAgIC8vIHRoZSBmaXJzdCBjZWxsIG9mIHRoZSBzYW1lIHJvdy5cbiAgICAvL1xuICAgIC8vIFwiQXBwZW5kIHRvIGJ1ZmZlciB0aGUgc2l4IGJpdHMgY29ycmVzcG9uZGluZyB0byBuLCBtb3N0IHNpZ25pZmljYW50IGJpdFxuICAgIC8vIGZpcnN0LlwiXG4gICAgLy9cbiAgICAvLyBhdG9iTG9va3VwKCkgaW1wbGVtZW50cyB0aGUgdGFibGUgZnJvbSBSRkMgNDY0OC5cbiAgICBidWZmZXIgPDw9IDY7XG4gICAgYnVmZmVyIHw9IGF0b2JMb29rdXAoZGF0YVtpXSk7XG4gICAgYWNjdW11bGF0ZWRCaXRzICs9IDY7XG4gICAgLy8gXCJJZiBidWZmZXIgaGFzIGFjY3VtdWxhdGVkIDI0IGJpdHMsIGludGVycHJldCB0aGVtIGFzIHRocmVlIDgtYml0XG4gICAgLy8gYmlnLWVuZGlhbiBudW1iZXJzLiBBcHBlbmQgdGhyZWUgYnl0ZXMgd2l0aCB2YWx1ZXMgZXF1YWwgdG8gdGhvc2VcbiAgICAvLyBudW1iZXJzIHRvIG91dHB1dCwgaW4gdGhlIHNhbWUgb3JkZXIsIGFuZCB0aGVuIGVtcHR5IGJ1ZmZlci5cIlxuICAgIGlmIChhY2N1bXVsYXRlZEJpdHMgPT09IDI0KSB7XG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYnVmZmVyICYgMHhmZjAwMDApID4+IDE2KTtcbiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChidWZmZXIgJiAweGZmMDApID4+IDgpO1xuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmZmVyICYgMHhmZik7XG4gICAgICBidWZmZXIgPSBhY2N1bXVsYXRlZEJpdHMgPSAwO1xuICAgIH1cbiAgICAvLyBcIkFkdmFuY2UgcG9zaXRpb24gYnkgMS5cIlxuICB9XG4gIC8vIFwiSWYgYnVmZmVyIGlzIG5vdCBlbXB0eSwgaXQgY29udGFpbnMgZWl0aGVyIDEyIG9yIDE4IGJpdHMuIElmIGl0IGNvbnRhaW5zXG4gIC8vIDEyIGJpdHMsIHRoZW4gZGlzY2FyZCB0aGUgbGFzdCBmb3VyIGFuZCBpbnRlcnByZXQgdGhlIHJlbWFpbmluZyBlaWdodCBhc1xuICAvLyBhbiA4LWJpdCBiaWctZW5kaWFuIG51bWJlci4gSWYgaXQgY29udGFpbnMgMTggYml0cywgdGhlbiBkaXNjYXJkIHRoZSBsYXN0XG4gIC8vIHR3byBhbmQgaW50ZXJwcmV0IHRoZSByZW1haW5pbmcgMTYgYXMgdHdvIDgtYml0IGJpZy1lbmRpYW4gbnVtYmVycy4gQXBwZW5kXG4gIC8vIHRoZSBvbmUgb3IgdHdvIGJ5dGVzIHdpdGggdmFsdWVzIGVxdWFsIHRvIHRob3NlIG9uZSBvciB0d28gbnVtYmVycyB0b1xuICAvLyBvdXRwdXQsIGluIHRoZSBzYW1lIG9yZGVyLlwiXG4gIGlmIChhY2N1bXVsYXRlZEJpdHMgPT09IDEyKSB7XG4gICAgYnVmZmVyID4+PSA0O1xuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZmZlcik7XG4gIH0gZWxzZSBpZiAoYWNjdW11bGF0ZWRCaXRzID09PSAxOCkge1xuICAgIGJ1ZmZlciA+Pj0gMjtcbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYnVmZmVyICYgMHhmZjAwKSA+PiA4KTtcbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXIgJiAweGZmKTtcbiAgfVxuICAvLyBcIlJldHVybiBvdXRwdXQuXCJcbiAgcmV0dXJuIG91dHB1dDtcbn1cbi8qKlxuICogQSBsb29rdXAgdGFibGUgZm9yIGF0b2IoKSwgd2hpY2ggY29udmVydHMgYW4gQVNDSUkgY2hhcmFjdGVyIHRvIHRoZVxuICogY29ycmVzcG9uZGluZyBzaXgtYml0IG51bWJlci5cbiAqL1xuXG5jb25zdCBrZXlzdHIgPVxuICBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcblxuZnVuY3Rpb24gYXRvYkxvb2t1cChjaHIpIHtcbiAgY29uc3QgaW5kZXggPSBrZXlzdHIuaW5kZXhPZihjaHIpO1xuICAvLyBUaHJvdyBleGNlcHRpb24gaWYgY2hhcmFjdGVyIGlzIG5vdCBpbiB0aGUgbG9va3VwIHN0cmluZzsgc2hvdWxkIG5vdCBiZSBoaXQgaW4gdGVzdHNcbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF0b2I7XG4iXSwibmFtZXMiOlsiYXRvYiIsImRhdGEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJyZXBsYWNlIiwidGVzdCIsIm91dHB1dCIsImJ1ZmZlciIsImFjY3VtdWxhdGVkQml0cyIsImkiLCJhdG9iTG9va3VwIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwia2V5c3RyIiwiY2hyIiwiaW5kZXgiLCJpbmRleE9mIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abab/lib/atob.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/abab/lib/btoa.js":
/*!***************************************!*\
  !*** ./node_modules/abab/lib/btoa.js ***!
  \***************************************/
/***/ ((module) => {

eval("\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */ function btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for(i = 0; i < s.length; i++){\n        if (s.charCodeAt(i) > 255) {\n            return null;\n        }\n    }\n    let out = \"\";\n    for(i = 0; i < s.length; i += 3){\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for(let j = 0; j < groupsOfSix.length; j++){\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            } else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */ const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction btoaLookup(index) {\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\nmodule.exports = btoa;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJhYi9saWIvYnRvYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Q0FHQyxHQUNELFNBQVNBLEtBQUtDLENBQUM7SUFDYixJQUFJQyxVQUFVQyxNQUFNLEtBQUssR0FBRztRQUMxQixNQUFNLElBQUlDLFVBQVU7SUFDdEI7SUFFQSxJQUFJQztJQUNKLDRDQUE0QztJQUM1Q0osSUFBSSxDQUFDLEVBQUVBLEVBQUUsQ0FBQztJQUNWLDJFQUEyRTtJQUMzRSx3RUFBd0U7SUFDeEUsSUFBS0ksSUFBSSxHQUFHQSxJQUFJSixFQUFFRSxNQUFNLEVBQUVFLElBQUs7UUFDN0IsSUFBSUosRUFBRUssVUFBVSxDQUFDRCxLQUFLLEtBQUs7WUFDekIsT0FBTztRQUNUO0lBQ0Y7SUFDQSxJQUFJRSxNQUFNO0lBQ1YsSUFBS0YsSUFBSSxHQUFHQSxJQUFJSixFQUFFRSxNQUFNLEVBQUVFLEtBQUssRUFBRztRQUNoQyxNQUFNRyxjQUFjO1lBQUNDO1lBQVdBO1lBQVdBO1lBQVdBO1NBQVU7UUFDaEVELFdBQVcsQ0FBQyxFQUFFLEdBQUdQLEVBQUVLLFVBQVUsQ0FBQ0QsTUFBTTtRQUNwQ0csV0FBVyxDQUFDLEVBQUUsR0FBRyxDQUFDUCxFQUFFSyxVQUFVLENBQUNELEtBQUssSUFBRyxLQUFNO1FBQzdDLElBQUlKLEVBQUVFLE1BQU0sR0FBR0UsSUFBSSxHQUFHO1lBQ3BCRyxXQUFXLENBQUMsRUFBRSxJQUFJUCxFQUFFSyxVQUFVLENBQUNELElBQUksTUFBTTtZQUN6Q0csV0FBVyxDQUFDLEVBQUUsR0FBRyxDQUFDUCxFQUFFSyxVQUFVLENBQUNELElBQUksS0FBSyxJQUFHLEtBQU07UUFDbkQ7UUFDQSxJQUFJSixFQUFFRSxNQUFNLEdBQUdFLElBQUksR0FBRztZQUNwQkcsV0FBVyxDQUFDLEVBQUUsSUFBSVAsRUFBRUssVUFBVSxDQUFDRCxJQUFJLE1BQU07WUFDekNHLFdBQVcsQ0FBQyxFQUFFLEdBQUdQLEVBQUVLLFVBQVUsQ0FBQ0QsSUFBSSxLQUFLO1FBQ3pDO1FBQ0EsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlGLFlBQVlMLE1BQU0sRUFBRU8sSUFBSztZQUMzQyxJQUFJLE9BQU9GLFdBQVcsQ0FBQ0UsRUFBRSxLQUFLLGFBQWE7Z0JBQ3pDSCxPQUFPO1lBQ1QsT0FBTztnQkFDTEEsT0FBT0ksV0FBV0gsV0FBVyxDQUFDRSxFQUFFO1lBQ2xDO1FBQ0Y7SUFDRjtJQUNBLE9BQU9IO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxNQUFNSyxTQUNKO0FBRUYsU0FBU0QsV0FBV0UsS0FBSztJQUN2QixJQUFJQSxTQUFTLEtBQUtBLFFBQVEsSUFBSTtRQUM1QixPQUFPRCxNQUFNLENBQUNDLE1BQU07SUFDdEI7SUFFQSwyRUFBMkU7SUFDM0UsT0FBT0o7QUFDVDtBQUVBSyxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvYWJhYi9saWIvYnRvYS5qcz8xNjIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIGJ0b2EoKSBhcyBkZWZpbmVkIGJ5IHRoZSBIVE1MIGFuZCBJbmZyYSBzcGVjcywgd2hpY2ggbW9zdGx5IGp1c3QgcmVmZXJlbmNlc1xuICogUkZDIDQ2NDguXG4gKi9cbmZ1bmN0aW9uIGJ0b2Eocykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICB9XG5cbiAgbGV0IGk7XG4gIC8vIFN0cmluZyBjb252ZXJzaW9uIGFzIHJlcXVpcmVkIGJ5IFdlYiBJREwuXG4gIHMgPSBgJHtzfWA7XG4gIC8vIFwiVGhlIGJ0b2EoKSBtZXRob2QgbXVzdCB0aHJvdyBhbiBcIkludmFsaWRDaGFyYWN0ZXJFcnJvclwiIERPTUV4Y2VwdGlvbiBpZlxuICAvLyBkYXRhIGNvbnRhaW5zIGFueSBjaGFyYWN0ZXIgd2hvc2UgY29kZSBwb2ludCBpcyBncmVhdGVyIHRoYW4gVSswMEZGLlwiXG4gIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSA+IDI1NSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCBvdXQgPSBcIlwiO1xuICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNvbnN0IGdyb3Vwc09mU2l4ID0gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZF07XG4gICAgZ3JvdXBzT2ZTaXhbMF0gPSBzLmNoYXJDb2RlQXQoaSkgPj4gMjtcbiAgICBncm91cHNPZlNpeFsxXSA9IChzLmNoYXJDb2RlQXQoaSkgJiAweDAzKSA8PCA0O1xuICAgIGlmIChzLmxlbmd0aCA+IGkgKyAxKSB7XG4gICAgICBncm91cHNPZlNpeFsxXSB8PSBzLmNoYXJDb2RlQXQoaSArIDEpID4+IDQ7XG4gICAgICBncm91cHNPZlNpeFsyXSA9IChzLmNoYXJDb2RlQXQoaSArIDEpICYgMHgwZikgPDwgMjtcbiAgICB9XG4gICAgaWYgKHMubGVuZ3RoID4gaSArIDIpIHtcbiAgICAgIGdyb3Vwc09mU2l4WzJdIHw9IHMuY2hhckNvZGVBdChpICsgMikgPj4gNjtcbiAgICAgIGdyb3Vwc09mU2l4WzNdID0gcy5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4M2Y7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBzT2ZTaXgubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICh0eXBlb2YgZ3JvdXBzT2ZTaXhbal0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgb3V0ICs9IFwiPVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9IGJ0b2FMb29rdXAoZ3JvdXBzT2ZTaXhbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIExvb2t1cCB0YWJsZSBmb3IgYnRvYSgpLCB3aGljaCBjb252ZXJ0cyBhIHNpeC1iaXQgbnVtYmVyIGludG8gdGhlXG4gKiBjb3JyZXNwb25kaW5nIEFTQ0lJIGNoYXJhY3Rlci5cbiAqL1xuY29uc3Qga2V5c3RyID1cbiAgXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbmZ1bmN0aW9uIGJ0b2FMb29rdXAoaW5kZXgpIHtcbiAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCA2NCkge1xuICAgIHJldHVybiBrZXlzdHJbaW5kZXhdO1xuICB9XG5cbiAgLy8gVGhyb3cgSU5WQUxJRF9DSEFSQUNURVJfRVJSIGV4Y2VwdGlvbiBoZXJlIC0tIHdvbid0IGJlIGhpdCBpbiB0aGUgdGVzdHMuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiJdLCJuYW1lcyI6WyJidG9hIiwicyIsImFyZ3VtZW50cyIsImxlbmd0aCIsIlR5cGVFcnJvciIsImkiLCJjaGFyQ29kZUF0Iiwib3V0IiwiZ3JvdXBzT2ZTaXgiLCJ1bmRlZmluZWQiLCJqIiwiYnRvYUxvb2t1cCIsImtleXN0ciIsImluZGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abab/lib/btoa.js\n");

/***/ })

};
;