"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/symbol-tree";
exports.ids = ["vendor-chunks/symbol-tree"];
exports.modules = {

/***/ "(ssr)/./node_modules/symbol-tree/lib/SymbolTree.js":
/*!****************************************************!*\
  !*** ./node_modules/symbol-tree/lib/SymbolTree.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * @module symbol-tree\n * @author Joris van der Wel <joris@jorisvanderwel.com>\n */ const SymbolTreeNode = __webpack_require__(/*! ./SymbolTreeNode */ \"(ssr)/./node_modules/symbol-tree/lib/SymbolTreeNode.js\");\nconst TreePosition = __webpack_require__(/*! ./TreePosition */ \"(ssr)/./node_modules/symbol-tree/lib/TreePosition.js\");\nconst TreeIterator = __webpack_require__(/*! ./TreeIterator */ \"(ssr)/./node_modules/symbol-tree/lib/TreeIterator.js\");\nfunction returnTrue() {\n    return true;\n}\nfunction reverseArrayIndex(array, reverseIndex) {\n    return array[array.length - 1 - reverseIndex]; // no need to check `index >= 0`\n}\nclass SymbolTree {\n    /**\n         * @constructor\n         * @alias module:symbol-tree\n         * @param {string} [description='SymbolTree data'] Description used for the Symbol\n         */ constructor(description){\n        this.symbol = Symbol(description || \"SymbolTree data\");\n    }\n    /**\n         * You can use this function to (optionally) initialize an object right after its creation,\n         * to take advantage of V8's fast properties. Also useful if you would like to\n         * freeze your object.\n         *\n         * `O(1)`\n         *\n         * @method\n         * @alias module:symbol-tree#initialize\n         * @param {Object} object\n         * @return {Object} object\n         */ initialize(object) {\n        this._node(object);\n        return object;\n    }\n    _node(object) {\n        if (!object) {\n            return null;\n        }\n        const node = object[this.symbol];\n        if (node) {\n            return node;\n        }\n        return object[this.symbol] = new SymbolTreeNode();\n    }\n    /**\n         * Returns `true` if the object has any children. Otherwise it returns `false`.\n         *\n         * * `O(1)`\n         *\n         * @method hasChildren\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Boolean}\n         */ hasChildren(object) {\n        return this._node(object).hasChildren;\n    }\n    /**\n         * Returns the first child of the given object.\n         *\n         * * `O(1)`\n         *\n         * @method firstChild\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object}\n         */ firstChild(object) {\n        return this._node(object).firstChild;\n    }\n    /**\n         * Returns the last child of the given object.\n         *\n         * * `O(1)`\n         *\n         * @method lastChild\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object}\n         */ lastChild(object) {\n        return this._node(object).lastChild;\n    }\n    /**\n         * Returns the previous sibling of the given object.\n         *\n         * * `O(1)`\n         *\n         * @method previousSibling\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object}\n         */ previousSibling(object) {\n        return this._node(object).previousSibling;\n    }\n    /**\n         * Returns the next sibling of the given object.\n         *\n         * * `O(1)`\n         *\n         * @method nextSibling\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object}\n         */ nextSibling(object) {\n        return this._node(object).nextSibling;\n    }\n    /**\n         * Return the parent of the given object.\n         *\n         * * `O(1)`\n         *\n         * @method parent\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object}\n         */ parent(object) {\n        return this._node(object).parent;\n    }\n    /**\n         * Find the inclusive descendant that is last in tree order of the given object.\n         *\n         * * `O(n)` (worst case) where `n` is the depth of the subtree of `object`\n         *\n         * @method lastInclusiveDescendant\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object}\n         */ lastInclusiveDescendant(object) {\n        let lastChild;\n        let current = object;\n        while(lastChild = this._node(current).lastChild){\n            current = lastChild;\n        }\n        return current;\n    }\n    /**\n         * Find the preceding object (A) of the given object (B).\n         * An object A is preceding an object B if A and B are in the same tree\n         * and A comes before B in tree order.\n         *\n         * * `O(n)` (worst case)\n         * * `O(1)` (amortized when walking the entire tree)\n         *\n         * @method preceding\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @param {Object} [options]\n         * @param {Object} [options.root] If set, `root` must be an inclusive ancestor\n         *        of the return value (or else null is returned). This check _assumes_\n         *        that `root` is also an inclusive ancestor of the given `object`\n         * @return {?Object}\n         */ preceding(object, options) {\n        const treeRoot = options && options.root;\n        if (object === treeRoot) {\n            return null;\n        }\n        const previousSibling = this._node(object).previousSibling;\n        if (previousSibling) {\n            return this.lastInclusiveDescendant(previousSibling);\n        }\n        // if there is no previous sibling return the parent (might be null)\n        return this._node(object).parent;\n    }\n    /**\n         * Find the following object (A) of the given object (B).\n         * An object A is following an object B if A and B are in the same tree\n         * and A comes after B in tree order.\n         *\n         * * `O(n)` (worst case) where `n` is the amount of objects in the entire tree\n         * * `O(1)` (amortized when walking the entire tree)\n         *\n         * @method following\n         * @memberOf module:symbol-tree#\n         * @param {!Object} object\n         * @param {Object} [options]\n         * @param {Object} [options.root] If set, `root` must be an inclusive ancestor\n         *        of the return value (or else null is returned). This check _assumes_\n         *        that `root` is also an inclusive ancestor of the given `object`\n         * @param {Boolean} [options.skipChildren=false] If set, ignore the children of `object`\n         * @return {?Object}\n         */ following(object, options) {\n        const treeRoot = options && options.root;\n        const skipChildren = options && options.skipChildren;\n        const firstChild = !skipChildren && this._node(object).firstChild;\n        if (firstChild) {\n            return firstChild;\n        }\n        let current = object;\n        do {\n            if (current === treeRoot) {\n                return null;\n            }\n            const nextSibling = this._node(current).nextSibling;\n            if (nextSibling) {\n                return nextSibling;\n            }\n            current = this._node(current).parent;\n        }while (current);\n        return null;\n    }\n    /**\n         * Append all children of the given object to an array.\n         *\n         * * `O(n)` where `n` is the amount of children of the given `parent`\n         *\n         * @method childrenToArray\n         * @memberOf module:symbol-tree#\n         * @param {Object} parent\n         * @param {Object} [options]\n         * @param {Object[]} [options.array=[]]\n         * @param {Function} [options.filter] Function to test each object before it is added to the array.\n         *                            Invoked with arguments (object). Should return `true` if an object\n         *                            is to be included.\n         * @param {*} [options.thisArg] Value to use as `this` when executing `filter`.\n         * @return {Object[]}\n         */ childrenToArray(parent, options) {\n        const array = options && options.array || [];\n        const filter = options && options.filter || returnTrue;\n        const thisArg = options && options.thisArg || undefined;\n        const parentNode = this._node(parent);\n        let object = parentNode.firstChild;\n        let index = 0;\n        while(object){\n            const node = this._node(object);\n            node.setCachedIndex(parentNode, index);\n            if (filter.call(thisArg, object)) {\n                array.push(object);\n            }\n            object = node.nextSibling;\n            ++index;\n        }\n        return array;\n    }\n    /**\n         * Append all inclusive ancestors of the given object to an array.\n         *\n         * * `O(n)` where `n` is the amount of ancestors of the given `object`\n         *\n         * @method ancestorsToArray\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @param {Object} [options]\n         * @param {Object[]} [options.array=[]]\n         * @param {Function} [options.filter] Function to test each object before it is added to the array.\n         *                            Invoked with arguments (object). Should return `true` if an object\n         *                            is to be included.\n         * @param {*} [options.thisArg] Value to use as `this` when executing `filter`.\n         * @return {Object[]}\n         */ ancestorsToArray(object, options) {\n        const array = options && options.array || [];\n        const filter = options && options.filter || returnTrue;\n        const thisArg = options && options.thisArg || undefined;\n        let ancestor = object;\n        while(ancestor){\n            if (filter.call(thisArg, ancestor)) {\n                array.push(ancestor);\n            }\n            ancestor = this._node(ancestor).parent;\n        }\n        return array;\n    }\n    /**\n         * Append all descendants of the given object to an array (in tree order).\n         *\n         * * `O(n)` where `n` is the amount of objects in the sub-tree of the given `object`\n         *\n         * @method treeToArray\n         * @memberOf module:symbol-tree#\n         * @param {Object} root\n         * @param {Object} [options]\n         * @param {Object[]} [options.array=[]]\n         * @param {Function} [options.filter] Function to test each object before it is added to the array.\n         *                            Invoked with arguments (object). Should return `true` if an object\n         *                            is to be included.\n         * @param {*} [options.thisArg] Value to use as `this` when executing `filter`.\n         * @return {Object[]}\n         */ treeToArray(root, options) {\n        const array = options && options.array || [];\n        const filter = options && options.filter || returnTrue;\n        const thisArg = options && options.thisArg || undefined;\n        let object = root;\n        while(object){\n            if (filter.call(thisArg, object)) {\n                array.push(object);\n            }\n            object = this.following(object, {\n                root: root\n            });\n        }\n        return array;\n    }\n    /**\n         * Iterate over all children of the given object\n         *\n         * * `O(1)` for a single iteration\n         *\n         * @method childrenIterator\n         * @memberOf module:symbol-tree#\n         * @param {Object} parent\n         * @param {Object} [options]\n         * @param {Boolean} [options.reverse=false]\n         * @return {Object} An iterable iterator (ES6)\n         */ childrenIterator(parent, options) {\n        const reverse = options && options.reverse;\n        const parentNode = this._node(parent);\n        return new TreeIterator(this, parent, reverse ? parentNode.lastChild : parentNode.firstChild, reverse ? TreeIterator.PREV : TreeIterator.NEXT);\n    }\n    /**\n         * Iterate over all the previous siblings of the given object. (in reverse tree order)\n         *\n         * * `O(1)` for a single iteration\n         *\n         * @method previousSiblingsIterator\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object} An iterable iterator (ES6)\n         */ previousSiblingsIterator(object) {\n        return new TreeIterator(this, object, this._node(object).previousSibling, TreeIterator.PREV);\n    }\n    /**\n         * Iterate over all the next siblings of the given object. (in tree order)\n         *\n         * * `O(1)` for a single iteration\n         *\n         * @method nextSiblingsIterator\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object} An iterable iterator (ES6)\n         */ nextSiblingsIterator(object) {\n        return new TreeIterator(this, object, this._node(object).nextSibling, TreeIterator.NEXT);\n    }\n    /**\n         * Iterate over all inclusive ancestors of the given object\n         *\n         * * `O(1)` for a single iteration\n         *\n         * @method ancestorsIterator\n         * @memberOf module:symbol-tree#\n         * @param {Object} object\n         * @return {Object} An iterable iterator (ES6)\n         */ ancestorsIterator(object) {\n        return new TreeIterator(this, object, object, TreeIterator.PARENT);\n    }\n    /**\n         * Iterate over all descendants of the given object (in tree order).\n         *\n         * Where `n` is the amount of objects in the sub-tree of the given `root`:\n         *\n         * * `O(n)` (worst case for a single iteration)\n         * * `O(n)` (amortized, when completing the iterator)\n         *\n         * @method treeIterator\n         * @memberOf module:symbol-tree#\n         * @param {Object} root\n         * @param {Object} options\n         * @param {Boolean} [options.reverse=false]\n         * @return {Object} An iterable iterator (ES6)\n         */ treeIterator(root, options) {\n        const reverse = options && options.reverse;\n        return new TreeIterator(this, root, reverse ? this.lastInclusiveDescendant(root) : root, reverse ? TreeIterator.PRECEDING : TreeIterator.FOLLOWING);\n    }\n    /**\n         * Find the index of the given object (the number of preceding siblings).\n         *\n         * * `O(n)` where `n` is the amount of preceding siblings\n         * * `O(1)` (amortized, if the tree is not modified)\n         *\n         * @method index\n         * @memberOf module:symbol-tree#\n         * @param {Object} child\n         * @return {Number} The number of preceding siblings, or -1 if the object has no parent\n         */ index(child) {\n        const childNode = this._node(child);\n        const parentNode = this._node(childNode.parent);\n        if (!parentNode) {\n            // In principal, you could also find out the number of preceding siblings\n            // for objects that do not have a parent. This method limits itself only to\n            // objects that have a parent because that lets us optimize more.\n            return -1;\n        }\n        let currentIndex = childNode.getCachedIndex(parentNode);\n        if (currentIndex >= 0) {\n            return currentIndex;\n        }\n        currentIndex = 0;\n        let object = parentNode.firstChild;\n        if (parentNode.childIndexCachedUpTo) {\n            const cachedUpToNode = this._node(parentNode.childIndexCachedUpTo);\n            object = cachedUpToNode.nextSibling;\n            currentIndex = cachedUpToNode.getCachedIndex(parentNode) + 1;\n        }\n        while(object){\n            const node = this._node(object);\n            node.setCachedIndex(parentNode, currentIndex);\n            if (object === child) {\n                break;\n            }\n            ++currentIndex;\n            object = node.nextSibling;\n        }\n        parentNode.childIndexCachedUpTo = child;\n        return currentIndex;\n    }\n    /**\n         * Calculate the number of children.\n         *\n         * * `O(n)` where `n` is the amount of children\n         * * `O(1)` (amortized, if the tree is not modified)\n         *\n         * @method childrenCount\n         * @memberOf module:symbol-tree#\n         * @param {Object} parent\n         * @return {Number}\n         */ childrenCount(parent) {\n        const parentNode = this._node(parent);\n        if (!parentNode.lastChild) {\n            return 0;\n        }\n        return this.index(parentNode.lastChild) + 1;\n    }\n    /**\n         * Compare the position of an object relative to another object. A bit set is returned:\n         *\n         * <ul>\n         *     <li>DISCONNECTED : 1</li>\n         *     <li>PRECEDING : 2</li>\n         *     <li>FOLLOWING : 4</li>\n         *     <li>CONTAINS : 8</li>\n         *     <li>CONTAINED_BY : 16</li>\n         * </ul>\n         *\n         * The semantics are the same as compareDocumentPosition in DOM, with the exception that\n         * DISCONNECTED never occurs with any other bit.\n         *\n         * where `n` and `m` are the amount of ancestors of `left` and `right`;\n         * where `o` is the amount of children of the lowest common ancestor of `left` and `right`:\n         *\n         * * `O(n + m + o)` (worst case)\n         * * `O(n + m)` (amortized, if the tree is not modified)\n         *\n         * @method compareTreePosition\n         * @memberOf module:symbol-tree#\n         * @param {Object} left\n         * @param {Object} right\n         * @return {Number}\n         */ compareTreePosition(left, right) {\n        // In DOM terms:\n        // left = reference / context object\n        // right = other\n        if (left === right) {\n            return 0;\n        }\n        /* jshint -W016 */ const leftAncestors = [];\n        {\n            let leftAncestor = left;\n            while(leftAncestor){\n                if (leftAncestor === right) {\n                    return TreePosition.CONTAINS | TreePosition.PRECEDING;\n                // other is ancestor of reference\n                }\n                leftAncestors.push(leftAncestor);\n                leftAncestor = this.parent(leftAncestor);\n            }\n        }\n        const rightAncestors = [];\n        {\n            let rightAncestor = right;\n            while(rightAncestor){\n                if (rightAncestor === left) {\n                    return TreePosition.CONTAINED_BY | TreePosition.FOLLOWING;\n                }\n                rightAncestors.push(rightAncestor);\n                rightAncestor = this.parent(rightAncestor);\n            }\n        }\n        const root = reverseArrayIndex(leftAncestors, 0);\n        if (!root || root !== reverseArrayIndex(rightAncestors, 0)) {\n            // note: unlike DOM, preceding / following is not set here\n            return TreePosition.DISCONNECTED;\n        }\n        // find the lowest common ancestor\n        let commonAncestorIndex = 0;\n        const ancestorsMinLength = Math.min(leftAncestors.length, rightAncestors.length);\n        for(let i = 0; i < ancestorsMinLength; ++i){\n            const leftAncestor = reverseArrayIndex(leftAncestors, i);\n            const rightAncestor = reverseArrayIndex(rightAncestors, i);\n            if (leftAncestor !== rightAncestor) {\n                break;\n            }\n            commonAncestorIndex = i;\n        }\n        // indexes within the common ancestor\n        const leftIndex = this.index(reverseArrayIndex(leftAncestors, commonAncestorIndex + 1));\n        const rightIndex = this.index(reverseArrayIndex(rightAncestors, commonAncestorIndex + 1));\n        return rightIndex < leftIndex ? TreePosition.PRECEDING : TreePosition.FOLLOWING;\n    }\n    /**\n         * Remove the object from this tree.\n         * Has no effect if already removed.\n         *\n         * * `O(1)`\n         *\n         * @method remove\n         * @memberOf module:symbol-tree#\n         * @param {Object} removeObject\n         * @return {Object} removeObject\n         */ remove(removeObject) {\n        const removeNode = this._node(removeObject);\n        const parentNode = this._node(removeNode.parent);\n        const prevNode = this._node(removeNode.previousSibling);\n        const nextNode = this._node(removeNode.nextSibling);\n        if (parentNode) {\n            if (parentNode.firstChild === removeObject) {\n                parentNode.firstChild = removeNode.nextSibling;\n            }\n            if (parentNode.lastChild === removeObject) {\n                parentNode.lastChild = removeNode.previousSibling;\n            }\n        }\n        if (prevNode) {\n            prevNode.nextSibling = removeNode.nextSibling;\n        }\n        if (nextNode) {\n            nextNode.previousSibling = removeNode.previousSibling;\n        }\n        removeNode.parent = null;\n        removeNode.previousSibling = null;\n        removeNode.nextSibling = null;\n        removeNode.cachedIndex = -1;\n        removeNode.cachedIndexVersion = NaN;\n        if (parentNode) {\n            parentNode.childrenChanged();\n        }\n        return removeObject;\n    }\n    /**\n         * Insert the given object before the reference object.\n         * `newObject` is now the previous sibling of `referenceObject`.\n         *\n         * * `O(1)`\n         *\n         * @method insertBefore\n         * @memberOf module:symbol-tree#\n         * @param {Object} referenceObject\n         * @param {Object} newObject\n         * @throws {Error} If the newObject is already present in this SymbolTree\n         * @return {Object} newObject\n         */ insertBefore(referenceObject, newObject) {\n        const referenceNode = this._node(referenceObject);\n        const prevNode = this._node(referenceNode.previousSibling);\n        const newNode = this._node(newObject);\n        const parentNode = this._node(referenceNode.parent);\n        if (newNode.isAttached) {\n            throw Error(\"Given object is already present in this SymbolTree, remove it first\");\n        }\n        newNode.parent = referenceNode.parent;\n        newNode.previousSibling = referenceNode.previousSibling;\n        newNode.nextSibling = referenceObject;\n        referenceNode.previousSibling = newObject;\n        if (prevNode) {\n            prevNode.nextSibling = newObject;\n        }\n        if (parentNode && parentNode.firstChild === referenceObject) {\n            parentNode.firstChild = newObject;\n        }\n        if (parentNode) {\n            parentNode.childrenChanged();\n        }\n        return newObject;\n    }\n    /**\n         * Insert the given object after the reference object.\n         * `newObject` is now the next sibling of `referenceObject`.\n         *\n         * * `O(1)`\n         *\n         * @method insertAfter\n         * @memberOf module:symbol-tree#\n         * @param {Object} referenceObject\n         * @param {Object} newObject\n         * @throws {Error} If the newObject is already present in this SymbolTree\n         * @return {Object} newObject\n         */ insertAfter(referenceObject, newObject) {\n        const referenceNode = this._node(referenceObject);\n        const nextNode = this._node(referenceNode.nextSibling);\n        const newNode = this._node(newObject);\n        const parentNode = this._node(referenceNode.parent);\n        if (newNode.isAttached) {\n            throw Error(\"Given object is already present in this SymbolTree, remove it first\");\n        }\n        newNode.parent = referenceNode.parent;\n        newNode.previousSibling = referenceObject;\n        newNode.nextSibling = referenceNode.nextSibling;\n        referenceNode.nextSibling = newObject;\n        if (nextNode) {\n            nextNode.previousSibling = newObject;\n        }\n        if (parentNode && parentNode.lastChild === referenceObject) {\n            parentNode.lastChild = newObject;\n        }\n        if (parentNode) {\n            parentNode.childrenChanged();\n        }\n        return newObject;\n    }\n    /**\n         * Insert the given object as the first child of the given reference object.\n         * `newObject` is now the first child of `referenceObject`.\n         *\n         * * `O(1)`\n         *\n         * @method prependChild\n         * @memberOf module:symbol-tree#\n         * @param {Object} referenceObject\n         * @param {Object} newObject\n         * @throws {Error} If the newObject is already present in this SymbolTree\n         * @return {Object} newObject\n         */ prependChild(referenceObject, newObject) {\n        const referenceNode = this._node(referenceObject);\n        const newNode = this._node(newObject);\n        if (newNode.isAttached) {\n            throw Error(\"Given object is already present in this SymbolTree, remove it first\");\n        }\n        if (referenceNode.hasChildren) {\n            this.insertBefore(referenceNode.firstChild, newObject);\n        } else {\n            newNode.parent = referenceObject;\n            referenceNode.firstChild = newObject;\n            referenceNode.lastChild = newObject;\n            referenceNode.childrenChanged();\n        }\n        return newObject;\n    }\n    /**\n         * Insert the given object as the last child of the given reference object.\n         * `newObject` is now the last child of `referenceObject`.\n         *\n         * * `O(1)`\n         *\n         * @method appendChild\n         * @memberOf module:symbol-tree#\n         * @param {Object} referenceObject\n         * @param {Object} newObject\n         * @throws {Error} If the newObject is already present in this SymbolTree\n         * @return {Object} newObject\n         */ appendChild(referenceObject, newObject) {\n        const referenceNode = this._node(referenceObject);\n        const newNode = this._node(newObject);\n        if (newNode.isAttached) {\n            throw Error(\"Given object is already present in this SymbolTree, remove it first\");\n        }\n        if (referenceNode.hasChildren) {\n            this.insertAfter(referenceNode.lastChild, newObject);\n        } else {\n            newNode.parent = referenceObject;\n            referenceNode.firstChild = newObject;\n            referenceNode.lastChild = newObject;\n            referenceNode.childrenChanged();\n        }\n        return newObject;\n    }\n}\nmodule.exports = SymbolTree;\nSymbolTree.TreePosition = TreePosition;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/symbol-tree/lib/SymbolTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/symbol-tree/lib/SymbolTreeNode.js":
/*!********************************************************!*\
  !*** ./node_modules/symbol-tree/lib/SymbolTreeNode.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = class SymbolTreeNode {\n    constructor(){\n        this.parent = null;\n        this.previousSibling = null;\n        this.nextSibling = null;\n        this.firstChild = null;\n        this.lastChild = null;\n        /** This value is incremented anytime a children is added or removed */ this.childrenVersion = 0;\n        /** The last child object which has a cached index */ this.childIndexCachedUpTo = null;\n        /** This value represents the cached node index, as long as\n                 * cachedIndexVersion matches with the childrenVersion of the parent */ this.cachedIndex = -1;\n        this.cachedIndexVersion = NaN; // NaN is never equal to anything\n    }\n    get isAttached() {\n        return Boolean(this.parent || this.previousSibling || this.nextSibling);\n    }\n    get hasChildren() {\n        return Boolean(this.firstChild);\n    }\n    childrenChanged() {\n        /* jshint -W016 */ // integer wrap around\n        this.childrenVersion = this.childrenVersion + 1 & 0xFFFFFFFF;\n        this.childIndexCachedUpTo = null;\n    }\n    getCachedIndex(parentNode) {\n        // (assumes parentNode is actually the parent)\n        if (this.cachedIndexVersion !== parentNode.childrenVersion) {\n            this.cachedIndexVersion = NaN;\n            // cachedIndex is no longer valid\n            return -1;\n        }\n        return this.cachedIndex; // -1 if not cached\n    }\n    setCachedIndex(parentNode, index) {\n        // (assumes parentNode is actually the parent)\n        this.cachedIndexVersion = parentNode.childrenVersion;\n        this.cachedIndex = index;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3ltYm9sLXRyZWUvbGliL1N5bWJvbFRyZWVOb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxNQUFNQztJQUNmQyxhQUFjO1FBQ04sSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNDLGVBQWUsR0FBRztRQUN2QixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUVuQixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLFNBQVMsR0FBRztRQUVqQixxRUFBcUUsR0FDckUsSUFBSSxDQUFDQyxlQUFlLEdBQUc7UUFDdkIsbURBQW1ELEdBQ25ELElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7UUFFNUI7cUZBQ3FFLEdBQ3JFLElBQUksQ0FBQ0MsV0FBVyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0MsS0FBSyxpQ0FBaUM7SUFDeEU7SUFFQSxJQUFJQyxhQUFhO1FBQ1QsT0FBT0MsUUFBUSxJQUFJLENBQUNYLE1BQU0sSUFBSSxJQUFJLENBQUNDLGVBQWUsSUFBSSxJQUFJLENBQUNDLFdBQVc7SUFDOUU7SUFFQSxJQUFJVSxjQUFjO1FBQ1YsT0FBT0QsUUFBUSxJQUFJLENBQUNSLFVBQVU7SUFDdEM7SUFFQVUsa0JBQWtCO1FBQ1YsZ0JBQWdCLEdBQ2hCLHNCQUFzQjtRQUN0QixJQUFJLENBQUNSLGVBQWUsR0FBRyxJQUFLLENBQUNBLGVBQWUsR0FBRyxJQUFLO1FBQ3BELElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7SUFDcEM7SUFFQVEsZUFBZUMsVUFBVSxFQUFFO1FBQ25CLDhDQUE4QztRQUM5QyxJQUFJLElBQUksQ0FBQ1Asa0JBQWtCLEtBQUtPLFdBQVdWLGVBQWUsRUFBRTtZQUNwRCxJQUFJLENBQUNHLGtCQUFrQixHQUFHQztZQUMxQixpQ0FBaUM7WUFDakMsT0FBTyxDQUFDO1FBQ2hCO1FBRUEsT0FBTyxJQUFJLENBQUNGLFdBQVcsRUFBRSxtQkFBbUI7SUFDcEQ7SUFFQVMsZUFBZUQsVUFBVSxFQUFFRSxLQUFLLEVBQUU7UUFDMUIsOENBQThDO1FBQzlDLElBQUksQ0FBQ1Qsa0JBQWtCLEdBQUdPLFdBQVdWLGVBQWU7UUFDcEQsSUFBSSxDQUFDRSxXQUFXLEdBQUdVO0lBQzNCO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9zeW1ib2wtdHJlZS9saWIvU3ltYm9sVHJlZU5vZGUuanM/ZGNkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU3ltYm9sVHJlZU5vZGUge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c1NpYmxpbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFNpYmxpbmcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdENoaWxkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RDaGlsZCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvKiogVGhpcyB2YWx1ZSBpcyBpbmNyZW1lbnRlZCBhbnl0aW1lIGEgY2hpbGRyZW4gaXMgYWRkZWQgb3IgcmVtb3ZlZCAqL1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5WZXJzaW9uID0gMDtcbiAgICAgICAgICAgICAgICAvKiogVGhlIGxhc3QgY2hpbGQgb2JqZWN0IHdoaWNoIGhhcyBhIGNhY2hlZCBpbmRleCAqL1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRJbmRleENhY2hlZFVwVG8gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLyoqIFRoaXMgdmFsdWUgcmVwcmVzZW50cyB0aGUgY2FjaGVkIG5vZGUgaW5kZXgsIGFzIGxvbmcgYXNcbiAgICAgICAgICAgICAgICAgKiBjYWNoZWRJbmRleFZlcnNpb24gbWF0Y2hlcyB3aXRoIHRoZSBjaGlsZHJlblZlcnNpb24gb2YgdGhlIHBhcmVudCAqL1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZEluZGV4VmVyc2lvbiA9IE5hTjsgLy8gTmFOIGlzIG5ldmVyIGVxdWFsIHRvIGFueXRoaW5nXG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNBdHRhY2hlZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnBhcmVudCB8fCB0aGlzLnByZXZpb3VzU2libGluZyB8fCB0aGlzLm5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBoYXNDaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRyZW5DaGFuZ2VkKCkge1xuICAgICAgICAgICAgICAgIC8qIGpzaGludCAtVzAxNiAqL1xuICAgICAgICAgICAgICAgIC8vIGludGVnZXIgd3JhcCBhcm91bmRcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuVmVyc2lvbiA9ICh0aGlzLmNoaWxkcmVuVmVyc2lvbiArIDEpICYgMHhGRkZGRkZGRjtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkSW5kZXhDYWNoZWRVcFRvID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldENhY2hlZEluZGV4KHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyAoYXNzdW1lcyBwYXJlbnROb2RlIGlzIGFjdHVhbGx5IHRoZSBwYXJlbnQpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVkSW5kZXhWZXJzaW9uICE9PSBwYXJlbnROb2RlLmNoaWxkcmVuVmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRJbmRleFZlcnNpb24gPSBOYU47XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWNoZWRJbmRleCBpcyBubyBsb25nZXIgdmFsaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRJbmRleDsgLy8gLTEgaWYgbm90IGNhY2hlZFxuICAgICAgICB9XG5cbiAgICAgICAgc2V0Q2FjaGVkSW5kZXgocGFyZW50Tm9kZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyAoYXNzdW1lcyBwYXJlbnROb2RlIGlzIGFjdHVhbGx5IHRoZSBwYXJlbnQpXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRJbmRleFZlcnNpb24gPSBwYXJlbnROb2RlLmNoaWxkcmVuVmVyc2lvbjtcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZEluZGV4ID0gaW5kZXg7XG4gICAgICAgIH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlN5bWJvbFRyZWVOb2RlIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0U2libGluZyIsImZpcnN0Q2hpbGQiLCJsYXN0Q2hpbGQiLCJjaGlsZHJlblZlcnNpb24iLCJjaGlsZEluZGV4Q2FjaGVkVXBUbyIsImNhY2hlZEluZGV4IiwiY2FjaGVkSW5kZXhWZXJzaW9uIiwiTmFOIiwiaXNBdHRhY2hlZCIsIkJvb2xlYW4iLCJoYXNDaGlsZHJlbiIsImNoaWxkcmVuQ2hhbmdlZCIsImdldENhY2hlZEluZGV4IiwicGFyZW50Tm9kZSIsInNldENhY2hlZEluZGV4IiwiaW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/symbol-tree/lib/SymbolTreeNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/symbol-tree/lib/TreeIterator.js":
/*!******************************************************!*\
  !*** ./node_modules/symbol-tree/lib/TreeIterator.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nconst TREE = Symbol();\nconst ROOT = Symbol();\nconst NEXT = Symbol();\nconst ITERATE_FUNC = Symbol();\nclass TreeIterator {\n    constructor(tree, root, firstResult, iterateFunction){\n        this[TREE] = tree;\n        this[ROOT] = root;\n        this[NEXT] = firstResult;\n        this[ITERATE_FUNC] = iterateFunction;\n    }\n    next() {\n        const tree = this[TREE];\n        const iterateFunc = this[ITERATE_FUNC];\n        const root = this[ROOT];\n        if (!this[NEXT]) {\n            return {\n                done: true,\n                value: root\n            };\n        }\n        const value = this[NEXT];\n        if (iterateFunc === 1) {\n            this[NEXT] = tree._node(value).previousSibling;\n        } else if (iterateFunc === 2) {\n            this[NEXT] = tree._node(value).nextSibling;\n        } else if (iterateFunc === 3) {\n            this[NEXT] = tree._node(value).parent;\n        } else if (iterateFunc === 4) {\n            this[NEXT] = tree.preceding(value, {\n                root: root\n            });\n        } else /* if (iterateFunc === 5)*/ {\n            this[NEXT] = tree.following(value, {\n                root: root\n            });\n        }\n        return {\n            done: false,\n            value: value\n        };\n    }\n}\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\n    value: function() {\n        return this;\n    },\n    writable: false\n});\nTreeIterator.PREV = 1;\nTreeIterator.NEXT = 2;\nTreeIterator.PARENT = 3;\nTreeIterator.PRECEDING = 4;\nTreeIterator.FOLLOWING = 5;\nObject.freeze(TreeIterator);\nObject.freeze(TreeIterator.prototype);\nmodule.exports = TreeIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3ltYm9sLXRyZWUvbGliL1RyZWVJdGVyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLE9BQU9DO0FBQ2IsTUFBTUMsT0FBT0Q7QUFDYixNQUFNRSxPQUFPRjtBQUNiLE1BQU1HLGVBQWVIO0FBRXJCLE1BQU1JO0lBQ0VDLFlBQVlDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxXQUFXLEVBQUVDLGVBQWUsQ0FBRTtRQUM5QyxJQUFJLENBQUNWLEtBQUssR0FBR087UUFDYixJQUFJLENBQUNMLEtBQUssR0FBR007UUFDYixJQUFJLENBQUNMLEtBQUssR0FBR007UUFDYixJQUFJLENBQUNMLGFBQWEsR0FBR007SUFDN0I7SUFFQUMsT0FBTztRQUNDLE1BQU1KLE9BQU8sSUFBSSxDQUFDUCxLQUFLO1FBQ3ZCLE1BQU1ZLGNBQWMsSUFBSSxDQUFDUixhQUFhO1FBQ3RDLE1BQU1JLE9BQU8sSUFBSSxDQUFDTixLQUFLO1FBRXZCLElBQUksQ0FBQyxJQUFJLENBQUNDLEtBQUssRUFBRTtZQUNULE9BQU87Z0JBQ0NVLE1BQU07Z0JBQ05DLE9BQU9OO1lBQ2Y7UUFDUjtRQUVBLE1BQU1NLFFBQVEsSUFBSSxDQUFDWCxLQUFLO1FBRXhCLElBQUlTLGdCQUFnQixHQUFHO1lBQ2YsSUFBSSxDQUFDVCxLQUFLLEdBQUdJLEtBQUtRLEtBQUssQ0FBQ0QsT0FBT0UsZUFBZTtRQUN0RCxPQUNLLElBQUlKLGdCQUFnQixHQUFHO1lBQ3BCLElBQUksQ0FBQ1QsS0FBSyxHQUFHSSxLQUFLUSxLQUFLLENBQUNELE9BQU9HLFdBQVc7UUFDbEQsT0FDSyxJQUFJTCxnQkFBZ0IsR0FBRztZQUNwQixJQUFJLENBQUNULEtBQUssR0FBR0ksS0FBS1EsS0FBSyxDQUFDRCxPQUFPSSxNQUFNO1FBQzdDLE9BQ0ssSUFBSU4sZ0JBQWdCLEdBQUc7WUFDcEIsSUFBSSxDQUFDVCxLQUFLLEdBQUdJLEtBQUtZLFNBQVMsQ0FBQ0wsT0FBTztnQkFBQ04sTUFBTUE7WUFBSTtRQUN0RCxPQUNLLHlCQUF5QixHQUFHO1lBQ3pCLElBQUksQ0FBQ0wsS0FBSyxHQUFHSSxLQUFLYSxTQUFTLENBQUNOLE9BQU87Z0JBQUNOLE1BQU1BO1lBQUk7UUFDdEQ7UUFFQSxPQUFPO1lBQ0NLLE1BQU07WUFDTkMsT0FBT0E7UUFDZjtJQUNSO0FBQ1I7QUFFQU8sT0FBT0MsY0FBYyxDQUFDakIsYUFBYWtCLFNBQVMsRUFBRXRCLE9BQU91QixRQUFRLEVBQUU7SUFDdkRWLE9BQU87UUFDQyxPQUFPLElBQUk7SUFDbkI7SUFDQVcsVUFBVTtBQUNsQjtBQUVBcEIsYUFBYXFCLElBQUksR0FBRztBQUNwQnJCLGFBQWFGLElBQUksR0FBRztBQUNwQkUsYUFBYXNCLE1BQU0sR0FBRztBQUN0QnRCLGFBQWF1QixTQUFTLEdBQUc7QUFDekJ2QixhQUFhd0IsU0FBUyxHQUFHO0FBRXpCUixPQUFPUyxNQUFNLENBQUN6QjtBQUNkZ0IsT0FBT1MsTUFBTSxDQUFDekIsYUFBYWtCLFNBQVM7QUFFcENRLE9BQU9DLE9BQU8sR0FBRzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlnbWEvLi9ub2RlX21vZHVsZXMvc3ltYm9sLXRyZWUvbGliL1RyZWVJdGVyYXRvci5qcz84ZmRlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgVFJFRSA9IFN5bWJvbCgpO1xuY29uc3QgUk9PVCA9IFN5bWJvbCgpO1xuY29uc3QgTkVYVCA9IFN5bWJvbCgpO1xuY29uc3QgSVRFUkFURV9GVU5DID0gU3ltYm9sKCk7XG5cbmNsYXNzIFRyZWVJdGVyYXRvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHRyZWUsIHJvb3QsIGZpcnN0UmVzdWx0LCBpdGVyYXRlRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzW1RSRUVdID0gdHJlZTtcbiAgICAgICAgICAgICAgICB0aGlzW1JPT1RdID0gcm9vdDtcbiAgICAgICAgICAgICAgICB0aGlzW05FWFRdID0gZmlyc3RSZXN1bHQ7XG4gICAgICAgICAgICAgICAgdGhpc1tJVEVSQVRFX0ZVTkNdID0gaXRlcmF0ZUZ1bmN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmVlID0gdGhpc1tUUkVFXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVyYXRlRnVuYyA9IHRoaXNbSVRFUkFURV9GVU5DXTtcbiAgICAgICAgICAgICAgICBjb25zdCByb290ID0gdGhpc1tST09UXTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpc1tORVhUXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJvb3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1tORVhUXTtcblxuICAgICAgICAgICAgICAgIGlmIChpdGVyYXRlRnVuYyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tORVhUXSA9IHRyZWUuX25vZGUodmFsdWUpLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlcmF0ZUZ1bmMgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbTkVYVF0gPSB0cmVlLl9ub2RlKHZhbHVlKS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlcmF0ZUZ1bmMgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbTkVYVF0gPSB0cmVlLl9ub2RlKHZhbHVlKS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZXJhdGVGdW5jID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW05FWFRdID0gdHJlZS5wcmVjZWRpbmcodmFsdWUsIHtyb290OiByb290fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgLyogaWYgKGl0ZXJhdGVGdW5jID09PSA1KSovIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbTkVYVF0gPSB0cmVlLmZvbGxvd2luZyh2YWx1ZSwge3Jvb3Q6IHJvb3R9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVHJlZUl0ZXJhdG9yLnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCB7XG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxufSk7XG5cblRyZWVJdGVyYXRvci5QUkVWID0gMTtcblRyZWVJdGVyYXRvci5ORVhUID0gMjtcblRyZWVJdGVyYXRvci5QQVJFTlQgPSAzO1xuVHJlZUl0ZXJhdG9yLlBSRUNFRElORyA9IDQ7XG5UcmVlSXRlcmF0b3IuRk9MTE9XSU5HID0gNTtcblxuT2JqZWN0LmZyZWV6ZShUcmVlSXRlcmF0b3IpO1xuT2JqZWN0LmZyZWV6ZShUcmVlSXRlcmF0b3IucHJvdG90eXBlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmVlSXRlcmF0b3I7XG4iXSwibmFtZXMiOlsiVFJFRSIsIlN5bWJvbCIsIlJPT1QiLCJORVhUIiwiSVRFUkFURV9GVU5DIiwiVHJlZUl0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJ0cmVlIiwicm9vdCIsImZpcnN0UmVzdWx0IiwiaXRlcmF0ZUZ1bmN0aW9uIiwibmV4dCIsIml0ZXJhdGVGdW5jIiwiZG9uZSIsInZhbHVlIiwiX25vZGUiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0U2libGluZyIsInBhcmVudCIsInByZWNlZGluZyIsImZvbGxvd2luZyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiaXRlcmF0b3IiLCJ3cml0YWJsZSIsIlBSRVYiLCJQQVJFTlQiLCJQUkVDRURJTkciLCJGT0xMT1dJTkciLCJmcmVlemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/symbol-tree/lib/TreeIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/symbol-tree/lib/TreePosition.js":
/*!******************************************************!*\
  !*** ./node_modules/symbol-tree/lib/TreePosition.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n/* eslint-disable sort-keys */ module.exports = Object.freeze({\n    // same as DOM DOCUMENT_POSITION_\n    DISCONNECTED: 1,\n    PRECEDING: 2,\n    FOLLOWING: 4,\n    CONTAINS: 8,\n    CONTAINED_BY: 16\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3ltYm9sLXRyZWUvbGliL1RyZWVQb3NpdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLDRCQUE0QixHQUM1QkEsT0FBT0MsT0FBTyxHQUFHQyxPQUFPQyxNQUFNLENBQUM7SUFDdkIsaUNBQWlDO0lBQ2pDQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxVQUFVO0lBQ1ZDLGNBQWM7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWdtYS8uL25vZGVfbW9kdWxlcy9zeW1ib2wtdHJlZS9saWIvVHJlZVBvc2l0aW9uLmpzP2JjOTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBzb3J0LWtleXMgKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIC8vIHNhbWUgYXMgRE9NIERPQ1VNRU5UX1BPU0lUSU9OX1xuICAgICAgICBESVNDT05ORUNURUQ6IDEsXG4gICAgICAgIFBSRUNFRElORzogMixcbiAgICAgICAgRk9MTE9XSU5HOiA0LFxuICAgICAgICBDT05UQUlOUzogOCxcbiAgICAgICAgQ09OVEFJTkVEX0JZOiAxNixcbn0pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJmcmVlemUiLCJESVNDT05ORUNURUQiLCJQUkVDRURJTkciLCJGT0xMT1dJTkciLCJDT05UQUlOUyIsIkNPTlRBSU5FRF9CWSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/symbol-tree/lib/TreePosition.js\n");

/***/ })

};
;